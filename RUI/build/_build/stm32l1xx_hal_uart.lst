ARM GAS  /tmp/cciBiPGK.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32l1xx_hal_uart.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.UART_EndTxTransfer,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	UART_EndTxTransfer:
  23              	.LFB116:
  24              		.file 1 "..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c"
   1:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
   2:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   ******************************************************************************
   3:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @file    stm32l1xx_hal_uart.c
   4:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @author  MCD Application Team
   5:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief   UART HAL module driver.
   6:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *          This file provides firmware functions to manage the following
   7:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *          functionalities of the Universal Asynchronous Receiver Transmitter Peripheral (UART).
   8:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *           + Initialization and de-initialization functions
   9:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *           + IO operation functions
  10:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *           + Peripheral Control functions
  11:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *           + Peripheral State and Errors functions
  12:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   @verbatim
  13:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   ==============================================================================
  14:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****                         ##### How to use this driver #####
  15:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   ==============================================================================
  16:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   [..]
  17:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     The UART HAL driver can be used as follows:
  18:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
  19:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     (#) Declare a UART_HandleTypeDef handle structure (eg. UART_HandleTypeDef huart).
  20:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     (#) Initialize the UART low level resources by implementing the HAL_UART_MspInit() API:
  21:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         (##) Enable the USARTx interface clock.
  22:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         (##) UART pins configuration:
  23:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****             (+++) Enable the clock for the UART GPIOs.
  24:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****             (+++) Configure these UART pins (TX as alternate function pull-up, RX as alternate func
  25:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         (##) NVIC configuration if you need to use interrupt process (HAL_UART_Transmit_IT()
  26:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****              and HAL_UART_Receive_IT() APIs):
  27:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****             (+++) Configure the USARTx interrupt priority.
  28:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****             (+++) Enable the NVIC USART IRQ handle.
  29:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         (##) DMA Configuration if you need to use DMA process (HAL_UART_Transmit_DMA()
  30:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****              and HAL_UART_Receive_DMA() APIs):
  31:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****             (+++) Declare a DMA handle structure for the Tx/Rx channel.
  32:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****             (+++) Enable the DMAx interface clock.
  33:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****             (+++) Configure the declared DMA handle structure with the required
  34:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****                   Tx/Rx parameters.
ARM GAS  /tmp/cciBiPGK.s 			page 2


  35:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****             (+++) Configure the DMA Tx/Rx channel.
  36:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****             (+++) Associate the initialized DMA handle to the UART DMA Tx/Rx handle.
  37:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****             (+++) Configure the priority and enable the NVIC for the transfer complete
  38:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****                   interrupt on the DMA Tx/Rx channel.
  39:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****             (+++) Configure the USARTx interrupt priority and enable the NVIC USART IRQ handle
  40:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****                   (used for last byte sending completion detection in DMA non circular mode)
  41:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
  42:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     (#) Program the Baud Rate, Word Length, Stop Bit, Parity, Hardware
  43:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         flow control and Mode(Receiver/Transmitter) in the huart Init structure.
  44:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
  45:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     (#) For the UART asynchronous mode, initialize the UART registers by calling
  46:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         the HAL_UART_Init() API.
  47:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
  48:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     (#) For the UART Half duplex mode, initialize the UART registers by calling
  49:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         the HAL_HalfDuplex_Init() API.
  50:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
  51:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     (#) For the LIN mode, initialize the UART registers by calling the HAL_LIN_Init() API.
  52:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
  53:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     (#) For the Multi-Processor mode, initialize the UART registers by calling
  54:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         the HAL_MultiProcessor_Init() API.
  55:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
  56:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****      [..]
  57:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****        (@) The specific UART interrupts (Transmission complete interrupt,
  58:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****             RXNE interrupt and Error Interrupts) will be managed using the macros
  59:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****             __HAL_UART_ENABLE_IT() and __HAL_UART_DISABLE_IT() inside the transmit
  60:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****             and receive process.
  61:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
  62:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****      [..]
  63:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****        (@) These APIs (HAL_UART_Init() and HAL_HalfDuplex_Init()) configure also the
  64:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****             low level Hardware GPIO, CLOCK, CORTEX...etc) by calling the customized
  65:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****             HAL_UART_MspInit() API.
  66:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
  67:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     ##### Callback registration #####
  68:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     ==================================
  69:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
  70:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     [..]
  71:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     The compilation define USE_HAL_UART_REGISTER_CALLBACKS when set to 1
  72:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     allows the user to configure dynamically the driver callbacks.
  73:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
  74:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     [..]
  75:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     Use Function @ref HAL_UART_RegisterCallback() to register a user callback.
  76:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     Function @ref HAL_UART_RegisterCallback() allows to register following callbacks:
  77:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     (+) TxHalfCpltCallback        : Tx Half Complete Callback.
  78:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     (+) TxCpltCallback            : Tx Complete Callback.
  79:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     (+) RxHalfCpltCallback        : Rx Half Complete Callback.
  80:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     (+) RxCpltCallback            : Rx Complete Callback.
  81:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     (+) ErrorCallback             : Error Callback.
  82:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     (+) AbortCpltCallback         : Abort Complete Callback.
  83:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     (+) AbortTransmitCpltCallback : Abort Transmit Complete Callback.
  84:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     (+) AbortReceiveCpltCallback  : Abort Receive Complete Callback.
  85:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     (+) MspInitCallback           : UART MspInit.
  86:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     (+) MspDeInitCallback         : UART MspDeInit.
  87:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     This function takes as parameters the HAL peripheral handle, the Callback ID
  88:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     and a pointer to the user callback function.
  89:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
  90:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     [..]
  91:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     Use function @ref HAL_UART_UnRegisterCallback() to reset a callback to the default
ARM GAS  /tmp/cciBiPGK.s 			page 3


  92:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     weak (surcharged) function.
  93:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     @ref HAL_UART_UnRegisterCallback() takes as parameters the HAL peripheral handle,
  94:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     and the Callback ID.
  95:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     This function allows to reset following callbacks:
  96:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     (+) TxHalfCpltCallback        : Tx Half Complete Callback.
  97:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     (+) TxCpltCallback            : Tx Complete Callback.
  98:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     (+) RxHalfCpltCallback        : Rx Half Complete Callback.
  99:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     (+) RxCpltCallback            : Rx Complete Callback.
 100:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     (+) ErrorCallback             : Error Callback.
 101:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     (+) AbortCpltCallback         : Abort Complete Callback.
 102:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     (+) AbortTransmitCpltCallback : Abort Transmit Complete Callback.
 103:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     (+) AbortReceiveCpltCallback  : Abort Receive Complete Callback.
 104:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     (+) MspInitCallback           : UART MspInit.
 105:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     (+) MspDeInitCallback         : UART MspDeInit.
 106:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 107:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     [..]
 108:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     By default, after the @ref HAL_UART_Init() and when the state is HAL_UART_STATE_RESET
 109:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     all callbacks are set to the corresponding weak (surcharged) functions:
 110:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     examples @ref HAL_UART_TxCpltCallback(), @ref HAL_UART_RxHalfCpltCallback().
 111:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     Exception done for MspInit and MspDeInit functions that are respectively
 112:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     reset to the legacy weak (surcharged) functions in the @ref HAL_UART_Init()
 113:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     and @ref HAL_UART_DeInit() only when these callbacks are null (not registered beforehand).
 114:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     If not, MspInit or MspDeInit are not null, the @ref HAL_UART_Init() and @ref HAL_UART_DeInit()
 115:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     keep and use the user MspInit/MspDeInit callbacks (registered beforehand).
 116:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 117:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     [..]
 118:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     Callbacks can be registered/unregistered in HAL_UART_STATE_READY state only.
 119:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     Exception done MspInit/MspDeInit that can be registered/unregistered
 120:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     in HAL_UART_STATE_READY or HAL_UART_STATE_RESET state, thus registered (user)
 121:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     MspInit/DeInit callbacks can be used during the Init/DeInit.
 122:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     In that case first register the MspInit/MspDeInit user callbacks
 123:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     using @ref HAL_UART_RegisterCallback() before calling @ref HAL_UART_DeInit()
 124:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     or @ref HAL_UART_Init() function.
 125:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 126:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     [..]
 127:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     When The compilation define USE_HAL_UART_REGISTER_CALLBACKS is set to 0 or
 128:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     not defined, the callback registration feature is not available
 129:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     and weak (surcharged) callbacks are used.
 130:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 131:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****      [..]
 132:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         Three operation modes are available within this driver :
 133:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 134:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****      *** Polling mode IO operation ***
 135:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****      =================================
 136:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****      [..]
 137:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****        (+) Send an amount of data in blocking mode using HAL_UART_Transmit()
 138:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****        (+) Receive an amount of data in blocking mode using HAL_UART_Receive()
 139:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 140:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****      *** Interrupt mode IO operation ***
 141:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****      ===================================
 142:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****      [..]
 143:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****        (+) Send an amount of data in non blocking mode using HAL_UART_Transmit_IT()
 144:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****        (+) At transmission end of transfer HAL_UART_TxCpltCallback is executed and user can
 145:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxCpltCallback
 146:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****        (+) Receive an amount of data in non blocking mode using HAL_UART_Receive_IT()
 147:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****        (+) At reception end of transfer HAL_UART_RxCpltCallback is executed and user can
 148:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxCpltCallback
ARM GAS  /tmp/cciBiPGK.s 			page 4


 149:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****        (+) In case of transfer Error, HAL_UART_ErrorCallback() function is executed and user can
 150:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_ErrorCallback
 151:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 152:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****      *** DMA mode IO operation ***
 153:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****      ==============================
 154:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****      [..]
 155:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****        (+) Send an amount of data in non blocking mode (DMA) using HAL_UART_Transmit_DMA()
 156:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****        (+) At transmission end of half transfer HAL_UART_TxHalfCpltCallback is executed and user ca
 157:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxHalfCpltCallback
 158:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****        (+) At transmission end of transfer HAL_UART_TxCpltCallback is executed and user can
 159:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxCpltCallback
 160:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****        (+) Receive an amount of data in non blocking mode (DMA) using HAL_UART_Receive_DMA()
 161:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****        (+) At reception end of half transfer HAL_UART_RxHalfCpltCallback is executed and user can
 162:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxHalfCpltCallback
 163:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****        (+) At reception end of transfer HAL_UART_RxCpltCallback is executed and user can
 164:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxCpltCallback
 165:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****        (+) In case of transfer Error, HAL_UART_ErrorCallback() function is executed and user can
 166:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_ErrorCallback
 167:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****        (+) Pause the DMA Transfer using HAL_UART_DMAPause()
 168:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****        (+) Resume the DMA Transfer using HAL_UART_DMAResume()
 169:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****        (+) Stop the DMA Transfer using HAL_UART_DMAStop()
 170:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 171:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****      *** UART HAL driver macros list ***
 172:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****      =============================================
 173:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****      [..]
 174:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****        Below the list of most used macros in UART HAL driver.
 175:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 176:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       (+) __HAL_UART_ENABLE: Enable the UART peripheral
 177:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       (+) __HAL_UART_DISABLE: Disable the UART peripheral
 178:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       (+) __HAL_UART_GET_FLAG : Check whether the specified UART flag is set or not
 179:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       (+) __HAL_UART_CLEAR_FLAG : Clear the specified UART pending flag
 180:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       (+) __HAL_UART_ENABLE_IT: Enable the specified UART interrupt
 181:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       (+) __HAL_UART_DISABLE_IT: Disable the specified UART interrupt
 182:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       (+) __HAL_UART_GET_IT_SOURCE: Check whether the specified UART interrupt has occurred or not
 183:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 184:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****      [..]
 185:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****        (@) You can refer to the UART HAL driver header file for more useful macros
 186:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 187:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   @endverbatim
 188:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****      [..]
 189:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****        (@) Additionnal remark: If the parity is enabled, then the MSB bit of the data written
 190:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****            in the data register is transmitted but is changed by the parity bit.
 191:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****            Depending on the frame length defined by the M bit (8-bits or 9-bits),
 192:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****            the possible UART frame formats are as listed in the following table:
 193:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     +-------------------------------------------------------------+
 194:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     |   M bit |  PCE bit  |            UART frame                 |
 195:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     |---------------------|---------------------------------------|
 196:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     |    0    |    0      |    | SB | 8 bit data | STB |          |
 197:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     |---------|-----------|---------------------------------------|
 198:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     |    0    |    1      |    | SB | 7 bit data | PB | STB |     |
 199:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     |---------|-----------|---------------------------------------|
 200:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     |    1    |    0      |    | SB | 9 bit data | STB |          |
 201:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     |---------|-----------|---------------------------------------|
 202:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     |    1    |    1      |    | SB | 8 bit data | PB | STB |     |
 203:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     +-------------------------------------------------------------+
 204:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   ******************************************************************************
 205:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @attention
ARM GAS  /tmp/cciBiPGK.s 			page 5


 206:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *
 207:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
 208:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * All rights reserved.</center></h2>
 209:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *
 210:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * This software component is licensed by ST under BSD 3-Clause license,
 211:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * the "License"; You may not use this file except in compliance with the
 212:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * License. You may obtain a copy of the License at:
 213:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *                        opensource.org/licenses/BSD-3-Clause
 214:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *
 215:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   ******************************************************************************
 216:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
 217:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 218:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /* Includes ------------------------------------------------------------------*/
 219:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #include "stm32l1xx_hal.h"
 220:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 221:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /** @addtogroup STM32L1xx_HAL_Driver
 222:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @{
 223:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
 224:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 225:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /** @defgroup UART UART
 226:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief HAL UART module driver
 227:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @{
 228:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
 229:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #ifdef HAL_UART_MODULE_ENABLED
 230:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 231:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /* Private typedef -----------------------------------------------------------*/
 232:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /* Private define ------------------------------------------------------------*/
 233:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /** @addtogroup UART_Private_Constants
 234:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @{
 235:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
 236:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
 237:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @}
 238:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
 239:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /* Private macro -------------------------------------------------------------*/
 240:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /* Private variables ---------------------------------------------------------*/
 241:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /* Private function prototypes -----------------------------------------------*/
 242:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /** @addtogroup UART_Private_Functions  UART Private Functions
 243:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @{
 244:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
 245:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 246:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 247:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart);
 248:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 249:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** static void UART_EndTxTransfer(UART_HandleTypeDef *huart);
 250:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** static void UART_EndRxTransfer(UART_HandleTypeDef *huart);
 251:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma);
 252:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma);
 253:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma);
 254:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma);
 255:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** static void UART_DMAError(DMA_HandleTypeDef *hdma);
 256:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma);
 257:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma);
 258:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma);
 259:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
 260:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
 261:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart);
 262:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart);
ARM GAS  /tmp/cciBiPGK.s 			page 6


 263:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart);
 264:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, Flag
 265:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** static void UART_SetConfig(UART_HandleTypeDef *huart);
 266:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 267:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
 268:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @}
 269:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
 270:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 271:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /* Exported functions ---------------------------------------------------------*/
 272:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /** @defgroup UART_Exported_Functions UART Exported Functions
 273:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @{
 274:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
 275:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 276:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group1 Initialization and de-initialization functions
 277:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *  @brief    Initialization and Configuration functions
 278:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *
 279:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** @verbatim
 280:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****  ===============================================================================
 281:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****             ##### Initialization and Configuration functions #####
 282:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****  ===============================================================================
 283:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     [..]
 284:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     This subsection provides a set of functions allowing to initialize the USARTx or the UARTy
 285:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     in asynchronous mode.
 286:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       (+) For the asynchronous mode only these parameters can be configured:
 287:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         (++) Baud Rate
 288:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         (++) Word Length
 289:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         (++) Stop Bit
 290:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         (++) Parity: If the parity is enabled, then the MSB bit of the data written
 291:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****              in the data register is transmitted but is changed by the parity bit.
 292:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****              Depending on the frame length defined by the M bit (8-bits or 9-bits),
 293:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****              please refer to Reference manual for possible UART frame formats.
 294:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         (++) Hardware flow control
 295:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         (++) Receiver/transmitter modes
 296:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         (++) Over Sampling Method
 297:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     [..]
 298:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     The HAL_UART_Init(), HAL_HalfDuplex_Init(), HAL_LIN_Init() and HAL_MultiProcessor_Init() APIs
 299:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     follow respectively the UART asynchronous, UART Half duplex, LIN and Multi-Processor configurat
 300:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     procedures (details for the procedures are available in reference manual (RM0038)).
 301:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 302:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** @endverbatim
 303:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @{
 304:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
 305:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 306:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
 307:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  Initializes the UART mode according to the specified parameters in
 308:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *         the UART_InitTypeDef and create the associated handle.
 309:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 310:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 311:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval HAL status
 312:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
 313:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
 314:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
 315:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Check the UART handle allocation */
 316:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if (huart == NULL)
 317:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 318:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     return HAL_ERROR;
 319:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
ARM GAS  /tmp/cciBiPGK.s 			page 7


 320:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 321:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Check the parameters */
 322:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 323:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 324:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* The hardware flow control is available only for USART1, USART2 and USART3 */
 325:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 326:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 327:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
 328:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   else
 329:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 330:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     assert_param(IS_UART_INSTANCE(huart->Instance));
 331:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
 332:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 333:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 334:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 335:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 336:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 337:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 338:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 339:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 340:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 341:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 342:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 343:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 344:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 345:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 346:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
 347:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 348:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Init the low level hardware */
 349:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->MspInitCallback(huart);
 350:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #else
 351:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 352:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 353:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 354:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
 355:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 356:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 357:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 358:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Disable the peripheral */
 359:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 360:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 361:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Set the UART Communication parameters */
 362:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   UART_SetConfig(huart);
 363:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 364:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* In asynchronous mode, the following bits must be kept cleared:
 365:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****      - LINEN and CLKEN bits in the USART_CR2 register,
 366:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****      - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
 367:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 368:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 369:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 370:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Enable the peripheral */
 371:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 372:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 373:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Initialize the UART state */
 374:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 375:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 376:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
ARM GAS  /tmp/cciBiPGK.s 			page 8


 377:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 378:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   return HAL_OK;
 379:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
 380:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 381:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
 382:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  Initializes the half-duplex mode according to the specified
 383:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *         parameters in the UART_InitTypeDef and create the associated handle.
 384:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 385:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 386:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval HAL status
 387:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
 388:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
 389:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
 390:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Check the UART handle allocation */
 391:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if (huart == NULL)
 392:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 393:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     return HAL_ERROR;
 394:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
 395:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 396:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Check the parameters */
 397:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
 398:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 399:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 400:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 401:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 402:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 403:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 404:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 405:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 406:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 407:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 408:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 409:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 410:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 411:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 412:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
 413:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 414:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Init the low level hardware */
 415:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->MspInitCallback(huart);
 416:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #else
 417:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 418:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 419:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 420:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
 421:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 422:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 423:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 424:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Disable the peripheral */
 425:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 426:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 427:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Set the UART Communication parameters */
 428:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   UART_SetConfig(huart);
 429:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 430:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* In half-duplex mode, the following bits must be kept cleared:
 431:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****      - LINEN and CLKEN bits in the USART_CR2 register,
 432:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****      - SCEN and IREN bits in the USART_CR3 register.*/
 433:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
ARM GAS  /tmp/cciBiPGK.s 			page 9


 434:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 435:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 436:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
 437:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 438:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 439:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Enable the peripheral */
 440:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 441:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 442:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Initialize the UART state*/
 443:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 444:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 445:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 446:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 447:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   return HAL_OK;
 448:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
 449:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 450:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
 451:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  Initializes the LIN mode according to the specified
 452:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *         parameters in the UART_InitTypeDef and create the associated handle.
 453:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 454:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 455:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  BreakDetectLength Specifies the LIN break detection length.
 456:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *         This parameter can be one of the following values:
 457:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *            @arg UART_LINBREAKDETECTLENGTH_10B: 10-bit break detection
 458:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *            @arg UART_LINBREAKDETECTLENGTH_11B: 11-bit break detection
 459:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval HAL status
 460:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
 461:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
 462:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
 463:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Check the UART handle allocation */
 464:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if (huart == NULL)
 465:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 466:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     return HAL_ERROR;
 467:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
 468:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 469:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Check the LIN UART instance */
 470:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   assert_param(IS_UART_LIN_INSTANCE(huart->Instance));
 471:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 472:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Check the Break detection length parameter */
 473:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
 474:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   assert_param(IS_UART_LIN_WORD_LENGTH(huart->Init.WordLength));
 475:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   assert_param(IS_UART_LIN_OVERSAMPLING(huart->Init.OverSampling));
 476:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 477:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 478:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 479:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 480:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 481:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 482:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 483:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 484:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 485:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 486:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 487:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 488:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
 489:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 490:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Init the low level hardware */
ARM GAS  /tmp/cciBiPGK.s 			page 10


 491:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->MspInitCallback(huart);
 492:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #else
 493:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 494:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 495:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 496:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
 497:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 498:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 499:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 500:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Disable the peripheral */
 501:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 502:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 503:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Set the UART Communication parameters */
 504:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   UART_SetConfig(huart);
 505:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 506:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* In LIN mode, the following bits must be kept cleared:
 507:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****      - CLKEN bits in the USART_CR2 register,
 508:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****      - SCEN, HDSEL and IREN bits in the USART_CR3 register.*/
 509:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_CLKEN));
 510:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 511:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 512:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
 513:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 514:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 515:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Set the USART LIN Break detection length. */
 516:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, USART_CR2_LBDL);
 517:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR2, BreakDetectLength);
 518:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 519:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Enable the peripheral */
 520:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 521:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 522:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Initialize the UART state*/
 523:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 524:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 525:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 526:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 527:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   return HAL_OK;
 528:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
 529:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 530:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
 531:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  Initializes the Multi-Processor mode according to the specified
 532:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *         parameters in the UART_InitTypeDef and create the associated handle.
 533:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 534:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 535:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  Address USART address
 536:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  WakeUpMethod specifies the USART wake-up method.
 537:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *         This parameter can be one of the following values:
 538:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
 539:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
 540:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval HAL status
 541:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
 542:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t Wake
 543:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
 544:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Check the UART handle allocation */
 545:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if (huart == NULL)
 546:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 547:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     return HAL_ERROR;
ARM GAS  /tmp/cciBiPGK.s 			page 11


 548:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
 549:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 550:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Check the parameters */
 551:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   assert_param(IS_UART_MULTIPROCESSOR_INSTANCE(huart->Instance));
 552:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 553:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Check the Address & wake up method parameters */
 554:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 555:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   assert_param(IS_UART_ADDRESS(Address));
 556:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 557:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 558:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 559:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 560:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 561:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 562:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 563:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 564:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 565:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 566:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 567:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 568:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 569:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 570:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
 571:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 572:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Init the low level hardware */
 573:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->MspInitCallback(huart);
 574:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #else
 575:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 576:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 577:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 578:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
 579:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 580:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 581:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 582:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Disable the peripheral */
 583:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 584:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 585:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Set the UART Communication parameters */
 586:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   UART_SetConfig(huart);
 587:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 588:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* In Multi-Processor mode, the following bits must be kept cleared:
 589:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****      - LINEN and CLKEN bits in the USART_CR2 register,
 590:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****      - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
 591:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 592:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 593:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 594:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Set the USART address node */
 595:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 596:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR2, Address);
 597:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 598:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Set the wake up method by setting the WAKE bit in the CR1 register */
 599:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 600:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, WakeUpMethod);
 601:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 602:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Enable the peripheral */
 603:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 604:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
ARM GAS  /tmp/cciBiPGK.s 			page 12


 605:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Initialize the UART state */
 606:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 607:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 608:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 609:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 610:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   return HAL_OK;
 611:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
 612:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 613:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
 614:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  DeInitializes the UART peripheral.
 615:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 616:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 617:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval HAL status
 618:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
 619:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
 620:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
 621:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Check the UART handle allocation */
 622:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if (huart == NULL)
 623:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 624:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     return HAL_ERROR;
 625:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
 626:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 627:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Check the parameters */
 628:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
 629:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 630:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 631:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 632:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Disable the Peripheral */
 633:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 634:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 635:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 636:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if (huart->MspDeInitCallback == NULL)
 637:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 638:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->MspDeInitCallback = HAL_UART_MspDeInit;
 639:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
 640:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* DeInit the low level hardware */
 641:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->MspDeInitCallback(huart);
 642:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #else
 643:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* DeInit the low level hardware */
 644:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   HAL_UART_MspDeInit(huart);
 645:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 646:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 647:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 648:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_RESET;
 649:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_RESET;
 650:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 651:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Process Unlock */
 652:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 653:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 654:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   return HAL_OK;
 655:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
 656:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 657:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
 658:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  UART MSP Init.
 659:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 660:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 661:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval None
ARM GAS  /tmp/cciBiPGK.s 			page 13


 662:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
 663:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** __weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
 664:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
 665:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 666:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   UNUSED(huart);
 667:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
 668:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****            the HAL_UART_MspInit could be implemented in the user file
 669:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****    */
 670:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
 671:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 672:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
 673:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  UART MSP DeInit.
 674:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 675:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 676:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval None
 677:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
 678:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
 679:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
 680:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 681:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   UNUSED(huart);
 682:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
 683:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****            the HAL_UART_MspDeInit could be implemented in the user file
 684:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****    */
 685:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
 686:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 687:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 688:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
 689:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  Register a User UART Callback
 690:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *         To be used instead of the weak predefined callback
 691:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  huart uart handle
 692:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  CallbackID ID of the callback to be registered
 693:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *         This parameter can be one of the following values:
 694:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_HALFCOMPLETE_CB_ID Tx Half Complete Callback ID
 695:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_COMPLETE_CB_ID Tx Complete Callback ID
 696:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_HALFCOMPLETE_CB_ID Rx Half Complete Callback ID
 697:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_COMPLETE_CB_ID Rx Complete Callback ID
 698:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ERROR_CB_ID Error Callback ID
 699:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_COMPLETE_CB_ID Abort Complete Callback ID
 700:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID Abort Transmit Complete Callback ID
 701:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID Abort Receive Complete Callback ID
 702:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPINIT_CB_ID MspInit Callback ID
 703:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPDEINIT_CB_ID MspDeInit Callback ID
 704:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  pCallback pointer to the Callback function
 705:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval HAL status
 706:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
 707:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef C
 708:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
 709:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   HAL_StatusTypeDef status = HAL_OK;
 710:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 711:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if (pCallback == NULL)
 712:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 713:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Update the error code */
 714:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 715:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 716:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     return HAL_ERROR;
 717:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
 718:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Process locked */
ARM GAS  /tmp/cciBiPGK.s 			page 14


 719:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   __HAL_LOCK(huart);
 720:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 721:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 722:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 723:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     switch (CallbackID)
 724:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 725:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       case HAL_UART_TX_HALFCOMPLETE_CB_ID :
 726:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         huart->TxHalfCpltCallback = pCallback;
 727:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         break;
 728:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 729:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       case HAL_UART_TX_COMPLETE_CB_ID :
 730:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         huart->TxCpltCallback = pCallback;
 731:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         break;
 732:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 733:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       case HAL_UART_RX_HALFCOMPLETE_CB_ID :
 734:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         huart->RxHalfCpltCallback = pCallback;
 735:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         break;
 736:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 737:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       case HAL_UART_RX_COMPLETE_CB_ID :
 738:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         huart->RxCpltCallback = pCallback;
 739:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         break;
 740:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 741:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       case HAL_UART_ERROR_CB_ID :
 742:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         huart->ErrorCallback = pCallback;
 743:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         break;
 744:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 745:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       case HAL_UART_ABORT_COMPLETE_CB_ID :
 746:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         huart->AbortCpltCallback = pCallback;
 747:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         break;
 748:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 749:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
 750:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         huart->AbortTransmitCpltCallback = pCallback;
 751:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         break;
 752:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 753:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
 754:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         huart->AbortReceiveCpltCallback = pCallback;
 755:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         break;
 756:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 757:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 758:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         huart->MspInitCallback = pCallback;
 759:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         break;
 760:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 761:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 762:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         huart->MspDeInitCallback = pCallback;
 763:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         break;
 764:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 765:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       default :
 766:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         /* Update the error code */
 767:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 768:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 769:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         /* Return error status */
 770:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         status =  HAL_ERROR;
 771:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         break;
 772:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
 773:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
 774:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   else if (huart->gState == HAL_UART_STATE_RESET)
 775:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
ARM GAS  /tmp/cciBiPGK.s 			page 15


 776:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     switch (CallbackID)
 777:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 778:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 779:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         huart->MspInitCallback = pCallback;
 780:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         break;
 781:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 782:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 783:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         huart->MspDeInitCallback = pCallback;
 784:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         break;
 785:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 786:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       default :
 787:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         /* Update the error code */
 788:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 789:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 790:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         /* Return error status */
 791:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         status =  HAL_ERROR;
 792:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         break;
 793:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
 794:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
 795:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   else
 796:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 797:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Update the error code */
 798:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 799:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 800:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Return error status */
 801:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     status =  HAL_ERROR;
 802:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
 803:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 804:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Release Lock */
 805:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 806:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 807:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   return status;
 808:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
 809:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 810:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
 811:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  Unregister an UART Callback
 812:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *         UART callaback is redirected to the weak predefined callback
 813:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  huart uart handle
 814:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  CallbackID ID of the callback to be unregistered
 815:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *         This parameter can be one of the following values:
 816:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_HALFCOMPLETE_CB_ID Tx Half Complete Callback ID
 817:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_COMPLETE_CB_ID Tx Complete Callback ID
 818:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_HALFCOMPLETE_CB_ID Rx Half Complete Callback ID
 819:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_COMPLETE_CB_ID Rx Complete Callback ID
 820:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ERROR_CB_ID Error Callback ID
 821:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_COMPLETE_CB_ID Abort Complete Callback ID
 822:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID Abort Transmit Complete Callback ID
 823:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID Abort Receive Complete Callback ID
 824:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPINIT_CB_ID MspInit Callback ID
 825:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPDEINIT_CB_ID MspDeInit Callback ID
 826:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval HAL status
 827:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
 828:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_UnRegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef
 829:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
 830:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   HAL_StatusTypeDef status = HAL_OK;
 831:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 832:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Process locked */
ARM GAS  /tmp/cciBiPGK.s 			page 16


 833:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   __HAL_LOCK(huart);
 834:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 835:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if (HAL_UART_STATE_READY == huart->gState)
 836:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 837:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     switch (CallbackID)
 838:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 839:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       case HAL_UART_TX_HALFCOMPLETE_CB_ID :
 840:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         huart->TxHalfCpltCallback = HAL_UART_TxHalfCpltCallback;               /* Legacy weak  TxHa
 841:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         break;
 842:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 843:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       case HAL_UART_TX_COMPLETE_CB_ID :
 844:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         huart->TxCpltCallback = HAL_UART_TxCpltCallback;                       /* Legacy weak TxCpl
 845:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         break;
 846:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 847:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       case HAL_UART_RX_HALFCOMPLETE_CB_ID :
 848:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         huart->RxHalfCpltCallback = HAL_UART_RxHalfCpltCallback;               /* Legacy weak RxHal
 849:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         break;
 850:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 851:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       case HAL_UART_RX_COMPLETE_CB_ID :
 852:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         huart->RxCpltCallback = HAL_UART_RxCpltCallback;                       /* Legacy weak RxCpl
 853:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         break;
 854:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 855:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       case HAL_UART_ERROR_CB_ID :
 856:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         huart->ErrorCallback = HAL_UART_ErrorCallback;                         /* Legacy weak Error
 857:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         break;
 858:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 859:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       case HAL_UART_ABORT_COMPLETE_CB_ID :
 860:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         huart->AbortCpltCallback = HAL_UART_AbortCpltCallback;                 /* Legacy weak Abort
 861:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         break;
 862:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 863:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
 864:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak Abort
 865:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         break;
 866:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 867:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
 868:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         huart->AbortReceiveCpltCallback = HAL_UART_AbortReceiveCpltCallback;   /* Legacy weak Abort
 869:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         break;
 870:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 871:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 872:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         huart->MspInitCallback = HAL_UART_MspInit;                             /* Legacy weak MspIn
 873:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         break;
 874:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 875:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 876:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         huart->MspDeInitCallback = HAL_UART_MspDeInit;                         /* Legacy weak MspDe
 877:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         break;
 878:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 879:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       default :
 880:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         /* Update the error code */
 881:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 882:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 883:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         /* Return error status */
 884:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         status =  HAL_ERROR;
 885:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         break;
 886:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
 887:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
 888:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   else if (HAL_UART_STATE_RESET == huart->gState)
 889:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
ARM GAS  /tmp/cciBiPGK.s 			page 17


 890:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     switch (CallbackID)
 891:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 892:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 893:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         huart->MspInitCallback = HAL_UART_MspInit;
 894:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         break;
 895:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 896:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 897:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         huart->MspDeInitCallback = HAL_UART_MspDeInit;
 898:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         break;
 899:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 900:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       default :
 901:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         /* Update the error code */
 902:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 903:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 904:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         /* Return error status */
 905:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         status =  HAL_ERROR;
 906:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         break;
 907:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
 908:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
 909:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   else
 910:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 911:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Update the error code */
 912:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 913:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 914:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Return error status */
 915:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     status =  HAL_ERROR;
 916:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
 917:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 918:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Release Lock */
 919:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 920:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 921:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   return status;
 922:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
 923:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 924:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 925:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
 926:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @}
 927:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
 928:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 929:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group2 IO operation functions
 930:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *  @brief UART Transmit and Receive functions
 931:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *
 932:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** @verbatim
 933:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****  ===============================================================================
 934:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****                       ##### IO operation functions #####
 935:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****  ===============================================================================
 936:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     This subsection provides a set of functions allowing to manage the UART asynchronous
 937:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     and Half duplex data transfers.
 938:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 939:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     (#) There are two modes of transfer:
 940:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****        (+) Blocking mode: The communication is performed in polling mode.
 941:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****            The HAL status of all data processing is returned by the same function
 942:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****            after finishing transfer.
 943:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****        (+) Non-Blocking mode: The communication is performed using Interrupts
 944:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****            or DMA, these API's return the HAL status.
 945:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****            The end of the data processing will be indicated through the
 946:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****            dedicated UART IRQ when using Interrupt mode or the DMA IRQ when
ARM GAS  /tmp/cciBiPGK.s 			page 18


 947:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****            using DMA mode.
 948:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****            The HAL_UART_TxCpltCallback(), HAL_UART_RxCpltCallback() user callbacks
 949:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****            will be executed respectively at the end of the transmit or receive process
 950:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****            The HAL_UART_ErrorCallback()user callback will be executed when a communication error is
 951:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 952:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     (#) Blocking mode API's are :
 953:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         (+) HAL_UART_Transmit()
 954:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         (+) HAL_UART_Receive()
 955:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 956:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     (#) Non-Blocking mode API's with Interrupt are :
 957:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         (+) HAL_UART_Transmit_IT()
 958:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         (+) HAL_UART_Receive_IT()
 959:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         (+) HAL_UART_IRQHandler()
 960:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 961:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     (#) Non-Blocking mode API's with DMA are :
 962:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         (+) HAL_UART_Transmit_DMA()
 963:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         (+) HAL_UART_Receive_DMA()
 964:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         (+) HAL_UART_DMAPause()
 965:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         (+) HAL_UART_DMAResume()
 966:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         (+) HAL_UART_DMAStop()
 967:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 968:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     (#) A set of Transfer Complete Callbacks are provided in Non_Blocking mode:
 969:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         (+) HAL_UART_TxHalfCpltCallback()
 970:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         (+) HAL_UART_TxCpltCallback()
 971:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         (+) HAL_UART_RxHalfCpltCallback()
 972:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         (+) HAL_UART_RxCpltCallback()
 973:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         (+) HAL_UART_ErrorCallback()
 974:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 975:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     (#) Non-Blocking mode transfers could be aborted using Abort API's :
 976:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         (+) HAL_UART_Abort()
 977:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         (+) HAL_UART_AbortTransmit()
 978:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         (+) HAL_UART_AbortReceive()
 979:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         (+) HAL_UART_Abort_IT()
 980:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         (+) HAL_UART_AbortTransmit_IT()
 981:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         (+) HAL_UART_AbortReceive_IT()
 982:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 983:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     (#) For Abort services based on interrupts (HAL_UART_Abortxxx_IT), a set of Abort Complete Call
 984:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         (+) HAL_UART_AbortCpltCallback()
 985:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         (+) HAL_UART_AbortTransmitCpltCallback()
 986:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         (+) HAL_UART_AbortReceiveCpltCallback()
 987:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 988:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     (#) In Non-Blocking mode transfers, possible errors are split into 2 categories.
 989:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         Errors are handled as follows :
 990:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****        (+) Error is considered as Recoverable and non blocking : Transfer could go till end, but er
 991:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****            to be evaluated by user : this concerns Frame Error, Parity Error or Noise Error in Inte
 992:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****            Received character is then retrieved and stored in Rx buffer, Error code is set to allow
 993:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****            and HAL_UART_ErrorCallback() user callback is executed. Transfer is kept ongoing on UART
 994:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****            If user wants to abort it, Abort services should be called by user.
 995:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****        (+) Error is considered as Blocking : Transfer could not be completed properly and is aborte
 996:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****            This concerns Overrun Error In Interrupt mode reception and all errors in DMA mode.
 997:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****            Error code is set to allow user to identify error type, and HAL_UART_ErrorCallback() use
 998:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 999:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     -@- In the Half duplex communication, it is forbidden to run the transmit
1000:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         and receive process in parallel, the UART state HAL_UART_STATE_BUSY_TX_RX can't be useful.
1001:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1002:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** @endverbatim
1003:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @{
ARM GAS  /tmp/cciBiPGK.s 			page 19


1004:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
1005:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1006:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
1007:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  Sends an amount of data in blocking mode.
1008:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
1009:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1010:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  pData Pointer to data buffer
1011:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  Size Amount of data to be sent
1012:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  Timeout Timeout duration
1013:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval HAL status
1014:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
1015:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint3
1016:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
1017:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   uint16_t *tmp;
1018:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   uint32_t tickstart = 0U;
1019:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1020:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
1021:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
1022:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
1023:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
1024:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
1025:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       return  HAL_ERROR;
1026:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
1027:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1028:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Process Locked */
1029:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     __HAL_LOCK(huart);
1030:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1031:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
1032:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
1033:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1034:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Init tickstart for timeout managment */
1035:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     tickstart = HAL_GetTick();
1036:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1037:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->TxXferSize = Size;
1038:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->TxXferCount = Size;
1039:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     while (huart->TxXferCount > 0U)
1040:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
1041:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       huart->TxXferCount--;
1042:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       if (huart->Init.WordLength == UART_WORDLENGTH_9B)
1043:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       {
1044:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
1045:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         {
1046:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****           return HAL_TIMEOUT;
1047:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         }
1048:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         tmp = (uint16_t *) pData;
1049:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
1050:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         if (huart->Init.Parity == UART_PARITY_NONE)
1051:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         {
1052:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****           pData += 2U;
1053:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         }
1054:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         else
1055:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         {
1056:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****           pData += 1U;
1057:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         }
1058:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       }
1059:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       else
1060:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       {
ARM GAS  /tmp/cciBiPGK.s 			page 20


1061:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
1062:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         {
1063:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****           return HAL_TIMEOUT;
1064:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         }
1065:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
1066:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       }
1067:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
1068:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1069:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
1070:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
1071:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       return HAL_TIMEOUT;
1072:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
1073:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1074:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* At end of Tx process, restore huart->gState to Ready */
1075:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_READY;
1076:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1077:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Process Unlocked */
1078:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     __HAL_UNLOCK(huart);
1079:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1080:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     return HAL_OK;
1081:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
1082:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   else
1083:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
1084:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     return HAL_BUSY;
1085:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
1086:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
1087:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1088:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
1089:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  Receives an amount of data in blocking mode.
1090:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
1091:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1092:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  pData Pointer to data buffer
1093:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  Size Amount of data to be received
1094:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  Timeout Timeout duration
1095:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval HAL status
1096:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
1097:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32
1098:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
1099:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   uint16_t *tmp;
1100:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   uint32_t tickstart = 0U;
1101:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1102:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1103:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
1104:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
1105:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
1106:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
1107:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       return  HAL_ERROR;
1108:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
1109:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1110:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Process Locked */
1111:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     __HAL_LOCK(huart);
1112:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1113:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
1114:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
1115:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1116:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Init tickstart for timeout managment */
1117:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     tickstart = HAL_GetTick();
ARM GAS  /tmp/cciBiPGK.s 			page 21


1118:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1119:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->RxXferSize = Size;
1120:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->RxXferCount = Size;
1121:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1122:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Check the remain data to be received */
1123:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     while (huart->RxXferCount > 0U)
1124:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
1125:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       huart->RxXferCount--;
1126:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       if (huart->Init.WordLength == UART_WORDLENGTH_9B)
1127:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       {
1128:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK
1129:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         {
1130:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****           return HAL_TIMEOUT;
1131:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         }
1132:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         tmp = (uint16_t *) pData;
1133:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         if (huart->Init.Parity == UART_PARITY_NONE)
1134:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         {
1135:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****           *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
1136:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****           pData += 2U;
1137:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         }
1138:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         else
1139:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         {
1140:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****           *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
1141:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****           pData += 1U;
1142:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         }
1143:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1144:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       }
1145:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       else
1146:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       {
1147:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK
1148:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         {
1149:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****           return HAL_TIMEOUT;
1150:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         }
1151:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         if (huart->Init.Parity == UART_PARITY_NONE)
1152:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         {
1153:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****           *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
1154:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         }
1155:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         else
1156:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         {
1157:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****           *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
1158:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         }
1159:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1160:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       }
1161:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
1162:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1163:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* At end of Rx process, restore huart->RxState to Ready */
1164:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
1165:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1166:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Process Unlocked */
1167:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     __HAL_UNLOCK(huart);
1168:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1169:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     return HAL_OK;
1170:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
1171:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   else
1172:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
1173:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     return HAL_BUSY;
1174:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
ARM GAS  /tmp/cciBiPGK.s 			page 22


1175:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
1176:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1177:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
1178:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  Sends an amount of data in non blocking mode.
1179:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
1180:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1181:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  pData Pointer to data buffer
1182:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  Size Amount of data to be sent
1183:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval HAL status
1184:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
1185:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1186:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
1187:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
1188:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
1189:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
1190:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
1191:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
1192:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       return HAL_ERROR;
1193:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
1194:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1195:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Process Locked */
1196:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     __HAL_LOCK(huart);
1197:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1198:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->pTxBuffPtr = pData;
1199:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->TxXferSize = Size;
1200:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->TxXferCount = Size;
1201:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1202:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
1203:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
1204:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1205:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Process Unlocked */
1206:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     __HAL_UNLOCK(huart);
1207:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1208:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Enable the UART Transmit data register empty Interrupt */
1209:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
1210:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1211:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     return HAL_OK;
1212:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
1213:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   else
1214:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
1215:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     return HAL_BUSY;
1216:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
1217:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
1218:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1219:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
1220:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  Receives an amount of data in non blocking mode.
1221:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
1222:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1223:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  pData Pointer to data buffer
1224:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  Size Amount of data to be received
1225:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval HAL status
1226:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
1227:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1228:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
1229:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1230:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
1231:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
ARM GAS  /tmp/cciBiPGK.s 			page 23


1232:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
1233:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
1234:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       return HAL_ERROR;
1235:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
1236:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1237:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Process Locked */
1238:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     __HAL_LOCK(huart);
1239:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1240:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->pRxBuffPtr = pData;
1241:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->RxXferSize = Size;
1242:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->RxXferCount = Size;
1243:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1244:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
1245:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
1246:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1247:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Process Unlocked */
1248:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     __HAL_UNLOCK(huart);
1249:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1250:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Enable the UART Parity Error Interrupt */
1251:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
1252:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1253:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
1254:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
1255:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1256:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Enable the UART Data Register not empty Interrupt */
1257:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
1258:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1259:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     return HAL_OK;
1260:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
1261:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   else
1262:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
1263:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     return HAL_BUSY;
1264:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
1265:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
1266:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1267:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
1268:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  Sends an amount of data in non blocking mode.
1269:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
1270:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1271:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  pData Pointer to data buffer
1272:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  Size Amount of data to be sent
1273:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval HAL status
1274:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
1275:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1276:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
1277:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   uint32_t *tmp;
1278:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1279:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
1280:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
1281:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
1282:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
1283:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
1284:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       return HAL_ERROR;
1285:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
1286:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1287:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Process Locked */
1288:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     __HAL_LOCK(huart);
ARM GAS  /tmp/cciBiPGK.s 			page 24


1289:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1290:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->pTxBuffPtr = pData;
1291:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->TxXferSize = Size;
1292:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->TxXferCount = Size;
1293:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1294:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
1295:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
1296:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1297:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Set the UART DMA transfer complete callback */
1298:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
1299:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1300:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Set the UART DMA Half transfer complete callback */
1301:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
1302:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1303:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Set the DMA error callback */
1304:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->hdmatx->XferErrorCallback = UART_DMAError;
1305:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1306:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Set the DMA abort callback */
1307:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->hdmatx->XferAbortCallback = NULL;
1308:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1309:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Enable the UART transmit DMA channel */
1310:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     tmp = (uint32_t *)&pData;
1311:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
1312:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1313:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Clear the TC flag in the SR register by writing 0 to it */
1314:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
1315:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1316:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Process Unlocked */
1317:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     __HAL_UNLOCK(huart);
1318:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1319:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Enable the DMA transfer for transmit request by setting the DMAT bit
1320:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****        in the UART CR3 register */
1321:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1322:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1323:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     return HAL_OK;
1324:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
1325:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   else
1326:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
1327:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     return HAL_BUSY;
1328:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
1329:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
1330:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1331:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
1332:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  Receives an amount of data in non blocking mode.
1333:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
1334:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1335:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  pData Pointer to data buffer
1336:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  Size Amount of data to be received
1337:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
1338:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval HAL status
1339:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
1340:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1341:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
1342:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   uint32_t *tmp;
1343:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1344:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1345:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
ARM GAS  /tmp/cciBiPGK.s 			page 25


1346:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
1347:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
1348:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
1349:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       return HAL_ERROR;
1350:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
1351:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1352:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Process Locked */
1353:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     __HAL_LOCK(huart);
1354:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1355:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->pRxBuffPtr = pData;
1356:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->RxXferSize = Size;
1357:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1358:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
1359:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
1360:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1361:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Set the UART DMA transfer complete callback */
1362:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
1363:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1364:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Set the UART DMA Half transfer complete callback */
1365:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
1366:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1367:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Set the DMA error callback */
1368:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->hdmarx->XferErrorCallback = UART_DMAError;
1369:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1370:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Set the DMA abort callback */
1371:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->hdmarx->XferAbortCallback = NULL;
1372:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1373:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Enable the DMA channel */
1374:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     tmp = (uint32_t *)&pData;
1375:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
1376:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1377:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the sec
1378:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     __HAL_UART_CLEAR_OREFLAG(huart);
1379:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1380:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Process Unlocked */
1381:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     __HAL_UNLOCK(huart);
1382:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1383:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Enable the UART Parity Error Interrupt */
1384:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
1385:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1386:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
1387:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
1388:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1389:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Enable the DMA transfer for the receiver request by setting the DMAR bit
1390:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     in the UART CR3 register */
1391:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1392:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1393:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     return HAL_OK;
1394:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
1395:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   else
1396:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
1397:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     return HAL_BUSY;
1398:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
1399:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
1400:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1401:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
1402:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief Pauses the DMA Transfer.
ARM GAS  /tmp/cciBiPGK.s 			page 26


1403:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
1404:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1405:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval HAL status
1406:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
1407:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
1408:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
1409:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
1410:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1411:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Process Locked */
1412:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   __HAL_LOCK(huart);
1413:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1414:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
1415:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
1416:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
1417:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Disable the UART DMA Tx request */
1418:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1419:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
1420:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1421:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
1422:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
1423:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
1424:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1425:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
1426:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1427:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1428:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Disable the UART DMA Rx request */
1429:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1430:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
1431:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1432:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Process Unlocked */
1433:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
1434:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1435:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   return HAL_OK;
1436:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
1437:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1438:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
1439:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief Resumes the DMA Transfer.
1440:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
1441:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1442:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval HAL status
1443:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
1444:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
1445:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
1446:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Process Locked */
1447:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   __HAL_LOCK(huart);
1448:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1449:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_BUSY_TX)
1450:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
1451:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Enable the UART DMA Tx request */
1452:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1453:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
1454:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1455:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_BUSY_RX)
1456:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
1457:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Clear the Overrun flag before resuming the Rx transfer*/
1458:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     __HAL_UART_CLEAR_OREFLAG(huart);
1459:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
ARM GAS  /tmp/cciBiPGK.s 			page 27


1460:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Reenable PE and ERR (Frame error, noise error, overrun error) interrupts */
1461:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
1462:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
1463:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1464:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Enable the UART DMA Rx request */
1465:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1466:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
1467:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1468:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Process Unlocked */
1469:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
1470:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1471:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   return HAL_OK;
1472:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
1473:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1474:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
1475:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief Stops the DMA Transfer.
1476:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
1477:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1478:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval HAL status
1479:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
1480:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
1481:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
1482:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
1483:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* The Lock is not implemented on this API to allow the user application
1484:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****      to call the HAL UART API under callbacks HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
1485:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****      when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
1486:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****      and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
1487:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****      */
1488:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1489:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Stop UART DMA Tx request if ongoing */
1490:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
1491:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
1492:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
1493:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1494:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1495:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Abort the UART DMA Tx channel */
1496:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     if (huart->hdmatx != NULL)
1497:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
1498:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       HAL_DMA_Abort(huart->hdmatx);
1499:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
1500:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     UART_EndTxTransfer(huart);
1501:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
1502:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1503:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Stop UART DMA Rx request if ongoing */
1504:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
1505:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
1506:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
1507:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1508:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1509:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Abort the UART DMA Rx channel */
1510:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     if (huart->hdmarx != NULL)
1511:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
1512:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       HAL_DMA_Abort(huart->hdmarx);
1513:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
1514:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     UART_EndRxTransfer(huart);
1515:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
1516:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
ARM GAS  /tmp/cciBiPGK.s 			page 28


1517:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   return HAL_OK;
1518:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
1519:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1520:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
1521:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  Abort ongoing transfers (blocking mode).
1522:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  huart UART handle.
1523:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1524:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *         This procedure performs following operations :
1525:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx and Rx)
1526:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1527:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1528:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *           - Set handle State to READY
1529:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1530:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval HAL status
1531:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** */
1532:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
1533:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
1534:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1535:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_
1536:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1537:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1538:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1539:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
1540:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
1541:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1542:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1543:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Abort the UART DMA Tx channel: use blocking DMA Abort API (no callback) */
1544:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     if (huart->hdmatx != NULL)
1545:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
1546:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1547:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1548:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
1549:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1550:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
1551:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       {
1552:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
1553:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         {
1554:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****           /* Set error code to DMA */
1555:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
1556:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1557:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****           return HAL_TIMEOUT;
1558:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         }
1559:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       }
1560:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
1561:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
1562:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1563:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1564:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
1565:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
1566:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1567:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1568:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Abort the UART DMA Rx channel: use blocking DMA Abort API (no callback) */
1569:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     if (huart->hdmarx != NULL)
1570:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
1571:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1572:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1573:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
ARM GAS  /tmp/cciBiPGK.s 			page 29


1574:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1575:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
1576:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       {
1577:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
1578:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         {
1579:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****           /* Set error code to DMA */
1580:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
1581:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1582:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****           return HAL_TIMEOUT;
1583:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         }
1584:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       }
1585:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
1586:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
1587:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1588:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Reset Tx and Rx transfer counters */
1589:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
1590:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
1591:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1592:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Reset ErrorCode */
1593:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
1594:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1595:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Restore huart->RxState and huart->gState to Ready */
1596:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
1597:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
1598:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1599:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   return HAL_OK;
1600:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
1601:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1602:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
1603:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  Abort ongoing Transmit transfer (blocking mode).
1604:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  huart UART handle.
1605:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Tx transfer started in Interrupt 
1606:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *         This procedure performs following operations :
1607:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx)
1608:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1609:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1610:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *           - Set handle State to READY
1611:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1612:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval HAL status
1613:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** */
1614:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
1615:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
1616:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
1617:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
1618:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1619:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1620:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
1621:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
1622:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1623:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1624:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
1625:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     if (huart->hdmatx != NULL)
1626:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
1627:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1628:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1629:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
1630:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
ARM GAS  /tmp/cciBiPGK.s 			page 30


1631:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
1632:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       {
1633:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
1634:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         {
1635:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****           /* Set error code to DMA */
1636:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
1637:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1638:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****           return HAL_TIMEOUT;
1639:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         }
1640:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       }
1641:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
1642:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
1643:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1644:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Reset Tx transfer counter */
1645:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
1646:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1647:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Restore huart->gState to Ready */
1648:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
1649:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1650:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   return HAL_OK;
1651:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
1652:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1653:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
1654:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  Abort ongoing Receive transfer (blocking mode).
1655:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  huart UART handle.
1656:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Rx transfer started in Interrupt 
1657:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *         This procedure performs following operations :
1658:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *           - Disable UART Interrupts (Rx)
1659:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1660:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1661:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *           - Set handle State to READY
1662:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1663:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval HAL status
1664:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** */
1665:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
1666:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
1667:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1668:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
1669:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1670:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1671:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1672:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
1673:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
1674:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1675:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1676:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
1677:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     if (huart->hdmarx != NULL)
1678:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
1679:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1680:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1681:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
1682:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1683:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
1684:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       {
1685:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
1686:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         {
1687:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****           /* Set error code to DMA */
ARM GAS  /tmp/cciBiPGK.s 			page 31


1688:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
1689:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1690:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****           return HAL_TIMEOUT;
1691:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         }
1692:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       }
1693:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
1694:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
1695:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1696:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Reset Rx transfer counter */
1697:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
1698:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1699:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Restore huart->RxState to Ready */
1700:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
1701:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1702:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   return HAL_OK;
1703:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
1704:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1705:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
1706:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  Abort ongoing transfers (Interrupt mode).
1707:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  huart UART handle.
1708:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1709:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *         This procedure performs following operations :
1710:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx and Rx)
1711:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1712:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1713:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *           - Set handle State to READY
1714:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
1715:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1716:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1717:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval HAL status
1718:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** */
1719:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
1720:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
1721:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   uint32_t AbortCplt = 0x01U;
1722:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1723:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1724:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_
1725:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1726:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1727:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks sh
1728:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****      before any call to DMA Abort functions */
1729:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* DMA Tx Handle is valid */
1730:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if (huart->hdmatx != NULL)
1731:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
1732:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
1733:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****        Otherwise, set it to NULL */
1734:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
1735:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
1736:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
1737:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
1738:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     else
1739:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
1740:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
1741:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
1742:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
1743:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* DMA Rx Handle is valid */
1744:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if (huart->hdmarx != NULL)
ARM GAS  /tmp/cciBiPGK.s 			page 32


1745:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
1746:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
1747:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****        Otherwise, set it to NULL */
1748:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
1749:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
1750:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
1751:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
1752:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     else
1753:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
1754:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
1755:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
1756:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
1757:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1758:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1759:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
1760:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
1761:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Disable DMA Tx at UART level */
1762:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1763:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1764:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
1765:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     if (huart->hdmatx != NULL)
1766:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
1767:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       /* UART Tx DMA Abort callback has already been initialised :
1768:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
1769:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1770:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       /* Abort DMA TX */
1771:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
1772:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       {
1773:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         huart->hdmatx->XferAbortCallback = NULL;
1774:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       }
1775:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       else
1776:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       {
1777:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         AbortCplt = 0x00U;
1778:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       }
1779:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
1780:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
1781:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1782:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1783:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
1784:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
1785:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1786:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1787:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
1788:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     if (huart->hdmarx != NULL)
1789:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
1790:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       /* UART Rx DMA Abort callback has already been initialised :
1791:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
1792:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1793:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       /* Abort DMA RX */
1794:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
1795:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       {
1796:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         huart->hdmarx->XferAbortCallback = NULL;
1797:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         AbortCplt = 0x01U;
1798:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       }
1799:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       else
1800:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       {
1801:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         AbortCplt = 0x00U;
ARM GAS  /tmp/cciBiPGK.s 			page 33


1802:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       }
1803:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
1804:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
1805:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1806:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* if no DMA abort complete callback execution is required => call user Abort Complete callback *
1807:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if (AbortCplt == 0x01U)
1808:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
1809:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Reset Tx and Rx transfer counters */
1810:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->TxXferCount = 0x00U;
1811:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->RxXferCount = 0x00U;
1812:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1813:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Reset ErrorCode */
1814:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
1815:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1816:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Restore huart->gState and huart->RxState to Ready */
1817:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->gState  = HAL_UART_STATE_READY;
1818:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
1819:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1820:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
1821:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
1822:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Call registered Abort complete callback */
1823:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->AbortCpltCallback(huart);
1824:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #else
1825:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Call legacy weak Abort complete callback */
1826:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     HAL_UART_AbortCpltCallback(huart);
1827:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
1828:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
1829:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1830:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   return HAL_OK;
1831:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
1832:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1833:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
1834:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  Abort ongoing Transmit transfer (Interrupt mode).
1835:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  huart UART handle.
1836:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Tx transfer started in Interrupt 
1837:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *         This procedure performs following operations :
1838:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx)
1839:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1840:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1841:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *           - Set handle State to READY
1842:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
1843:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1844:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1845:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval HAL status
1846:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** */
1847:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
1848:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
1849:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
1850:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
1851:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1852:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1853:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
1854:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
1855:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1856:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1857:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
1858:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     if (huart->hdmatx != NULL)
ARM GAS  /tmp/cciBiPGK.s 			page 34


1859:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
1860:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       /* Set the UART DMA Abort callback :
1861:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
1862:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
1863:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1864:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       /* Abort DMA TX */
1865:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
1866:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       {
1867:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
1868:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         huart->hdmatx->XferAbortCallback(huart->hdmatx);
1869:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       }
1870:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
1871:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     else
1872:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
1873:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       /* Reset Tx transfer counter */
1874:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       huart->TxXferCount = 0x00U;
1875:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1876:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       /* Restore huart->gState to Ready */
1877:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       huart->gState = HAL_UART_STATE_READY;
1878:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1879:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
1880:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
1881:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       /* Call registered Abort Transmit Complete Callback */
1882:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       huart->AbortTransmitCpltCallback(huart);
1883:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #else
1884:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       /* Call legacy weak Abort Transmit Complete Callback */
1885:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       HAL_UART_AbortTransmitCpltCallback(huart);
1886:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
1887:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
1888:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
1889:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   else
1890:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
1891:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Reset Tx transfer counter */
1892:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->TxXferCount = 0x00U;
1893:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1894:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Restore huart->gState to Ready */
1895:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_READY;
1896:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1897:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
1898:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
1899:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Call registered Abort Transmit Complete Callback */
1900:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->AbortTransmitCpltCallback(huart);
1901:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #else
1902:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Call legacy weak Abort Transmit Complete Callback */
1903:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     HAL_UART_AbortTransmitCpltCallback(huart);
1904:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
1905:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
1906:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1907:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   return HAL_OK;
1908:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
1909:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1910:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
1911:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  Abort ongoing Receive transfer (Interrupt mode).
1912:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  huart UART handle.
1913:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Rx transfer started in Interrupt 
1914:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *         This procedure performs following operations :
1915:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *           - Disable UART Interrupts (Rx)
ARM GAS  /tmp/cciBiPGK.s 			page 35


1916:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1917:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1918:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *           - Set handle State to READY
1919:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
1920:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1921:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1922:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval HAL status
1923:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** */
1924:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
1925:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
1926:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1927:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
1928:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1929:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1930:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1931:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
1932:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
1933:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1934:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1935:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
1936:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     if (huart->hdmarx != NULL)
1937:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
1938:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       /* Set the UART DMA Abort callback :
1939:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
1940:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
1941:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1942:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       /* Abort DMA RX */
1943:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
1944:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       {
1945:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
1946:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         huart->hdmarx->XferAbortCallback(huart->hdmarx);
1947:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       }
1948:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
1949:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     else
1950:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
1951:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       /* Reset Rx transfer counter */
1952:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       huart->RxXferCount = 0x00U;
1953:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1954:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       /* Restore huart->RxState to Ready */
1955:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       huart->RxState = HAL_UART_STATE_READY;
1956:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1957:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
1958:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
1959:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       /* Call registered Abort Receive Complete Callback */
1960:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       huart->AbortReceiveCpltCallback(huart);
1961:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #else
1962:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       /* Call legacy weak Abort Receive Complete Callback */
1963:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       HAL_UART_AbortReceiveCpltCallback(huart);
1964:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
1965:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
1966:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
1967:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   else
1968:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
1969:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Reset Rx transfer counter */
1970:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->RxXferCount = 0x00U;
1971:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1972:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Restore huart->RxState to Ready */
ARM GAS  /tmp/cciBiPGK.s 			page 36


1973:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
1974:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1975:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
1976:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
1977:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Call registered Abort Receive Complete Callback */
1978:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->AbortReceiveCpltCallback(huart);
1979:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #else
1980:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Call legacy weak Abort Receive Complete Callback */
1981:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     HAL_UART_AbortReceiveCpltCallback(huart);
1982:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
1983:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
1984:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1985:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   return HAL_OK;
1986:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
1987:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
1988:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
1989:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  This function handles UART interrupt request.
1990:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
1991:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1992:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval None
1993:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
1994:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
1995:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
1996:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   uint32_t isrflags   = READ_REG(huart->Instance->SR);
1997:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
1998:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
1999:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   uint32_t errorflags = 0x00U;
2000:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
2001:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2002:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* If no error occurs */
2003:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
2004:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if (errorflags == RESET)
2005:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
2006:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* UART in mode Receiver -------------------------------------------------*/
2007:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
2008:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
2009:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       UART_Receive_IT(huart);
2010:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       return;
2011:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
2012:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
2013:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2014:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* If some errors occur */
2015:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE
2016:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
2017:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* UART parity error interrupt occurred ----------------------------------*/
2018:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
2019:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
2020:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_PE;
2021:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
2022:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2023:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* UART noise error interrupt occurred -----------------------------------*/
2024:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
2025:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
2026:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_NE;
2027:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
2028:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2029:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* UART frame error interrupt occurred -----------------------------------*/
ARM GAS  /tmp/cciBiPGK.s 			page 37


2030:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
2031:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
2032:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_FE;
2033:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
2034:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2035:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* UART Over-Run interrupt occurred --------------------------------------*/
2036:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
2037:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
2038:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_ORE;
2039:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
2040:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2041:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Call UART Error Call back function if need be --------------------------*/
2042:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     if (huart->ErrorCode != HAL_UART_ERROR_NONE)
2043:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
2044:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       /* UART in mode Receiver -----------------------------------------------*/
2045:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
2046:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       {
2047:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         UART_Receive_IT(huart);
2048:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       }
2049:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2050:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       /* If Overrun error occurs, or if any error occurs in DMA mode reception,
2051:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****          consider error as blocking */
2052:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
2053:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
2054:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       {
2055:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         /* Blocking error : transfer is aborted
2056:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****            Set the UART state ready to be able to start again the process,
2057:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****            Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
2058:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         UART_EndRxTransfer(huart);
2059:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2060:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         /* Disable the UART DMA Rx request if enabled */
2061:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
2062:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         {
2063:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****           CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
2064:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2065:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****           /* Abort the UART DMA Rx channel */
2066:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****           if (huart->hdmarx != NULL)
2067:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****           {
2068:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****             /* Set the UART DMA Abort callback :
2069:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****                will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
2070:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****             huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
2071:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****             if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
2072:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****             {
2073:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****               /* Call Directly XferAbortCallback function in case of error */
2074:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****               huart->hdmarx->XferAbortCallback(huart->hdmarx);
2075:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****             }
2076:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****           }
2077:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****           else
2078:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****           {
2079:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****             /* Call user error callback */
2080:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2081:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****             /*Call registered error callback*/
2082:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****             huart->ErrorCallback(huart);
2083:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #else
2084:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****             /*Call legacy weak error callback*/
2085:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****             HAL_UART_ErrorCallback(huart);
2086:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
ARM GAS  /tmp/cciBiPGK.s 			page 38


2087:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****           }
2088:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         }
2089:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         else
2090:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         {
2091:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****           /* Call user error callback */
2092:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2093:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****           /*Call registered error callback*/
2094:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****           huart->ErrorCallback(huart);
2095:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #else
2096:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****           /*Call legacy weak error callback*/
2097:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****           HAL_UART_ErrorCallback(huart);
2098:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2099:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         }
2100:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       }
2101:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       else
2102:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       {
2103:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         /* Non Blocking error : transfer could go on.
2104:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****            Error is notified to user through user error callback */
2105:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2106:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         /*Call registered error callback*/
2107:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         huart->ErrorCallback(huart);
2108:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #else
2109:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         /*Call legacy weak error callback*/
2110:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         HAL_UART_ErrorCallback(huart);
2111:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2112:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2113:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         huart->ErrorCode = HAL_UART_ERROR_NONE;
2114:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       }
2115:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
2116:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     return;
2117:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   } /* End if some error occurs */
2118:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2119:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* UART in mode Transmitter ------------------------------------------------*/
2120:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
2121:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
2122:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     UART_Transmit_IT(huart);
2123:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     return;
2124:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
2125:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2126:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* UART in mode Transmitter end --------------------------------------------*/
2127:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
2128:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
2129:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     UART_EndTransmit_IT(huart);
2130:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     return;
2131:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
2132:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
2133:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2134:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
2135:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  Tx Transfer completed callbacks.
2136:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2137:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2138:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval None
2139:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
2140:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
2141:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
2142:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2143:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   UNUSED(huart);
ARM GAS  /tmp/cciBiPGK.s 			page 39


2144:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2145:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****            the HAL_UART_TxCpltCallback could be implemented in the user file
2146:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****    */
2147:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
2148:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2149:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
2150:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  Tx Half Transfer completed callbacks.
2151:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2152:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2153:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval None
2154:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
2155:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** __weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
2156:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
2157:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2158:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   UNUSED(huart);
2159:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2160:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****            the HAL_UART_TxHalfCpltCallback could be implemented in the user file
2161:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****    */
2162:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
2163:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2164:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
2165:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  Rx Transfer completed callbacks.
2166:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2167:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2168:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval None
2169:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
2170:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** __weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
2171:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
2172:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2173:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   UNUSED(huart);
2174:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2175:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****            the HAL_UART_RxCpltCallback could be implemented in the user file
2176:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****    */
2177:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
2178:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2179:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
2180:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  Rx Half Transfer completed callbacks.
2181:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2182:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2183:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval None
2184:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
2185:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** __weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
2186:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
2187:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2188:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   UNUSED(huart);
2189:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2190:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****            the HAL_UART_RxHalfCpltCallback could be implemented in the user file
2191:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****    */
2192:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
2193:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2194:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
2195:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  UART error callbacks.
2196:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2197:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2198:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval None
2199:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
2200:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
ARM GAS  /tmp/cciBiPGK.s 			page 40


2201:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
2202:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2203:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   UNUSED(huart);
2204:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2205:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****            the HAL_UART_ErrorCallback could be implemented in the user file
2206:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****    */
2207:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
2208:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2209:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
2210:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  UART Abort Complete callback.
2211:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  huart UART handle.
2212:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval None
2213:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
2214:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** __weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
2215:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
2216:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2217:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   UNUSED(huart);
2218:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2219:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2220:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****             the HAL_UART_AbortCpltCallback can be implemented in the user file.
2221:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****    */
2222:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
2223:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2224:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
2225:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  UART Abort Complete callback.
2226:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  huart UART handle.
2227:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval None
2228:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
2229:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** __weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
2230:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
2231:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2232:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   UNUSED(huart);
2233:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2234:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2235:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****             the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
2236:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****    */
2237:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
2238:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2239:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
2240:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  UART Abort Receive Complete callback.
2241:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  huart UART handle.
2242:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval None
2243:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
2244:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** __weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
2245:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
2246:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2247:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   UNUSED(huart);
2248:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2249:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2250:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****             the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
2251:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****    */
2252:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
2253:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2254:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
2255:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @}
2256:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
2257:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
ARM GAS  /tmp/cciBiPGK.s 			page 41


2258:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group3 Peripheral Control functions
2259:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *  @brief   UART control functions
2260:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *
2261:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** @verbatim
2262:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   ==============================================================================
2263:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****                       ##### Peripheral Control functions #####
2264:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   ==============================================================================
2265:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   [..]
2266:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     This subsection provides a set of functions allowing to control the UART:
2267:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     (+) HAL_LIN_SendBreak() API can be helpful to transmit the break character.
2268:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     (+) HAL_MultiProcessor_EnterMuteMode() API can be helpful to enter the UART in mute mode.
2269:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     (+) HAL_MultiProcessor_ExitMuteMode() API can be helpful to exit the UART mute mode by software
2270:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     (+) HAL_HalfDuplex_EnableTransmitter() API to enable the UART transmitter and disables the UART
2271:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     (+) HAL_HalfDuplex_EnableReceiver() API to enable the UART receiver and disables the UART trans
2272:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2273:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** @endverbatim
2274:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @{
2275:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
2276:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2277:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
2278:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  Transmits break characters.
2279:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2280:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2281:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval HAL status
2282:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
2283:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
2284:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
2285:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Check the parameters */
2286:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
2287:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2288:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Process Locked */
2289:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   __HAL_LOCK(huart);
2290:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2291:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
2292:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2293:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Send break characters */
2294:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_SBK);
2295:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2296:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
2297:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2298:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Process Unlocked */
2299:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
2300:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2301:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   return HAL_OK;
2302:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
2303:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2304:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
2305:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  Enters the UART in mute mode.
2306:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2307:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2308:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval HAL status
2309:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
2310:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart)
2311:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
2312:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Check the parameters */
2313:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
2314:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
ARM GAS  /tmp/cciBiPGK.s 			page 42


2315:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Process Locked */
2316:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   __HAL_LOCK(huart);
2317:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2318:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
2319:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2320:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
2321:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_RWU);
2322:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2323:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
2324:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2325:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Process Unlocked */
2326:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
2327:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2328:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   return HAL_OK;
2329:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
2330:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2331:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
2332:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  Exits the UART mute mode: wake up software.
2333:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2334:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2335:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval HAL status
2336:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
2337:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_ExitMuteMode(UART_HandleTypeDef *huart)
2338:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
2339:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Check the parameters */
2340:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
2341:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2342:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Process Locked */
2343:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   __HAL_LOCK(huart);
2344:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2345:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
2346:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2347:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
2348:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, USART_CR1_RWU);
2349:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2350:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
2351:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2352:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Process Unlocked */
2353:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
2354:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2355:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   return HAL_OK;
2356:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
2357:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2358:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
2359:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  Enables the UART transmitter and disables the UART receiver.
2360:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2361:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2362:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval HAL status
2363:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
2364:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
2365:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
2366:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   uint32_t tmpreg = 0x00U;
2367:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2368:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Process Locked */
2369:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   __HAL_LOCK(huart);
2370:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2371:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
ARM GAS  /tmp/cciBiPGK.s 			page 43


2372:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2373:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
2374:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   tmpreg = huart->Instance->CR1;
2375:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2376:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Clear TE and RE bits */
2377:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
2378:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2379:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
2380:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   tmpreg |= (uint32_t)USART_CR1_TE;
2381:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2382:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Write to USART CR1 */
2383:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
2384:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2385:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
2386:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2387:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Process Unlocked */
2388:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
2389:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2390:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   return HAL_OK;
2391:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
2392:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2393:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
2394:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  Enables the UART receiver and disables the UART transmitter.
2395:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2396:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2397:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval HAL status
2398:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
2399:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
2400:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
2401:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   uint32_t tmpreg = 0x00U;
2402:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2403:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Process Locked */
2404:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   __HAL_LOCK(huart);
2405:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2406:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
2407:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2408:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
2409:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   tmpreg = huart->Instance->CR1;
2410:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2411:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Clear TE and RE bits */
2412:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
2413:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2414:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
2415:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   tmpreg |= (uint32_t)USART_CR1_RE;
2416:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2417:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Write to USART CR1 */
2418:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
2419:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2420:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
2421:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2422:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Process Unlocked */
2423:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   __HAL_UNLOCK(huart);
2424:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2425:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   return HAL_OK;
2426:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
2427:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2428:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
ARM GAS  /tmp/cciBiPGK.s 			page 44


2429:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @}
2430:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
2431:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2432:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group4 Peripheral State and Errors functions
2433:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *  @brief   UART State and Errors functions
2434:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *
2435:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** @verbatim
2436:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   ==============================================================================
2437:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****                  ##### Peripheral State and Errors functions #####
2438:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   ==============================================================================
2439:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****  [..]
2440:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****    This subsection provides a set of functions allowing to return the State of
2441:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****    UART communication process, return Peripheral Errors occurred during communication
2442:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****    process
2443:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****    (+) HAL_UART_GetState() API can be helpful to check in run-time the state of the UART peripheral
2444:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****    (+) HAL_UART_GetError() check in run-time errors that could be occurred during communication.
2445:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2446:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** @endverbatim
2447:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @{
2448:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
2449:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2450:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
2451:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  Returns the UART state.
2452:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2453:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2454:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval HAL state
2455:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
2456:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
2457:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
2458:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   uint32_t temp1 = 0x00U, temp2 = 0x00U;
2459:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   temp1 = huart->gState;
2460:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   temp2 = huart->RxState;
2461:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2462:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   return (HAL_UART_StateTypeDef)(temp1 | temp2);
2463:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
2464:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2465:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
2466:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  Return the UART error code
2467:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
2468:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *               the configuration information for the specified UART.
2469:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval UART Error Code
2470:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
2471:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
2472:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
2473:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   return huart->ErrorCode;
2474:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
2475:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2476:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
2477:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @}
2478:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
2479:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2480:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
2481:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @}
2482:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
2483:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2484:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /** @defgroup UART_Private_Functions UART Private Functions
2485:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @{
ARM GAS  /tmp/cciBiPGK.s 			page 45


2486:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
2487:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2488:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
2489:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  Initialize the callbacks to their default values.
2490:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  huart UART handle.
2491:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval none
2492:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
2493:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2494:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
2495:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
2496:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Init the UART Callback settings */
2497:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltC
2498:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallb
2499:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltC
2500:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallb
2501:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallba
2502:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCa
2503:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransm
2504:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiv
2505:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2506:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
2507:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2508:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2509:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
2510:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  DMA UART transmit process complete callback.
2511:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
2512:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
2513:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval None
2514:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
2515:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
2516:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
2517:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2518:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* DMA Normal mode*/
2519:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
2520:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
2521:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->TxXferCount = 0x00U;
2522:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2523:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Disable the DMA transfer for transmit request by setting the DMAT bit
2524:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****        in the UART CR3 register */
2525:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
2526:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2527:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Enable the UART Transmit Complete Interrupt */
2528:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
2529:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2530:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
2531:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* DMA Circular mode */
2532:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   else
2533:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
2534:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2535:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /*Call registered Tx complete callback*/
2536:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->TxCpltCallback(huart);
2537:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #else
2538:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /*Call legacy weak Tx complete callback*/
2539:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     HAL_UART_TxCpltCallback(huart);
2540:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2541:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
2542:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
ARM GAS  /tmp/cciBiPGK.s 			page 46


2543:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2544:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
2545:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief DMA UART transmit process half complete callback
2546:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
2547:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
2548:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval None
2549:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
2550:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
2551:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
2552:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2553:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2554:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2555:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /*Call registered Tx complete callback*/
2556:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->TxHalfCpltCallback(huart);
2557:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #else
2558:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /*Call legacy weak Tx complete callback*/
2559:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   HAL_UART_TxHalfCpltCallback(huart);
2560:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2561:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
2562:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2563:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
2564:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  DMA UART receive process complete callback.
2565:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
2566:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
2567:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval None
2568:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
2569:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
2570:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
2571:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2572:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* DMA Normal mode*/
2573:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
2574:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
2575:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->RxXferCount = 0U;
2576:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2577:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
2578:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
2579:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
2580:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2581:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Disable the DMA transfer for the receiver request by setting the DMAR bit
2582:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****        in the UART CR3 register */
2583:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
2584:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2585:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* At end of Rx process, restore huart->RxState to Ready */
2586:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
2587:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
2588:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2589:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /*Call registered Rx complete callback*/
2590:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->RxCpltCallback(huart);
2591:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #else
2592:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /*Call legacy weak Rx complete callback*/
2593:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   HAL_UART_RxCpltCallback(huart);
2594:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2595:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
2596:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2597:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
2598:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief DMA UART receive process half complete callback
2599:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
ARM GAS  /tmp/cciBiPGK.s 			page 47


2600:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
2601:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval None
2602:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
2603:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
2604:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
2605:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2606:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2607:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2608:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /*Call registered Rx Half complete callback*/
2609:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->RxHalfCpltCallback(huart);
2610:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #else
2611:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /*Call legacy weak Rx Half complete callback*/
2612:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   HAL_UART_RxHalfCpltCallback(huart);
2613:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2614:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
2615:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2616:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
2617:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  DMA UART communication error callback.
2618:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
2619:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
2620:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval None
2621:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
2622:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** static void UART_DMAError(DMA_HandleTypeDef *hdma)
2623:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
2624:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
2625:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2626:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2627:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Stop UART DMA Tx request if ongoing */
2628:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
2629:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
2630:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
2631:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->TxXferCount = 0x00U;
2632:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     UART_EndTxTransfer(huart);
2633:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
2634:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2635:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Stop UART DMA Rx request if ongoing */
2636:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
2637:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
2638:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
2639:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->RxXferCount = 0x00U;
2640:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     UART_EndRxTransfer(huart);
2641:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
2642:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2643:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->ErrorCode |= HAL_UART_ERROR_DMA;
2644:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2645:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /*Call registered error callback*/
2646:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->ErrorCallback(huart);
2647:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #else
2648:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /*Call legacy weak error callback*/
2649:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   HAL_UART_ErrorCallback(huart);
2650:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2651:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
2652:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2653:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
2654:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  This function handles UART Communication Timeout.
2655:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2656:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
ARM GAS  /tmp/cciBiPGK.s 			page 48


2657:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  Flag specifies the UART flag to check.
2658:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  Status The new Flag status (SET or RESET).
2659:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  Tickstart Tick start value
2660:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  Timeout Timeout duration
2661:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval HAL status
2662:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
2663:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, Flag
2664:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
2665:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Wait until flag is set */
2666:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
2667:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
2668:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /* Check for the Timeout */
2669:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     if (Timeout != HAL_MAX_DELAY)
2670:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
2671:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
2672:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       {
2673:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for t
2674:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
2675:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
2676:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2677:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         huart->gState  = HAL_UART_STATE_READY;
2678:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         huart->RxState = HAL_UART_STATE_READY;
2679:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2680:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         /* Process Unlocked */
2681:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         __HAL_UNLOCK(huart);
2682:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2683:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         return HAL_TIMEOUT;
2684:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       }
2685:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
2686:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
2687:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   return HAL_OK;
2688:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
2689:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2690:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
2691:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit compl
2692:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  huart UART handle.
2693:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval None
2694:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
2695:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
2696:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
  25              		.loc 1 2696 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30              	.LVL0:
2697:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
2698:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
  31              		.loc 1 2698 0
  32 0000 0268     		ldr	r2, [r0]
  33 0002 D368     		ldr	r3, [r2, #12]
  34 0004 23F0C003 		bic	r3, r3, #192
  35 0008 D360     		str	r3, [r2, #12]
2699:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2700:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* At end of Tx process, restore huart->gState to Ready */
2701:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
  36              		.loc 1 2701 0
ARM GAS  /tmp/cciBiPGK.s 			page 49


  37 000a 2023     		movs	r3, #32
  38 000c 80F83930 		strb	r3, [r0, #57]
  39 0010 7047     		bx	lr
  40              		.cfi_endproc
  41              	.LFE116:
  43              		.section	.text.UART_EndRxTransfer,"ax",%progbits
  44              		.align	1
  45              		.syntax unified
  46              		.thumb
  47              		.thumb_func
  48              		.fpu softvfp
  50              	UART_EndRxTransfer:
  51              	.LFB117:
2702:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
2703:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2704:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
2705:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception comp
2706:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  huart UART handle.
2707:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval None
2708:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
2709:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
2710:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
  52              		.loc 1 2710 0
  53              		.cfi_startproc
  54              		@ args = 0, pretend = 0, frame = 0
  55              		@ frame_needed = 0, uses_anonymous_args = 0
  56              		@ link register save eliminated.
  57              	.LVL1:
2711:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
2712:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  58              		.loc 1 2712 0
  59 0000 0268     		ldr	r2, [r0]
  60 0002 D368     		ldr	r3, [r2, #12]
  61 0004 23F49073 		bic	r3, r3, #288
  62 0008 D360     		str	r3, [r2, #12]
2713:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
  63              		.loc 1 2713 0
  64 000a 0268     		ldr	r2, [r0]
  65 000c 5369     		ldr	r3, [r2, #20]
  66 000e 23F00103 		bic	r3, r3, #1
  67 0012 5361     		str	r3, [r2, #20]
2714:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2715:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* At end of Rx process, restore huart->RxState to Ready */
2716:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
  68              		.loc 1 2716 0
  69 0014 2023     		movs	r3, #32
  70 0016 80F83A30 		strb	r3, [r0, #58]
  71 001a 7047     		bx	lr
  72              		.cfi_endproc
  73              	.LFE117:
  75              		.section	.text.UART_Transmit_IT,"ax",%progbits
  76              		.align	1
  77              		.syntax unified
  78              		.thumb
  79              		.thumb_func
  80              		.fpu softvfp
  82              	UART_Transmit_IT:
ARM GAS  /tmp/cciBiPGK.s 			page 50


  83              	.LFB123:
2717:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
2718:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2719:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
2720:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  DMA UART communication abort callback, when initiated by HAL services on Error
2721:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *         (To be called at end of DMA Abort procedure following error occurrence).
2722:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
2723:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
2724:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval None
2725:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
2726:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
2727:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
2728:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2729:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
2730:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
2731:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2732:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2733:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /*Call registered error callback*/
2734:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->ErrorCallback(huart);
2735:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #else
2736:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /*Call legacy weak error callback*/
2737:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   HAL_UART_ErrorCallback(huart);
2738:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2739:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
2740:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2741:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
2742:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  DMA UART Tx communication abort callback, when initiated by user
2743:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *         (To be called at end of DMA Tx Abort procedure following user abort request).
2744:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
2745:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *         Abort still ongoing for Rx DMA Handle.
2746:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
2747:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
2748:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval None
2749:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
2750:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
2751:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
2752:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2753:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2754:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->hdmatx->XferAbortCallback = NULL;
2755:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2756:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Check if an Abort process is still ongoing */
2757:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if (huart->hdmarx != NULL)
2758:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
2759:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     if (huart->hdmarx->XferAbortCallback != NULL)
2760:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
2761:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       return;
2762:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
2763:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
2764:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2765:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
2766:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
2767:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
2768:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2769:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Reset ErrorCode */
2770:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
2771:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2772:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Restore huart->gState and huart->RxState to Ready */
ARM GAS  /tmp/cciBiPGK.s 			page 51


2773:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->gState  = HAL_UART_STATE_READY;
2774:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
2775:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2776:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Call user Abort complete callback */
2777:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2778:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Call registered Abort complete callback */
2779:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->AbortCpltCallback(huart);
2780:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #else
2781:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Call legacy weak Abort complete callback */
2782:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   HAL_UART_AbortCpltCallback(huart);
2783:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2784:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
2785:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2786:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
2787:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  DMA UART Rx communication abort callback, when initiated by user
2788:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *         (To be called at end of DMA Rx Abort procedure following user abort request).
2789:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
2790:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *         Abort still ongoing for Tx DMA Handle.
2791:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
2792:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
2793:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval None
2794:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
2795:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
2796:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
2797:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2798:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2799:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->hdmarx->XferAbortCallback = NULL;
2800:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2801:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Check if an Abort process is still ongoing */
2802:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if (huart->hdmatx != NULL)
2803:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
2804:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     if (huart->hdmatx->XferAbortCallback != NULL)
2805:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
2806:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       return;
2807:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
2808:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
2809:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2810:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
2811:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
2812:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
2813:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2814:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Reset ErrorCode */
2815:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
2816:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2817:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Restore huart->gState and huart->RxState to Ready */
2818:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->gState  = HAL_UART_STATE_READY;
2819:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
2820:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2821:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Call user Abort complete callback */
2822:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2823:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Call registered Abort complete callback */
2824:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->AbortCpltCallback(huart);
2825:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #else
2826:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Call legacy weak Abort complete callback */
2827:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   HAL_UART_AbortCpltCallback(huart);
2828:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2829:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
ARM GAS  /tmp/cciBiPGK.s 			page 52


2830:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2831:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
2832:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  DMA UART Tx communication abort callback, when initiated by user by a call to
2833:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *         HAL_UART_AbortTransmit_IT API (Abort only Tx transfer)
2834:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *         (This callback is executed at end of DMA Tx Abort procedure following user abort reques
2835:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *         and leads to user Tx Abort Complete callback execution).
2836:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
2837:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
2838:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval None
2839:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
2840:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
2841:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
2842:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2843:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2844:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
2845:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2846:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Restore huart->gState to Ready */
2847:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
2848:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2849:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Call user Abort complete callback */
2850:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2851:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Call registered Abort Transmit Complete Callback */
2852:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->AbortTransmitCpltCallback(huart);
2853:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #else
2854:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Call legacy weak Abort Transmit Complete Callback */
2855:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   HAL_UART_AbortTransmitCpltCallback(huart);
2856:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2857:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
2858:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2859:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
2860:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  DMA UART Rx communication abort callback, when initiated by user by a call to
2861:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *         HAL_UART_AbortReceive_IT API (Abort only Rx transfer)
2862:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *         (This callback is executed at end of DMA Rx Abort procedure following user abort reques
2863:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *         and leads to user Rx Abort Complete callback execution).
2864:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
2865:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *               the configuration information for the specified DMA module.
2866:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval None
2867:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
2868:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
2869:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
2870:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2871:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2872:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
2873:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2874:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Restore huart->RxState to Ready */
2875:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
2876:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2877:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Call user Abort complete callback */
2878:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2879:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Call registered Abort Receive Complete Callback */
2880:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->AbortReceiveCpltCallback(huart);
2881:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #else
2882:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Call legacy weak Abort Receive Complete Callback */
2883:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   HAL_UART_AbortReceiveCpltCallback(huart);
2884:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2885:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
2886:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
ARM GAS  /tmp/cciBiPGK.s 			page 53


2887:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
2888:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  Sends an amount of data in non blocking mode.
2889:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2890:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2891:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval HAL status
2892:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
2893:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
2894:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
  84              		.loc 1 2894 0
  85              		.cfi_startproc
  86              		@ args = 0, pretend = 0, frame = 0
  87              		@ frame_needed = 0, uses_anonymous_args = 0
  88              		@ link register save eliminated.
  89              	.LVL2:
2895:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   uint16_t *tmp;
2896:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2897:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Check that a Tx process is ongoing */
2898:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_BUSY_TX)
  90              		.loc 1 2898 0
  91 0000 90F83930 		ldrb	r3, [r0, #57]	@ zero_extendqisi2
  92 0004 DBB2     		uxtb	r3, r3
  93 0006 212B     		cmp	r3, #33
  94 0008 01D0     		beq	.L10
2899:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
2900:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     if (huart->Init.WordLength == UART_WORDLENGTH_9B)
2901:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
2902:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       tmp = (uint16_t *) huart->pTxBuffPtr;
2903:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
2904:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       if (huart->Init.Parity == UART_PARITY_NONE)
2905:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       {
2906:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         huart->pTxBuffPtr += 2U;
2907:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       }
2908:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       else
2909:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       {
2910:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         huart->pTxBuffPtr += 1U;
2911:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       }
2912:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
2913:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     else
2914:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
2915:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
2916:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
2917:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2918:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     if (--huart->TxXferCount == 0U)
2919:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
2920:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       /* Disable the UART Transmit Complete Interrupt */
2921:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
2922:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2923:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       /* Enable the UART Transmit Complete Interrupt */
2924:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
2925:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
2926:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     return HAL_OK;
2927:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
2928:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   else
2929:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
2930:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     return HAL_BUSY;
  95              		.loc 1 2930 0
  96 000a 0220     		movs	r0, #2
ARM GAS  /tmp/cciBiPGK.s 			page 54


  97              	.LVL3:
  98 000c 7047     		bx	lr
  99              	.LVL4:
 100              	.L10:
2900:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 101              		.loc 1 2900 0
 102 000e 8368     		ldr	r3, [r0, #8]
 103 0010 B3F5805F 		cmp	r3, #4096
 104 0014 17D0     		beq	.L11
2915:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
 105              		.loc 1 2915 0
 106 0016 0268     		ldr	r2, [r0]
 107 0018 036A     		ldr	r3, [r0, #32]
 108 001a 591C     		adds	r1, r3, #1
 109 001c 0162     		str	r1, [r0, #32]
 110 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 111 0020 5360     		str	r3, [r2, #4]
 112              	.L7:
2918:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 113              		.loc 1 2918 0
 114 0022 C38C     		ldrh	r3, [r0, #38]
 115 0024 9BB2     		uxth	r3, r3
 116 0026 013B     		subs	r3, r3, #1
 117 0028 9BB2     		uxth	r3, r3
 118 002a C384     		strh	r3, [r0, #38]	@ movhi
 119 002c DBB9     		cbnz	r3, .L9
2921:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 120              		.loc 1 2921 0
 121 002e 0268     		ldr	r2, [r0]
 122 0030 D368     		ldr	r3, [r2, #12]
 123 0032 23F08003 		bic	r3, r3, #128
 124 0036 D360     		str	r3, [r2, #12]
2924:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
 125              		.loc 1 2924 0
 126 0038 0268     		ldr	r2, [r0]
 127 003a D368     		ldr	r3, [r2, #12]
 128 003c 43F04003 		orr	r3, r3, #64
 129 0040 D360     		str	r3, [r2, #12]
2926:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
 130              		.loc 1 2926 0
 131 0042 0020     		movs	r0, #0
 132              	.LVL5:
 133 0044 7047     		bx	lr
 134              	.LVL6:
 135              	.L11:
2902:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 136              		.loc 1 2902 0
 137 0046 036A     		ldr	r3, [r0, #32]
 138              	.LVL7:
2903:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       if (huart->Init.Parity == UART_PARITY_NONE)
 139              		.loc 1 2903 0
 140 0048 0268     		ldr	r2, [r0]
 141 004a 1B88     		ldrh	r3, [r3]
 142              	.LVL8:
 143 004c C3F30803 		ubfx	r3, r3, #0, #9
 144 0050 5360     		str	r3, [r2, #4]
 145              	.LVL9:
ARM GAS  /tmp/cciBiPGK.s 			page 55


2904:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       {
 146              		.loc 1 2904 0
 147 0052 0369     		ldr	r3, [r0, #16]
 148 0054 1BB9     		cbnz	r3, .L6
2906:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       }
 149              		.loc 1 2906 0
 150 0056 036A     		ldr	r3, [r0, #32]
 151 0058 0233     		adds	r3, r3, #2
 152 005a 0362     		str	r3, [r0, #32]
 153 005c E1E7     		b	.L7
 154              	.L6:
2910:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       }
 155              		.loc 1 2910 0
 156 005e 036A     		ldr	r3, [r0, #32]
 157 0060 0133     		adds	r3, r3, #1
 158 0062 0362     		str	r3, [r0, #32]
 159 0064 DDE7     		b	.L7
 160              	.L9:
2926:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
 161              		.loc 1 2926 0
 162 0066 0020     		movs	r0, #0
 163              	.LVL10:
2931:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
2932:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
 164              		.loc 1 2932 0
 165 0068 7047     		bx	lr
 166              		.cfi_endproc
 167              	.LFE123:
 169              		.section	.text.UART_SetConfig,"ax",%progbits
 170              		.align	1
 171              		.syntax unified
 172              		.thumb
 173              		.thumb_func
 174              		.fpu softvfp
 176              	UART_SetConfig:
 177              	.LFB126:
2933:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2934:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
2935:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  Wraps up transmission in non blocking mode.
2936:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2937:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2938:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval HAL status
2939:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
2940:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
2941:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
2942:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Disable the UART Transmit Complete Interrupt */
2943:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
2944:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2945:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Tx process is ended, restore huart->gState to Ready */
2946:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
2947:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2948:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2949:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /*Call registered Tx complete callback*/
2950:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->TxCpltCallback(huart);
2951:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #else
2952:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /*Call legacy weak Tx complete callback*/
2953:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   HAL_UART_TxCpltCallback(huart);
ARM GAS  /tmp/cciBiPGK.s 			page 56


2954:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2955:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2956:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   return HAL_OK;
2957:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
2958:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2959:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
2960:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  Receives an amount of data in non blocking mode
2961:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
2962:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2963:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval HAL status
2964:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
2965:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
2966:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
2967:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   uint16_t *tmp;
2968:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2969:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Check that a Rx process is ongoing */
2970:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_BUSY_RX)
2971:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
2972:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     if (huart->Init.WordLength == UART_WORDLENGTH_9B)
2973:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
2974:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       tmp = (uint16_t *) huart->pRxBuffPtr;
2975:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       if (huart->Init.Parity == UART_PARITY_NONE)
2976:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       {
2977:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
2978:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         huart->pRxBuffPtr += 2U;
2979:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       }
2980:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       else
2981:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       {
2982:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
2983:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         huart->pRxBuffPtr += 1U;
2984:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       }
2985:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
2986:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     else
2987:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
2988:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       if (huart->Init.Parity == UART_PARITY_NONE)
2989:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       {
2990:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
2991:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       }
2992:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       else
2993:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       {
2994:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
2995:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       }
2996:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
2997:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
2998:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     if (--huart->RxXferCount == 0U)
2999:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
3000:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       /* Disable the UART Data Register not empty Interrupt */
3001:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
3002:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
3003:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       /* Disable the UART Parity Error Interrupt */
3004:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
3005:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
3006:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
3007:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
3008:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
3009:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       /* Rx process is completed, restore huart->RxState to Ready */
3010:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       huart->RxState = HAL_UART_STATE_READY;
ARM GAS  /tmp/cciBiPGK.s 			page 57


3011:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
3012:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3013:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       /*Call registered Rx complete callback*/
3014:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       huart->RxCpltCallback(huart);
3015:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #else
3016:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       /*Call legacy weak Rx complete callback*/
3017:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       HAL_UART_RxCpltCallback(huart);
3018:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3019:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
3020:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       return HAL_OK;
3021:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
3022:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     return HAL_OK;
3023:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
3024:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   else
3025:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
3026:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     return HAL_BUSY;
3027:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
3028:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
3029:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
3030:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** /**
3031:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @brief  Configures the UART peripheral.
3032:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
3033:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   *                the configuration information for the specified UART module.
3034:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   * @retval None
3035:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   */
3036:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** static void UART_SetConfig(UART_HandleTypeDef *huart)
3037:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** {
 178              		.loc 1 3037 0
 179              		.cfi_startproc
 180              		@ args = 0, pretend = 0, frame = 0
 181              		@ frame_needed = 0, uses_anonymous_args = 0
 182              	.LVL11:
 183 0000 38B5     		push	{r3, r4, r5, lr}
 184              	.LCFI0:
 185              		.cfi_def_cfa_offset 16
 186              		.cfi_offset 3, -16
 187              		.cfi_offset 4, -12
 188              		.cfi_offset 5, -8
 189              		.cfi_offset 14, -4
 190 0002 0446     		mov	r4, r0
3038:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   uint32_t tmpreg;
3039:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   uint32_t pclk;
3040:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
3041:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Check the parameters */
3042:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
3043:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
3044:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   assert_param(IS_UART_PARITY(huart->Init.Parity));
3045:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   assert_param(IS_UART_MODE(huart->Init.Mode));
3046:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
3047:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /*-------------------------- USART CR2 Configuration -----------------------*/
3048:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Configure the UART Stop Bits: Set STOP[13:12] bits
3049:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****      according to huart->Init.StopBits value */
3050:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 191              		.loc 1 3050 0
 192 0004 0268     		ldr	r2, [r0]
 193 0006 1369     		ldr	r3, [r2, #16]
 194 0008 23F44053 		bic	r3, r3, #12288
ARM GAS  /tmp/cciBiPGK.s 			page 58


 195 000c C168     		ldr	r1, [r0, #12]
 196 000e 0B43     		orrs	r3, r3, r1
 197 0010 1361     		str	r3, [r2, #16]
3051:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
3052:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
3053:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Configure the UART Word Length, Parity and mode:
3054:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****      Set the M bits according to huart->Init.WordLength value
3055:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****      Set PCE and PS bits according to huart->Init.Parity value
3056:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****      Set TE and RE bits according to huart->Init.Mode value
3057:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****      Set OVER8 bit according to huart->Init.OverSampling value */
3058:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
3059:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.O
 198              		.loc 1 3059 0
 199 0012 8368     		ldr	r3, [r0, #8]
 200 0014 0269     		ldr	r2, [r0, #16]
 201 0016 1343     		orrs	r3, r3, r2
 202 0018 4269     		ldr	r2, [r0, #20]
 203 001a 1343     		orrs	r3, r3, r2
 204 001c C269     		ldr	r2, [r0, #28]
 205 001e 1343     		orrs	r3, r3, r2
 206              	.LVL12:
3060:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR1,
 207              		.loc 1 3060 0
 208 0020 0168     		ldr	r1, [r0]
 209 0022 CA68     		ldr	r2, [r1, #12]
 210 0024 22F41642 		bic	r2, r2, #38400
 211 0028 22F00C02 		bic	r2, r2, #12
 212 002c 1343     		orrs	r3, r3, r2
 213              	.LVL13:
 214 002e CB60     		str	r3, [r1, #12]
 215              	.LVL14:
3061:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****              (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | 
3062:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****              tmpreg);
3063:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
3064:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /*-------------------------- USART CR3 Configuration -----------------------*/
3065:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
3066:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 216              		.loc 1 3066 0
 217 0030 0268     		ldr	r2, [r0]
 218 0032 5369     		ldr	r3, [r2, #20]
 219 0034 23F44073 		bic	r3, r3, #768
 220 0038 8169     		ldr	r1, [r0, #24]
 221 003a 0B43     		orrs	r3, r3, r1
 222 003c 5361     		str	r3, [r2, #20]
3067:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
3068:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Check the Over Sampling */
3069:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 223              		.loc 1 3069 0
 224 003e C369     		ldr	r3, [r0, #28]
 225 0040 B3F5004F 		cmp	r3, #32768
 226 0044 23D0     		beq	.L18
3070:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
3071:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /*------- UART-associated USART registers setting : BRR Configuration ------*/
3072:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     if((huart->Instance == USART1))
3073:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
3074:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       pclk = HAL_RCC_GetPCLK2Freq();
3075:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
ARM GAS  /tmp/cciBiPGK.s 			page 59


3076:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
3077:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     else
3078:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
3079:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       pclk = HAL_RCC_GetPCLK1Freq();
3080:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
3081:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
3082:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
3083:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   else
3084:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
3085:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     /*------- UART-associated USART registers setting : BRR Configuration ------*/
3086:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     if((huart->Instance == USART1))
 227              		.loc 1 3086 0
 228 0046 0268     		ldr	r2, [r0]
 229 0048 444B     		ldr	r3, .L21
 230 004a 9A42     		cmp	r2, r3
 231 004c 65D0     		beq	.L19
3087:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
3088:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       pclk = HAL_RCC_GetPCLK2Freq();
3089:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
3090:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
3091:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     else
3092:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
3093:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       pclk = HAL_RCC_GetPCLK1Freq();
 232              		.loc 1 3093 0
 233 004e FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 234              	.LVL15:
3094:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 235              		.loc 1 3094 0
 236 0052 2168     		ldr	r1, [r4]
 237 0054 00EB8000 		add	r0, r0, r0, lsl #2
 238              	.LVL16:
 239 0058 00EB8000 		add	r0, r0, r0, lsl #2
 240 005c 6368     		ldr	r3, [r4, #4]
 241 005e 9B00     		lsls	r3, r3, #2
 242 0060 B0FBF3F0 		udiv	r0, r0, r3
 243 0064 3E4D     		ldr	r5, .L21+4
 244 0066 A5FB0032 		umull	r3, r2, r5, r0
 245 006a 5409     		lsrs	r4, r2, #5
 246              	.LVL17:
 247 006c 6422     		movs	r2, #100
 248 006e 02FB1402 		mls	r2, r2, r4, r0
 249 0072 1301     		lsls	r3, r2, #4
 250 0074 3233     		adds	r3, r3, #50
 251 0076 A5FB0323 		umull	r2, r3, r5, r3
 252 007a 5B09     		lsrs	r3, r3, #5
 253 007c 03F0F002 		and	r2, r3, #240
 254 0080 02EB0412 		add	r2, r2, r4, lsl #4
 255 0084 03F00F03 		and	r3, r3, #15
 256 0088 1344     		add	r3, r3, r2
 257 008a 8B60     		str	r3, [r1, #8]
 258 008c 38BD     		pop	{r3, r4, r5, pc}
 259              	.LVL18:
 260              	.L18:
3072:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 261              		.loc 1 3072 0
 262 008e 0268     		ldr	r2, [r0]
 263 0090 324B     		ldr	r3, .L21
ARM GAS  /tmp/cciBiPGK.s 			page 60


 264 0092 9A42     		cmp	r2, r3
 265 0094 20D0     		beq	.L20
3079:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 266              		.loc 1 3079 0
 267 0096 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 268              	.LVL19:
3080:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
 269              		.loc 1 3080 0
 270 009a 2168     		ldr	r1, [r4]
 271 009c 00EB8000 		add	r0, r0, r0, lsl #2
 272              	.LVL20:
 273 00a0 00EB8000 		add	r0, r0, r0, lsl #2
 274 00a4 6368     		ldr	r3, [r4, #4]
 275 00a6 5B00     		lsls	r3, r3, #1
 276 00a8 B0FBF3F0 		udiv	r0, r0, r3
 277 00ac 2C4D     		ldr	r5, .L21+4
 278 00ae A5FB0032 		umull	r3, r2, r5, r0
 279 00b2 5409     		lsrs	r4, r2, #5
 280              	.LVL21:
 281 00b4 6422     		movs	r2, #100
 282 00b6 02FB1402 		mls	r2, r2, r4, r0
 283 00ba D300     		lsls	r3, r2, #3
 284 00bc 3233     		adds	r3, r3, #50
 285 00be A5FB0323 		umull	r2, r3, r5, r3
 286 00c2 5B09     		lsrs	r3, r3, #5
 287 00c4 5A00     		lsls	r2, r3, #1
 288 00c6 02F4F872 		and	r2, r2, #496
 289 00ca 02EB0412 		add	r2, r2, r4, lsl #4
 290 00ce 03F00703 		and	r3, r3, #7
 291 00d2 1344     		add	r3, r3, r2
 292 00d4 8B60     		str	r3, [r1, #8]
 293 00d6 38BD     		pop	{r3, r4, r5, pc}
 294              	.LVL22:
 295              	.L20:
3074:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 296              		.loc 1 3074 0
 297 00d8 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 298              	.LVL23:
3075:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
 299              		.loc 1 3075 0
 300 00dc 2168     		ldr	r1, [r4]
 301 00de 00EB8000 		add	r0, r0, r0, lsl #2
 302              	.LVL24:
 303 00e2 00EB8000 		add	r0, r0, r0, lsl #2
 304 00e6 6368     		ldr	r3, [r4, #4]
 305 00e8 5B00     		lsls	r3, r3, #1
 306 00ea B0FBF3F0 		udiv	r0, r0, r3
 307 00ee 1C4D     		ldr	r5, .L21+4
 308 00f0 A5FB0032 		umull	r3, r2, r5, r0
 309 00f4 5409     		lsrs	r4, r2, #5
 310              	.LVL25:
 311 00f6 6423     		movs	r3, #100
 312 00f8 03FB1403 		mls	r3, r3, r4, r0
 313 00fc DB00     		lsls	r3, r3, #3
 314 00fe 3233     		adds	r3, r3, #50
 315 0100 A5FB0323 		umull	r2, r3, r5, r3
 316 0104 5B09     		lsrs	r3, r3, #5
ARM GAS  /tmp/cciBiPGK.s 			page 61


 317 0106 5A00     		lsls	r2, r3, #1
 318 0108 02F4F872 		and	r2, r2, #496
 319 010c 02EB0412 		add	r2, r2, r4, lsl #4
 320 0110 03F00703 		and	r3, r3, #7
 321 0114 1344     		add	r3, r3, r2
 322 0116 8B60     		str	r3, [r1, #8]
 323 0118 38BD     		pop	{r3, r4, r5, pc}
 324              	.LVL26:
 325              	.L19:
3088:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 326              		.loc 1 3088 0
 327 011a FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 328              	.LVL27:
3089:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
 329              		.loc 1 3089 0
 330 011e 2168     		ldr	r1, [r4]
 331 0120 00EB8000 		add	r0, r0, r0, lsl #2
 332              	.LVL28:
 333 0124 00EB8000 		add	r0, r0, r0, lsl #2
 334 0128 6368     		ldr	r3, [r4, #4]
 335 012a 9B00     		lsls	r3, r3, #2
 336 012c B0FBF3F0 		udiv	r0, r0, r3
 337 0130 0B4D     		ldr	r5, .L21+4
 338 0132 A5FB0032 		umull	r3, r2, r5, r0
 339 0136 5409     		lsrs	r4, r2, #5
 340              	.LVL29:
 341 0138 6422     		movs	r2, #100
 342 013a 02FB1402 		mls	r2, r2, r4, r0
 343 013e 1301     		lsls	r3, r2, #4
 344 0140 3233     		adds	r3, r3, #50
 345 0142 A5FB0323 		umull	r2, r3, r5, r3
 346 0146 5B09     		lsrs	r3, r3, #5
 347 0148 03F0F002 		and	r2, r3, #240
 348 014c 02EB0412 		add	r2, r2, r4, lsl #4
 349 0150 03F00F03 		and	r3, r3, #15
 350 0154 1344     		add	r3, r3, r2
 351 0156 8B60     		str	r3, [r1, #8]
 352 0158 38BD     		pop	{r3, r4, r5, pc}
 353              	.L22:
 354 015a 00BF     		.align	2
 355              	.L21:
 356 015c 00380140 		.word	1073821696
 357 0160 1F85EB51 		.word	1374389535
 358              		.cfi_endproc
 359              	.LFE126:
 361              		.section	.text.UART_WaitOnFlagUntilTimeout,"ax",%progbits
 362              		.align	1
 363              		.syntax unified
 364              		.thumb
 365              		.thumb_func
 366              		.fpu softvfp
 368              	UART_WaitOnFlagUntilTimeout:
 369              	.LFB115:
2664:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Wait until flag is set */
 370              		.loc 1 2664 0
 371              		.cfi_startproc
 372              		@ args = 4, pretend = 0, frame = 0
ARM GAS  /tmp/cciBiPGK.s 			page 62


 373              		@ frame_needed = 0, uses_anonymous_args = 0
 374              	.LVL30:
 375 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 376              	.LCFI1:
 377              		.cfi_def_cfa_offset 24
 378              		.cfi_offset 4, -24
 379              		.cfi_offset 5, -20
 380              		.cfi_offset 6, -16
 381              		.cfi_offset 7, -12
 382              		.cfi_offset 8, -8
 383              		.cfi_offset 14, -4
 384 0004 0546     		mov	r5, r0
 385 0006 0F46     		mov	r7, r1
 386 0008 1646     		mov	r6, r2
 387 000a 9846     		mov	r8, r3
 388 000c 069C     		ldr	r4, [sp, #24]
 389              	.LVL31:
 390              	.L25:
2666:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 391              		.loc 1 2666 0
 392 000e 2B68     		ldr	r3, [r5]
 393 0010 1B68     		ldr	r3, [r3]
 394 0012 37EA0303 		bics	r3, r7, r3
 395 0016 0CBF     		ite	eq
 396 0018 0123     		moveq	r3, #1
 397 001a 0023     		movne	r3, #0
 398 001c B342     		cmp	r3, r6
 399 001e 1ED1     		bne	.L30
2669:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 400              		.loc 1 2669 0
 401 0020 B4F1FF3F 		cmp	r4, #-1
 402 0024 F3D0     		beq	.L25
2671:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       {
 403              		.loc 1 2671 0
 404 0026 2CB1     		cbz	r4, .L26
2671:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       {
 405              		.loc 1 2671 0 is_stmt 0 discriminator 1
 406 0028 FFF7FEFF 		bl	HAL_GetTick
 407              	.LVL32:
 408 002c A0EB0800 		sub	r0, r0, r8
 409 0030 8442     		cmp	r4, r0
 410 0032 ECD2     		bcs	.L25
 411              	.L26:
2674:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 412              		.loc 1 2674 0 is_stmt 1
 413 0034 2A68     		ldr	r2, [r5]
 414 0036 D368     		ldr	r3, [r2, #12]
 415 0038 23F4D073 		bic	r3, r3, #416
 416 003c D360     		str	r3, [r2, #12]
2675:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 417              		.loc 1 2675 0
 418 003e 2A68     		ldr	r2, [r5]
 419 0040 5369     		ldr	r3, [r2, #20]
 420 0042 23F00103 		bic	r3, r3, #1
 421 0046 5361     		str	r3, [r2, #20]
2677:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         huart->RxState = HAL_UART_STATE_READY;
 422              		.loc 1 2677 0
ARM GAS  /tmp/cciBiPGK.s 			page 63


 423 0048 2023     		movs	r3, #32
 424 004a 85F83930 		strb	r3, [r5, #57]
2678:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 425              		.loc 1 2678 0
 426 004e 85F83A30 		strb	r3, [r5, #58]
2681:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 427              		.loc 1 2681 0
 428 0052 0023     		movs	r3, #0
 429 0054 85F83830 		strb	r3, [r5, #56]
2683:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       }
 430              		.loc 1 2683 0
 431 0058 0320     		movs	r0, #3
 432 005a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 433              	.LVL33:
 434              	.L30:
2687:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
 435              		.loc 1 2687 0
 436 005e 0020     		movs	r0, #0
2688:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 437              		.loc 1 2688 0
 438 0060 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 439              		.cfi_endproc
 440              	.LFE115:
 442              		.section	.text.HAL_UART_MspInit,"ax",%progbits
 443              		.align	1
 444              		.weak	HAL_UART_MspInit
 445              		.syntax unified
 446              		.thumb
 447              		.thumb_func
 448              		.fpu softvfp
 450              	HAL_UART_MspInit:
 451              	.LFB77:
 664:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 452              		.loc 1 664 0
 453              		.cfi_startproc
 454              		@ args = 0, pretend = 0, frame = 0
 455              		@ frame_needed = 0, uses_anonymous_args = 0
 456              		@ link register save eliminated.
 457              	.LVL34:
 458 0000 7047     		bx	lr
 459              		.cfi_endproc
 460              	.LFE77:
 462              		.section	.text.HAL_UART_Init,"ax",%progbits
 463              		.align	1
 464              		.global	HAL_UART_Init
 465              		.syntax unified
 466              		.thumb
 467              		.thumb_func
 468              		.fpu softvfp
 470              	HAL_UART_Init:
 471              	.LFB72:
 314:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Check the UART handle allocation */
 472              		.loc 1 314 0
 473              		.cfi_startproc
 474              		@ args = 0, pretend = 0, frame = 0
 475              		@ frame_needed = 0, uses_anonymous_args = 0
 476              	.LVL35:
ARM GAS  /tmp/cciBiPGK.s 			page 64


 316:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 477              		.loc 1 316 0
 478 0000 58B3     		cbz	r0, .L35
 314:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Check the UART handle allocation */
 479              		.loc 1 314 0
 480 0002 10B5     		push	{r4, lr}
 481              	.LCFI2:
 482              		.cfi_def_cfa_offset 8
 483              		.cfi_offset 4, -8
 484              		.cfi_offset 14, -4
 485 0004 0446     		mov	r4, r0
 335:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 486              		.loc 1 335 0
 487 0006 90F83930 		ldrb	r3, [r0, #57]	@ zero_extendqisi2
 488 000a 0BB3     		cbz	r3, .L40
 489              	.LVL36:
 490              	.L34:
 356:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 491              		.loc 1 356 0
 492 000c 2423     		movs	r3, #36
 493 000e 84F83930 		strb	r3, [r4, #57]
 359:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 494              		.loc 1 359 0
 495 0012 2268     		ldr	r2, [r4]
 496 0014 D368     		ldr	r3, [r2, #12]
 497 0016 23F40053 		bic	r3, r3, #8192
 498 001a D360     		str	r3, [r2, #12]
 362:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 499              		.loc 1 362 0
 500 001c 2046     		mov	r0, r4
 501 001e FFF7FEFF 		bl	UART_SetConfig
 502              	.LVL37:
 367:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 503              		.loc 1 367 0
 504 0022 2268     		ldr	r2, [r4]
 505 0024 1369     		ldr	r3, [r2, #16]
 506 0026 23F49043 		bic	r3, r3, #18432
 507 002a 1361     		str	r3, [r2, #16]
 368:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 508              		.loc 1 368 0
 509 002c 2268     		ldr	r2, [r4]
 510 002e 5369     		ldr	r3, [r2, #20]
 511 0030 23F02A03 		bic	r3, r3, #42
 512 0034 5361     		str	r3, [r2, #20]
 371:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 513              		.loc 1 371 0
 514 0036 2268     		ldr	r2, [r4]
 515 0038 D368     		ldr	r3, [r2, #12]
 516 003a 43F40053 		orr	r3, r3, #8192
 517 003e D360     		str	r3, [r2, #12]
 374:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 518              		.loc 1 374 0
 519 0040 0020     		movs	r0, #0
 520 0042 E063     		str	r0, [r4, #60]
 375:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 521              		.loc 1 375 0
 522 0044 2023     		movs	r3, #32
ARM GAS  /tmp/cciBiPGK.s 			page 65


 523 0046 84F83930 		strb	r3, [r4, #57]
 376:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 524              		.loc 1 376 0
 525 004a 84F83A30 		strb	r3, [r4, #58]
 378:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
 526              		.loc 1 378 0
 527 004e 10BD     		pop	{r4, pc}
 528              	.LVL38:
 529              	.L40:
 338:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 530              		.loc 1 338 0
 531 0050 80F83830 		strb	r3, [r0, #56]
 352:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 532              		.loc 1 352 0
 533 0054 FFF7FEFF 		bl	HAL_UART_MspInit
 534              	.LVL39:
 535 0058 D8E7     		b	.L34
 536              	.LVL40:
 537              	.L35:
 538              	.LCFI3:
 539              		.cfi_def_cfa_offset 0
 540              		.cfi_restore 4
 541              		.cfi_restore 14
 318:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
 542              		.loc 1 318 0
 543 005a 0120     		movs	r0, #1
 544              	.LVL41:
 545 005c 7047     		bx	lr
 546              		.cfi_endproc
 547              	.LFE72:
 549              		.section	.text.HAL_HalfDuplex_Init,"ax",%progbits
 550              		.align	1
 551              		.global	HAL_HalfDuplex_Init
 552              		.syntax unified
 553              		.thumb
 554              		.thumb_func
 555              		.fpu softvfp
 557              	HAL_HalfDuplex_Init:
 558              	.LFB73:
 389:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Check the UART handle allocation */
 559              		.loc 1 389 0
 560              		.cfi_startproc
 561              		@ args = 0, pretend = 0, frame = 0
 562              		@ frame_needed = 0, uses_anonymous_args = 0
 563              	.LVL42:
 391:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 564              		.loc 1 391 0
 565 0000 0028     		cmp	r0, #0
 566 0002 30D0     		beq	.L44
 389:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Check the UART handle allocation */
 567              		.loc 1 389 0
 568 0004 10B5     		push	{r4, lr}
 569              	.LCFI4:
 570              		.cfi_def_cfa_offset 8
 571              		.cfi_offset 4, -8
 572              		.cfi_offset 14, -4
 573 0006 0446     		mov	r4, r0
ARM GAS  /tmp/cciBiPGK.s 			page 66


 401:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 574              		.loc 1 401 0
 575 0008 90F83930 		ldrb	r3, [r0, #57]	@ zero_extendqisi2
 576 000c 33B3     		cbz	r3, .L49
 577              	.LVL43:
 578              	.L43:
 422:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 579              		.loc 1 422 0
 580 000e 2423     		movs	r3, #36
 581 0010 84F83930 		strb	r3, [r4, #57]
 425:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 582              		.loc 1 425 0
 583 0014 2268     		ldr	r2, [r4]
 584 0016 D368     		ldr	r3, [r2, #12]
 585 0018 23F40053 		bic	r3, r3, #8192
 586 001c D360     		str	r3, [r2, #12]
 428:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 587              		.loc 1 428 0
 588 001e 2046     		mov	r0, r4
 589 0020 FFF7FEFF 		bl	UART_SetConfig
 590              	.LVL44:
 433:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 591              		.loc 1 433 0
 592 0024 2268     		ldr	r2, [r4]
 593 0026 1369     		ldr	r3, [r2, #16]
 594 0028 23F49043 		bic	r3, r3, #18432
 595 002c 1361     		str	r3, [r2, #16]
 434:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 596              		.loc 1 434 0
 597 002e 2268     		ldr	r2, [r4]
 598 0030 5369     		ldr	r3, [r2, #20]
 599 0032 23F02203 		bic	r3, r3, #34
 600 0036 5361     		str	r3, [r2, #20]
 437:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 601              		.loc 1 437 0
 602 0038 2268     		ldr	r2, [r4]
 603 003a 5369     		ldr	r3, [r2, #20]
 604 003c 43F00803 		orr	r3, r3, #8
 605 0040 5361     		str	r3, [r2, #20]
 440:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 606              		.loc 1 440 0
 607 0042 2268     		ldr	r2, [r4]
 608 0044 D368     		ldr	r3, [r2, #12]
 609 0046 43F40053 		orr	r3, r3, #8192
 610 004a D360     		str	r3, [r2, #12]
 443:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 611              		.loc 1 443 0
 612 004c 0020     		movs	r0, #0
 613 004e E063     		str	r0, [r4, #60]
 444:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 614              		.loc 1 444 0
 615 0050 2023     		movs	r3, #32
 616 0052 84F83930 		strb	r3, [r4, #57]
 445:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 617              		.loc 1 445 0
 618 0056 84F83A30 		strb	r3, [r4, #58]
 447:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
ARM GAS  /tmp/cciBiPGK.s 			page 67


 619              		.loc 1 447 0
 620 005a 10BD     		pop	{r4, pc}
 621              	.LVL45:
 622              	.L49:
 404:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 623              		.loc 1 404 0
 624 005c 80F83830 		strb	r3, [r0, #56]
 418:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 625              		.loc 1 418 0
 626 0060 FFF7FEFF 		bl	HAL_UART_MspInit
 627              	.LVL46:
 628 0064 D3E7     		b	.L43
 629              	.LVL47:
 630              	.L44:
 631              	.LCFI5:
 632              		.cfi_def_cfa_offset 0
 633              		.cfi_restore 4
 634              		.cfi_restore 14
 393:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
 635              		.loc 1 393 0
 636 0066 0120     		movs	r0, #1
 637              	.LVL48:
 638 0068 7047     		bx	lr
 639              		.cfi_endproc
 640              	.LFE73:
 642              		.section	.text.HAL_LIN_Init,"ax",%progbits
 643              		.align	1
 644              		.global	HAL_LIN_Init
 645              		.syntax unified
 646              		.thumb
 647              		.thumb_func
 648              		.fpu softvfp
 650              	HAL_LIN_Init:
 651              	.LFB74:
 462:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Check the UART handle allocation */
 652              		.loc 1 462 0
 653              		.cfi_startproc
 654              		@ args = 0, pretend = 0, frame = 0
 655              		@ frame_needed = 0, uses_anonymous_args = 0
 656              	.LVL49:
 464:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 657              		.loc 1 464 0
 658 0000 0028     		cmp	r0, #0
 659 0002 3BD0     		beq	.L53
 462:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Check the UART handle allocation */
 660              		.loc 1 462 0
 661 0004 38B5     		push	{r3, r4, r5, lr}
 662              	.LCFI6:
 663              		.cfi_def_cfa_offset 16
 664              		.cfi_offset 3, -16
 665              		.cfi_offset 4, -12
 666              		.cfi_offset 5, -8
 667              		.cfi_offset 14, -4
 668 0006 0446     		mov	r4, r0
 669 0008 0D46     		mov	r5, r1
 477:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 670              		.loc 1 477 0
ARM GAS  /tmp/cciBiPGK.s 			page 68


 671 000a 90F83930 		ldrb	r3, [r0, #57]	@ zero_extendqisi2
 672 000e 002B     		cmp	r3, #0
 673 0010 2FD0     		beq	.L58
 674              	.LVL50:
 675              	.L52:
 498:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 676              		.loc 1 498 0
 677 0012 2423     		movs	r3, #36
 678 0014 84F83930 		strb	r3, [r4, #57]
 501:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 679              		.loc 1 501 0
 680 0018 2268     		ldr	r2, [r4]
 681 001a D368     		ldr	r3, [r2, #12]
 682 001c 23F40053 		bic	r3, r3, #8192
 683 0020 D360     		str	r3, [r2, #12]
 504:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 684              		.loc 1 504 0
 685 0022 2046     		mov	r0, r4
 686 0024 FFF7FEFF 		bl	UART_SetConfig
 687              	.LVL51:
 509:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 688              		.loc 1 509 0
 689 0028 2268     		ldr	r2, [r4]
 690 002a 1369     		ldr	r3, [r2, #16]
 691 002c 23F40063 		bic	r3, r3, #2048
 692 0030 1361     		str	r3, [r2, #16]
 510:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 693              		.loc 1 510 0
 694 0032 2268     		ldr	r2, [r4]
 695 0034 5369     		ldr	r3, [r2, #20]
 696 0036 23F02A03 		bic	r3, r3, #42
 697 003a 5361     		str	r3, [r2, #20]
 513:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 698              		.loc 1 513 0
 699 003c 2268     		ldr	r2, [r4]
 700 003e 1369     		ldr	r3, [r2, #16]
 701 0040 43F48043 		orr	r3, r3, #16384
 702 0044 1361     		str	r3, [r2, #16]
 516:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR2, BreakDetectLength);
 703              		.loc 1 516 0
 704 0046 2268     		ldr	r2, [r4]
 705 0048 1369     		ldr	r3, [r2, #16]
 706 004a 23F02003 		bic	r3, r3, #32
 707 004e 1361     		str	r3, [r2, #16]
 517:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 708              		.loc 1 517 0
 709 0050 2368     		ldr	r3, [r4]
 710 0052 1969     		ldr	r1, [r3, #16]
 711 0054 0D43     		orrs	r5, r5, r1
 712              	.LVL52:
 713 0056 1D61     		str	r5, [r3, #16]
 520:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 714              		.loc 1 520 0
 715 0058 2268     		ldr	r2, [r4]
 716 005a D368     		ldr	r3, [r2, #12]
 717 005c 43F40053 		orr	r3, r3, #8192
 718 0060 D360     		str	r3, [r2, #12]
ARM GAS  /tmp/cciBiPGK.s 			page 69


 523:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 719              		.loc 1 523 0
 720 0062 0020     		movs	r0, #0
 721 0064 E063     		str	r0, [r4, #60]
 524:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 722              		.loc 1 524 0
 723 0066 2023     		movs	r3, #32
 724 0068 84F83930 		strb	r3, [r4, #57]
 525:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 725              		.loc 1 525 0
 726 006c 84F83A30 		strb	r3, [r4, #58]
 527:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
 727              		.loc 1 527 0
 728 0070 38BD     		pop	{r3, r4, r5, pc}
 729              	.LVL53:
 730              	.L58:
 480:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 731              		.loc 1 480 0
 732 0072 80F83830 		strb	r3, [r0, #56]
 494:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 733              		.loc 1 494 0
 734 0076 FFF7FEFF 		bl	HAL_UART_MspInit
 735              	.LVL54:
 736 007a CAE7     		b	.L52
 737              	.LVL55:
 738              	.L53:
 739              	.LCFI7:
 740              		.cfi_def_cfa_offset 0
 741              		.cfi_restore 3
 742              		.cfi_restore 4
 743              		.cfi_restore 5
 744              		.cfi_restore 14
 466:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
 745              		.loc 1 466 0
 746 007c 0120     		movs	r0, #1
 747              	.LVL56:
 748 007e 7047     		bx	lr
 749              		.cfi_endproc
 750              	.LFE74:
 752              		.section	.text.HAL_MultiProcessor_Init,"ax",%progbits
 753              		.align	1
 754              		.global	HAL_MultiProcessor_Init
 755              		.syntax unified
 756              		.thumb
 757              		.thumb_func
 758              		.fpu softvfp
 760              	HAL_MultiProcessor_Init:
 761              	.LFB75:
 543:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Check the UART handle allocation */
 762              		.loc 1 543 0
 763              		.cfi_startproc
 764              		@ args = 0, pretend = 0, frame = 0
 765              		@ frame_needed = 0, uses_anonymous_args = 0
 766              	.LVL57:
 545:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 767              		.loc 1 545 0
 768 0000 0028     		cmp	r0, #0
ARM GAS  /tmp/cciBiPGK.s 			page 70


 769 0002 40D0     		beq	.L62
 543:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Check the UART handle allocation */
 770              		.loc 1 543 0
 771 0004 70B5     		push	{r4, r5, r6, lr}
 772              	.LCFI8:
 773              		.cfi_def_cfa_offset 16
 774              		.cfi_offset 4, -16
 775              		.cfi_offset 5, -12
 776              		.cfi_offset 6, -8
 777              		.cfi_offset 14, -4
 778 0006 0446     		mov	r4, r0
 779 0008 1646     		mov	r6, r2
 780 000a 0D46     		mov	r5, r1
 559:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 781              		.loc 1 559 0
 782 000c 90F83930 		ldrb	r3, [r0, #57]	@ zero_extendqisi2
 783 0010 002B     		cmp	r3, #0
 784 0012 33D0     		beq	.L67
 785              	.LVL58:
 786              	.L61:
 580:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 787              		.loc 1 580 0
 788 0014 2423     		movs	r3, #36
 789 0016 84F83930 		strb	r3, [r4, #57]
 583:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 790              		.loc 1 583 0
 791 001a 2268     		ldr	r2, [r4]
 792 001c D368     		ldr	r3, [r2, #12]
 793 001e 23F40053 		bic	r3, r3, #8192
 794 0022 D360     		str	r3, [r2, #12]
 586:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 795              		.loc 1 586 0
 796 0024 2046     		mov	r0, r4
 797 0026 FFF7FEFF 		bl	UART_SetConfig
 798              	.LVL59:
 591:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 799              		.loc 1 591 0
 800 002a 2268     		ldr	r2, [r4]
 801 002c 1369     		ldr	r3, [r2, #16]
 802 002e 23F49043 		bic	r3, r3, #18432
 803 0032 1361     		str	r3, [r2, #16]
 592:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 804              		.loc 1 592 0
 805 0034 2268     		ldr	r2, [r4]
 806 0036 5369     		ldr	r3, [r2, #20]
 807 0038 23F02A03 		bic	r3, r3, #42
 808 003c 5361     		str	r3, [r2, #20]
 595:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR2, Address);
 809              		.loc 1 595 0
 810 003e 2268     		ldr	r2, [r4]
 811 0040 1369     		ldr	r3, [r2, #16]
 812 0042 23F00F03 		bic	r3, r3, #15
 813 0046 1361     		str	r3, [r2, #16]
 596:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 814              		.loc 1 596 0
 815 0048 2368     		ldr	r3, [r4]
 816 004a 1969     		ldr	r1, [r3, #16]
ARM GAS  /tmp/cciBiPGK.s 			page 71


 817 004c 0D43     		orrs	r5, r5, r1
 818 004e 1D61     		str	r5, [r3, #16]
 599:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, WakeUpMethod);
 819              		.loc 1 599 0
 820 0050 2268     		ldr	r2, [r4]
 821 0052 D368     		ldr	r3, [r2, #12]
 822 0054 23F40063 		bic	r3, r3, #2048
 823 0058 D360     		str	r3, [r2, #12]
 600:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 824              		.loc 1 600 0
 825 005a 2168     		ldr	r1, [r4]
 826 005c CB68     		ldr	r3, [r1, #12]
 827 005e 3343     		orrs	r3, r3, r6
 828 0060 CB60     		str	r3, [r1, #12]
 603:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 829              		.loc 1 603 0
 830 0062 2268     		ldr	r2, [r4]
 831 0064 D368     		ldr	r3, [r2, #12]
 832 0066 43F40053 		orr	r3, r3, #8192
 833 006a D360     		str	r3, [r2, #12]
 606:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 834              		.loc 1 606 0
 835 006c 0020     		movs	r0, #0
 836 006e E063     		str	r0, [r4, #60]
 607:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 837              		.loc 1 607 0
 838 0070 2023     		movs	r3, #32
 839 0072 84F83930 		strb	r3, [r4, #57]
 608:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 840              		.loc 1 608 0
 841 0076 84F83A30 		strb	r3, [r4, #58]
 610:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
 842              		.loc 1 610 0
 843 007a 70BD     		pop	{r4, r5, r6, pc}
 844              	.LVL60:
 845              	.L67:
 562:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 846              		.loc 1 562 0
 847 007c 80F83830 		strb	r3, [r0, #56]
 576:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 848              		.loc 1 576 0
 849 0080 FFF7FEFF 		bl	HAL_UART_MspInit
 850              	.LVL61:
 851 0084 C6E7     		b	.L61
 852              	.LVL62:
 853              	.L62:
 854              	.LCFI9:
 855              		.cfi_def_cfa_offset 0
 856              		.cfi_restore 4
 857              		.cfi_restore 5
 858              		.cfi_restore 6
 859              		.cfi_restore 14
 547:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
 860              		.loc 1 547 0
 861 0086 0120     		movs	r0, #1
 862              	.LVL63:
 863 0088 7047     		bx	lr
ARM GAS  /tmp/cciBiPGK.s 			page 72


 864              		.cfi_endproc
 865              	.LFE75:
 867              		.section	.text.HAL_UART_MspDeInit,"ax",%progbits
 868              		.align	1
 869              		.weak	HAL_UART_MspDeInit
 870              		.syntax unified
 871              		.thumb
 872              		.thumb_func
 873              		.fpu softvfp
 875              	HAL_UART_MspDeInit:
 876              	.LFB78:
 679:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 877              		.loc 1 679 0
 878              		.cfi_startproc
 879              		@ args = 0, pretend = 0, frame = 0
 880              		@ frame_needed = 0, uses_anonymous_args = 0
 881              		@ link register save eliminated.
 882              	.LVL64:
 883 0000 7047     		bx	lr
 884              		.cfi_endproc
 885              	.LFE78:
 887              		.section	.text.HAL_UART_DeInit,"ax",%progbits
 888              		.align	1
 889              		.global	HAL_UART_DeInit
 890              		.syntax unified
 891              		.thumb
 892              		.thumb_func
 893              		.fpu softvfp
 895              	HAL_UART_DeInit:
 896              	.LFB76:
 620:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Check the UART handle allocation */
 897              		.loc 1 620 0
 898              		.cfi_startproc
 899              		@ args = 0, pretend = 0, frame = 0
 900              		@ frame_needed = 0, uses_anonymous_args = 0
 901              	.LVL65:
 622:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 902              		.loc 1 622 0
 903 0000 A0B1     		cbz	r0, .L71
 620:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Check the UART handle allocation */
 904              		.loc 1 620 0
 905 0002 10B5     		push	{r4, lr}
 906              	.LCFI10:
 907              		.cfi_def_cfa_offset 8
 908              		.cfi_offset 4, -8
 909              		.cfi_offset 14, -4
 910 0004 0446     		mov	r4, r0
 630:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 911              		.loc 1 630 0
 912 0006 2423     		movs	r3, #36
 913 0008 80F83930 		strb	r3, [r0, #57]
 633:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 914              		.loc 1 633 0
 915 000c 0268     		ldr	r2, [r0]
 916 000e D368     		ldr	r3, [r2, #12]
 917 0010 23F40053 		bic	r3, r3, #8192
 918 0014 D360     		str	r3, [r2, #12]
ARM GAS  /tmp/cciBiPGK.s 			page 73


 644:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 919              		.loc 1 644 0
 920 0016 FFF7FEFF 		bl	HAL_UART_MspDeInit
 921              	.LVL66:
 647:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_RESET;
 922              		.loc 1 647 0
 923 001a 0020     		movs	r0, #0
 924 001c E063     		str	r0, [r4, #60]
 648:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_RESET;
 925              		.loc 1 648 0
 926 001e 84F83900 		strb	r0, [r4, #57]
 649:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 927              		.loc 1 649 0
 928 0022 84F83A00 		strb	r0, [r4, #58]
 652:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 929              		.loc 1 652 0
 930 0026 84F83800 		strb	r0, [r4, #56]
 654:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
 931              		.loc 1 654 0
 932 002a 10BD     		pop	{r4, pc}
 933              	.LVL67:
 934              	.L71:
 935              	.LCFI11:
 936              		.cfi_def_cfa_offset 0
 937              		.cfi_restore 4
 938              		.cfi_restore 14
 624:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
 939              		.loc 1 624 0
 940 002c 0120     		movs	r0, #1
 941              	.LVL68:
 942 002e 7047     		bx	lr
 943              		.cfi_endproc
 944              	.LFE76:
 946              		.section	.text.HAL_UART_Transmit,"ax",%progbits
 947              		.align	1
 948              		.global	HAL_UART_Transmit
 949              		.syntax unified
 950              		.thumb
 951              		.thumb_func
 952              		.fpu softvfp
 954              	HAL_UART_Transmit:
 955              	.LFB79:
1016:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   uint16_t *tmp;
 956              		.loc 1 1016 0
 957              		.cfi_startproc
 958              		@ args = 0, pretend = 0, frame = 0
 959              		@ frame_needed = 0, uses_anonymous_args = 0
 960              	.LVL69:
 961 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 962              	.LCFI12:
 963              		.cfi_def_cfa_offset 24
 964              		.cfi_offset 4, -24
 965              		.cfi_offset 5, -20
 966              		.cfi_offset 6, -16
 967              		.cfi_offset 7, -12
 968              		.cfi_offset 8, -8
 969              		.cfi_offset 14, -4
ARM GAS  /tmp/cciBiPGK.s 			page 74


 970 0004 82B0     		sub	sp, sp, #8
 971              	.LCFI13:
 972              		.cfi_def_cfa_offset 32
 973 0006 1E46     		mov	r6, r3
 974              	.LVL70:
1021:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 975              		.loc 1 1021 0
 976 0008 90F83930 		ldrb	r3, [r0, #57]	@ zero_extendqisi2
 977              	.LVL71:
 978 000c DBB2     		uxtb	r3, r3
 979 000e 202B     		cmp	r3, #32
 980 0010 04D0     		beq	.L91
1084:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
 981              		.loc 1 1084 0
 982 0012 0223     		movs	r3, #2
 983              	.LVL72:
 984              	.L77:
1086:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 985              		.loc 1 1086 0
 986 0014 1846     		mov	r0, r3
 987 0016 02B0     		add	sp, sp, #8
 988              	.LCFI14:
 989              		.cfi_remember_state
 990              		.cfi_def_cfa_offset 24
 991              		@ sp needed
 992 0018 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 993              	.LVL73:
 994              	.L91:
 995              	.LCFI15:
 996              		.cfi_restore_state
 997 001c 0446     		mov	r4, r0
 998 001e 0D46     		mov	r5, r1
 999 0020 9046     		mov	r8, r2
1023:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 1000              		.loc 1 1023 0
 1001 0022 0029     		cmp	r1, #0
 1002 0024 55D0     		beq	.L84
1023:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 1003              		.loc 1 1023 0 is_stmt 0 discriminator 1
 1004 0026 002A     		cmp	r2, #0
 1005 0028 55D0     		beq	.L85
1029:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1006              		.loc 1 1029 0 is_stmt 1
 1007 002a 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2
 1008 002e 012B     		cmp	r3, #1
 1009 0030 01D1     		bne	.L92
 1010 0032 0223     		movs	r3, #2
 1011 0034 EEE7     		b	.L77
 1012              	.L92:
1029:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1013              		.loc 1 1029 0 is_stmt 0 discriminator 2
 1014 0036 0123     		movs	r3, #1
 1015 0038 80F83830 		strb	r3, [r0, #56]
1031:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 1016              		.loc 1 1031 0 is_stmt 1 discriminator 2
 1017 003c 0023     		movs	r3, #0
 1018 003e C363     		str	r3, [r0, #60]
ARM GAS  /tmp/cciBiPGK.s 			page 75


1032:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1019              		.loc 1 1032 0 discriminator 2
 1020 0040 2123     		movs	r3, #33
 1021 0042 80F83930 		strb	r3, [r0, #57]
1035:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1022              		.loc 1 1035 0 discriminator 2
 1023 0046 FFF7FEFF 		bl	HAL_GetTick
 1024              	.LVL74:
 1025 004a 0746     		mov	r7, r0
 1026              	.LVL75:
1037:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->TxXferCount = Size;
 1027              		.loc 1 1037 0 discriminator 2
 1028 004c A4F82480 		strh	r8, [r4, #36]	@ movhi
1038:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     while (huart->TxXferCount > 0U)
 1029              		.loc 1 1038 0 discriminator 2
 1030 0050 A4F82680 		strh	r8, [r4, #38]	@ movhi
1039:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 1031              		.loc 1 1039 0 discriminator 2
 1032 0054 10E0     		b	.L78
 1033              	.LVL76:
 1034              	.L94:
1044:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         {
 1035              		.loc 1 1044 0
 1036 0056 0096     		str	r6, [sp]
 1037 0058 3B46     		mov	r3, r7
 1038 005a 0022     		movs	r2, #0
 1039 005c 8021     		movs	r1, #128
 1040 005e 2046     		mov	r0, r4
 1041 0060 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 1042              	.LVL77:
 1043 0064 0028     		cmp	r0, #0
 1044 0066 38D1     		bne	.L87
 1045              	.LVL78:
1049:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         if (huart->Init.Parity == UART_PARITY_NONE)
 1046              		.loc 1 1049 0
 1047 0068 2268     		ldr	r2, [r4]
 1048 006a 2B88     		ldrh	r3, [r5]
 1049 006c C3F30803 		ubfx	r3, r3, #0, #9
 1050 0070 5360     		str	r3, [r2, #4]
1050:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         {
 1051              		.loc 1 1050 0
 1052 0072 2369     		ldr	r3, [r4, #16]
 1053 0074 CBB9     		cbnz	r3, .L80
1052:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         }
 1054              		.loc 1 1052 0
 1055 0076 0235     		adds	r5, r5, #2
 1056              	.LVL79:
 1057              	.L78:
1039:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 1058              		.loc 1 1039 0
 1059 0078 E38C     		ldrh	r3, [r4, #38]
 1060 007a 9BB2     		uxth	r3, r3
 1061 007c BBB1     		cbz	r3, .L93
1041:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 1062              		.loc 1 1041 0
 1063 007e E38C     		ldrh	r3, [r4, #38]
 1064 0080 9BB2     		uxth	r3, r3
ARM GAS  /tmp/cciBiPGK.s 			page 76


 1065 0082 013B     		subs	r3, r3, #1
 1066 0084 9BB2     		uxth	r3, r3
 1067 0086 E384     		strh	r3, [r4, #38]	@ movhi
1042:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       {
 1068              		.loc 1 1042 0
 1069 0088 A368     		ldr	r3, [r4, #8]
 1070 008a B3F5805F 		cmp	r3, #4096
 1071 008e E2D0     		beq	.L94
1061:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         {
 1072              		.loc 1 1061 0
 1073 0090 0096     		str	r6, [sp]
 1074 0092 3B46     		mov	r3, r7
 1075 0094 0022     		movs	r2, #0
 1076 0096 8021     		movs	r1, #128
 1077 0098 2046     		mov	r0, r4
 1078 009a FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 1079              	.LVL80:
 1080 009e F0B9     		cbnz	r0, .L88
1065:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       }
 1081              		.loc 1 1065 0
 1082 00a0 2368     		ldr	r3, [r4]
 1083              	.LVL81:
 1084 00a2 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
 1085 00a4 5A60     		str	r2, [r3, #4]
 1086 00a6 0135     		adds	r5, r5, #1
 1087              	.LVL82:
 1088 00a8 E6E7     		b	.L78
 1089              	.LVL83:
 1090              	.L80:
1056:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         }
 1091              		.loc 1 1056 0
 1092 00aa 0135     		adds	r5, r5, #1
 1093              	.LVL84:
 1094 00ac E4E7     		b	.L78
 1095              	.LVL85:
 1096              	.L93:
1069:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 1097              		.loc 1 1069 0
 1098 00ae 0096     		str	r6, [sp]
 1099 00b0 3B46     		mov	r3, r7
 1100 00b2 0022     		movs	r2, #0
 1101 00b4 4021     		movs	r1, #64
 1102 00b6 2046     		mov	r0, r4
 1103 00b8 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 1104              	.LVL86:
 1105 00bc 0346     		mov	r3, r0
 1106 00be 08B1     		cbz	r0, .L95
1071:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
 1107              		.loc 1 1071 0
 1108 00c0 0323     		movs	r3, #3
 1109 00c2 A7E7     		b	.L77
 1110              	.L95:
1075:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1111              		.loc 1 1075 0
 1112 00c4 2022     		movs	r2, #32
 1113 00c6 84F83920 		strb	r2, [r4, #57]
1078:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
ARM GAS  /tmp/cciBiPGK.s 			page 77


 1114              		.loc 1 1078 0
 1115 00ca 0022     		movs	r2, #0
 1116 00cc 84F83820 		strb	r2, [r4, #56]
1080:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
 1117              		.loc 1 1080 0
 1118 00d0 A0E7     		b	.L77
 1119              	.LVL87:
 1120              	.L84:
1025:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
 1121              		.loc 1 1025 0
 1122 00d2 0123     		movs	r3, #1
 1123 00d4 9EE7     		b	.L77
 1124              	.L85:
 1125 00d6 0123     		movs	r3, #1
 1126 00d8 9CE7     		b	.L77
 1127              	.LVL88:
 1128              	.L87:
1046:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         }
 1129              		.loc 1 1046 0
 1130 00da 0323     		movs	r3, #3
 1131 00dc 9AE7     		b	.L77
 1132              	.L88:
1063:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         }
 1133              		.loc 1 1063 0
 1134 00de 0323     		movs	r3, #3
 1135 00e0 98E7     		b	.L77
 1136              		.cfi_endproc
 1137              	.LFE79:
 1139              		.section	.text.HAL_UART_Receive,"ax",%progbits
 1140              		.align	1
 1141              		.global	HAL_UART_Receive
 1142              		.syntax unified
 1143              		.thumb
 1144              		.thumb_func
 1145              		.fpu softvfp
 1147              	HAL_UART_Receive:
 1148              	.LFB80:
1098:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   uint16_t *tmp;
 1149              		.loc 1 1098 0
 1150              		.cfi_startproc
 1151              		@ args = 0, pretend = 0, frame = 0
 1152              		@ frame_needed = 0, uses_anonymous_args = 0
 1153              	.LVL89:
 1154 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1155              	.LCFI16:
 1156              		.cfi_def_cfa_offset 24
 1157              		.cfi_offset 4, -24
 1158              		.cfi_offset 5, -20
 1159              		.cfi_offset 6, -16
 1160              		.cfi_offset 7, -12
 1161              		.cfi_offset 8, -8
 1162              		.cfi_offset 14, -4
 1163 0004 82B0     		sub	sp, sp, #8
 1164              	.LCFI17:
 1165              		.cfi_def_cfa_offset 32
 1166 0006 1E46     		mov	r6, r3
 1167              	.LVL90:
ARM GAS  /tmp/cciBiPGK.s 			page 78


1103:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 1168              		.loc 1 1103 0
 1169 0008 90F83A30 		ldrb	r3, [r0, #58]	@ zero_extendqisi2
 1170              	.LVL91:
 1171 000c DBB2     		uxtb	r3, r3
 1172 000e 202B     		cmp	r3, #32
 1173 0010 03D0     		beq	.L111
1173:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
 1174              		.loc 1 1173 0
 1175 0012 0220     		movs	r0, #2
 1176              	.LVL92:
 1177              	.L97:
1175:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1178              		.loc 1 1175 0
 1179 0014 02B0     		add	sp, sp, #8
 1180              	.LCFI18:
 1181              		.cfi_remember_state
 1182              		.cfi_def_cfa_offset 24
 1183              		@ sp needed
 1184 0016 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1185              	.LVL93:
 1186              	.L111:
 1187              	.LCFI19:
 1188              		.cfi_restore_state
 1189 001a 0446     		mov	r4, r0
 1190 001c 0D46     		mov	r5, r1
 1191 001e 9046     		mov	r8, r2
1105:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 1192              		.loc 1 1105 0
 1193 0020 0029     		cmp	r1, #0
 1194 0022 58D0     		beq	.L105
1105:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 1195              		.loc 1 1105 0 is_stmt 0 discriminator 1
 1196 0024 002A     		cmp	r2, #0
 1197 0026 58D0     		beq	.L106
1111:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1198              		.loc 1 1111 0 is_stmt 1
 1199 0028 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2
 1200 002c 012B     		cmp	r3, #1
 1201 002e 01D1     		bne	.L112
 1202 0030 0220     		movs	r0, #2
 1203              	.LVL94:
 1204 0032 EFE7     		b	.L97
 1205              	.LVL95:
 1206              	.L112:
1111:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1207              		.loc 1 1111 0 is_stmt 0 discriminator 2
 1208 0034 0123     		movs	r3, #1
 1209 0036 80F83830 		strb	r3, [r0, #56]
1113:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 1210              		.loc 1 1113 0 is_stmt 1 discriminator 2
 1211 003a 0023     		movs	r3, #0
 1212 003c C363     		str	r3, [r0, #60]
1114:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1213              		.loc 1 1114 0 discriminator 2
 1214 003e 2223     		movs	r3, #34
 1215 0040 80F83A30 		strb	r3, [r0, #58]
ARM GAS  /tmp/cciBiPGK.s 			page 79


1117:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1216              		.loc 1 1117 0 discriminator 2
 1217 0044 FFF7FEFF 		bl	HAL_GetTick
 1218              	.LVL96:
 1219 0048 0746     		mov	r7, r0
 1220              	.LVL97:
1119:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->RxXferCount = Size;
 1221              		.loc 1 1119 0 discriminator 2
 1222 004a A4F82C80 		strh	r8, [r4, #44]	@ movhi
1120:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1223              		.loc 1 1120 0 discriminator 2
 1224 004e A4F82E80 		strh	r8, [r4, #46]	@ movhi
1123:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 1225              		.loc 1 1123 0 discriminator 2
 1226 0052 1DE0     		b	.L98
 1227              	.LVL98:
 1228              	.L114:
1128:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         {
 1229              		.loc 1 1128 0
 1230 0054 0096     		str	r6, [sp]
 1231 0056 3B46     		mov	r3, r7
 1232 0058 0022     		movs	r2, #0
 1233 005a 2021     		movs	r1, #32
 1234 005c 2046     		mov	r0, r4
 1235 005e FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 1236              	.LVL99:
 1237 0062 0028     		cmp	r0, #0
 1238 0064 3BD1     		bne	.L108
 1239              	.LVL100:
1133:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         {
 1240              		.loc 1 1133 0
 1241 0066 2369     		ldr	r3, [r4, #16]
 1242 0068 33B9     		cbnz	r3, .L100
1135:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****           pData += 2U;
 1243              		.loc 1 1135 0
 1244 006a 2368     		ldr	r3, [r4]
 1245 006c 5B68     		ldr	r3, [r3, #4]
 1246 006e C3F30803 		ubfx	r3, r3, #0, #9
 1247 0072 25F8023B 		strh	r3, [r5], #2	@ movhi
 1248              	.LVL101:
 1249 0076 0BE0     		b	.L98
 1250              	.LVL102:
 1251              	.L100:
1140:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****           pData += 1U;
 1252              		.loc 1 1140 0
 1253 0078 2368     		ldr	r3, [r4]
 1254 007a 5B68     		ldr	r3, [r3, #4]
 1255 007c DBB2     		uxtb	r3, r3
 1256 007e 25F8013B 		strh	r3, [r5], #1	@ movhi
 1257              	.LVL103:
 1258 0082 05E0     		b	.L98
 1259              	.LVL104:
 1260              	.L102:
1157:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         }
 1261              		.loc 1 1157 0
 1262 0084 2368     		ldr	r3, [r4]
 1263 0086 5B68     		ldr	r3, [r3, #4]
ARM GAS  /tmp/cciBiPGK.s 			page 80


 1264 0088 03F07F03 		and	r3, r3, #127
 1265 008c 2B70     		strb	r3, [r5]
 1266 008e 0135     		adds	r5, r5, #1
 1267              	.LVL105:
 1268              	.L98:
1123:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 1269              		.loc 1 1123 0
 1270 0090 E38D     		ldrh	r3, [r4, #46]
 1271 0092 9BB2     		uxth	r3, r3
 1272 0094 C3B1     		cbz	r3, .L113
1125:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 1273              		.loc 1 1125 0
 1274 0096 E38D     		ldrh	r3, [r4, #46]
 1275 0098 9BB2     		uxth	r3, r3
 1276 009a 013B     		subs	r3, r3, #1
 1277 009c 9BB2     		uxth	r3, r3
 1278 009e E385     		strh	r3, [r4, #46]	@ movhi
1126:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       {
 1279              		.loc 1 1126 0
 1280 00a0 A368     		ldr	r3, [r4, #8]
 1281 00a2 B3F5805F 		cmp	r3, #4096
 1282 00a6 D5D0     		beq	.L114
1147:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         {
 1283              		.loc 1 1147 0
 1284 00a8 0096     		str	r6, [sp]
 1285 00aa 3B46     		mov	r3, r7
 1286 00ac 0022     		movs	r2, #0
 1287 00ae 2021     		movs	r1, #32
 1288 00b0 2046     		mov	r0, r4
 1289 00b2 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 1290              	.LVL106:
 1291 00b6 A0B9     		cbnz	r0, .L109
1151:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         {
 1292              		.loc 1 1151 0
 1293 00b8 2369     		ldr	r3, [r4, #16]
 1294 00ba 002B     		cmp	r3, #0
 1295 00bc E2D1     		bne	.L102
 1296              	.LVL107:
1153:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         }
 1297              		.loc 1 1153 0
 1298 00be 2368     		ldr	r3, [r4]
 1299 00c0 5B68     		ldr	r3, [r3, #4]
 1300 00c2 2B70     		strb	r3, [r5]
 1301 00c4 0135     		adds	r5, r5, #1
 1302              	.LVL108:
 1303 00c6 E3E7     		b	.L98
 1304              	.L113:
1164:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1305              		.loc 1 1164 0
 1306 00c8 2023     		movs	r3, #32
 1307 00ca 84F83A30 		strb	r3, [r4, #58]
1167:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1308              		.loc 1 1167 0
 1309 00ce 0020     		movs	r0, #0
 1310 00d0 84F83800 		strb	r0, [r4, #56]
1169:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
 1311              		.loc 1 1169 0
ARM GAS  /tmp/cciBiPGK.s 			page 81


 1312 00d4 9EE7     		b	.L97
 1313              	.LVL109:
 1314              	.L105:
1107:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
 1315              		.loc 1 1107 0
 1316 00d6 0120     		movs	r0, #1
 1317              	.LVL110:
 1318 00d8 9CE7     		b	.L97
 1319              	.LVL111:
 1320              	.L106:
 1321 00da 0120     		movs	r0, #1
 1322              	.LVL112:
 1323 00dc 9AE7     		b	.L97
 1324              	.LVL113:
 1325              	.L108:
1130:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         }
 1326              		.loc 1 1130 0
 1327 00de 0320     		movs	r0, #3
 1328 00e0 98E7     		b	.L97
 1329              	.L109:
1149:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         }
 1330              		.loc 1 1149 0
 1331 00e2 0320     		movs	r0, #3
 1332 00e4 96E7     		b	.L97
 1333              		.cfi_endproc
 1334              	.LFE80:
 1336              		.section	.text.HAL_UART_Transmit_IT,"ax",%progbits
 1337              		.align	1
 1338              		.global	HAL_UART_Transmit_IT
 1339              		.syntax unified
 1340              		.thumb
 1341              		.thumb_func
 1342              		.fpu softvfp
 1344              	HAL_UART_Transmit_IT:
 1345              	.LFB81:
1186:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
 1346              		.loc 1 1186 0
 1347              		.cfi_startproc
 1348              		@ args = 0, pretend = 0, frame = 0
 1349              		@ frame_needed = 0, uses_anonymous_args = 0
 1350              		@ link register save eliminated.
 1351              	.LVL114:
1188:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 1352              		.loc 1 1188 0
 1353 0000 90F83930 		ldrb	r3, [r0, #57]	@ zero_extendqisi2
 1354 0004 DBB2     		uxtb	r3, r3
 1355 0006 202B     		cmp	r3, #32
 1356 0008 01D0     		beq	.L121
1215:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
 1357              		.loc 1 1215 0
 1358 000a 0220     		movs	r0, #2
 1359              	.LVL115:
 1360 000c 7047     		bx	lr
 1361              	.LVL116:
 1362              	.L121:
1190:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 1363              		.loc 1 1190 0
ARM GAS  /tmp/cciBiPGK.s 			page 82


 1364 000e A9B1     		cbz	r1, .L118
1190:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 1365              		.loc 1 1190 0 is_stmt 0 discriminator 1
 1366 0010 B2B1     		cbz	r2, .L119
1196:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1367              		.loc 1 1196 0 is_stmt 1
 1368 0012 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2
 1369 0016 012B     		cmp	r3, #1
 1370 0018 14D0     		beq	.L120
1198:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->TxXferSize = Size;
 1371              		.loc 1 1198 0 discriminator 2
 1372 001a 0162     		str	r1, [r0, #32]
1199:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->TxXferCount = Size;
 1373              		.loc 1 1199 0 discriminator 2
 1374 001c 8284     		strh	r2, [r0, #36]	@ movhi
1200:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1375              		.loc 1 1200 0 discriminator 2
 1376 001e C284     		strh	r2, [r0, #38]	@ movhi
1202:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 1377              		.loc 1 1202 0 discriminator 2
 1378 0020 0023     		movs	r3, #0
 1379 0022 C363     		str	r3, [r0, #60]
1203:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1380              		.loc 1 1203 0 discriminator 2
 1381 0024 2122     		movs	r2, #33
 1382              	.LVL117:
 1383 0026 80F83920 		strb	r2, [r0, #57]
1206:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1384              		.loc 1 1206 0 discriminator 2
 1385 002a 80F83830 		strb	r3, [r0, #56]
1209:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1386              		.loc 1 1209 0 discriminator 2
 1387 002e 0168     		ldr	r1, [r0]
 1388              	.LVL118:
 1389 0030 CA68     		ldr	r2, [r1, #12]
 1390 0032 42F08002 		orr	r2, r2, #128
 1391 0036 CA60     		str	r2, [r1, #12]
 1392              	.LVL119:
1211:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
 1393              		.loc 1 1211 0 discriminator 2
 1394 0038 1846     		mov	r0, r3
 1395              	.LVL120:
 1396 003a 7047     		bx	lr
 1397              	.LVL121:
 1398              	.L118:
1192:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
 1399              		.loc 1 1192 0
 1400 003c 0120     		movs	r0, #1
 1401              	.LVL122:
 1402 003e 7047     		bx	lr
 1403              	.LVL123:
 1404              	.L119:
 1405 0040 0120     		movs	r0, #1
 1406              	.LVL124:
 1407 0042 7047     		bx	lr
 1408              	.LVL125:
 1409              	.L120:
ARM GAS  /tmp/cciBiPGK.s 			page 83


1196:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1410              		.loc 1 1196 0
 1411 0044 0220     		movs	r0, #2
 1412              	.LVL126:
1217:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1413              		.loc 1 1217 0
 1414 0046 7047     		bx	lr
 1415              		.cfi_endproc
 1416              	.LFE81:
 1418              		.section	.text.HAL_UART_Receive_IT,"ax",%progbits
 1419              		.align	1
 1420              		.global	HAL_UART_Receive_IT
 1421              		.syntax unified
 1422              		.thumb
 1423              		.thumb_func
 1424              		.fpu softvfp
 1426              	HAL_UART_Receive_IT:
 1427              	.LFB82:
1228:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
 1428              		.loc 1 1228 0
 1429              		.cfi_startproc
 1430              		@ args = 0, pretend = 0, frame = 0
 1431              		@ frame_needed = 0, uses_anonymous_args = 0
 1432              		@ link register save eliminated.
 1433              	.LVL127:
1230:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 1434              		.loc 1 1230 0
 1435 0000 90F83A30 		ldrb	r3, [r0, #58]	@ zero_extendqisi2
 1436 0004 DBB2     		uxtb	r3, r3
 1437 0006 202B     		cmp	r3, #32
 1438 0008 01D0     		beq	.L128
1263:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
 1439              		.loc 1 1263 0
 1440 000a 0220     		movs	r0, #2
 1441              	.LVL128:
 1442 000c 7047     		bx	lr
 1443              	.LVL129:
 1444              	.L128:
1232:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 1445              		.loc 1 1232 0
 1446 000e F9B1     		cbz	r1, .L125
1232:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 1447              		.loc 1 1232 0 is_stmt 0 discriminator 1
 1448 0010 02B3     		cbz	r2, .L126
1238:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1449              		.loc 1 1238 0 is_stmt 1
 1450 0012 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2
 1451 0016 012B     		cmp	r3, #1
 1452 0018 1ED0     		beq	.L127
1240:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->RxXferSize = Size;
 1453              		.loc 1 1240 0 discriminator 2
 1454 001a 8162     		str	r1, [r0, #40]
1241:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->RxXferCount = Size;
 1455              		.loc 1 1241 0 discriminator 2
 1456 001c 8285     		strh	r2, [r0, #44]	@ movhi
1242:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1457              		.loc 1 1242 0 discriminator 2
ARM GAS  /tmp/cciBiPGK.s 			page 84


 1458 001e C285     		strh	r2, [r0, #46]	@ movhi
1244:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 1459              		.loc 1 1244 0 discriminator 2
 1460 0020 0023     		movs	r3, #0
 1461 0022 C363     		str	r3, [r0, #60]
1245:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1462              		.loc 1 1245 0 discriminator 2
 1463 0024 2222     		movs	r2, #34
 1464              	.LVL130:
 1465 0026 80F83A20 		strb	r2, [r0, #58]
1248:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1466              		.loc 1 1248 0 discriminator 2
 1467 002a 80F83830 		strb	r3, [r0, #56]
1251:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1468              		.loc 1 1251 0 discriminator 2
 1469 002e 0168     		ldr	r1, [r0]
 1470              	.LVL131:
 1471 0030 CA68     		ldr	r2, [r1, #12]
 1472 0032 42F48072 		orr	r2, r2, #256
 1473 0036 CA60     		str	r2, [r1, #12]
 1474              	.LVL132:
1254:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1475              		.loc 1 1254 0 discriminator 2
 1476 0038 0168     		ldr	r1, [r0]
 1477 003a 4A69     		ldr	r2, [r1, #20]
 1478 003c 42F00102 		orr	r2, r2, #1
 1479 0040 4A61     		str	r2, [r1, #20]
1257:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1480              		.loc 1 1257 0 discriminator 2
 1481 0042 0168     		ldr	r1, [r0]
 1482 0044 CA68     		ldr	r2, [r1, #12]
 1483 0046 42F02002 		orr	r2, r2, #32
 1484 004a CA60     		str	r2, [r1, #12]
1259:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
 1485              		.loc 1 1259 0 discriminator 2
 1486 004c 1846     		mov	r0, r3
 1487              	.LVL133:
 1488 004e 7047     		bx	lr
 1489              	.LVL134:
 1490              	.L125:
1234:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
 1491              		.loc 1 1234 0
 1492 0050 0120     		movs	r0, #1
 1493              	.LVL135:
 1494 0052 7047     		bx	lr
 1495              	.LVL136:
 1496              	.L126:
 1497 0054 0120     		movs	r0, #1
 1498              	.LVL137:
 1499 0056 7047     		bx	lr
 1500              	.LVL138:
 1501              	.L127:
1238:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1502              		.loc 1 1238 0
 1503 0058 0220     		movs	r0, #2
 1504              	.LVL139:
1265:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
ARM GAS  /tmp/cciBiPGK.s 			page 85


 1505              		.loc 1 1265 0
 1506 005a 7047     		bx	lr
 1507              		.cfi_endproc
 1508              	.LFE82:
 1510              		.section	.text.HAL_UART_Transmit_DMA,"ax",%progbits
 1511              		.align	1
 1512              		.global	HAL_UART_Transmit_DMA
 1513              		.syntax unified
 1514              		.thumb
 1515              		.thumb_func
 1516              		.fpu softvfp
 1518              	HAL_UART_Transmit_DMA:
 1519              	.LFB83:
1276:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   uint32_t *tmp;
 1520              		.loc 1 1276 0
 1521              		.cfi_startproc
 1522              		@ args = 0, pretend = 0, frame = 0
 1523              		@ frame_needed = 0, uses_anonymous_args = 0
 1524              	.LVL140:
 1525 0000 38B5     		push	{r3, r4, r5, lr}
 1526              	.LCFI20:
 1527              		.cfi_def_cfa_offset 16
 1528              		.cfi_offset 3, -16
 1529              		.cfi_offset 4, -12
 1530              		.cfi_offset 5, -8
 1531              		.cfi_offset 14, -4
1280:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 1532              		.loc 1 1280 0
 1533 0002 90F83940 		ldrb	r4, [r0, #57]	@ zero_extendqisi2
 1534 0006 E4B2     		uxtb	r4, r4
 1535 0008 202C     		cmp	r4, #32
 1536 000a 01D0     		beq	.L136
1327:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
 1537              		.loc 1 1327 0
 1538 000c 0220     		movs	r0, #2
 1539              	.LVL141:
 1540 000e 38BD     		pop	{r3, r4, r5, pc}
 1541              	.LVL142:
 1542              	.L136:
1282:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 1543              		.loc 1 1282 0
 1544 0010 0029     		cmp	r1, #0
 1545 0012 31D0     		beq	.L132
1282:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 1546              		.loc 1 1282 0 is_stmt 0 discriminator 1
 1547 0014 002A     		cmp	r2, #0
 1548 0016 31D0     		beq	.L133
1288:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1549              		.loc 1 1288 0 is_stmt 1
 1550 0018 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2
 1551 001c 012B     		cmp	r3, #1
 1552 001e 01D1     		bne	.L137
 1553 0020 0220     		movs	r0, #2
 1554              	.LVL143:
1329:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1555              		.loc 1 1329 0
 1556 0022 38BD     		pop	{r3, r4, r5, pc}
ARM GAS  /tmp/cciBiPGK.s 			page 86


 1557              	.LVL144:
 1558              	.L137:
 1559 0024 1346     		mov	r3, r2
 1560 0026 0446     		mov	r4, r0
1288:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1561              		.loc 1 1288 0 discriminator 2
 1562 0028 0122     		movs	r2, #1
 1563              	.LVL145:
 1564 002a 80F83820 		strb	r2, [r0, #56]
1290:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->TxXferSize = Size;
 1565              		.loc 1 1290 0 discriminator 2
 1566 002e 0162     		str	r1, [r0, #32]
1291:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->TxXferCount = Size;
 1567              		.loc 1 1291 0 discriminator 2
 1568 0030 8384     		strh	r3, [r0, #36]	@ movhi
1292:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1569              		.loc 1 1292 0 discriminator 2
 1570 0032 C384     		strh	r3, [r0, #38]	@ movhi
1294:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 1571              		.loc 1 1294 0 discriminator 2
 1572 0034 0025     		movs	r5, #0
 1573 0036 C563     		str	r5, [r0, #60]
1295:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1574              		.loc 1 1295 0 discriminator 2
 1575 0038 2122     		movs	r2, #33
 1576 003a 80F83920 		strb	r2, [r0, #57]
1298:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1577              		.loc 1 1298 0 discriminator 2
 1578 003e 026B     		ldr	r2, [r0, #48]
 1579 0040 0F48     		ldr	r0, .L138
 1580              	.LVL146:
 1581 0042 9062     		str	r0, [r2, #40]
1301:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1582              		.loc 1 1301 0 discriminator 2
 1583 0044 226B     		ldr	r2, [r4, #48]
 1584 0046 0F48     		ldr	r0, .L138+4
 1585 0048 D062     		str	r0, [r2, #44]
1304:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1586              		.loc 1 1304 0 discriminator 2
 1587 004a 226B     		ldr	r2, [r4, #48]
 1588 004c 0E48     		ldr	r0, .L138+8
 1589 004e 1063     		str	r0, [r2, #48]
1307:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1590              		.loc 1 1307 0 discriminator 2
 1591 0050 226B     		ldr	r2, [r4, #48]
 1592 0052 5563     		str	r5, [r2, #52]
 1593              	.LVL147:
1311:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1594              		.loc 1 1311 0 discriminator 2
 1595 0054 2268     		ldr	r2, [r4]
 1596 0056 0432     		adds	r2, r2, #4
 1597 0058 206B     		ldr	r0, [r4, #48]
 1598 005a FFF7FEFF 		bl	HAL_DMA_Start_IT
 1599              	.LVL148:
1314:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1600              		.loc 1 1314 0 discriminator 2
 1601 005e 2368     		ldr	r3, [r4]
ARM GAS  /tmp/cciBiPGK.s 			page 87


 1602 0060 6FF04002 		mvn	r2, #64
 1603 0064 1A60     		str	r2, [r3]
1317:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1604              		.loc 1 1317 0 discriminator 2
 1605 0066 84F83850 		strb	r5, [r4, #56]
1321:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1606              		.loc 1 1321 0 discriminator 2
 1607 006a 2268     		ldr	r2, [r4]
 1608 006c 5369     		ldr	r3, [r2, #20]
 1609 006e 43F08003 		orr	r3, r3, #128
 1610 0072 5361     		str	r3, [r2, #20]
1323:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
 1611              		.loc 1 1323 0 discriminator 2
 1612 0074 2846     		mov	r0, r5
 1613 0076 38BD     		pop	{r3, r4, r5, pc}
 1614              	.LVL149:
 1615              	.L132:
1284:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
 1616              		.loc 1 1284 0
 1617 0078 0120     		movs	r0, #1
 1618              	.LVL150:
 1619 007a 38BD     		pop	{r3, r4, r5, pc}
 1620              	.LVL151:
 1621              	.L133:
 1622 007c 0120     		movs	r0, #1
 1623              	.LVL152:
 1624 007e 38BD     		pop	{r3, r4, r5, pc}
 1625              	.L139:
 1626              		.align	2
 1627              	.L138:
 1628 0080 00000000 		.word	UART_DMATransmitCplt
 1629 0084 00000000 		.word	UART_DMATxHalfCplt
 1630 0088 00000000 		.word	UART_DMAError
 1631              		.cfi_endproc
 1632              	.LFE83:
 1634              		.section	.text.HAL_UART_Receive_DMA,"ax",%progbits
 1635              		.align	1
 1636              		.global	HAL_UART_Receive_DMA
 1637              		.syntax unified
 1638              		.thumb
 1639              		.thumb_func
 1640              		.fpu softvfp
 1642              	HAL_UART_Receive_DMA:
 1643              	.LFB84:
1341:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   uint32_t *tmp;
 1644              		.loc 1 1341 0
 1645              		.cfi_startproc
 1646              		@ args = 0, pretend = 0, frame = 8
 1647              		@ frame_needed = 0, uses_anonymous_args = 0
 1648              	.LVL153:
 1649 0000 30B5     		push	{r4, r5, lr}
 1650              	.LCFI21:
 1651              		.cfi_def_cfa_offset 12
 1652              		.cfi_offset 4, -12
 1653              		.cfi_offset 5, -8
 1654              		.cfi_offset 14, -4
 1655 0002 83B0     		sub	sp, sp, #12
ARM GAS  /tmp/cciBiPGK.s 			page 88


 1656              	.LCFI22:
 1657              		.cfi_def_cfa_offset 24
1345:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 1658              		.loc 1 1345 0
 1659 0004 90F83A40 		ldrb	r4, [r0, #58]	@ zero_extendqisi2
 1660 0008 E4B2     		uxtb	r4, r4
 1661 000a 202C     		cmp	r4, #32
 1662 000c 02D0     		beq	.L147
1397:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
 1663              		.loc 1 1397 0
 1664 000e 0220     		movs	r0, #2
 1665              	.LVL154:
 1666              	.L141:
1399:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1667              		.loc 1 1399 0
 1668 0010 03B0     		add	sp, sp, #12
 1669              	.LCFI23:
 1670              		.cfi_remember_state
 1671              		.cfi_def_cfa_offset 12
 1672              		@ sp needed
 1673 0012 30BD     		pop	{r4, r5, pc}
 1674              	.LVL155:
 1675              	.L147:
 1676              	.LCFI24:
 1677              		.cfi_restore_state
1347:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 1678              		.loc 1 1347 0
 1679 0014 0029     		cmp	r1, #0
 1680 0016 3DD0     		beq	.L143
1347:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 1681              		.loc 1 1347 0 is_stmt 0 discriminator 1
 1682 0018 002A     		cmp	r2, #0
 1683 001a 3DD0     		beq	.L144
1353:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1684              		.loc 1 1353 0 is_stmt 1
 1685 001c 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2
 1686 0020 012B     		cmp	r3, #1
 1687 0022 01D1     		bne	.L148
 1688 0024 0220     		movs	r0, #2
 1689              	.LVL156:
 1690 0026 F3E7     		b	.L141
 1691              	.LVL157:
 1692              	.L148:
 1693 0028 1346     		mov	r3, r2
 1694 002a 0A46     		mov	r2, r1
 1695              	.LVL158:
 1696 002c 0446     		mov	r4, r0
1353:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1697              		.loc 1 1353 0 is_stmt 0 discriminator 2
 1698 002e 0121     		movs	r1, #1
 1699              	.LVL159:
 1700 0030 80F83810 		strb	r1, [r0, #56]
1355:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->RxXferSize = Size;
 1701              		.loc 1 1355 0 is_stmt 1 discriminator 2
 1702 0034 8262     		str	r2, [r0, #40]
1356:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1703              		.loc 1 1356 0 discriminator 2
ARM GAS  /tmp/cciBiPGK.s 			page 89


 1704 0036 8385     		strh	r3, [r0, #44]	@ movhi
1358:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 1705              		.loc 1 1358 0 discriminator 2
 1706 0038 0025     		movs	r5, #0
 1707 003a C563     		str	r5, [r0, #60]
1359:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1708              		.loc 1 1359 0 discriminator 2
 1709 003c 2221     		movs	r1, #34
 1710 003e 80F83A10 		strb	r1, [r0, #58]
1362:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1711              		.loc 1 1362 0 discriminator 2
 1712 0042 416B     		ldr	r1, [r0, #52]
 1713 0044 1548     		ldr	r0, .L149
 1714              	.LVL160:
 1715 0046 8862     		str	r0, [r1, #40]
1365:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1716              		.loc 1 1365 0 discriminator 2
 1717 0048 616B     		ldr	r1, [r4, #52]
 1718 004a 1548     		ldr	r0, .L149+4
 1719 004c C862     		str	r0, [r1, #44]
1368:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1720              		.loc 1 1368 0 discriminator 2
 1721 004e 616B     		ldr	r1, [r4, #52]
 1722 0050 1448     		ldr	r0, .L149+8
 1723 0052 0863     		str	r0, [r1, #48]
1371:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1724              		.loc 1 1371 0 discriminator 2
 1725 0054 616B     		ldr	r1, [r4, #52]
 1726 0056 4D63     		str	r5, [r1, #52]
 1727              	.LVL161:
1375:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1728              		.loc 1 1375 0 discriminator 2
 1729 0058 2168     		ldr	r1, [r4]
 1730 005a 0431     		adds	r1, r1, #4
 1731 005c 606B     		ldr	r0, [r4, #52]
 1732 005e FFF7FEFF 		bl	HAL_DMA_Start_IT
 1733              	.LVL162:
 1734              	.LBB2:
1378:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1735              		.loc 1 1378 0 discriminator 2
 1736 0062 0195     		str	r5, [sp, #4]
 1737 0064 2368     		ldr	r3, [r4]
 1738 0066 1A68     		ldr	r2, [r3]
 1739 0068 0192     		str	r2, [sp, #4]
 1740 006a 5A68     		ldr	r2, [r3, #4]
 1741 006c 0192     		str	r2, [sp, #4]
 1742 006e 019A     		ldr	r2, [sp, #4]
 1743              	.LBE2:
1381:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1744              		.loc 1 1381 0 discriminator 2
 1745 0070 84F83850 		strb	r5, [r4, #56]
1384:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1746              		.loc 1 1384 0 discriminator 2
 1747 0074 DA68     		ldr	r2, [r3, #12]
 1748 0076 42F48072 		orr	r2, r2, #256
 1749 007a DA60     		str	r2, [r3, #12]
1387:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
ARM GAS  /tmp/cciBiPGK.s 			page 90


 1750              		.loc 1 1387 0 discriminator 2
 1751 007c 2268     		ldr	r2, [r4]
 1752 007e 5369     		ldr	r3, [r2, #20]
 1753 0080 43F00103 		orr	r3, r3, #1
 1754 0084 5361     		str	r3, [r2, #20]
1391:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1755              		.loc 1 1391 0 discriminator 2
 1756 0086 2268     		ldr	r2, [r4]
 1757 0088 5369     		ldr	r3, [r2, #20]
 1758 008a 43F04003 		orr	r3, r3, #64
 1759 008e 5361     		str	r3, [r2, #20]
1393:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
 1760              		.loc 1 1393 0 discriminator 2
 1761 0090 2846     		mov	r0, r5
 1762 0092 BDE7     		b	.L141
 1763              	.LVL163:
 1764              	.L143:
1349:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
 1765              		.loc 1 1349 0
 1766 0094 0120     		movs	r0, #1
 1767              	.LVL164:
 1768 0096 BBE7     		b	.L141
 1769              	.LVL165:
 1770              	.L144:
 1771 0098 0120     		movs	r0, #1
 1772              	.LVL166:
 1773 009a B9E7     		b	.L141
 1774              	.L150:
 1775              		.align	2
 1776              	.L149:
 1777 009c 00000000 		.word	UART_DMAReceiveCplt
 1778 00a0 00000000 		.word	UART_DMARxHalfCplt
 1779 00a4 00000000 		.word	UART_DMAError
 1780              		.cfi_endproc
 1781              	.LFE84:
 1783              		.section	.text.HAL_UART_DMAPause,"ax",%progbits
 1784              		.align	1
 1785              		.global	HAL_UART_DMAPause
 1786              		.syntax unified
 1787              		.thumb
 1788              		.thumb_func
 1789              		.fpu softvfp
 1791              	HAL_UART_DMAPause:
 1792              	.LFB85:
1408:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
 1793              		.loc 1 1408 0
 1794              		.cfi_startproc
 1795              		@ args = 0, pretend = 0, frame = 0
 1796              		@ frame_needed = 0, uses_anonymous_args = 0
 1797              		@ link register save eliminated.
 1798              	.LVL167:
1412:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1799              		.loc 1 1412 0
 1800 0000 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2
 1801 0004 012B     		cmp	r3, #1
 1802 0006 31D0     		beq	.L155
1412:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
ARM GAS  /tmp/cciBiPGK.s 			page 91


 1803              		.loc 1 1412 0 is_stmt 0 discriminator 2
 1804 0008 0123     		movs	r3, #1
 1805 000a 80F83830 		strb	r3, [r0, #56]
1414:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 1806              		.loc 1 1414 0 is_stmt 1 discriminator 2
 1807 000e 0168     		ldr	r1, [r0]
 1808 0010 4A69     		ldr	r2, [r1, #20]
 1809 0012 02F08002 		and	r2, r2, #128
 1810              	.LVL168:
1415:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 1811              		.loc 1 1415 0 discriminator 2
 1812 0016 90F83930 		ldrb	r3, [r0, #57]	@ zero_extendqisi2
 1813 001a DBB2     		uxtb	r3, r3
 1814 001c 212B     		cmp	r3, #33
 1815 001e 0DD0     		beq	.L156
 1816              	.L153:
1421:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 1817              		.loc 1 1421 0
 1818 0020 0168     		ldr	r1, [r0]
 1819 0022 4A69     		ldr	r2, [r1, #20]
 1820              	.LVL169:
 1821 0024 02F04002 		and	r2, r2, #64
 1822              	.LVL170:
1422:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 1823              		.loc 1 1422 0
 1824 0028 90F83A30 		ldrb	r3, [r0, #58]	@ zero_extendqisi2
 1825 002c DBB2     		uxtb	r3, r3
 1826 002e 222B     		cmp	r3, #34
 1827 0030 0BD0     		beq	.L157
 1828              	.LVL171:
 1829              	.L154:
1433:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1830              		.loc 1 1433 0
 1831 0032 0023     		movs	r3, #0
 1832 0034 80F83830 		strb	r3, [r0, #56]
1435:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
 1833              		.loc 1 1435 0
 1834 0038 1846     		mov	r0, r3
 1835              	.LVL172:
 1836 003a 7047     		bx	lr
 1837              	.LVL173:
 1838              	.L156:
1415:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 1839              		.loc 1 1415 0 discriminator 1
 1840 003c 002A     		cmp	r2, #0
 1841 003e EFD0     		beq	.L153
1418:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
 1842              		.loc 1 1418 0
 1843 0040 4B69     		ldr	r3, [r1, #20]
 1844 0042 23F08003 		bic	r3, r3, #128
 1845 0046 4B61     		str	r3, [r1, #20]
 1846 0048 EAE7     		b	.L153
 1847              	.L157:
1422:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 1848              		.loc 1 1422 0 discriminator 1
 1849 004a 002A     		cmp	r2, #0
 1850 004c F1D0     		beq	.L154
ARM GAS  /tmp/cciBiPGK.s 			page 92


1425:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 1851              		.loc 1 1425 0
 1852 004e CB68     		ldr	r3, [r1, #12]
 1853 0050 23F48073 		bic	r3, r3, #256
 1854 0054 CB60     		str	r3, [r1, #12]
1426:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1855              		.loc 1 1426 0
 1856 0056 0268     		ldr	r2, [r0]
 1857              	.LVL174:
 1858 0058 5369     		ldr	r3, [r2, #20]
 1859 005a 23F00103 		bic	r3, r3, #1
 1860 005e 5361     		str	r3, [r2, #20]
1429:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
 1861              		.loc 1 1429 0
 1862 0060 0268     		ldr	r2, [r0]
 1863 0062 5369     		ldr	r3, [r2, #20]
 1864 0064 23F04003 		bic	r3, r3, #64
 1865 0068 5361     		str	r3, [r2, #20]
 1866 006a E2E7     		b	.L154
 1867              	.LVL175:
 1868              	.L155:
1412:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1869              		.loc 1 1412 0
 1870 006c 0220     		movs	r0, #2
 1871              	.LVL176:
1436:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1872              		.loc 1 1436 0
 1873 006e 7047     		bx	lr
 1874              		.cfi_endproc
 1875              	.LFE85:
 1877              		.section	.text.HAL_UART_DMAResume,"ax",%progbits
 1878              		.align	1
 1879              		.global	HAL_UART_DMAResume
 1880              		.syntax unified
 1881              		.thumb
 1882              		.thumb_func
 1883              		.fpu softvfp
 1885              	HAL_UART_DMAResume:
 1886              	.LFB86:
1445:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Process Locked */
 1887              		.loc 1 1445 0
 1888              		.cfi_startproc
 1889              		@ args = 0, pretend = 0, frame = 8
 1890              		@ frame_needed = 0, uses_anonymous_args = 0
 1891              		@ link register save eliminated.
 1892              	.LVL177:
1447:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1893              		.loc 1 1447 0
 1894 0000 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2
 1895 0004 012B     		cmp	r3, #1
 1896 0006 34D0     		beq	.L162
1447:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1897              		.loc 1 1447 0 is_stmt 0 discriminator 2
 1898 0008 0123     		movs	r3, #1
 1899 000a 80F83830 		strb	r3, [r0, #56]
1449:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 1900              		.loc 1 1449 0 is_stmt 1 discriminator 2
ARM GAS  /tmp/cciBiPGK.s 			page 93


 1901 000e 90F83930 		ldrb	r3, [r0, #57]	@ zero_extendqisi2
 1902 0012 DBB2     		uxtb	r3, r3
 1903 0014 212B     		cmp	r3, #33
 1904 0016 09D0     		beq	.L168
 1905              	.L160:
1455:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 1906              		.loc 1 1455 0
 1907 0018 90F83A30 		ldrb	r3, [r0, #58]	@ zero_extendqisi2
 1908 001c DBB2     		uxtb	r3, r3
 1909 001e 222B     		cmp	r3, #34
 1910 0020 0AD0     		beq	.L169
1469:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1911              		.loc 1 1469 0
 1912 0022 0023     		movs	r3, #0
 1913 0024 80F83830 		strb	r3, [r0, #56]
1471:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
 1914              		.loc 1 1471 0
 1915 0028 1846     		mov	r0, r3
 1916              	.LVL178:
1472:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1917              		.loc 1 1472 0
 1918 002a 7047     		bx	lr
 1919              	.LVL179:
 1920              	.L168:
1452:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
 1921              		.loc 1 1452 0
 1922 002c 0268     		ldr	r2, [r0]
 1923 002e 5369     		ldr	r3, [r2, #20]
 1924 0030 43F08003 		orr	r3, r3, #128
 1925 0034 5361     		str	r3, [r2, #20]
 1926 0036 EFE7     		b	.L160
 1927              	.L169:
1445:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Process Locked */
 1928              		.loc 1 1445 0
 1929 0038 82B0     		sub	sp, sp, #8
 1930              	.LCFI25:
 1931              		.cfi_def_cfa_offset 8
 1932              	.LBB3:
1458:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1933              		.loc 1 1458 0
 1934 003a 0023     		movs	r3, #0
 1935 003c 0193     		str	r3, [sp, #4]
 1936 003e 0368     		ldr	r3, [r0]
 1937 0040 1A68     		ldr	r2, [r3]
 1938 0042 0192     		str	r2, [sp, #4]
 1939 0044 5A68     		ldr	r2, [r3, #4]
 1940 0046 0192     		str	r2, [sp, #4]
 1941 0048 019A     		ldr	r2, [sp, #4]
 1942              	.LBE3:
1461:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 1943              		.loc 1 1461 0
 1944 004a DA68     		ldr	r2, [r3, #12]
 1945 004c 42F48072 		orr	r2, r2, #256
 1946 0050 DA60     		str	r2, [r3, #12]
1462:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1947              		.loc 1 1462 0
 1948 0052 0268     		ldr	r2, [r0]
ARM GAS  /tmp/cciBiPGK.s 			page 94


 1949 0054 5369     		ldr	r3, [r2, #20]
 1950 0056 43F00103 		orr	r3, r3, #1
 1951 005a 5361     		str	r3, [r2, #20]
1465:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
 1952              		.loc 1 1465 0
 1953 005c 0268     		ldr	r2, [r0]
 1954 005e 5369     		ldr	r3, [r2, #20]
 1955 0060 43F04003 		orr	r3, r3, #64
 1956 0064 5361     		str	r3, [r2, #20]
1469:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1957              		.loc 1 1469 0
 1958 0066 0023     		movs	r3, #0
 1959 0068 80F83830 		strb	r3, [r0, #56]
1471:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
 1960              		.loc 1 1471 0
 1961 006c 1846     		mov	r0, r3
 1962              	.LVL180:
1472:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1963              		.loc 1 1472 0
 1964 006e 02B0     		add	sp, sp, #8
 1965              	.LCFI26:
 1966              		.cfi_def_cfa_offset 0
 1967              		@ sp needed
 1968 0070 7047     		bx	lr
 1969              	.LVL181:
 1970              	.L162:
1447:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 1971              		.loc 1 1447 0
 1972 0072 0220     		movs	r0, #2
 1973              	.LVL182:
 1974 0074 7047     		bx	lr
 1975              		.cfi_endproc
 1976              	.LFE86:
 1978              		.section	.text.HAL_UART_DMAStop,"ax",%progbits
 1979              		.align	1
 1980              		.global	HAL_UART_DMAStop
 1981              		.syntax unified
 1982              		.thumb
 1983              		.thumb_func
 1984              		.fpu softvfp
 1986              	HAL_UART_DMAStop:
 1987              	.LFB87:
1481:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
 1988              		.loc 1 1481 0
 1989              		.cfi_startproc
 1990              		@ args = 0, pretend = 0, frame = 0
 1991              		@ frame_needed = 0, uses_anonymous_args = 0
 1992              	.LVL183:
 1993 0000 10B5     		push	{r4, lr}
 1994              	.LCFI27:
 1995              		.cfi_def_cfa_offset 8
 1996              		.cfi_offset 4, -8
 1997              		.cfi_offset 14, -4
 1998 0002 0446     		mov	r4, r0
 1999              	.LVL184:
1490:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 2000              		.loc 1 1490 0
ARM GAS  /tmp/cciBiPGK.s 			page 95


 2001 0004 0168     		ldr	r1, [r0]
 2002 0006 4A69     		ldr	r2, [r1, #20]
 2003              	.LVL185:
1491:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 2004              		.loc 1 1491 0
 2005 0008 90F83930 		ldrb	r3, [r0, #57]	@ zero_extendqisi2
 2006 000c DBB2     		uxtb	r3, r3
 2007 000e 212B     		cmp	r3, #33
 2008 0010 0AD0     		beq	.L176
 2009              	.LVL186:
 2010              	.L171:
1504:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 2011              		.loc 1 1504 0
 2012 0012 2168     		ldr	r1, [r4]
 2013 0014 4A69     		ldr	r2, [r1, #20]
 2014 0016 02F04002 		and	r2, r2, #64
 2015              	.LVL187:
1505:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 2016              		.loc 1 1505 0
 2017 001a 94F83A30 		ldrb	r3, [r4, #58]	@ zero_extendqisi2
 2018 001e DBB2     		uxtb	r3, r3
 2019 0020 222B     		cmp	r3, #34
 2020 0022 11D0     		beq	.L177
 2021              	.LVL188:
 2022              	.L173:
1518:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 2023              		.loc 1 1518 0
 2024 0024 0020     		movs	r0, #0
 2025 0026 10BD     		pop	{r4, pc}
 2026              	.LVL189:
 2027              	.L176:
 2028 0028 02F08002 		and	r2, r2, #128
 2029              	.LVL190:
1491:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 2030              		.loc 1 1491 0 discriminator 1
 2031 002c 002A     		cmp	r2, #0
 2032 002e F0D0     		beq	.L171
1493:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 2033              		.loc 1 1493 0
 2034 0030 4B69     		ldr	r3, [r1, #20]
 2035 0032 23F08003 		bic	r3, r3, #128
 2036 0036 4B61     		str	r3, [r1, #20]
1496:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 2037              		.loc 1 1496 0
 2038 0038 006B     		ldr	r0, [r0, #48]
 2039              	.LVL191:
 2040 003a 08B1     		cbz	r0, .L172
1498:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
 2041              		.loc 1 1498 0
 2042 003c FFF7FEFF 		bl	HAL_DMA_Abort
 2043              	.LVL192:
 2044              	.L172:
1500:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
 2045              		.loc 1 1500 0
 2046 0040 2046     		mov	r0, r4
 2047 0042 FFF7FEFF 		bl	UART_EndTxTransfer
 2048              	.LVL193:
ARM GAS  /tmp/cciBiPGK.s 			page 96


 2049 0046 E4E7     		b	.L171
 2050              	.LVL194:
 2051              	.L177:
1505:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 2052              		.loc 1 1505 0 discriminator 1
 2053 0048 002A     		cmp	r2, #0
 2054 004a EBD0     		beq	.L173
1507:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 2055              		.loc 1 1507 0
 2056 004c 4B69     		ldr	r3, [r1, #20]
 2057 004e 23F04003 		bic	r3, r3, #64
 2058 0052 4B61     		str	r3, [r1, #20]
1510:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 2059              		.loc 1 1510 0
 2060 0054 606B     		ldr	r0, [r4, #52]
 2061 0056 08B1     		cbz	r0, .L174
1512:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
 2062              		.loc 1 1512 0
 2063 0058 FFF7FEFF 		bl	HAL_DMA_Abort
 2064              	.LVL195:
 2065              	.L174:
1514:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
 2066              		.loc 1 1514 0
 2067 005c 2046     		mov	r0, r4
 2068 005e FFF7FEFF 		bl	UART_EndRxTransfer
 2069              	.LVL196:
 2070 0062 DFE7     		b	.L173
 2071              		.cfi_endproc
 2072              	.LFE87:
 2074              		.section	.text.HAL_UART_Abort,"ax",%progbits
 2075              		.align	1
 2076              		.global	HAL_UART_Abort
 2077              		.syntax unified
 2078              		.thumb
 2079              		.thumb_func
 2080              		.fpu softvfp
 2082              	HAL_UART_Abort:
 2083              	.LFB88:
1533:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 2084              		.loc 1 1533 0
 2085              		.cfi_startproc
 2086              		@ args = 0, pretend = 0, frame = 0
 2087              		@ frame_needed = 0, uses_anonymous_args = 0
 2088              	.LVL197:
 2089 0000 10B5     		push	{r4, lr}
 2090              	.LCFI28:
 2091              		.cfi_def_cfa_offset 8
 2092              		.cfi_offset 4, -8
 2093              		.cfi_offset 14, -4
 2094 0002 0446     		mov	r4, r0
1535:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2095              		.loc 1 1535 0
 2096 0004 0268     		ldr	r2, [r0]
 2097 0006 D368     		ldr	r3, [r2, #12]
 2098 0008 23F4F073 		bic	r3, r3, #480
 2099 000c D360     		str	r3, [r2, #12]
1536:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
ARM GAS  /tmp/cciBiPGK.s 			page 97


 2100              		.loc 1 1536 0
 2101 000e 0268     		ldr	r2, [r0]
 2102 0010 5369     		ldr	r3, [r2, #20]
 2103 0012 23F00103 		bic	r3, r3, #1
 2104 0016 5361     		str	r3, [r2, #20]
1539:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 2105              		.loc 1 1539 0
 2106 0018 0368     		ldr	r3, [r0]
 2107 001a 5A69     		ldr	r2, [r3, #20]
 2108 001c 12F0800F 		tst	r2, #128
 2109 0020 0BD0     		beq	.L179
1541:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 2110              		.loc 1 1541 0
 2111 0022 5A69     		ldr	r2, [r3, #20]
 2112 0024 22F08002 		bic	r2, r2, #128
 2113 0028 5A61     		str	r2, [r3, #20]
1544:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 2114              		.loc 1 1544 0
 2115 002a 036B     		ldr	r3, [r0, #48]
 2116 002c 2BB1     		cbz	r3, .L179
1548:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 2117              		.loc 1 1548 0
 2118 002e 0022     		movs	r2, #0
 2119 0030 5A63     		str	r2, [r3, #52]
1550:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       {
 2120              		.loc 1 1550 0
 2121 0032 006B     		ldr	r0, [r0, #48]
 2122              	.LVL198:
 2123 0034 FFF7FEFF 		bl	HAL_DMA_Abort
 2124              	.LVL199:
 2125 0038 D0B9     		cbnz	r0, .L183
 2126              	.L179:
1564:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 2127              		.loc 1 1564 0
 2128 003a 2368     		ldr	r3, [r4]
 2129 003c 5A69     		ldr	r2, [r3, #20]
 2130 003e 12F0400F 		tst	r2, #64
 2131 0042 0BD0     		beq	.L181
1566:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 2132              		.loc 1 1566 0
 2133 0044 5A69     		ldr	r2, [r3, #20]
 2134 0046 22F04002 		bic	r2, r2, #64
 2135 004a 5A61     		str	r2, [r3, #20]
1569:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 2136              		.loc 1 1569 0
 2137 004c 636B     		ldr	r3, [r4, #52]
 2138 004e 2BB1     		cbz	r3, .L181
1573:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 2139              		.loc 1 1573 0
 2140 0050 0022     		movs	r2, #0
 2141 0052 5A63     		str	r2, [r3, #52]
1575:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       {
 2142              		.loc 1 1575 0
 2143 0054 606B     		ldr	r0, [r4, #52]
 2144 0056 FFF7FEFF 		bl	HAL_DMA_Abort
 2145              	.LVL200:
 2146 005a 90B9     		cbnz	r0, .L184
ARM GAS  /tmp/cciBiPGK.s 			page 98


 2147              	.L181:
1589:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 2148              		.loc 1 1589 0
 2149 005c 0020     		movs	r0, #0
 2150 005e E084     		strh	r0, [r4, #38]	@ movhi
1590:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 2151              		.loc 1 1590 0
 2152 0060 E085     		strh	r0, [r4, #46]	@ movhi
1593:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 2153              		.loc 1 1593 0
 2154 0062 E063     		str	r0, [r4, #60]
1596:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 2155              		.loc 1 1596 0
 2156 0064 2023     		movs	r3, #32
 2157 0066 84F83A30 		strb	r3, [r4, #58]
1597:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 2158              		.loc 1 1597 0
 2159 006a 84F83930 		strb	r3, [r4, #57]
1600:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 2160              		.loc 1 1600 0
 2161 006e 10BD     		pop	{r4, pc}
 2162              	.LVL201:
 2163              	.L183:
1552:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         {
 2164              		.loc 1 1552 0
 2165 0070 206B     		ldr	r0, [r4, #48]
 2166 0072 FFF7FEFF 		bl	HAL_DMA_GetError
 2167              	.LVL202:
 2168 0076 2028     		cmp	r0, #32
 2169 0078 DFD1     		bne	.L179
1555:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 2170              		.loc 1 1555 0
 2171 007a 1023     		movs	r3, #16
 2172 007c E363     		str	r3, [r4, #60]
1557:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         }
 2173              		.loc 1 1557 0
 2174 007e 0320     		movs	r0, #3
 2175 0080 10BD     		pop	{r4, pc}
 2176              	.LVL203:
 2177              	.L184:
1577:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         {
 2178              		.loc 1 1577 0
 2179 0082 606B     		ldr	r0, [r4, #52]
 2180 0084 FFF7FEFF 		bl	HAL_DMA_GetError
 2181              	.LVL204:
 2182 0088 2028     		cmp	r0, #32
 2183 008a E7D1     		bne	.L181
1580:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 2184              		.loc 1 1580 0
 2185 008c 1023     		movs	r3, #16
 2186 008e E363     		str	r3, [r4, #60]
1582:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         }
 2187              		.loc 1 1582 0
 2188 0090 0320     		movs	r0, #3
 2189 0092 10BD     		pop	{r4, pc}
 2190              		.cfi_endproc
 2191              	.LFE88:
ARM GAS  /tmp/cciBiPGK.s 			page 99


 2193              		.section	.text.HAL_UART_AbortTransmit,"ax",%progbits
 2194              		.align	1
 2195              		.global	HAL_UART_AbortTransmit
 2196              		.syntax unified
 2197              		.thumb
 2198              		.thumb_func
 2199              		.fpu softvfp
 2201              	HAL_UART_AbortTransmit:
 2202              	.LFB89:
1615:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
 2203              		.loc 1 1615 0
 2204              		.cfi_startproc
 2205              		@ args = 0, pretend = 0, frame = 0
 2206              		@ frame_needed = 0, uses_anonymous_args = 0
 2207              	.LVL205:
 2208 0000 10B5     		push	{r4, lr}
 2209              	.LCFI29:
 2210              		.cfi_def_cfa_offset 8
 2211              		.cfi_offset 4, -8
 2212              		.cfi_offset 14, -4
 2213 0002 0446     		mov	r4, r0
1617:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 2214              		.loc 1 1617 0
 2215 0004 0268     		ldr	r2, [r0]
 2216 0006 D368     		ldr	r3, [r2, #12]
 2217 0008 23F0C003 		bic	r3, r3, #192
 2218 000c D360     		str	r3, [r2, #12]
1620:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 2219              		.loc 1 1620 0
 2220 000e 0368     		ldr	r3, [r0]
 2221 0010 5A69     		ldr	r2, [r3, #20]
 2222 0012 12F0800F 		tst	r2, #128
 2223 0016 0BD0     		beq	.L186
1622:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 2224              		.loc 1 1622 0
 2225 0018 5A69     		ldr	r2, [r3, #20]
 2226 001a 22F08002 		bic	r2, r2, #128
 2227 001e 5A61     		str	r2, [r3, #20]
1625:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 2228              		.loc 1 1625 0
 2229 0020 036B     		ldr	r3, [r0, #48]
 2230 0022 2BB1     		cbz	r3, .L186
1629:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 2231              		.loc 1 1629 0
 2232 0024 0022     		movs	r2, #0
 2233 0026 5A63     		str	r2, [r3, #52]
1631:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       {
 2234              		.loc 1 1631 0
 2235 0028 006B     		ldr	r0, [r0, #48]
 2236              	.LVL206:
 2237 002a FFF7FEFF 		bl	HAL_DMA_Abort
 2238              	.LVL207:
 2239 002e 28B9     		cbnz	r0, .L189
 2240              	.L186:
1645:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 2241              		.loc 1 1645 0
 2242 0030 0020     		movs	r0, #0
ARM GAS  /tmp/cciBiPGK.s 			page 100


 2243 0032 E084     		strh	r0, [r4, #38]	@ movhi
1648:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 2244              		.loc 1 1648 0
 2245 0034 2023     		movs	r3, #32
 2246 0036 84F83930 		strb	r3, [r4, #57]
1651:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 2247              		.loc 1 1651 0
 2248 003a 10BD     		pop	{r4, pc}
 2249              	.LVL208:
 2250              	.L189:
1633:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         {
 2251              		.loc 1 1633 0
 2252 003c 206B     		ldr	r0, [r4, #48]
 2253 003e FFF7FEFF 		bl	HAL_DMA_GetError
 2254              	.LVL209:
 2255 0042 2028     		cmp	r0, #32
 2256 0044 F4D1     		bne	.L186
1636:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 2257              		.loc 1 1636 0
 2258 0046 1023     		movs	r3, #16
 2259 0048 E363     		str	r3, [r4, #60]
1638:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         }
 2260              		.loc 1 1638 0
 2261 004a 0320     		movs	r0, #3
 2262 004c 10BD     		pop	{r4, pc}
 2263              		.cfi_endproc
 2264              	.LFE89:
 2266              		.section	.text.HAL_UART_AbortReceive,"ax",%progbits
 2267              		.align	1
 2268              		.global	HAL_UART_AbortReceive
 2269              		.syntax unified
 2270              		.thumb
 2271              		.thumb_func
 2272              		.fpu softvfp
 2274              	HAL_UART_AbortReceive:
 2275              	.LFB90:
1666:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 2276              		.loc 1 1666 0
 2277              		.cfi_startproc
 2278              		@ args = 0, pretend = 0, frame = 0
 2279              		@ frame_needed = 0, uses_anonymous_args = 0
 2280              	.LVL210:
 2281 0000 10B5     		push	{r4, lr}
 2282              	.LCFI30:
 2283              		.cfi_def_cfa_offset 8
 2284              		.cfi_offset 4, -8
 2285              		.cfi_offset 14, -4
 2286 0002 0446     		mov	r4, r0
1668:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2287              		.loc 1 1668 0
 2288 0004 0268     		ldr	r2, [r0]
 2289 0006 D368     		ldr	r3, [r2, #12]
 2290 0008 23F49073 		bic	r3, r3, #288
 2291 000c D360     		str	r3, [r2, #12]
1669:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 2292              		.loc 1 1669 0
 2293 000e 0268     		ldr	r2, [r0]
ARM GAS  /tmp/cciBiPGK.s 			page 101


 2294 0010 5369     		ldr	r3, [r2, #20]
 2295 0012 23F00103 		bic	r3, r3, #1
 2296 0016 5361     		str	r3, [r2, #20]
1672:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 2297              		.loc 1 1672 0
 2298 0018 0368     		ldr	r3, [r0]
 2299 001a 5A69     		ldr	r2, [r3, #20]
 2300 001c 12F0400F 		tst	r2, #64
 2301 0020 0BD0     		beq	.L191
1674:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 2302              		.loc 1 1674 0
 2303 0022 5A69     		ldr	r2, [r3, #20]
 2304 0024 22F04002 		bic	r2, r2, #64
 2305 0028 5A61     		str	r2, [r3, #20]
1677:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 2306              		.loc 1 1677 0
 2307 002a 436B     		ldr	r3, [r0, #52]
 2308 002c 2BB1     		cbz	r3, .L191
1681:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 2309              		.loc 1 1681 0
 2310 002e 0022     		movs	r2, #0
 2311 0030 5A63     		str	r2, [r3, #52]
1683:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       {
 2312              		.loc 1 1683 0
 2313 0032 406B     		ldr	r0, [r0, #52]
 2314              	.LVL211:
 2315 0034 FFF7FEFF 		bl	HAL_DMA_Abort
 2316              	.LVL212:
 2317 0038 28B9     		cbnz	r0, .L194
 2318              	.L191:
1697:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 2319              		.loc 1 1697 0
 2320 003a 0020     		movs	r0, #0
 2321 003c E085     		strh	r0, [r4, #46]	@ movhi
1700:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 2322              		.loc 1 1700 0
 2323 003e 2023     		movs	r3, #32
 2324 0040 84F83A30 		strb	r3, [r4, #58]
1703:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 2325              		.loc 1 1703 0
 2326 0044 10BD     		pop	{r4, pc}
 2327              	.LVL213:
 2328              	.L194:
1685:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         {
 2329              		.loc 1 1685 0
 2330 0046 606B     		ldr	r0, [r4, #52]
 2331 0048 FFF7FEFF 		bl	HAL_DMA_GetError
 2332              	.LVL214:
 2333 004c 2028     		cmp	r0, #32
 2334 004e F4D1     		bne	.L191
1688:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 2335              		.loc 1 1688 0
 2336 0050 1023     		movs	r3, #16
 2337 0052 E363     		str	r3, [r4, #60]
1690:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         }
 2338              		.loc 1 1690 0
 2339 0054 0320     		movs	r0, #3
ARM GAS  /tmp/cciBiPGK.s 			page 102


 2340 0056 10BD     		pop	{r4, pc}
 2341              		.cfi_endproc
 2342              	.LFE90:
 2344              		.section	.text.HAL_UART_TxCpltCallback,"ax",%progbits
 2345              		.align	1
 2346              		.weak	HAL_UART_TxCpltCallback
 2347              		.syntax unified
 2348              		.thumb
 2349              		.thumb_func
 2350              		.fpu softvfp
 2352              	HAL_UART_TxCpltCallback:
 2353              	.LFB95:
2141:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 2354              		.loc 1 2141 0
 2355              		.cfi_startproc
 2356              		@ args = 0, pretend = 0, frame = 0
 2357              		@ frame_needed = 0, uses_anonymous_args = 0
 2358              		@ link register save eliminated.
 2359              	.LVL215:
 2360 0000 7047     		bx	lr
 2361              		.cfi_endproc
 2362              	.LFE95:
 2364              		.section	.text.UART_DMATransmitCplt,"ax",%progbits
 2365              		.align	1
 2366              		.syntax unified
 2367              		.thumb
 2368              		.thumb_func
 2369              		.fpu softvfp
 2371              	UART_DMATransmitCplt:
 2372              	.LFB110:
2516:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2373              		.loc 1 2516 0
 2374              		.cfi_startproc
 2375              		@ args = 0, pretend = 0, frame = 0
 2376              		@ frame_needed = 0, uses_anonymous_args = 0
 2377              	.LVL216:
2516:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2378              		.loc 1 2516 0
 2379 0000 08B5     		push	{r3, lr}
 2380              	.LCFI31:
 2381              		.cfi_def_cfa_offset 8
 2382              		.cfi_offset 3, -8
 2383              		.cfi_offset 14, -4
2517:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* DMA Normal mode*/
 2384              		.loc 1 2517 0
 2385 0002 436A     		ldr	r3, [r0, #36]
 2386              	.LVL217:
2519:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 2387              		.loc 1 2519 0
 2388 0004 0268     		ldr	r2, [r0]
 2389 0006 1268     		ldr	r2, [r2]
 2390 0008 12F0200F 		tst	r2, #32
 2391 000c 0CD1     		bne	.L197
2521:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 2392              		.loc 1 2521 0
 2393 000e 0022     		movs	r2, #0
 2394 0010 DA84     		strh	r2, [r3, #38]	@ movhi
ARM GAS  /tmp/cciBiPGK.s 			page 103


2525:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 2395              		.loc 1 2525 0
 2396 0012 1968     		ldr	r1, [r3]
 2397 0014 4A69     		ldr	r2, [r1, #20]
 2398 0016 22F08002 		bic	r2, r2, #128
 2399 001a 4A61     		str	r2, [r1, #20]
2528:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 2400              		.loc 1 2528 0
 2401 001c 1A68     		ldr	r2, [r3]
 2402 001e D368     		ldr	r3, [r2, #12]
 2403              	.LVL218:
 2404 0020 43F04003 		orr	r3, r3, #64
 2405 0024 D360     		str	r3, [r2, #12]
 2406 0026 08BD     		pop	{r3, pc}
 2407              	.LVL219:
 2408              	.L197:
2539:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2409              		.loc 1 2539 0
 2410 0028 1846     		mov	r0, r3
 2411              	.LVL220:
 2412 002a FFF7FEFF 		bl	HAL_UART_TxCpltCallback
 2413              	.LVL221:
 2414 002e 08BD     		pop	{r3, pc}
 2415              		.cfi_endproc
 2416              	.LFE110:
 2418              		.section	.text.UART_EndTransmit_IT,"ax",%progbits
 2419              		.align	1
 2420              		.syntax unified
 2421              		.thumb
 2422              		.thumb_func
 2423              		.fpu softvfp
 2425              	UART_EndTransmit_IT:
 2426              	.LFB124:
2941:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Disable the UART Transmit Complete Interrupt */
 2427              		.loc 1 2941 0
 2428              		.cfi_startproc
 2429              		@ args = 0, pretend = 0, frame = 0
 2430              		@ frame_needed = 0, uses_anonymous_args = 0
 2431              	.LVL222:
 2432 0000 08B5     		push	{r3, lr}
 2433              	.LCFI32:
 2434              		.cfi_def_cfa_offset 8
 2435              		.cfi_offset 3, -8
 2436              		.cfi_offset 14, -4
2943:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 2437              		.loc 1 2943 0
 2438 0002 0168     		ldr	r1, [r0]
 2439 0004 CB68     		ldr	r3, [r1, #12]
 2440 0006 23F04003 		bic	r3, r3, #64
 2441 000a CB60     		str	r3, [r1, #12]
2946:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 2442              		.loc 1 2946 0
 2443 000c 2023     		movs	r3, #32
 2444 000e 80F83930 		strb	r3, [r0, #57]
2953:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2445              		.loc 1 2953 0
 2446 0012 FFF7FEFF 		bl	HAL_UART_TxCpltCallback
ARM GAS  /tmp/cciBiPGK.s 			page 104


 2447              	.LVL223:
2957:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 2448              		.loc 1 2957 0
 2449 0016 0020     		movs	r0, #0
 2450 0018 08BD     		pop	{r3, pc}
 2451              		.cfi_endproc
 2452              	.LFE124:
 2454              		.section	.text.HAL_UART_TxHalfCpltCallback,"ax",%progbits
 2455              		.align	1
 2456              		.weak	HAL_UART_TxHalfCpltCallback
 2457              		.syntax unified
 2458              		.thumb
 2459              		.thumb_func
 2460              		.fpu softvfp
 2462              	HAL_UART_TxHalfCpltCallback:
 2463              	.LFB96:
2156:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 2464              		.loc 1 2156 0
 2465              		.cfi_startproc
 2466              		@ args = 0, pretend = 0, frame = 0
 2467              		@ frame_needed = 0, uses_anonymous_args = 0
 2468              		@ link register save eliminated.
 2469              	.LVL224:
 2470 0000 7047     		bx	lr
 2471              		.cfi_endproc
 2472              	.LFE96:
 2474              		.section	.text.UART_DMATxHalfCplt,"ax",%progbits
 2475              		.align	1
 2476              		.syntax unified
 2477              		.thumb
 2478              		.thumb_func
 2479              		.fpu softvfp
 2481              	UART_DMATxHalfCplt:
 2482              	.LFB111:
2551:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2483              		.loc 1 2551 0
 2484              		.cfi_startproc
 2485              		@ args = 0, pretend = 0, frame = 0
 2486              		@ frame_needed = 0, uses_anonymous_args = 0
 2487              	.LVL225:
2551:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2488              		.loc 1 2551 0
 2489 0000 08B5     		push	{r3, lr}
 2490              	.LCFI33:
 2491              		.cfi_def_cfa_offset 8
 2492              		.cfi_offset 3, -8
 2493              		.cfi_offset 14, -4
 2494              	.LVL226:
2559:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2495              		.loc 1 2559 0
 2496 0002 406A     		ldr	r0, [r0, #36]
 2497              	.LVL227:
 2498 0004 FFF7FEFF 		bl	HAL_UART_TxHalfCpltCallback
 2499              	.LVL228:
 2500 0008 08BD     		pop	{r3, pc}
 2501              		.cfi_endproc
 2502              	.LFE111:
ARM GAS  /tmp/cciBiPGK.s 			page 105


 2504              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 2505              		.align	1
 2506              		.weak	HAL_UART_RxCpltCallback
 2507              		.syntax unified
 2508              		.thumb
 2509              		.thumb_func
 2510              		.fpu softvfp
 2512              	HAL_UART_RxCpltCallback:
 2513              	.LFB97:
2171:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 2514              		.loc 1 2171 0
 2515              		.cfi_startproc
 2516              		@ args = 0, pretend = 0, frame = 0
 2517              		@ frame_needed = 0, uses_anonymous_args = 0
 2518              		@ link register save eliminated.
 2519              	.LVL229:
 2520 0000 7047     		bx	lr
 2521              		.cfi_endproc
 2522              	.LFE97:
 2524              		.section	.text.UART_DMAReceiveCplt,"ax",%progbits
 2525              		.align	1
 2526              		.syntax unified
 2527              		.thumb
 2528              		.thumb_func
 2529              		.fpu softvfp
 2531              	UART_DMAReceiveCplt:
 2532              	.LFB112:
2570:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2533              		.loc 1 2570 0
 2534              		.cfi_startproc
 2535              		@ args = 0, pretend = 0, frame = 0
 2536              		@ frame_needed = 0, uses_anonymous_args = 0
 2537              	.LVL230:
2570:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2538              		.loc 1 2570 0
 2539 0000 08B5     		push	{r3, lr}
 2540              	.LCFI34:
 2541              		.cfi_def_cfa_offset 8
 2542              		.cfi_offset 3, -8
 2543              		.cfi_offset 14, -4
2571:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* DMA Normal mode*/
 2544              		.loc 1 2571 0
 2545 0002 436A     		ldr	r3, [r0, #36]
 2546              	.LVL231:
2573:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 2547              		.loc 1 2573 0
 2548 0004 0268     		ldr	r2, [r0]
 2549 0006 1268     		ldr	r2, [r2]
 2550 0008 12F0200F 		tst	r2, #32
 2551 000c 13D1     		bne	.L207
2575:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 2552              		.loc 1 2575 0
 2553 000e 0022     		movs	r2, #0
 2554 0010 DA85     		strh	r2, [r3, #46]	@ movhi
2578:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2555              		.loc 1 2578 0
 2556 0012 1968     		ldr	r1, [r3]
ARM GAS  /tmp/cciBiPGK.s 			page 106


 2557 0014 CA68     		ldr	r2, [r1, #12]
 2558 0016 22F48072 		bic	r2, r2, #256
 2559 001a CA60     		str	r2, [r1, #12]
2579:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 2560              		.loc 1 2579 0
 2561 001c 1968     		ldr	r1, [r3]
 2562 001e 4A69     		ldr	r2, [r1, #20]
 2563 0020 22F00102 		bic	r2, r2, #1
 2564 0024 4A61     		str	r2, [r1, #20]
2583:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 2565              		.loc 1 2583 0
 2566 0026 1968     		ldr	r1, [r3]
 2567 0028 4A69     		ldr	r2, [r1, #20]
 2568 002a 22F04002 		bic	r2, r2, #64
 2569 002e 4A61     		str	r2, [r1, #20]
2586:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
 2570              		.loc 1 2586 0
 2571 0030 2022     		movs	r2, #32
 2572 0032 83F83A20 		strb	r2, [r3, #58]
 2573              	.L207:
2593:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2574              		.loc 1 2593 0
 2575 0036 1846     		mov	r0, r3
 2576              	.LVL232:
 2577 0038 FFF7FEFF 		bl	HAL_UART_RxCpltCallback
 2578              	.LVL233:
 2579 003c 08BD     		pop	{r3, pc}
 2580              		.cfi_endproc
 2581              	.LFE112:
 2583              		.section	.text.UART_Receive_IT,"ax",%progbits
 2584              		.align	1
 2585              		.syntax unified
 2586              		.thumb
 2587              		.thumb_func
 2588              		.fpu softvfp
 2590              	UART_Receive_IT:
 2591              	.LFB125:
2966:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   uint16_t *tmp;
 2592              		.loc 1 2966 0
 2593              		.cfi_startproc
 2594              		@ args = 0, pretend = 0, frame = 0
 2595              		@ frame_needed = 0, uses_anonymous_args = 0
 2596              	.LVL234:
 2597 0000 08B5     		push	{r3, lr}
 2598              	.LCFI35:
 2599              		.cfi_def_cfa_offset 8
 2600              		.cfi_offset 3, -8
 2601              		.cfi_offset 14, -4
2970:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 2602              		.loc 1 2970 0
 2603 0002 90F83A30 		ldrb	r3, [r0, #58]	@ zero_extendqisi2
 2604 0006 DBB2     		uxtb	r3, r3
 2605 0008 222B     		cmp	r3, #34
 2606 000a 01D0     		beq	.L218
3026:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
 2607              		.loc 1 3026 0
 2608 000c 0220     		movs	r0, #2
ARM GAS  /tmp/cciBiPGK.s 			page 107


 2609              	.LVL235:
 2610 000e 08BD     		pop	{r3, pc}
 2611              	.LVL236:
 2612              	.L218:
2972:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 2613              		.loc 1 2972 0
 2614 0010 8368     		ldr	r3, [r0, #8]
 2615 0012 B3F5805F 		cmp	r3, #4096
 2616 0016 0FD0     		beq	.L219
2988:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       {
 2617              		.loc 1 2988 0
 2618 0018 0369     		ldr	r3, [r0, #16]
 2619 001a 0BBB     		cbnz	r3, .L214
2990:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       }
 2620              		.loc 1 2990 0
 2621 001c 836A     		ldr	r3, [r0, #40]
 2622 001e 5A1C     		adds	r2, r3, #1
 2623 0020 8262     		str	r2, [r0, #40]
 2624 0022 0268     		ldr	r2, [r0]
 2625 0024 5268     		ldr	r2, [r2, #4]
 2626 0026 1A70     		strb	r2, [r3]
 2627              	.L213:
2998:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 2628              		.loc 1 2998 0
 2629 0028 C38D     		ldrh	r3, [r0, #46]
 2630 002a 9BB2     		uxth	r3, r3
 2631 002c 013B     		subs	r3, r3, #1
 2632 002e 9BB2     		uxth	r3, r3
 2633 0030 C385     		strh	r3, [r0, #46]	@ movhi
 2634 0032 F3B1     		cbz	r3, .L220
3022:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
 2635              		.loc 1 3022 0
 2636 0034 0020     		movs	r0, #0
 2637              	.LVL237:
3028:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 2638              		.loc 1 3028 0
 2639 0036 08BD     		pop	{r3, pc}
 2640              	.LVL238:
 2641              	.L219:
2974:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       if (huart->Init.Parity == UART_PARITY_NONE)
 2642              		.loc 1 2974 0
 2643 0038 826A     		ldr	r2, [r0, #40]
 2644              	.LVL239:
2975:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       {
 2645              		.loc 1 2975 0
 2646 003a 0369     		ldr	r3, [r0, #16]
 2647 003c 43B9     		cbnz	r3, .L212
2977:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         huart->pRxBuffPtr += 2U;
 2648              		.loc 1 2977 0
 2649 003e 0368     		ldr	r3, [r0]
 2650 0040 5B68     		ldr	r3, [r3, #4]
 2651 0042 C3F30803 		ubfx	r3, r3, #0, #9
 2652 0046 1380     		strh	r3, [r2]	@ movhi
2978:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       }
 2653              		.loc 1 2978 0
 2654 0048 836A     		ldr	r3, [r0, #40]
 2655 004a 0233     		adds	r3, r3, #2
ARM GAS  /tmp/cciBiPGK.s 			page 108


 2656 004c 8362     		str	r3, [r0, #40]
 2657 004e EBE7     		b	.L213
 2658              	.L212:
2982:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         huart->pRxBuffPtr += 1U;
 2659              		.loc 1 2982 0
 2660 0050 0368     		ldr	r3, [r0]
 2661 0052 5B68     		ldr	r3, [r3, #4]
 2662 0054 DBB2     		uxtb	r3, r3
 2663 0056 1380     		strh	r3, [r2]	@ movhi
2983:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       }
 2664              		.loc 1 2983 0
 2665 0058 836A     		ldr	r3, [r0, #40]
 2666 005a 0133     		adds	r3, r3, #1
 2667 005c 8362     		str	r3, [r0, #40]
 2668 005e E3E7     		b	.L213
 2669              	.LVL240:
 2670              	.L214:
2994:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       }
 2671              		.loc 1 2994 0
 2672 0060 826A     		ldr	r2, [r0, #40]
 2673 0062 531C     		adds	r3, r2, #1
 2674 0064 8362     		str	r3, [r0, #40]
 2675 0066 0368     		ldr	r3, [r0]
 2676 0068 5B68     		ldr	r3, [r3, #4]
 2677 006a 03F07F03 		and	r3, r3, #127
 2678 006e 1370     		strb	r3, [r2]
 2679 0070 DAE7     		b	.L213
 2680              	.L220:
3001:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 2681              		.loc 1 3001 0
 2682 0072 0268     		ldr	r2, [r0]
 2683 0074 D368     		ldr	r3, [r2, #12]
 2684 0076 23F02003 		bic	r3, r3, #32
 2685 007a D360     		str	r3, [r2, #12]
3004:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 2686              		.loc 1 3004 0
 2687 007c 0268     		ldr	r2, [r0]
 2688 007e D368     		ldr	r3, [r2, #12]
 2689 0080 23F48073 		bic	r3, r3, #256
 2690 0084 D360     		str	r3, [r2, #12]
3007:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 2691              		.loc 1 3007 0
 2692 0086 0268     		ldr	r2, [r0]
 2693 0088 5369     		ldr	r3, [r2, #20]
 2694 008a 23F00103 		bic	r3, r3, #1
 2695 008e 5361     		str	r3, [r2, #20]
3010:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 2696              		.loc 1 3010 0
 2697 0090 2023     		movs	r3, #32
 2698 0092 80F83A30 		strb	r3, [r0, #58]
3017:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2699              		.loc 1 3017 0
 2700 0096 FFF7FEFF 		bl	HAL_UART_RxCpltCallback
 2701              	.LVL241:
3020:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
 2702              		.loc 1 3020 0
 2703 009a 0020     		movs	r0, #0
ARM GAS  /tmp/cciBiPGK.s 			page 109


 2704 009c 08BD     		pop	{r3, pc}
 2705              		.cfi_endproc
 2706              	.LFE125:
 2708              		.section	.text.HAL_UART_RxHalfCpltCallback,"ax",%progbits
 2709              		.align	1
 2710              		.weak	HAL_UART_RxHalfCpltCallback
 2711              		.syntax unified
 2712              		.thumb
 2713              		.thumb_func
 2714              		.fpu softvfp
 2716              	HAL_UART_RxHalfCpltCallback:
 2717              	.LFB98:
2186:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 2718              		.loc 1 2186 0
 2719              		.cfi_startproc
 2720              		@ args = 0, pretend = 0, frame = 0
 2721              		@ frame_needed = 0, uses_anonymous_args = 0
 2722              		@ link register save eliminated.
 2723              	.LVL242:
 2724 0000 7047     		bx	lr
 2725              		.cfi_endproc
 2726              	.LFE98:
 2728              		.section	.text.UART_DMARxHalfCplt,"ax",%progbits
 2729              		.align	1
 2730              		.syntax unified
 2731              		.thumb
 2732              		.thumb_func
 2733              		.fpu softvfp
 2735              	UART_DMARxHalfCplt:
 2736              	.LFB113:
2604:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2737              		.loc 1 2604 0
 2738              		.cfi_startproc
 2739              		@ args = 0, pretend = 0, frame = 0
 2740              		@ frame_needed = 0, uses_anonymous_args = 0
 2741              	.LVL243:
2604:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2742              		.loc 1 2604 0
 2743 0000 08B5     		push	{r3, lr}
 2744              	.LCFI36:
 2745              		.cfi_def_cfa_offset 8
 2746              		.cfi_offset 3, -8
 2747              		.cfi_offset 14, -4
 2748              	.LVL244:
2612:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2749              		.loc 1 2612 0
 2750 0002 406A     		ldr	r0, [r0, #36]
 2751              	.LVL245:
 2752 0004 FFF7FEFF 		bl	HAL_UART_RxHalfCpltCallback
 2753              	.LVL246:
 2754 0008 08BD     		pop	{r3, pc}
 2755              		.cfi_endproc
 2756              	.LFE113:
 2758              		.section	.text.HAL_UART_ErrorCallback,"ax",%progbits
 2759              		.align	1
 2760              		.weak	HAL_UART_ErrorCallback
 2761              		.syntax unified
ARM GAS  /tmp/cciBiPGK.s 			page 110


 2762              		.thumb
 2763              		.thumb_func
 2764              		.fpu softvfp
 2766              	HAL_UART_ErrorCallback:
 2767              	.LFB99:
2201:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 2768              		.loc 1 2201 0
 2769              		.cfi_startproc
 2770              		@ args = 0, pretend = 0, frame = 0
 2771              		@ frame_needed = 0, uses_anonymous_args = 0
 2772              		@ link register save eliminated.
 2773              	.LVL247:
 2774 0000 7047     		bx	lr
 2775              		.cfi_endproc
 2776              	.LFE99:
 2778              		.section	.text.UART_DMAError,"ax",%progbits
 2779              		.align	1
 2780              		.syntax unified
 2781              		.thumb
 2782              		.thumb_func
 2783              		.fpu softvfp
 2785              	UART_DMAError:
 2786              	.LFB114:
2623:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
 2787              		.loc 1 2623 0
 2788              		.cfi_startproc
 2789              		@ args = 0, pretend = 0, frame = 0
 2790              		@ frame_needed = 0, uses_anonymous_args = 0
 2791              	.LVL248:
2623:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
 2792              		.loc 1 2623 0
 2793 0000 10B5     		push	{r4, lr}
 2794              	.LCFI37:
 2795              		.cfi_def_cfa_offset 8
 2796              		.cfi_offset 4, -8
 2797              		.cfi_offset 14, -4
 2798              	.LVL249:
2625:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 2799              		.loc 1 2625 0
 2800 0002 446A     		ldr	r4, [r0, #36]
 2801              	.LVL250:
2628:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 2802              		.loc 1 2628 0
 2803 0004 2368     		ldr	r3, [r4]
 2804 0006 5A69     		ldr	r2, [r3, #20]
 2805              	.LVL251:
2629:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 2806              		.loc 1 2629 0
 2807 0008 94F83930 		ldrb	r3, [r4, #57]	@ zero_extendqisi2
 2808 000c DBB2     		uxtb	r3, r3
 2809 000e 212B     		cmp	r3, #33
 2810 0010 10D0     		beq	.L229
 2811              	.LVL252:
 2812              	.L226:
2636:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 2813              		.loc 1 2636 0
 2814 0012 2368     		ldr	r3, [r4]
ARM GAS  /tmp/cciBiPGK.s 			page 111


 2815 0014 5A69     		ldr	r2, [r3, #20]
 2816 0016 02F04002 		and	r2, r2, #64
 2817              	.LVL253:
2637:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 2818              		.loc 1 2637 0
 2819 001a 94F83A30 		ldrb	r3, [r4, #58]	@ zero_extendqisi2
 2820 001e DBB2     		uxtb	r3, r3
 2821 0020 222B     		cmp	r3, #34
 2822 0022 11D0     		beq	.L230
 2823              	.LVL254:
 2824              	.L227:
2643:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 2825              		.loc 1 2643 0
 2826 0024 E36B     		ldr	r3, [r4, #60]
 2827 0026 43F01003 		orr	r3, r3, #16
 2828 002a E363     		str	r3, [r4, #60]
2649:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2829              		.loc 1 2649 0
 2830 002c 2046     		mov	r0, r4
 2831 002e FFF7FEFF 		bl	HAL_UART_ErrorCallback
 2832              	.LVL255:
 2833 0032 10BD     		pop	{r4, pc}
 2834              	.LVL256:
 2835              	.L229:
 2836 0034 02F08002 		and	r2, r2, #128
 2837              	.LVL257:
2629:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 2838              		.loc 1 2629 0 discriminator 1
 2839 0038 002A     		cmp	r2, #0
 2840 003a EAD0     		beq	.L226
2631:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     UART_EndTxTransfer(huart);
 2841              		.loc 1 2631 0
 2842 003c 0023     		movs	r3, #0
 2843 003e E384     		strh	r3, [r4, #38]	@ movhi
2632:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
 2844              		.loc 1 2632 0
 2845 0040 2046     		mov	r0, r4
 2846              	.LVL258:
 2847 0042 FFF7FEFF 		bl	UART_EndTxTransfer
 2848              	.LVL259:
 2849 0046 E4E7     		b	.L226
 2850              	.LVL260:
 2851              	.L230:
2637:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 2852              		.loc 1 2637 0 discriminator 1
 2853 0048 002A     		cmp	r2, #0
 2854 004a EBD0     		beq	.L227
2639:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     UART_EndRxTransfer(huart);
 2855              		.loc 1 2639 0
 2856 004c 0023     		movs	r3, #0
 2857 004e E385     		strh	r3, [r4, #46]	@ movhi
2640:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
 2858              		.loc 1 2640 0
 2859 0050 2046     		mov	r0, r4
 2860 0052 FFF7FEFF 		bl	UART_EndRxTransfer
 2861              	.LVL261:
 2862 0056 E5E7     		b	.L227
ARM GAS  /tmp/cciBiPGK.s 			page 112


 2863              		.cfi_endproc
 2864              	.LFE114:
 2866              		.section	.text.HAL_UART_IRQHandler,"ax",%progbits
 2867              		.align	1
 2868              		.global	HAL_UART_IRQHandler
 2869              		.syntax unified
 2870              		.thumb
 2871              		.thumb_func
 2872              		.fpu softvfp
 2874              	HAL_UART_IRQHandler:
 2875              	.LFB94:
1995:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 2876              		.loc 1 1995 0
 2877              		.cfi_startproc
 2878              		@ args = 0, pretend = 0, frame = 0
 2879              		@ frame_needed = 0, uses_anonymous_args = 0
 2880              	.LVL262:
 2881 0000 10B5     		push	{r4, lr}
 2882              	.LCFI38:
 2883              		.cfi_def_cfa_offset 8
 2884              		.cfi_offset 4, -8
 2885              		.cfi_offset 14, -4
 2886 0002 0446     		mov	r4, r0
1996:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 2887              		.loc 1 1996 0
 2888 0004 0268     		ldr	r2, [r0]
 2889 0006 1368     		ldr	r3, [r2]
 2890              	.LVL263:
1997:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 2891              		.loc 1 1997 0
 2892 0008 D168     		ldr	r1, [r2, #12]
 2893              	.LVL264:
1998:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   uint32_t errorflags = 0x00U;
 2894              		.loc 1 1998 0
 2895 000a 5269     		ldr	r2, [r2, #20]
 2896              	.LVL265:
2004:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 2897              		.loc 1 2004 0
 2898 000c 13F00F00 		ands	r0, r3, #15
 2899              	.LVL266:
 2900 0010 05D1     		bne	.L232
2007:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 2901              		.loc 1 2007 0
 2902 0012 13F0200F 		tst	r3, #32
 2903 0016 02D0     		beq	.L232
2007:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 2904              		.loc 1 2007 0 is_stmt 0 discriminator 1
 2905 0018 11F0200F 		tst	r1, #32
 2906 001c 53D1     		bne	.L247
 2907              	.L232:
2015:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 2908              		.loc 1 2015 0 is_stmt 1
 2909 001e 0028     		cmp	r0, #0
 2910 0020 67D0     		beq	.L234
2015:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 2911              		.loc 1 2015 0 is_stmt 0 discriminator 1
 2912 0022 12F00102 		ands	r2, r2, #1
ARM GAS  /tmp/cciBiPGK.s 			page 113


 2913              	.LVL267:
 2914 0026 02D1     		bne	.L235
2015:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 2915              		.loc 1 2015 0 discriminator 2
 2916 0028 11F4907F 		tst	r1, #288
 2917 002c 61D0     		beq	.L234
 2918              	.L235:
2018:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 2919              		.loc 1 2018 0 is_stmt 1
 2920 002e 13F0010F 		tst	r3, #1
 2921 0032 06D0     		beq	.L236
2018:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 2922              		.loc 1 2018 0 is_stmt 0 discriminator 1
 2923 0034 11F4807F 		tst	r1, #256
 2924 0038 03D0     		beq	.L236
2020:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
 2925              		.loc 1 2020 0 is_stmt 1
 2926 003a E06B     		ldr	r0, [r4, #60]
 2927              	.LVL268:
 2928 003c 40F00100 		orr	r0, r0, #1
 2929 0040 E063     		str	r0, [r4, #60]
 2930              	.L236:
2024:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 2931              		.loc 1 2024 0
 2932 0042 13F0040F 		tst	r3, #4
 2933 0046 04D0     		beq	.L237
2024:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 2934              		.loc 1 2024 0 is_stmt 0 discriminator 1
 2935 0048 1AB1     		cbz	r2, .L237
2026:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
 2936              		.loc 1 2026 0 is_stmt 1
 2937 004a E06B     		ldr	r0, [r4, #60]
 2938 004c 40F00200 		orr	r0, r0, #2
 2939 0050 E063     		str	r0, [r4, #60]
 2940              	.L237:
2030:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 2941              		.loc 1 2030 0
 2942 0052 13F0020F 		tst	r3, #2
 2943 0056 04D0     		beq	.L238
2030:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 2944              		.loc 1 2030 0 is_stmt 0 discriminator 1
 2945 0058 1AB1     		cbz	r2, .L238
2032:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
 2946              		.loc 1 2032 0 is_stmt 1
 2947 005a E06B     		ldr	r0, [r4, #60]
 2948 005c 40F00400 		orr	r0, r0, #4
 2949 0060 E063     		str	r0, [r4, #60]
 2950              	.L238:
2036:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 2951              		.loc 1 2036 0
 2952 0062 13F0080F 		tst	r3, #8
 2953 0066 04D0     		beq	.L239
2036:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 2954              		.loc 1 2036 0 is_stmt 0 discriminator 1
 2955 0068 1AB1     		cbz	r2, .L239
2038:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
 2956              		.loc 1 2038 0 is_stmt 1
ARM GAS  /tmp/cciBiPGK.s 			page 114


 2957 006a E26B     		ldr	r2, [r4, #60]
 2958 006c 42F00802 		orr	r2, r2, #8
 2959 0070 E263     		str	r2, [r4, #60]
 2960              	.L239:
2042:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 2961              		.loc 1 2042 0
 2962 0072 E26B     		ldr	r2, [r4, #60]
 2963 0074 002A     		cmp	r2, #0
 2964 0076 48D0     		beq	.L231
2045:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       {
 2965              		.loc 1 2045 0
 2966 0078 13F0200F 		tst	r3, #32
 2967 007c 02D0     		beq	.L240
2045:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       {
 2968              		.loc 1 2045 0 is_stmt 0 discriminator 1
 2969 007e 11F0200F 		tst	r1, #32
 2970 0082 24D1     		bne	.L248
 2971              	.LVL269:
 2972              	.L240:
2052:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 2973              		.loc 1 2052 0 is_stmt 1
 2974 0084 2368     		ldr	r3, [r4]
 2975 0086 5B69     		ldr	r3, [r3, #20]
 2976 0088 03F04003 		and	r3, r3, #64
 2977              	.LVL270:
2053:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       {
 2978              		.loc 1 2053 0
 2979 008c E26B     		ldr	r2, [r4, #60]
 2980 008e 12F0080F 		tst	r2, #8
 2981 0092 00D1     		bne	.L241
2053:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       {
 2982              		.loc 1 2053 0 is_stmt 0 discriminator 1
 2983 0094 3BB3     		cbz	r3, .L242
 2984              	.L241:
2058:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 2985              		.loc 1 2058 0 is_stmt 1
 2986 0096 2046     		mov	r0, r4
 2987 0098 FFF7FEFF 		bl	UART_EndRxTransfer
 2988              	.LVL271:
2061:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         {
 2989              		.loc 1 2061 0
 2990 009c 2368     		ldr	r3, [r4]
 2991 009e 5A69     		ldr	r2, [r3, #20]
 2992 00a0 12F0400F 		tst	r2, #64
 2993 00a4 1BD0     		beq	.L243
2063:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 2994              		.loc 1 2063 0
 2995 00a6 5A69     		ldr	r2, [r3, #20]
 2996 00a8 22F04002 		bic	r2, r2, #64
 2997 00ac 5A61     		str	r2, [r3, #20]
2066:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****           {
 2998              		.loc 1 2066 0
 2999 00ae 636B     		ldr	r3, [r4, #52]
 3000 00b0 8BB1     		cbz	r3, .L244
2070:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****             if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 3001              		.loc 1 2070 0
 3002 00b2 1A4A     		ldr	r2, .L251
ARM GAS  /tmp/cciBiPGK.s 			page 115


 3003 00b4 5A63     		str	r2, [r3, #52]
2071:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****             {
 3004              		.loc 1 2071 0
 3005 00b6 606B     		ldr	r0, [r4, #52]
 3006 00b8 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3007              	.LVL272:
 3008 00bc 28B3     		cbz	r0, .L231
2074:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****             }
 3009              		.loc 1 2074 0
 3010 00be 606B     		ldr	r0, [r4, #52]
 3011 00c0 436B     		ldr	r3, [r0, #52]
 3012 00c2 9847     		blx	r3
 3013              	.LVL273:
 3014 00c4 10BD     		pop	{r4, pc}
 3015              	.LVL274:
 3016              	.L247:
2009:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       return;
 3017              		.loc 1 2009 0
 3018 00c6 2046     		mov	r0, r4
 3019              	.LVL275:
 3020 00c8 FFF7FEFF 		bl	UART_Receive_IT
 3021              	.LVL276:
2010:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
 3022              		.loc 1 2010 0
 3023 00cc 10BD     		pop	{r4, pc}
 3024              	.LVL277:
 3025              	.L248:
2047:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       }
 3026              		.loc 1 2047 0
 3027 00ce 2046     		mov	r0, r4
 3028 00d0 FFF7FEFF 		bl	UART_Receive_IT
 3029              	.LVL278:
 3030 00d4 D6E7     		b	.L240
 3031              	.LVL279:
 3032              	.L244:
2085:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 3033              		.loc 1 2085 0
 3034 00d6 2046     		mov	r0, r4
 3035 00d8 FFF7FEFF 		bl	HAL_UART_ErrorCallback
 3036              	.LVL280:
 3037 00dc 10BD     		pop	{r4, pc}
 3038              	.LVL281:
 3039              	.L243:
2097:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 3040              		.loc 1 2097 0
 3041 00de 2046     		mov	r0, r4
 3042 00e0 FFF7FEFF 		bl	HAL_UART_ErrorCallback
 3043              	.LVL282:
 3044 00e4 10BD     		pop	{r4, pc}
 3045              	.LVL283:
 3046              	.L242:
2110:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 3047              		.loc 1 2110 0
 3048 00e6 2046     		mov	r0, r4
 3049 00e8 FFF7FEFF 		bl	HAL_UART_ErrorCallback
 3050              	.LVL284:
2113:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       }
ARM GAS  /tmp/cciBiPGK.s 			page 116


 3051              		.loc 1 2113 0
 3052 00ec 0023     		movs	r3, #0
 3053 00ee E363     		str	r3, [r4, #60]
 3054 00f0 10BD     		pop	{r4, pc}
 3055              	.LVL285:
 3056              	.L234:
2120:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 3057              		.loc 1 2120 0
 3058 00f2 13F0800F 		tst	r3, #128
 3059 00f6 02D0     		beq	.L245
2120:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 3060              		.loc 1 2120 0 is_stmt 0 discriminator 1
 3061 00f8 11F0800F 		tst	r1, #128
 3062 00fc 06D1     		bne	.L249
 3063              	.L245:
2127:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 3064              		.loc 1 2127 0 is_stmt 1
 3065 00fe 13F0400F 		tst	r3, #64
 3066 0102 02D0     		beq	.L231
2127:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 3067              		.loc 1 2127 0 is_stmt 0 discriminator 1
 3068 0104 11F0400F 		tst	r1, #64
 3069 0108 04D1     		bne	.L250
 3070              	.LVL286:
 3071              	.L231:
 3072 010a 10BD     		pop	{r4, pc}
 3073              	.LVL287:
 3074              	.L249:
2122:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     return;
 3075              		.loc 1 2122 0 is_stmt 1
 3076 010c 2046     		mov	r0, r4
 3077              	.LVL288:
 3078 010e FFF7FEFF 		bl	UART_Transmit_IT
 3079              	.LVL289:
2123:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
 3080              		.loc 1 2123 0
 3081 0112 10BD     		pop	{r4, pc}
 3082              	.LVL290:
 3083              	.L250:
2129:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     return;
 3084              		.loc 1 2129 0
 3085 0114 2046     		mov	r0, r4
 3086              	.LVL291:
 3087 0116 FFF7FEFF 		bl	UART_EndTransmit_IT
 3088              	.LVL292:
2130:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   }
 3089              		.loc 1 2130 0
 3090 011a F6E7     		b	.L231
 3091              	.L252:
 3092              		.align	2
 3093              	.L251:
 3094 011c 00000000 		.word	UART_DMAAbortOnError
 3095              		.cfi_endproc
 3096              	.LFE94:
 3098              		.section	.text.UART_DMAAbortOnError,"ax",%progbits
 3099              		.align	1
 3100              		.syntax unified
ARM GAS  /tmp/cciBiPGK.s 			page 117


 3101              		.thumb
 3102              		.thumb_func
 3103              		.fpu softvfp
 3105              	UART_DMAAbortOnError:
 3106              	.LFB118:
2727:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 3107              		.loc 1 2727 0
 3108              		.cfi_startproc
 3109              		@ args = 0, pretend = 0, frame = 0
 3110              		@ frame_needed = 0, uses_anonymous_args = 0
 3111              	.LVL293:
 3112 0000 08B5     		push	{r3, lr}
 3113              	.LCFI39:
 3114              		.cfi_def_cfa_offset 8
 3115              		.cfi_offset 3, -8
 3116              		.cfi_offset 14, -4
2728:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 3117              		.loc 1 2728 0
 3118 0002 406A     		ldr	r0, [r0, #36]
 3119              	.LVL294:
2729:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 3120              		.loc 1 2729 0
 3121 0004 0023     		movs	r3, #0
 3122 0006 C385     		strh	r3, [r0, #46]	@ movhi
2730:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3123              		.loc 1 2730 0
 3124 0008 C384     		strh	r3, [r0, #38]	@ movhi
2737:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 3125              		.loc 1 2737 0
 3126 000a FFF7FEFF 		bl	HAL_UART_ErrorCallback
 3127              	.LVL295:
 3128 000e 08BD     		pop	{r3, pc}
 3129              		.cfi_endproc
 3130              	.LFE118:
 3132              		.section	.text.HAL_UART_AbortCpltCallback,"ax",%progbits
 3133              		.align	1
 3134              		.weak	HAL_UART_AbortCpltCallback
 3135              		.syntax unified
 3136              		.thumb
 3137              		.thumb_func
 3138              		.fpu softvfp
 3140              	HAL_UART_AbortCpltCallback:
 3141              	.LFB100:
2215:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 3142              		.loc 1 2215 0
 3143              		.cfi_startproc
 3144              		@ args = 0, pretend = 0, frame = 0
 3145              		@ frame_needed = 0, uses_anonymous_args = 0
 3146              		@ link register save eliminated.
 3147              	.LVL296:
 3148 0000 7047     		bx	lr
 3149              		.cfi_endproc
 3150              	.LFE100:
 3152              		.section	.text.HAL_UART_Abort_IT,"ax",%progbits
 3153              		.align	1
 3154              		.global	HAL_UART_Abort_IT
 3155              		.syntax unified
ARM GAS  /tmp/cciBiPGK.s 			page 118


 3156              		.thumb
 3157              		.thumb_func
 3158              		.fpu softvfp
 3160              	HAL_UART_Abort_IT:
 3161              	.LFB91:
1720:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   uint32_t AbortCplt = 0x01U;
 3162              		.loc 1 1720 0
 3163              		.cfi_startproc
 3164              		@ args = 0, pretend = 0, frame = 0
 3165              		@ frame_needed = 0, uses_anonymous_args = 0
 3166              	.LVL297:
1720:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   uint32_t AbortCplt = 0x01U;
 3167              		.loc 1 1720 0
 3168 0000 10B5     		push	{r4, lr}
 3169              	.LCFI40:
 3170              		.cfi_def_cfa_offset 8
 3171              		.cfi_offset 4, -8
 3172              		.cfi_offset 14, -4
 3173 0002 0446     		mov	r4, r0
 3174              	.LVL298:
1724:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 3175              		.loc 1 1724 0
 3176 0004 0268     		ldr	r2, [r0]
 3177 0006 D368     		ldr	r3, [r2, #12]
 3178 0008 23F4F073 		bic	r3, r3, #480
 3179 000c D360     		str	r3, [r2, #12]
1725:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3180              		.loc 1 1725 0
 3181 000e 0268     		ldr	r2, [r0]
 3182 0010 5369     		ldr	r3, [r2, #20]
 3183 0012 23F00103 		bic	r3, r3, #1
 3184 0016 5361     		str	r3, [r2, #20]
1730:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 3185              		.loc 1 1730 0
 3186 0018 036B     		ldr	r3, [r0, #48]
 3187 001a 33B1     		cbz	r3, .L257
1734:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 3188              		.loc 1 1734 0
 3189 001c 0268     		ldr	r2, [r0]
 3190 001e 5269     		ldr	r2, [r2, #20]
 3191 0020 12F0800F 		tst	r2, #128
 3192 0024 1DD0     		beq	.L258
1736:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
 3193              		.loc 1 1736 0
 3194 0026 264A     		ldr	r2, .L270
 3195 0028 5A63     		str	r2, [r3, #52]
 3196              	.L257:
1744:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 3197              		.loc 1 1744 0
 3198 002a 636B     		ldr	r3, [r4, #52]
 3199 002c 33B1     		cbz	r3, .L259
1748:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 3200              		.loc 1 1748 0
 3201 002e 2268     		ldr	r2, [r4]
 3202 0030 5269     		ldr	r2, [r2, #20]
 3203 0032 12F0400F 		tst	r2, #64
 3204 0036 17D0     		beq	.L260
ARM GAS  /tmp/cciBiPGK.s 			page 119


1750:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
 3205              		.loc 1 1750 0
 3206 0038 224A     		ldr	r2, .L270+4
 3207 003a 5A63     		str	r2, [r3, #52]
 3208              	.L259:
1759:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 3209              		.loc 1 1759 0
 3210 003c 2368     		ldr	r3, [r4]
 3211 003e 5A69     		ldr	r2, [r3, #20]
 3212 0040 12F0800F 		tst	r2, #128
 3213 0044 13D0     		beq	.L264
1762:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3214              		.loc 1 1762 0
 3215 0046 5A69     		ldr	r2, [r3, #20]
 3216 0048 22F08002 		bic	r2, r2, #128
 3217 004c 5A61     		str	r2, [r3, #20]
1765:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 3218              		.loc 1 1765 0
 3219 004e 206B     		ldr	r0, [r4, #48]
 3220              	.LVL299:
 3221 0050 18B3     		cbz	r0, .L265
1771:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       {
 3222              		.loc 1 1771 0
 3223 0052 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3224              	.LVL300:
 3225 0056 10B3     		cbz	r0, .L266
1773:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       }
 3226              		.loc 1 1773 0
 3227 0058 236B     		ldr	r3, [r4, #48]
 3228 005a 0022     		movs	r2, #0
 3229 005c 5A63     		str	r2, [r3, #52]
1721:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3230              		.loc 1 1721 0
 3231 005e 0122     		movs	r2, #1
 3232 0060 06E0     		b	.L261
 3233              	.LVL301:
 3234              	.L258:
1740:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
 3235              		.loc 1 1740 0
 3236 0062 0022     		movs	r2, #0
 3237 0064 5A63     		str	r2, [r3, #52]
 3238 0066 E0E7     		b	.L257
 3239              	.L260:
1754:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     }
 3240              		.loc 1 1754 0
 3241 0068 0022     		movs	r2, #0
 3242 006a 5A63     		str	r2, [r3, #52]
 3243 006c E6E7     		b	.L259
 3244              	.L264:
1721:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3245              		.loc 1 1721 0
 3246 006e 0122     		movs	r2, #1
 3247              	.LVL302:
 3248              	.L261:
1783:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 3249              		.loc 1 1783 0
 3250 0070 2368     		ldr	r3, [r4]
ARM GAS  /tmp/cciBiPGK.s 			page 120


 3251 0072 5969     		ldr	r1, [r3, #20]
 3252 0074 11F0400F 		tst	r1, #64
 3253 0078 0CD0     		beq	.L262
1785:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3254              		.loc 1 1785 0
 3255 007a 5969     		ldr	r1, [r3, #20]
 3256 007c 21F04001 		bic	r1, r1, #64
 3257 0080 5961     		str	r1, [r3, #20]
1788:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 3258              		.loc 1 1788 0
 3259 0082 606B     		ldr	r0, [r4, #52]
 3260 0084 30B1     		cbz	r0, .L262
1794:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       {
 3261              		.loc 1 1794 0
 3262 0086 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3263              	.LVL303:
 3264 008a 50B1     		cbz	r0, .L267
1796:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****         AbortCplt = 0x01U;
 3265              		.loc 1 1796 0
 3266 008c 636B     		ldr	r3, [r4, #52]
 3267 008e 0022     		movs	r2, #0
 3268 0090 5A63     		str	r2, [r3, #52]
 3269              	.LVL304:
1797:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       }
 3270              		.loc 1 1797 0
 3271 0092 0122     		movs	r2, #1
 3272              	.LVL305:
 3273              	.L262:
1807:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 3274              		.loc 1 1807 0
 3275 0094 3AB9     		cbnz	r2, .L269
 3276              	.LVL306:
 3277              	.L263:
1831:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3278              		.loc 1 1831 0
 3279 0096 0020     		movs	r0, #0
 3280 0098 10BD     		pop	{r4, pc}
 3281              	.LVL307:
 3282              	.L265:
1721:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3283              		.loc 1 1721 0
 3284 009a 0122     		movs	r2, #1
 3285 009c E8E7     		b	.L261
 3286              	.L266:
1777:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       }
 3287              		.loc 1 1777 0
 3288 009e 0022     		movs	r2, #0
 3289 00a0 E6E7     		b	.L261
 3290              	.LVL308:
 3291              	.L267:
1801:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       }
 3292              		.loc 1 1801 0
 3293 00a2 0022     		movs	r2, #0
 3294 00a4 F6E7     		b	.L262
 3295              	.LVL309:
 3296              	.L269:
1810:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->RxXferCount = 0x00U;
ARM GAS  /tmp/cciBiPGK.s 			page 121


 3297              		.loc 1 1810 0
 3298 00a6 0023     		movs	r3, #0
 3299 00a8 E384     		strh	r3, [r4, #38]	@ movhi
1811:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3300              		.loc 1 1811 0
 3301 00aa E385     		strh	r3, [r4, #46]	@ movhi
1814:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3302              		.loc 1 1814 0
 3303 00ac E363     		str	r3, [r4, #60]
1817:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 3304              		.loc 1 1817 0
 3305 00ae 2023     		movs	r3, #32
 3306 00b0 84F83930 		strb	r3, [r4, #57]
1818:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3307              		.loc 1 1818 0
 3308 00b4 84F83A30 		strb	r3, [r4, #58]
1826:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 3309              		.loc 1 1826 0
 3310 00b8 2046     		mov	r0, r4
 3311 00ba FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 3312              	.LVL310:
 3313 00be EAE7     		b	.L263
 3314              	.L271:
 3315              		.align	2
 3316              	.L270:
 3317 00c0 00000000 		.word	UART_DMATxAbortCallback
 3318 00c4 00000000 		.word	UART_DMARxAbortCallback
 3319              		.cfi_endproc
 3320              	.LFE91:
 3322              		.section	.text.UART_DMARxAbortCallback,"ax",%progbits
 3323              		.align	1
 3324              		.syntax unified
 3325              		.thumb
 3326              		.thumb_func
 3327              		.fpu softvfp
 3329              	UART_DMARxAbortCallback:
 3330              	.LFB120:
2796:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 3331              		.loc 1 2796 0
 3332              		.cfi_startproc
 3333              		@ args = 0, pretend = 0, frame = 0
 3334              		@ frame_needed = 0, uses_anonymous_args = 0
 3335              	.LVL311:
 3336 0000 08B5     		push	{r3, lr}
 3337              	.LCFI41:
 3338              		.cfi_def_cfa_offset 8
 3339              		.cfi_offset 3, -8
 3340              		.cfi_offset 14, -4
2797:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3341              		.loc 1 2797 0
 3342 0002 406A     		ldr	r0, [r0, #36]
 3343              	.LVL312:
2799:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3344              		.loc 1 2799 0
 3345 0004 436B     		ldr	r3, [r0, #52]
 3346 0006 0022     		movs	r2, #0
 3347 0008 5A63     		str	r2, [r3, #52]
ARM GAS  /tmp/cciBiPGK.s 			page 122


2802:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 3348              		.loc 1 2802 0
 3349 000a 036B     		ldr	r3, [r0, #48]
 3350 000c 13B1     		cbz	r3, .L273
2804:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 3351              		.loc 1 2804 0
 3352 000e 5B6B     		ldr	r3, [r3, #52]
 3353 0010 03B1     		cbz	r3, .L273
 3354              	.LVL313:
 3355              	.L272:
 3356 0012 08BD     		pop	{r3, pc}
 3357              	.LVL314:
 3358              	.L273:
2811:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 3359              		.loc 1 2811 0
 3360 0014 0023     		movs	r3, #0
 3361 0016 C384     		strh	r3, [r0, #38]	@ movhi
2812:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3362              		.loc 1 2812 0
 3363 0018 C385     		strh	r3, [r0, #46]	@ movhi
2815:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3364              		.loc 1 2815 0
 3365 001a C363     		str	r3, [r0, #60]
2818:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 3366              		.loc 1 2818 0
 3367 001c 2023     		movs	r3, #32
 3368 001e 80F83930 		strb	r3, [r0, #57]
2819:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3369              		.loc 1 2819 0
 3370 0022 80F83A30 		strb	r3, [r0, #58]
2827:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 3371              		.loc 1 2827 0
 3372 0026 FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 3373              	.LVL315:
 3374 002a F2E7     		b	.L272
 3375              		.cfi_endproc
 3376              	.LFE120:
 3378              		.section	.text.UART_DMATxAbortCallback,"ax",%progbits
 3379              		.align	1
 3380              		.syntax unified
 3381              		.thumb
 3382              		.thumb_func
 3383              		.fpu softvfp
 3385              	UART_DMATxAbortCallback:
 3386              	.LFB119:
2751:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 3387              		.loc 1 2751 0
 3388              		.cfi_startproc
 3389              		@ args = 0, pretend = 0, frame = 0
 3390              		@ frame_needed = 0, uses_anonymous_args = 0
 3391              	.LVL316:
 3392 0000 08B5     		push	{r3, lr}
 3393              	.LCFI42:
 3394              		.cfi_def_cfa_offset 8
 3395              		.cfi_offset 3, -8
 3396              		.cfi_offset 14, -4
2752:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
ARM GAS  /tmp/cciBiPGK.s 			page 123


 3397              		.loc 1 2752 0
 3398 0002 406A     		ldr	r0, [r0, #36]
 3399              	.LVL317:
2754:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3400              		.loc 1 2754 0
 3401 0004 036B     		ldr	r3, [r0, #48]
 3402 0006 0022     		movs	r2, #0
 3403 0008 5A63     		str	r2, [r3, #52]
2757:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 3404              		.loc 1 2757 0
 3405 000a 436B     		ldr	r3, [r0, #52]
 3406 000c 13B1     		cbz	r3, .L277
2759:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 3407              		.loc 1 2759 0
 3408 000e 5B6B     		ldr	r3, [r3, #52]
 3409 0010 03B1     		cbz	r3, .L277
 3410              	.LVL318:
 3411              	.L276:
 3412 0012 08BD     		pop	{r3, pc}
 3413              	.LVL319:
 3414              	.L277:
2766:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 3415              		.loc 1 2766 0
 3416 0014 0023     		movs	r3, #0
 3417 0016 C384     		strh	r3, [r0, #38]	@ movhi
2767:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3418              		.loc 1 2767 0
 3419 0018 C385     		strh	r3, [r0, #46]	@ movhi
2770:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3420              		.loc 1 2770 0
 3421 001a C363     		str	r3, [r0, #60]
2773:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 3422              		.loc 1 2773 0
 3423 001c 2023     		movs	r3, #32
 3424 001e 80F83930 		strb	r3, [r0, #57]
2774:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3425              		.loc 1 2774 0
 3426 0022 80F83A30 		strb	r3, [r0, #58]
2782:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 3427              		.loc 1 2782 0
 3428 0026 FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 3429              	.LVL320:
 3430 002a F2E7     		b	.L276
 3431              		.cfi_endproc
 3432              	.LFE119:
 3434              		.section	.text.HAL_UART_AbortTransmitCpltCallback,"ax",%progbits
 3435              		.align	1
 3436              		.weak	HAL_UART_AbortTransmitCpltCallback
 3437              		.syntax unified
 3438              		.thumb
 3439              		.thumb_func
 3440              		.fpu softvfp
 3442              	HAL_UART_AbortTransmitCpltCallback:
 3443              	.LFB101:
2230:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 3444              		.loc 1 2230 0
 3445              		.cfi_startproc
ARM GAS  /tmp/cciBiPGK.s 			page 124


 3446              		@ args = 0, pretend = 0, frame = 0
 3447              		@ frame_needed = 0, uses_anonymous_args = 0
 3448              		@ link register save eliminated.
 3449              	.LVL321:
 3450 0000 7047     		bx	lr
 3451              		.cfi_endproc
 3452              	.LFE101:
 3454              		.section	.text.HAL_UART_AbortTransmit_IT,"ax",%progbits
 3455              		.align	1
 3456              		.global	HAL_UART_AbortTransmit_IT
 3457              		.syntax unified
 3458              		.thumb
 3459              		.thumb_func
 3460              		.fpu softvfp
 3462              	HAL_UART_AbortTransmit_IT:
 3463              	.LFB92:
1848:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
 3464              		.loc 1 1848 0
 3465              		.cfi_startproc
 3466              		@ args = 0, pretend = 0, frame = 0
 3467              		@ frame_needed = 0, uses_anonymous_args = 0
 3468              	.LVL322:
1848:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
 3469              		.loc 1 1848 0
 3470 0000 10B5     		push	{r4, lr}
 3471              	.LCFI43:
 3472              		.cfi_def_cfa_offset 8
 3473              		.cfi_offset 4, -8
 3474              		.cfi_offset 14, -4
 3475 0002 0446     		mov	r4, r0
1850:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3476              		.loc 1 1850 0
 3477 0004 0268     		ldr	r2, [r0]
 3478 0006 D368     		ldr	r3, [r2, #12]
 3479 0008 23F0C003 		bic	r3, r3, #192
 3480 000c D360     		str	r3, [r2, #12]
1853:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 3481              		.loc 1 1853 0
 3482 000e 0368     		ldr	r3, [r0]
 3483 0010 5A69     		ldr	r2, [r3, #20]
 3484 0012 12F0800F 		tst	r2, #128
 3485 0016 19D0     		beq	.L282
1855:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3486              		.loc 1 1855 0
 3487 0018 5A69     		ldr	r2, [r3, #20]
 3488 001a 22F08002 		bic	r2, r2, #128
 3489 001e 5A61     		str	r2, [r3, #20]
1858:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 3490              		.loc 1 1858 0
 3491 0020 036B     		ldr	r3, [r0, #48]
 3492 0022 5BB1     		cbz	r3, .L283
1862:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3493              		.loc 1 1862 0
 3494 0024 0D4A     		ldr	r2, .L287
 3495 0026 5A63     		str	r2, [r3, #52]
1865:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       {
 3496              		.loc 1 1865 0
ARM GAS  /tmp/cciBiPGK.s 			page 125


 3497 0028 006B     		ldr	r0, [r0, #48]
 3498              	.LVL323:
 3499 002a FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3500              	.LVL324:
 3501 002e 08B9     		cbnz	r0, .L286
 3502              	.L284:
1908:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3503              		.loc 1 1908 0
 3504 0030 0020     		movs	r0, #0
 3505 0032 10BD     		pop	{r4, pc}
 3506              	.LVL325:
 3507              	.L286:
1868:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       }
 3508              		.loc 1 1868 0
 3509 0034 206B     		ldr	r0, [r4, #48]
 3510 0036 436B     		ldr	r3, [r0, #52]
 3511 0038 9847     		blx	r3
 3512              	.LVL326:
 3513 003a F9E7     		b	.L284
 3514              	.LVL327:
 3515              	.L283:
1874:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3516              		.loc 1 1874 0
 3517 003c 0023     		movs	r3, #0
 3518 003e C384     		strh	r3, [r0, #38]	@ movhi
1877:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3519              		.loc 1 1877 0
 3520 0040 2023     		movs	r3, #32
 3521 0042 80F83930 		strb	r3, [r0, #57]
1885:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 3522              		.loc 1 1885 0
 3523 0046 FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
 3524              	.LVL328:
 3525 004a F1E7     		b	.L284
 3526              	.LVL329:
 3527              	.L282:
1892:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3528              		.loc 1 1892 0
 3529 004c 0023     		movs	r3, #0
 3530 004e C384     		strh	r3, [r0, #38]	@ movhi
1895:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3531              		.loc 1 1895 0
 3532 0050 2023     		movs	r3, #32
 3533 0052 80F83930 		strb	r3, [r0, #57]
1903:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 3534              		.loc 1 1903 0
 3535 0056 FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
 3536              	.LVL330:
 3537 005a E9E7     		b	.L284
 3538              	.L288:
 3539              		.align	2
 3540              	.L287:
 3541 005c 00000000 		.word	UART_DMATxOnlyAbortCallback
 3542              		.cfi_endproc
 3543              	.LFE92:
 3545              		.section	.text.UART_DMATxOnlyAbortCallback,"ax",%progbits
 3546              		.align	1
ARM GAS  /tmp/cciBiPGK.s 			page 126


 3547              		.syntax unified
 3548              		.thumb
 3549              		.thumb_func
 3550              		.fpu softvfp
 3552              	UART_DMATxOnlyAbortCallback:
 3553              	.LFB121:
2841:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 3554              		.loc 1 2841 0
 3555              		.cfi_startproc
 3556              		@ args = 0, pretend = 0, frame = 0
 3557              		@ frame_needed = 0, uses_anonymous_args = 0
 3558              	.LVL331:
 3559 0000 08B5     		push	{r3, lr}
 3560              	.LCFI44:
 3561              		.cfi_def_cfa_offset 8
 3562              		.cfi_offset 3, -8
 3563              		.cfi_offset 14, -4
2842:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3564              		.loc 1 2842 0
 3565 0002 406A     		ldr	r0, [r0, #36]
 3566              	.LVL332:
2844:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3567              		.loc 1 2844 0
 3568 0004 0023     		movs	r3, #0
 3569 0006 C384     		strh	r3, [r0, #38]	@ movhi
2847:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3570              		.loc 1 2847 0
 3571 0008 2023     		movs	r3, #32
 3572 000a 80F83930 		strb	r3, [r0, #57]
2855:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 3573              		.loc 1 2855 0
 3574 000e FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
 3575              	.LVL333:
 3576 0012 08BD     		pop	{r3, pc}
 3577              		.cfi_endproc
 3578              	.LFE121:
 3580              		.section	.text.HAL_UART_AbortReceiveCpltCallback,"ax",%progbits
 3581              		.align	1
 3582              		.weak	HAL_UART_AbortReceiveCpltCallback
 3583              		.syntax unified
 3584              		.thumb
 3585              		.thumb_func
 3586              		.fpu softvfp
 3588              	HAL_UART_AbortReceiveCpltCallback:
 3589              	.LFB102:
2245:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 3590              		.loc 1 2245 0
 3591              		.cfi_startproc
 3592              		@ args = 0, pretend = 0, frame = 0
 3593              		@ frame_needed = 0, uses_anonymous_args = 0
 3594              		@ link register save eliminated.
 3595              	.LVL334:
 3596 0000 7047     		bx	lr
 3597              		.cfi_endproc
 3598              	.LFE102:
 3600              		.section	.text.HAL_UART_AbortReceive_IT,"ax",%progbits
 3601              		.align	1
ARM GAS  /tmp/cciBiPGK.s 			page 127


 3602              		.global	HAL_UART_AbortReceive_IT
 3603              		.syntax unified
 3604              		.thumb
 3605              		.thumb_func
 3606              		.fpu softvfp
 3608              	HAL_UART_AbortReceive_IT:
 3609              	.LFB93:
1925:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 3610              		.loc 1 1925 0
 3611              		.cfi_startproc
 3612              		@ args = 0, pretend = 0, frame = 0
 3613              		@ frame_needed = 0, uses_anonymous_args = 0
 3614              	.LVL335:
1925:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 3615              		.loc 1 1925 0
 3616 0000 10B5     		push	{r4, lr}
 3617              	.LCFI45:
 3618              		.cfi_def_cfa_offset 8
 3619              		.cfi_offset 4, -8
 3620              		.cfi_offset 14, -4
 3621 0002 0446     		mov	r4, r0
1927:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 3622              		.loc 1 1927 0
 3623 0004 0268     		ldr	r2, [r0]
 3624 0006 D368     		ldr	r3, [r2, #12]
 3625 0008 23F49073 		bic	r3, r3, #288
 3626 000c D360     		str	r3, [r2, #12]
1928:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3627              		.loc 1 1928 0
 3628 000e 0268     		ldr	r2, [r0]
 3629 0010 5369     		ldr	r3, [r2, #20]
 3630 0012 23F00103 		bic	r3, r3, #1
 3631 0016 5361     		str	r3, [r2, #20]
1931:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   {
 3632              		.loc 1 1931 0
 3633 0018 0368     		ldr	r3, [r0]
 3634 001a 5A69     		ldr	r2, [r3, #20]
 3635 001c 12F0400F 		tst	r2, #64
 3636 0020 19D0     		beq	.L293
1933:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3637              		.loc 1 1933 0
 3638 0022 5A69     		ldr	r2, [r3, #20]
 3639 0024 22F04002 		bic	r2, r2, #64
 3640 0028 5A61     		str	r2, [r3, #20]
1936:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****     {
 3641              		.loc 1 1936 0
 3642 002a 436B     		ldr	r3, [r0, #52]
 3643 002c 5BB1     		cbz	r3, .L294
1940:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3644              		.loc 1 1940 0
 3645 002e 0E4A     		ldr	r2, .L298
 3646 0030 5A63     		str	r2, [r3, #52]
1943:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       {
 3647              		.loc 1 1943 0
 3648 0032 406B     		ldr	r0, [r0, #52]
 3649              	.LVL336:
 3650 0034 FFF7FEFF 		bl	HAL_DMA_Abort_IT
ARM GAS  /tmp/cciBiPGK.s 			page 128


 3651              	.LVL337:
 3652 0038 08B9     		cbnz	r0, .L297
 3653              	.L295:
1986:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3654              		.loc 1 1986 0
 3655 003a 0020     		movs	r0, #0
 3656 003c 10BD     		pop	{r4, pc}
 3657              	.LVL338:
 3658              	.L297:
1946:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****       }
 3659              		.loc 1 1946 0
 3660 003e 606B     		ldr	r0, [r4, #52]
 3661 0040 436B     		ldr	r3, [r0, #52]
 3662 0042 9847     		blx	r3
 3663              	.LVL339:
 3664 0044 F9E7     		b	.L295
 3665              	.LVL340:
 3666              	.L294:
1952:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3667              		.loc 1 1952 0
 3668 0046 0023     		movs	r3, #0
 3669 0048 C385     		strh	r3, [r0, #46]	@ movhi
1955:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3670              		.loc 1 1955 0
 3671 004a 2023     		movs	r3, #32
 3672 004c 80F83A30 		strb	r3, [r0, #58]
1963:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 3673              		.loc 1 1963 0
 3674 0050 FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
 3675              	.LVL341:
 3676 0054 F1E7     		b	.L295
 3677              	.LVL342:
 3678              	.L293:
1970:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3679              		.loc 1 1970 0
 3680 0056 0023     		movs	r3, #0
 3681 0058 C385     		strh	r3, [r0, #46]	@ movhi
1973:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3682              		.loc 1 1973 0
 3683 005a 2023     		movs	r3, #32
 3684 005c 80F83A30 		strb	r3, [r0, #58]
1981:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 3685              		.loc 1 1981 0
 3686 0060 FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
 3687              	.LVL343:
 3688 0064 E9E7     		b	.L295
 3689              	.L299:
 3690 0066 00BF     		.align	2
 3691              	.L298:
 3692 0068 00000000 		.word	UART_DMARxOnlyAbortCallback
 3693              		.cfi_endproc
 3694              	.LFE93:
 3696              		.section	.text.UART_DMARxOnlyAbortCallback,"ax",%progbits
 3697              		.align	1
 3698              		.syntax unified
 3699              		.thumb
 3700              		.thumb_func
ARM GAS  /tmp/cciBiPGK.s 			page 129


 3701              		.fpu softvfp
 3703              	UART_DMARxOnlyAbortCallback:
 3704              	.LFB122:
2869:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 3705              		.loc 1 2869 0
 3706              		.cfi_startproc
 3707              		@ args = 0, pretend = 0, frame = 0
 3708              		@ frame_needed = 0, uses_anonymous_args = 0
 3709              	.LVL344:
 3710 0000 08B5     		push	{r3, lr}
 3711              	.LCFI46:
 3712              		.cfi_def_cfa_offset 8
 3713              		.cfi_offset 3, -8
 3714              		.cfi_offset 14, -4
2870:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3715              		.loc 1 2870 0
 3716 0002 406A     		ldr	r0, [r0, #36]
 3717              	.LVL345:
2872:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3718              		.loc 1 2872 0
 3719 0004 0023     		movs	r3, #0
 3720 0006 C385     		strh	r3, [r0, #46]	@ movhi
2875:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3721              		.loc 1 2875 0
 3722 0008 2023     		movs	r3, #32
 3723 000a 80F83A30 		strb	r3, [r0, #58]
2883:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 3724              		.loc 1 2883 0
 3725 000e FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
 3726              	.LVL346:
 3727 0012 08BD     		pop	{r3, pc}
 3728              		.cfi_endproc
 3729              	.LFE122:
 3731              		.section	.text.HAL_LIN_SendBreak,"ax",%progbits
 3732              		.align	1
 3733              		.global	HAL_LIN_SendBreak
 3734              		.syntax unified
 3735              		.thumb
 3736              		.thumb_func
 3737              		.fpu softvfp
 3739              	HAL_LIN_SendBreak:
 3740              	.LFB103:
2284:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Check the parameters */
 3741              		.loc 1 2284 0
 3742              		.cfi_startproc
 3743              		@ args = 0, pretend = 0, frame = 0
 3744              		@ frame_needed = 0, uses_anonymous_args = 0
 3745              		@ link register save eliminated.
 3746              	.LVL347:
2289:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3747              		.loc 1 2289 0
 3748 0000 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2
 3749 0004 012B     		cmp	r3, #1
 3750 0006 12D0     		beq	.L304
2289:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3751              		.loc 1 2289 0 is_stmt 0 discriminator 2
 3752 0008 0123     		movs	r3, #1
ARM GAS  /tmp/cciBiPGK.s 			page 130


 3753 000a 80F83830 		strb	r3, [r0, #56]
2291:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3754              		.loc 1 2291 0 is_stmt 1 discriminator 2
 3755 000e 2423     		movs	r3, #36
 3756 0010 80F83930 		strb	r3, [r0, #57]
2294:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3757              		.loc 1 2294 0 discriminator 2
 3758 0014 0268     		ldr	r2, [r0]
 3759 0016 D368     		ldr	r3, [r2, #12]
 3760 0018 43F00103 		orr	r3, r3, #1
 3761 001c D360     		str	r3, [r2, #12]
2296:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3762              		.loc 1 2296 0 discriminator 2
 3763 001e 2023     		movs	r3, #32
 3764 0020 80F83930 		strb	r3, [r0, #57]
2299:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3765              		.loc 1 2299 0 discriminator 2
 3766 0024 0023     		movs	r3, #0
 3767 0026 80F83830 		strb	r3, [r0, #56]
2301:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
 3768              		.loc 1 2301 0 discriminator 2
 3769 002a 1846     		mov	r0, r3
 3770              	.LVL348:
 3771 002c 7047     		bx	lr
 3772              	.LVL349:
 3773              	.L304:
2289:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3774              		.loc 1 2289 0
 3775 002e 0220     		movs	r0, #2
 3776              	.LVL350:
2302:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3777              		.loc 1 2302 0
 3778 0030 7047     		bx	lr
 3779              		.cfi_endproc
 3780              	.LFE103:
 3782              		.section	.text.HAL_MultiProcessor_EnterMuteMode,"ax",%progbits
 3783              		.align	1
 3784              		.global	HAL_MultiProcessor_EnterMuteMode
 3785              		.syntax unified
 3786              		.thumb
 3787              		.thumb_func
 3788              		.fpu softvfp
 3790              	HAL_MultiProcessor_EnterMuteMode:
 3791              	.LFB104:
2311:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Check the parameters */
 3792              		.loc 1 2311 0
 3793              		.cfi_startproc
 3794              		@ args = 0, pretend = 0, frame = 0
 3795              		@ frame_needed = 0, uses_anonymous_args = 0
 3796              		@ link register save eliminated.
 3797              	.LVL351:
2316:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3798              		.loc 1 2316 0
 3799 0000 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2
 3800 0004 012B     		cmp	r3, #1
 3801 0006 12D0     		beq	.L307
2316:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
ARM GAS  /tmp/cciBiPGK.s 			page 131


 3802              		.loc 1 2316 0 is_stmt 0 discriminator 2
 3803 0008 0123     		movs	r3, #1
 3804 000a 80F83830 		strb	r3, [r0, #56]
2318:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3805              		.loc 1 2318 0 is_stmt 1 discriminator 2
 3806 000e 2423     		movs	r3, #36
 3807 0010 80F83930 		strb	r3, [r0, #57]
2321:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3808              		.loc 1 2321 0 discriminator 2
 3809 0014 0268     		ldr	r2, [r0]
 3810 0016 D368     		ldr	r3, [r2, #12]
 3811 0018 43F00203 		orr	r3, r3, #2
 3812 001c D360     		str	r3, [r2, #12]
2323:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3813              		.loc 1 2323 0 discriminator 2
 3814 001e 2023     		movs	r3, #32
 3815 0020 80F83930 		strb	r3, [r0, #57]
2326:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3816              		.loc 1 2326 0 discriminator 2
 3817 0024 0023     		movs	r3, #0
 3818 0026 80F83830 		strb	r3, [r0, #56]
2328:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
 3819              		.loc 1 2328 0 discriminator 2
 3820 002a 1846     		mov	r0, r3
 3821              	.LVL352:
 3822 002c 7047     		bx	lr
 3823              	.LVL353:
 3824              	.L307:
2316:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3825              		.loc 1 2316 0
 3826 002e 0220     		movs	r0, #2
 3827              	.LVL354:
2329:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3828              		.loc 1 2329 0
 3829 0030 7047     		bx	lr
 3830              		.cfi_endproc
 3831              	.LFE104:
 3833              		.section	.text.HAL_MultiProcessor_ExitMuteMode,"ax",%progbits
 3834              		.align	1
 3835              		.global	HAL_MultiProcessor_ExitMuteMode
 3836              		.syntax unified
 3837              		.thumb
 3838              		.thumb_func
 3839              		.fpu softvfp
 3841              	HAL_MultiProcessor_ExitMuteMode:
 3842              	.LFB105:
2338:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   /* Check the parameters */
 3843              		.loc 1 2338 0
 3844              		.cfi_startproc
 3845              		@ args = 0, pretend = 0, frame = 0
 3846              		@ frame_needed = 0, uses_anonymous_args = 0
 3847              		@ link register save eliminated.
 3848              	.LVL355:
2343:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3849              		.loc 1 2343 0
 3850 0000 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2
 3851 0004 012B     		cmp	r3, #1
ARM GAS  /tmp/cciBiPGK.s 			page 132


 3852 0006 12D0     		beq	.L310
2343:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3853              		.loc 1 2343 0 is_stmt 0 discriminator 2
 3854 0008 0123     		movs	r3, #1
 3855 000a 80F83830 		strb	r3, [r0, #56]
2345:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3856              		.loc 1 2345 0 is_stmt 1 discriminator 2
 3857 000e 2423     		movs	r3, #36
 3858 0010 80F83930 		strb	r3, [r0, #57]
2348:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3859              		.loc 1 2348 0 discriminator 2
 3860 0014 0268     		ldr	r2, [r0]
 3861 0016 D368     		ldr	r3, [r2, #12]
 3862 0018 23F00203 		bic	r3, r3, #2
 3863 001c D360     		str	r3, [r2, #12]
2350:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3864              		.loc 1 2350 0 discriminator 2
 3865 001e 2023     		movs	r3, #32
 3866 0020 80F83930 		strb	r3, [r0, #57]
2353:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3867              		.loc 1 2353 0 discriminator 2
 3868 0024 0023     		movs	r3, #0
 3869 0026 80F83830 		strb	r3, [r0, #56]
2355:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
 3870              		.loc 1 2355 0 discriminator 2
 3871 002a 1846     		mov	r0, r3
 3872              	.LVL356:
 3873 002c 7047     		bx	lr
 3874              	.LVL357:
 3875              	.L310:
2343:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3876              		.loc 1 2343 0
 3877 002e 0220     		movs	r0, #2
 3878              	.LVL358:
2356:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3879              		.loc 1 2356 0
 3880 0030 7047     		bx	lr
 3881              		.cfi_endproc
 3882              	.LFE105:
 3884              		.section	.text.HAL_HalfDuplex_EnableTransmitter,"ax",%progbits
 3885              		.align	1
 3886              		.global	HAL_HalfDuplex_EnableTransmitter
 3887              		.syntax unified
 3888              		.thumb
 3889              		.thumb_func
 3890              		.fpu softvfp
 3892              	HAL_HalfDuplex_EnableTransmitter:
 3893              	.LFB106:
2365:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   uint32_t tmpreg = 0x00U;
 3894              		.loc 1 2365 0
 3895              		.cfi_startproc
 3896              		@ args = 0, pretend = 0, frame = 0
 3897              		@ frame_needed = 0, uses_anonymous_args = 0
 3898              		@ link register save eliminated.
 3899              	.LVL359:
2369:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3900              		.loc 1 2369 0
ARM GAS  /tmp/cciBiPGK.s 			page 133


 3901 0000 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2
 3902 0004 012B     		cmp	r3, #1
 3903 0006 14D0     		beq	.L313
2369:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3904              		.loc 1 2369 0 is_stmt 0 discriminator 2
 3905 0008 0123     		movs	r3, #1
 3906 000a 80F83830 		strb	r3, [r0, #56]
2371:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3907              		.loc 1 2371 0 is_stmt 1 discriminator 2
 3908 000e 2423     		movs	r3, #36
 3909 0010 80F83930 		strb	r3, [r0, #57]
2374:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3910              		.loc 1 2374 0 discriminator 2
 3911 0014 0268     		ldr	r2, [r0]
 3912 0016 D368     		ldr	r3, [r2, #12]
 3913              	.LVL360:
2377:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3914              		.loc 1 2377 0 discriminator 2
 3915 0018 23F00C03 		bic	r3, r3, #12
 3916              	.LVL361:
2380:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3917              		.loc 1 2380 0 discriminator 2
 3918 001c 43F00803 		orr	r3, r3, #8
 3919              	.LVL362:
2383:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3920              		.loc 1 2383 0 discriminator 2
 3921 0020 D360     		str	r3, [r2, #12]
2385:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3922              		.loc 1 2385 0 discriminator 2
 3923 0022 2023     		movs	r3, #32
 3924              	.LVL363:
 3925 0024 80F83930 		strb	r3, [r0, #57]
 3926              	.LVL364:
2388:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3927              		.loc 1 2388 0 discriminator 2
 3928 0028 0023     		movs	r3, #0
 3929 002a 80F83830 		strb	r3, [r0, #56]
2390:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
 3930              		.loc 1 2390 0 discriminator 2
 3931 002e 1846     		mov	r0, r3
 3932              	.LVL365:
 3933 0030 7047     		bx	lr
 3934              	.LVL366:
 3935              	.L313:
2369:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3936              		.loc 1 2369 0
 3937 0032 0220     		movs	r0, #2
 3938              	.LVL367:
2391:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3939              		.loc 1 2391 0
 3940 0034 7047     		bx	lr
 3941              		.cfi_endproc
 3942              	.LFE106:
 3944              		.section	.text.HAL_HalfDuplex_EnableReceiver,"ax",%progbits
 3945              		.align	1
 3946              		.global	HAL_HalfDuplex_EnableReceiver
 3947              		.syntax unified
ARM GAS  /tmp/cciBiPGK.s 			page 134


 3948              		.thumb
 3949              		.thumb_func
 3950              		.fpu softvfp
 3952              	HAL_HalfDuplex_EnableReceiver:
 3953              	.LFB107:
2400:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   uint32_t tmpreg = 0x00U;
 3954              		.loc 1 2400 0
 3955              		.cfi_startproc
 3956              		@ args = 0, pretend = 0, frame = 0
 3957              		@ frame_needed = 0, uses_anonymous_args = 0
 3958              		@ link register save eliminated.
 3959              	.LVL368:
2404:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3960              		.loc 1 2404 0
 3961 0000 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2
 3962 0004 012B     		cmp	r3, #1
 3963 0006 14D0     		beq	.L316
2404:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3964              		.loc 1 2404 0 is_stmt 0 discriminator 2
 3965 0008 0123     		movs	r3, #1
 3966 000a 80F83830 		strb	r3, [r0, #56]
2406:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3967              		.loc 1 2406 0 is_stmt 1 discriminator 2
 3968 000e 2423     		movs	r3, #36
 3969 0010 80F83930 		strb	r3, [r0, #57]
2409:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3970              		.loc 1 2409 0 discriminator 2
 3971 0014 0268     		ldr	r2, [r0]
 3972 0016 D368     		ldr	r3, [r2, #12]
 3973              	.LVL369:
2412:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3974              		.loc 1 2412 0 discriminator 2
 3975 0018 23F00C03 		bic	r3, r3, #12
 3976              	.LVL370:
2415:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3977              		.loc 1 2415 0 discriminator 2
 3978 001c 43F00403 		orr	r3, r3, #4
 3979              	.LVL371:
2418:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3980              		.loc 1 2418 0 discriminator 2
 3981 0020 D360     		str	r3, [r2, #12]
2420:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3982              		.loc 1 2420 0 discriminator 2
 3983 0022 2023     		movs	r3, #32
 3984              	.LVL372:
 3985 0024 80F83930 		strb	r3, [r0, #57]
 3986              	.LVL373:
2423:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3987              		.loc 1 2423 0 discriminator 2
 3988 0028 0023     		movs	r3, #0
 3989 002a 80F83830 		strb	r3, [r0, #56]
2425:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
 3990              		.loc 1 2425 0 discriminator 2
 3991 002e 1846     		mov	r0, r3
 3992              	.LVL374:
 3993 0030 7047     		bx	lr
 3994              	.LVL375:
ARM GAS  /tmp/cciBiPGK.s 			page 135


 3995              	.L316:
2404:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3996              		.loc 1 2404 0
 3997 0032 0220     		movs	r0, #2
 3998              	.LVL376:
2426:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 3999              		.loc 1 2426 0
 4000 0034 7047     		bx	lr
 4001              		.cfi_endproc
 4002              	.LFE107:
 4004              		.section	.text.HAL_UART_GetState,"ax",%progbits
 4005              		.align	1
 4006              		.global	HAL_UART_GetState
 4007              		.syntax unified
 4008              		.thumb
 4009              		.thumb_func
 4010              		.fpu softvfp
 4012              	HAL_UART_GetState:
 4013              	.LFB108:
2457:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   uint32_t temp1 = 0x00U, temp2 = 0x00U;
 4014              		.loc 1 2457 0
 4015              		.cfi_startproc
 4016              		@ args = 0, pretend = 0, frame = 0
 4017              		@ frame_needed = 0, uses_anonymous_args = 0
 4018              		@ link register save eliminated.
 4019              	.LVL377:
2459:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   temp2 = huart->RxState;
 4020              		.loc 1 2459 0
 4021 0000 90F83930 		ldrb	r3, [r0, #57]	@ zero_extendqisi2
 4022              	.LVL378:
2460:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 4023              		.loc 1 2460 0
 4024 0004 90F83A00 		ldrb	r0, [r0, #58]	@ zero_extendqisi2
 4025              	.LVL379:
2463:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 4026              		.loc 1 2463 0
 4027 0008 1843     		orrs	r0, r0, r3
 4028              	.LVL380:
 4029 000a 7047     		bx	lr
 4030              		.cfi_endproc
 4031              	.LFE108:
 4033              		.section	.text.HAL_UART_GetError,"ax",%progbits
 4034              		.align	1
 4035              		.global	HAL_UART_GetError
 4036              		.syntax unified
 4037              		.thumb
 4038              		.thumb_func
 4039              		.fpu softvfp
 4041              	HAL_UART_GetError:
 4042              	.LFB109:
2472:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c ****   return huart->ErrorCode;
 4043              		.loc 1 2472 0
 4044              		.cfi_startproc
 4045              		@ args = 0, pretend = 0, frame = 0
 4046              		@ frame_needed = 0, uses_anonymous_args = 0
 4047              		@ link register save eliminated.
 4048              	.LVL381:
ARM GAS  /tmp/cciBiPGK.s 			page 136


2473:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** }
 4049              		.loc 1 2473 0
 4050 0000 C06B     		ldr	r0, [r0, #60]
 4051              	.LVL382:
2474:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_uart.c **** 
 4052              		.loc 1 2474 0
 4053 0002 7047     		bx	lr
 4054              		.cfi_endproc
 4055              	.LFE109:
 4057              		.text
 4058              	.Letext0:
 4059              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 4060              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 4061              		.file 4 "..//Source/stm/lib/CMSIS/Include/core_cm3.h"
 4062              		.file 5 "..//Source/stm/lib/CMSIS/Device/ST/STM32L1xx/Include/system_stm32l1xx.h"
 4063              		.file 6 "..//Source/stm/lib/CMSIS/Device/ST/STM32L1xx/Include/stm32l151xba.h"
 4064              		.file 7 "..//Source/stm/lib/CMSIS/Device/ST/STM32L1xx/Include/stm32l1xx.h"
 4065              		.file 8 "..//Source/stm/lib/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal_def.h"
 4066              		.file 9 "..//Source/stm/lib/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal_dma.h"
 4067              		.file 10 "..//Source/stm/lib/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal_uart.h"
 4068              		.file 11 "..//Source/stm/lib/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal.h"
 4069              		.file 12 "..//Source/stm/lib/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal_rcc.h"
ARM GAS  /tmp/cciBiPGK.s 			page 137


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32l1xx_hal_uart.c
     /tmp/cciBiPGK.s:16     .text.UART_EndTxTransfer:0000000000000000 $t
     /tmp/cciBiPGK.s:22     .text.UART_EndTxTransfer:0000000000000000 UART_EndTxTransfer
     /tmp/cciBiPGK.s:44     .text.UART_EndRxTransfer:0000000000000000 $t
     /tmp/cciBiPGK.s:50     .text.UART_EndRxTransfer:0000000000000000 UART_EndRxTransfer
     /tmp/cciBiPGK.s:76     .text.UART_Transmit_IT:0000000000000000 $t
     /tmp/cciBiPGK.s:82     .text.UART_Transmit_IT:0000000000000000 UART_Transmit_IT
     /tmp/cciBiPGK.s:170    .text.UART_SetConfig:0000000000000000 $t
     /tmp/cciBiPGK.s:176    .text.UART_SetConfig:0000000000000000 UART_SetConfig
     /tmp/cciBiPGK.s:356    .text.UART_SetConfig:000000000000015c $d
     /tmp/cciBiPGK.s:362    .text.UART_WaitOnFlagUntilTimeout:0000000000000000 $t
     /tmp/cciBiPGK.s:368    .text.UART_WaitOnFlagUntilTimeout:0000000000000000 UART_WaitOnFlagUntilTimeout
     /tmp/cciBiPGK.s:443    .text.HAL_UART_MspInit:0000000000000000 $t
     /tmp/cciBiPGK.s:450    .text.HAL_UART_MspInit:0000000000000000 HAL_UART_MspInit
     /tmp/cciBiPGK.s:463    .text.HAL_UART_Init:0000000000000000 $t
     /tmp/cciBiPGK.s:470    .text.HAL_UART_Init:0000000000000000 HAL_UART_Init
     /tmp/cciBiPGK.s:550    .text.HAL_HalfDuplex_Init:0000000000000000 $t
     /tmp/cciBiPGK.s:557    .text.HAL_HalfDuplex_Init:0000000000000000 HAL_HalfDuplex_Init
     /tmp/cciBiPGK.s:643    .text.HAL_LIN_Init:0000000000000000 $t
     /tmp/cciBiPGK.s:650    .text.HAL_LIN_Init:0000000000000000 HAL_LIN_Init
     /tmp/cciBiPGK.s:753    .text.HAL_MultiProcessor_Init:0000000000000000 $t
     /tmp/cciBiPGK.s:760    .text.HAL_MultiProcessor_Init:0000000000000000 HAL_MultiProcessor_Init
     /tmp/cciBiPGK.s:868    .text.HAL_UART_MspDeInit:0000000000000000 $t
     /tmp/cciBiPGK.s:875    .text.HAL_UART_MspDeInit:0000000000000000 HAL_UART_MspDeInit
     /tmp/cciBiPGK.s:888    .text.HAL_UART_DeInit:0000000000000000 $t
     /tmp/cciBiPGK.s:895    .text.HAL_UART_DeInit:0000000000000000 HAL_UART_DeInit
     /tmp/cciBiPGK.s:947    .text.HAL_UART_Transmit:0000000000000000 $t
     /tmp/cciBiPGK.s:954    .text.HAL_UART_Transmit:0000000000000000 HAL_UART_Transmit
     /tmp/cciBiPGK.s:1140   .text.HAL_UART_Receive:0000000000000000 $t
     /tmp/cciBiPGK.s:1147   .text.HAL_UART_Receive:0000000000000000 HAL_UART_Receive
     /tmp/cciBiPGK.s:1337   .text.HAL_UART_Transmit_IT:0000000000000000 $t
     /tmp/cciBiPGK.s:1344   .text.HAL_UART_Transmit_IT:0000000000000000 HAL_UART_Transmit_IT
     /tmp/cciBiPGK.s:1419   .text.HAL_UART_Receive_IT:0000000000000000 $t
     /tmp/cciBiPGK.s:1426   .text.HAL_UART_Receive_IT:0000000000000000 HAL_UART_Receive_IT
     /tmp/cciBiPGK.s:1511   .text.HAL_UART_Transmit_DMA:0000000000000000 $t
     /tmp/cciBiPGK.s:1518   .text.HAL_UART_Transmit_DMA:0000000000000000 HAL_UART_Transmit_DMA
     /tmp/cciBiPGK.s:1628   .text.HAL_UART_Transmit_DMA:0000000000000080 $d
     /tmp/cciBiPGK.s:2371   .text.UART_DMATransmitCplt:0000000000000000 UART_DMATransmitCplt
     /tmp/cciBiPGK.s:2481   .text.UART_DMATxHalfCplt:0000000000000000 UART_DMATxHalfCplt
     /tmp/cciBiPGK.s:2785   .text.UART_DMAError:0000000000000000 UART_DMAError
     /tmp/cciBiPGK.s:1635   .text.HAL_UART_Receive_DMA:0000000000000000 $t
     /tmp/cciBiPGK.s:1642   .text.HAL_UART_Receive_DMA:0000000000000000 HAL_UART_Receive_DMA
     /tmp/cciBiPGK.s:1777   .text.HAL_UART_Receive_DMA:000000000000009c $d
     /tmp/cciBiPGK.s:2531   .text.UART_DMAReceiveCplt:0000000000000000 UART_DMAReceiveCplt
     /tmp/cciBiPGK.s:2735   .text.UART_DMARxHalfCplt:0000000000000000 UART_DMARxHalfCplt
     /tmp/cciBiPGK.s:1784   .text.HAL_UART_DMAPause:0000000000000000 $t
     /tmp/cciBiPGK.s:1791   .text.HAL_UART_DMAPause:0000000000000000 HAL_UART_DMAPause
     /tmp/cciBiPGK.s:1878   .text.HAL_UART_DMAResume:0000000000000000 $t
     /tmp/cciBiPGK.s:1885   .text.HAL_UART_DMAResume:0000000000000000 HAL_UART_DMAResume
     /tmp/cciBiPGK.s:1979   .text.HAL_UART_DMAStop:0000000000000000 $t
     /tmp/cciBiPGK.s:1986   .text.HAL_UART_DMAStop:0000000000000000 HAL_UART_DMAStop
     /tmp/cciBiPGK.s:2075   .text.HAL_UART_Abort:0000000000000000 $t
     /tmp/cciBiPGK.s:2082   .text.HAL_UART_Abort:0000000000000000 HAL_UART_Abort
     /tmp/cciBiPGK.s:2194   .text.HAL_UART_AbortTransmit:0000000000000000 $t
     /tmp/cciBiPGK.s:2201   .text.HAL_UART_AbortTransmit:0000000000000000 HAL_UART_AbortTransmit
     /tmp/cciBiPGK.s:2267   .text.HAL_UART_AbortReceive:0000000000000000 $t
ARM GAS  /tmp/cciBiPGK.s 			page 138


     /tmp/cciBiPGK.s:2274   .text.HAL_UART_AbortReceive:0000000000000000 HAL_UART_AbortReceive
     /tmp/cciBiPGK.s:2345   .text.HAL_UART_TxCpltCallback:0000000000000000 $t
     /tmp/cciBiPGK.s:2352   .text.HAL_UART_TxCpltCallback:0000000000000000 HAL_UART_TxCpltCallback
     /tmp/cciBiPGK.s:2365   .text.UART_DMATransmitCplt:0000000000000000 $t
     /tmp/cciBiPGK.s:2419   .text.UART_EndTransmit_IT:0000000000000000 $t
     /tmp/cciBiPGK.s:2425   .text.UART_EndTransmit_IT:0000000000000000 UART_EndTransmit_IT
     /tmp/cciBiPGK.s:2455   .text.HAL_UART_TxHalfCpltCallback:0000000000000000 $t
     /tmp/cciBiPGK.s:2462   .text.HAL_UART_TxHalfCpltCallback:0000000000000000 HAL_UART_TxHalfCpltCallback
     /tmp/cciBiPGK.s:2475   .text.UART_DMATxHalfCplt:0000000000000000 $t
     /tmp/cciBiPGK.s:2505   .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/cciBiPGK.s:2512   .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/cciBiPGK.s:2525   .text.UART_DMAReceiveCplt:0000000000000000 $t
     /tmp/cciBiPGK.s:2584   .text.UART_Receive_IT:0000000000000000 $t
     /tmp/cciBiPGK.s:2590   .text.UART_Receive_IT:0000000000000000 UART_Receive_IT
     /tmp/cciBiPGK.s:2709   .text.HAL_UART_RxHalfCpltCallback:0000000000000000 $t
     /tmp/cciBiPGK.s:2716   .text.HAL_UART_RxHalfCpltCallback:0000000000000000 HAL_UART_RxHalfCpltCallback
     /tmp/cciBiPGK.s:2729   .text.UART_DMARxHalfCplt:0000000000000000 $t
     /tmp/cciBiPGK.s:2759   .text.HAL_UART_ErrorCallback:0000000000000000 $t
     /tmp/cciBiPGK.s:2766   .text.HAL_UART_ErrorCallback:0000000000000000 HAL_UART_ErrorCallback
     /tmp/cciBiPGK.s:2779   .text.UART_DMAError:0000000000000000 $t
     /tmp/cciBiPGK.s:2867   .text.HAL_UART_IRQHandler:0000000000000000 $t
     /tmp/cciBiPGK.s:2874   .text.HAL_UART_IRQHandler:0000000000000000 HAL_UART_IRQHandler
     /tmp/cciBiPGK.s:3094   .text.HAL_UART_IRQHandler:000000000000011c $d
     /tmp/cciBiPGK.s:3105   .text.UART_DMAAbortOnError:0000000000000000 UART_DMAAbortOnError
     /tmp/cciBiPGK.s:3099   .text.UART_DMAAbortOnError:0000000000000000 $t
     /tmp/cciBiPGK.s:3133   .text.HAL_UART_AbortCpltCallback:0000000000000000 $t
     /tmp/cciBiPGK.s:3140   .text.HAL_UART_AbortCpltCallback:0000000000000000 HAL_UART_AbortCpltCallback
     /tmp/cciBiPGK.s:3153   .text.HAL_UART_Abort_IT:0000000000000000 $t
     /tmp/cciBiPGK.s:3160   .text.HAL_UART_Abort_IT:0000000000000000 HAL_UART_Abort_IT
     /tmp/cciBiPGK.s:3317   .text.HAL_UART_Abort_IT:00000000000000c0 $d
     /tmp/cciBiPGK.s:3385   .text.UART_DMATxAbortCallback:0000000000000000 UART_DMATxAbortCallback
     /tmp/cciBiPGK.s:3329   .text.UART_DMARxAbortCallback:0000000000000000 UART_DMARxAbortCallback
     /tmp/cciBiPGK.s:3323   .text.UART_DMARxAbortCallback:0000000000000000 $t
     /tmp/cciBiPGK.s:3379   .text.UART_DMATxAbortCallback:0000000000000000 $t
     /tmp/cciBiPGK.s:3435   .text.HAL_UART_AbortTransmitCpltCallback:0000000000000000 $t
     /tmp/cciBiPGK.s:3442   .text.HAL_UART_AbortTransmitCpltCallback:0000000000000000 HAL_UART_AbortTransmitCpltCallback
     /tmp/cciBiPGK.s:3455   .text.HAL_UART_AbortTransmit_IT:0000000000000000 $t
     /tmp/cciBiPGK.s:3462   .text.HAL_UART_AbortTransmit_IT:0000000000000000 HAL_UART_AbortTransmit_IT
     /tmp/cciBiPGK.s:3541   .text.HAL_UART_AbortTransmit_IT:000000000000005c $d
     /tmp/cciBiPGK.s:3552   .text.UART_DMATxOnlyAbortCallback:0000000000000000 UART_DMATxOnlyAbortCallback
     /tmp/cciBiPGK.s:3546   .text.UART_DMATxOnlyAbortCallback:0000000000000000 $t
     /tmp/cciBiPGK.s:3581   .text.HAL_UART_AbortReceiveCpltCallback:0000000000000000 $t
     /tmp/cciBiPGK.s:3588   .text.HAL_UART_AbortReceiveCpltCallback:0000000000000000 HAL_UART_AbortReceiveCpltCallback
     /tmp/cciBiPGK.s:3601   .text.HAL_UART_AbortReceive_IT:0000000000000000 $t
     /tmp/cciBiPGK.s:3608   .text.HAL_UART_AbortReceive_IT:0000000000000000 HAL_UART_AbortReceive_IT
     /tmp/cciBiPGK.s:3692   .text.HAL_UART_AbortReceive_IT:0000000000000068 $d
     /tmp/cciBiPGK.s:3703   .text.UART_DMARxOnlyAbortCallback:0000000000000000 UART_DMARxOnlyAbortCallback
     /tmp/cciBiPGK.s:3697   .text.UART_DMARxOnlyAbortCallback:0000000000000000 $t
     /tmp/cciBiPGK.s:3732   .text.HAL_LIN_SendBreak:0000000000000000 $t
     /tmp/cciBiPGK.s:3739   .text.HAL_LIN_SendBreak:0000000000000000 HAL_LIN_SendBreak
     /tmp/cciBiPGK.s:3783   .text.HAL_MultiProcessor_EnterMuteMode:0000000000000000 $t
     /tmp/cciBiPGK.s:3790   .text.HAL_MultiProcessor_EnterMuteMode:0000000000000000 HAL_MultiProcessor_EnterMuteMode
     /tmp/cciBiPGK.s:3834   .text.HAL_MultiProcessor_ExitMuteMode:0000000000000000 $t
     /tmp/cciBiPGK.s:3841   .text.HAL_MultiProcessor_ExitMuteMode:0000000000000000 HAL_MultiProcessor_ExitMuteMode
     /tmp/cciBiPGK.s:3885   .text.HAL_HalfDuplex_EnableTransmitter:0000000000000000 $t
     /tmp/cciBiPGK.s:3892   .text.HAL_HalfDuplex_EnableTransmitter:0000000000000000 HAL_HalfDuplex_EnableTransmitter
     /tmp/cciBiPGK.s:3945   .text.HAL_HalfDuplex_EnableReceiver:0000000000000000 $t
ARM GAS  /tmp/cciBiPGK.s 			page 139


     /tmp/cciBiPGK.s:3952   .text.HAL_HalfDuplex_EnableReceiver:0000000000000000 HAL_HalfDuplex_EnableReceiver
     /tmp/cciBiPGK.s:4005   .text.HAL_UART_GetState:0000000000000000 $t
     /tmp/cciBiPGK.s:4012   .text.HAL_UART_GetState:0000000000000000 HAL_UART_GetState
     /tmp/cciBiPGK.s:4034   .text.HAL_UART_GetError:0000000000000000 $t
     /tmp/cciBiPGK.s:4041   .text.HAL_UART_GetError:0000000000000000 HAL_UART_GetError
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_RCC_GetPCLK1Freq
HAL_RCC_GetPCLK2Freq
HAL_GetTick
HAL_DMA_Start_IT
HAL_DMA_Abort
HAL_DMA_GetError
HAL_DMA_Abort_IT
