ARM GAS  /tmp/ccF0iA9m.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32l1xx_hal_rtc.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.HAL_RTC_MspInit,"ax",%progbits
  16              		.align	1
  17              		.weak	HAL_RTC_MspInit
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	HAL_RTC_MspInit:
  24              	.LFB74:
  25              		.file 1 "..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c"
   1:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** /**
   2:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   ******************************************************************************
   3:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @file    stm32l1xx_hal_rtc.c
   4:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @author  MCD Application Team
   5:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @brief   RTC HAL module driver.
   6:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *          This file provides firmware functions to manage the following
   7:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *          functionalities of the Real Time Clock (RTC) peripheral:
   8:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *           + Initialization and de-initialization functions
   9:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *           + RTC Time and Date functions
  10:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *           + RTC Alarm functions
  11:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *           + Peripheral Control functions
  12:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *           + Peripheral State functions
  13:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *
  14:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   @verbatim
  15:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****  ===============================================================================
  16:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****                           ##### RTC Operating Condition #####
  17:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****  ===============================================================================
  18:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   [..] The real-time clock (RTC) and the RTC backup registers can be powered
  19:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****        from the VBAT voltage when the main VDD supply is powered off.
  20:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****        To retain the content of the RTC backup registers and supply the RTC
  21:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****        when VDD is turned off, VBAT pin can be connected to an optional
  22:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****        standby voltage supplied by a battery or by another source.
  23:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
  24:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   [..] To allow the RTC operating even when the main digital supply (VDD) is turned
  25:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****        off, the VBAT pin powers the following blocks:
  26:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     (#) The RTC
  27:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     (#) The LSE oscillator
  28:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     (#) PC13 to PC15 I/Os (when available)
  29:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
  30:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   [..] When the backup domain is supplied by VDD (analog switch connected to VDD),
  31:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****        the following pins are available:
  32:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     (#) PC14 and PC15 can be used as either GPIO or LSE pins
  33:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     (#) PC13 can be used as a GPIO or as the RTC_AF1 pin
ARM GAS  /tmp/ccF0iA9m.s 			page 2


  34:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
  35:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   [..] When the backup domain is supplied by VBAT (analog switch connected to VBAT
  36:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****        because VDD is not present), the following pins are available:
  37:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     (#) PC14 and PC15 can be used as LSE pins only
  38:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     (#) PC13 can be used as the RTC_AF1 pin
  39:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
  40:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****                    ##### Backup Domain Reset #####
  41:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****  ===============================================================================
  42:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   [..] The backup domain reset sets all RTC registers and the RCC_BDCR register
  43:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****        to their reset values.
  44:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   [..] A backup domain reset is generated when one of the following events occurs:
  45:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     (#) Software reset, triggered by setting the BDRST bit in the
  46:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         RCC Backup domain control register (RCC_BDCR).
  47:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     (#) VDD or VBAT power on, if both supplies have previously been powered off.
  48:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
  49:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****                    ##### Backup Domain Access #####
  50:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****  ===================================================================
  51:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   [..] After reset, the backup domain (RTC registers, RTC backup data
  52:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****        registers and backup SRAM) is protected against possible unwanted write
  53:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****        accesses.
  54:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   [..] To enable access to the RTC Domain and RTC registers, proceed as follows:
  55:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     (+) Enable the Power Controller (PWR) APB1 interface clock using the
  56:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         __HAL_RCC_PWR_CLK_ENABLE() function.
  57:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     (+) Enable access to RTC domain using the HAL_PWR_EnableBkUpAccess() function.
  58:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     (+) Select the RTC clock source using the __HAL_RCC_RTC_CONFIG() function.
  59:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     (+) Enable RTC Clock using the __HAL_RCC_RTC_ENABLE() function.
  60:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
  61:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
  62:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****                   ##### How to use RTC Driver #####
  63:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****  ===================================================================
  64:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   [..]
  65:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     (+) Enable the RTC domain access (see description in the section above).
  66:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     (+) Configure the RTC Prescaler (Asynchronous and Synchronous) and RTC hour
  67:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         format using the HAL_RTC_Init() function.
  68:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
  69:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *** Time and Date configuration ***
  70:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   ===================================
  71:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   [..]
  72:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     (+) To configure the RTC Calendar (Time and Date) use the HAL_RTC_SetTime()
  73:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         and HAL_RTC_SetDate() functions.
  74:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     (+) To read the RTC Calendar, use the HAL_RTC_GetTime() and HAL_RTC_GetDate() functions.
  75:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
  76:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *** Alarm configuration ***
  77:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   ===========================
  78:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   [..]
  79:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     (+) To configure the RTC Alarm use the HAL_RTC_SetAlarm() function.
  80:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****             You can also configure the RTC Alarm with interrupt mode using the
  81:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****             HAL_RTC_SetAlarm_IT() function.
  82:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     (+) To read the RTC Alarm, use the HAL_RTC_GetAlarm() function.
  83:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
  84:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****                   ##### RTC and low power modes #####
  85:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   ==================================================================
  86:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   [..] The MCU can be woken up from a low power mode by an RTC alternate
  87:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****        function.
  88:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   [..] The RTC alternate functions are the RTC alarms (Alarm A and Alarm B),
  89:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****        RTC wakeup, RTC tamper event detection and RTC time stamp event detection.
  90:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****        These RTC alternate functions can wake up the system from the Stop and
ARM GAS  /tmp/ccF0iA9m.s 			page 3


  91:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****        Standby low power modes.
  92:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   [..] The system can also wake up from low power modes without depending
  93:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****        on an external interrupt (Auto-wakeup mode), by using the RTC alarm
  94:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****        or the RTC wakeup events.
  95:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   [..] The RTC provides a programmable time base for waking up from the
  96:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****        Stop or Standby mode at regular intervals.
  97:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****        Wakeup from STOP and STANDBY modes is possible only when the RTC clock source
  98:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****        is LSE or LSI.
  99:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 100:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *** Callback registration ***
 101:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   =============================================
 102:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 103:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   The compilation define  USE_RTC_REGISTER_CALLBACKS when set to 1
 104:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   allows the user to configure dynamically the driver callbacks.
 105:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   Use Function @ref HAL_RTC_RegisterCallback() to register an interrupt callback.
 106:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 107:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   Function @ref HAL_RTC_RegisterCallback() allows to register following callbacks:
 108:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     (+) AlarmAEventCallback          : RTC Alarm A Event callback.
 109:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     (+) AlarmBEventCallback          : RTC Alarm B Event callback.
 110:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     (+) TimeStampEventCallback       : RTC TimeStamp Event callback.
 111:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     (+) WakeUpTimerEventCallback     : RTC WakeUpTimer Event callback.
 112:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     (+) Tamper1EventCallback         : RTC Tamper 1 Event callback.
 113:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     (+) Tamper2EventCallback         : RTC Tamper 2 Event callback.
 114:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     (+) Tamper3EventCallback         : RTC Tamper 3 Event callback.
 115:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     (+) MspInitCallback              : RTC MspInit callback.
 116:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     (+) MspDeInitCallback            : RTC MspDeInit callback.
 117:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   This function takes as parameters the HAL peripheral handle, the Callback ID
 118:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   and a pointer to the user callback function.
 119:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 120:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   Use function @ref HAL_RTC_UnRegisterCallback() to reset a callback to the default
 121:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   weak function.
 122:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   @ref HAL_RTC_UnRegisterCallback() takes as parameters the HAL peripheral handle,
 123:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   and the Callback ID.
 124:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   This function allows to reset following callbacks:
 125:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     (+) AlarmAEventCallback          : RTC Alarm A Event callback.
 126:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     (+) AlarmBEventCallback          : RTC Alarm B Event callback.
 127:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     (+) TimeStampEventCallback       : RTC TimeStamp Event callback.
 128:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     (+) WakeUpTimerEventCallback     : RTC WakeUpTimer Event callback.
 129:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     (+) Tamper1EventCallback         : RTC Tamper 1 Event callback.
 130:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     (+) Tamper2EventCallback         : RTC Tamper 2 Event callback.
 131:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     (+) Tamper3EventCallback         : RTC Tamper 3 Event callback.
 132:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     (+) MspInitCallback              : RTC MspInit callback.
 133:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     (+) MspDeInitCallback            : RTC MspDeInit callback.
 134:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 135:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   By default, after the @ref HAL_RTC_Init() and when the state is HAL_RTC_STATE_RESET,
 136:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   all callbacks are set to the corresponding weak functions :
 137:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   examples @ref AlarmAEventCallback(), @ref WakeUpTimerEventCallback().
 138:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   Exception done for MspInit and MspDeInit callbacks that are reset to the legacy weak function
 139:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   in the @ref HAL_RTC_Init()/@ref HAL_RTC_DeInit() only when these callbacks are null
 140:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   (not registered beforehand).
 141:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   If not, MspInit or MspDeInit are not null, @ref HAL_RTC_Init()/@ref HAL_RTC_DeInit()
 142:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   keep and use the user MspInit/MspDeInit callbacks (registered beforehand)
 143:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 144:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   Callbacks can be registered/unregistered in HAL_RTC_STATE_READY state only.
 145:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   Exception done MspInit/MspDeInit that can be registered/unregistered
 146:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   in HAL_RTC_STATE_READY or HAL_RTC_STATE_RESET state,
 147:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   thus registered (user) MspInit/DeInit callbacks can be used during the Init/DeInit.
ARM GAS  /tmp/ccF0iA9m.s 			page 4


 148:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   In that case first register the MspInit/MspDeInit user callbacks
 149:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   using @ref HAL_RTC_RegisterCallback() before calling @ref HAL_RTC_DeInit()
 150:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   or @ref HAL_RTC_Init() function.
 151:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 152:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   When The compilation define USE_HAL_RTC_REGISTER_CALLBACKS is set to 0 or
 153:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   not defined, the callback registration feature is not available and all callbacks
 154:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   are set to the corresponding weak functions.
 155:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 156:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****    @endverbatim
 157:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   ******************************************************************************
 158:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @attention
 159:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *
 160:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
 161:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * All rights reserved.</center></h2>
 162:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *
 163:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * This software component is licensed by ST under BSD 3-Clause license,
 164:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * the "License"; You may not use this file except in compliance with the
 165:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * License. You may obtain a copy of the License at:
 166:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *                        opensource.org/licenses/BSD-3-Clause
 167:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *
 168:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   ******************************************************************************
 169:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   */
 170:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 171:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** /* Includes ------------------------------------------------------------------*/
 172:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #include "stm32l1xx_hal.h"
 173:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 174:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** /** @addtogroup STM32L1xx_HAL_Driver
 175:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @{
 176:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   */
 177:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 178:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 179:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** /** @addtogroup RTC
 180:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @brief RTC HAL module driver
 181:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @{
 182:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   */
 183:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 184:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #ifdef HAL_RTC_MODULE_ENABLED
 185:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 186:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** /* Private typedef -----------------------------------------------------------*/
 187:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** /* Private define ------------------------------------------------------------*/
 188:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** /* Private macro -------------------------------------------------------------*/
 189:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** /* Private variables ---------------------------------------------------------*/
 190:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** /* Private function prototypes -----------------------------------------------*/
 191:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** /* Exported functions --------------------------------------------------------*/
 192:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 193:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** /** @addtogroup RTC_Exported_Functions
 194:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @{
 195:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   */
 196:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 197:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** /** @addtogroup RTC_Exported_Functions_Group1
 198:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****  *  @brief    Initialization and Configuration functions
 199:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****  *
 200:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** @verbatim
 201:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****  ===============================================================================
 202:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ##### Initialization and de-initialization functions #####
 203:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****  ===============================================================================
 204:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****    [..] This section provides functions allowing to initialize and configure the
ARM GAS  /tmp/ccF0iA9m.s 			page 5


 205:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****          RTC Prescaler (Synchronous and Asynchronous), RTC Hour format, disable
 206:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****          RTC registers Write protection, enter and exit the RTC initialization mode,
 207:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****          RTC registers synchronization check and reference clock detection enable.
 208:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****          (#) The RTC Prescaler is programmed to generate the RTC 1Hz time base.
 209:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****              It is split into 2 programmable prescalers to minimize power consumption.
 210:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****              (++) A 7-bit asynchronous prescaler and a 13-bit synchronous prescaler.
 211:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****              (++) When both prescalers are used, it is recommended to configure the
 212:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****                  asynchronous prescaler to a high value to minimize power consumption.
 213:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****          (#) All RTC registers are Write protected. Writing to the RTC registers
 214:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****              is enabled by writing a key into the Write Protection register, RTC_WPR.
 215:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****          (#) To configure the RTC Calendar, user application should enter
 216:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****              initialization mode. In this mode, the calendar counter is stopped
 217:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****              and its value can be updated. When the initialization sequence is
 218:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****              complete, the calendar restarts counting after 4 RTCCLK cycles.
 219:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****          (#) To read the calendar through the shadow registers after Calendar
 220:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****              initialization, calendar update or after wakeup from low power modes
 221:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****              the software must first clear the RSF flag. The software must then
 222:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****              wait until it is set again before reading the calendar, which means
 223:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****              that the calendar registers have been correctly copied into the
 224:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****              RTC_TR and RTC_DR shadow registers.The HAL_RTC_WaitForSynchro() function
 225:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****              implements the above software sequence (RSF clear and RSF check).
 226:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 227:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** @endverbatim
 228:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @{
 229:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   */
 230:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 231:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** /**
 232:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @brief  Initialize the RTC peripheral
 233:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @param  hrtc RTC handle
 234:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @retval HAL status
 235:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   */
 236:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
 237:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** {
 238:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Check the RTC peripheral state */
 239:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   if (hrtc == NULL)
 240:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
 241:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     return HAL_ERROR;
 242:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
 243:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 244:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Check the parameters */
 245:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 246:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 247:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 248:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 249:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 250:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 251:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 252:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 253:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
 254:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   if (hrtc->State == HAL_RTC_STATE_RESET)
 255:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
 256:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Allocate lock resource and initialize it */
 257:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Lock = HAL_UNLOCKED;
 258:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 259:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->AlarmAEventCallback          =  HAL_RTC_AlarmAEventCallback;        /* Legacy weak AlarmA
 260:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->AlarmBEventCallback          =  HAL_RTCEx_AlarmBEventCallback;      /* Legacy weak AlarmB
 261:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->TimeStampEventCallback       =  HAL_RTCEx_TimeStampEventCallback;   /* Legacy weak TimeSt
ARM GAS  /tmp/ccF0iA9m.s 			page 6


 262:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->WakeUpTimerEventCallback     =  HAL_RTCEx_WakeUpTimerEventCallback; /* Legacy weak WakeUp
 263:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Tamper1EventCallback         =  HAL_RTCEx_Tamper1EventCallback;     /* Legacy weak Tamper
 264:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100x
 265:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Tamper2EventCallback         =  HAL_RTCEx_Tamper2EventCallback;     /* Legacy weak Tamper
 266:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Tamper3EventCallback         =  HAL_RTCEx_Tamper3EventCallback;     /* Legacy weak Tamper
 267:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC
 268:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 269:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     if (hrtc->MspInitCallback == NULL)
 270:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
 271:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       hrtc->MspInitCallback = HAL_RTC_MspInit;
 272:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     }
 273:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Init the low level hardware */
 274:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->MspInitCallback(hrtc);
 275:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 276:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     if (hrtc->MspDeInitCallback == NULL)
 277:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
 278:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 279:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     }
 280:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
 281:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #else
 282:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   if (hrtc->State == HAL_RTC_STATE_RESET)
 283:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
 284:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Allocate lock resource and initialize it */
 285:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Lock = HAL_UNLOCKED;
 286:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 287:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Initialize RTC MSP */
 288:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     HAL_RTC_MspInit(hrtc);
 289:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
 290:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
 291:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 292:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Set RTC state */
 293:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 294:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 295:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 296:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 297:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 298:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Set Initialization mode */
 299:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   if (RTC_EnterInitMode(hrtc) != HAL_OK)
 300:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
 301:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 302:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 303:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 304:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Set RTC state */
 305:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_ERROR;
 306:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 307:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     return HAL_ERROR;
 308:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
 309:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   else
 310:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
 311:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Clear RTC_CR FMT, OSEL and POL Bits */
 312:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 313:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Set RTC_CR register */
 314:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutP
 315:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 316:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Configure the RTC PRER */
 317:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 318:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
ARM GAS  /tmp/ccF0iA9m.s 			page 7


 319:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 320:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Exit Initialization mode */
 321:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 322:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 323:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 324:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 325:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 326:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 327:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 328:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 329:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Set RTC state */
 330:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_READY;
 331:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 332:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     return HAL_OK;
 333:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
 334:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** }
 335:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 336:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** /**
 337:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @brief  DeInitialize the RTC peripheral.
 338:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @param  hrtc RTC handle
 339:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @note   This function does not reset the RTC Backup Data registers.
 340:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @retval HAL status
 341:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   */
 342:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_DeInit(RTC_HandleTypeDef *hrtc)
 343:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** {
 344:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   uint32_t tickstart;
 345:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 346:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Check the parameters */
 347:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 348:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 349:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Set RTC state */
 350:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 351:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 352:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 353:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 354:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 355:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Set Initialization mode */
 356:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   if (RTC_EnterInitMode(hrtc) != HAL_OK)
 357:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
 358:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 359:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 360:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 361:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Set RTC state */
 362:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_ERROR;
 363:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 364:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     return HAL_ERROR;
 365:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
 366:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   else
 367:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
 368:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Reset TR, DR and CR registers */
 369:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Instance->TR = 0x00000000U;
 370:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Instance->DR = 0x00002101U;
 371:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Reset All CR bits except CR[2:0] */
 372:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Instance->CR &= 0x00000007U;
 373:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 374:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 375:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
ARM GAS  /tmp/ccF0iA9m.s 			page 8


 376:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Wait till WUTWF flag is set and if Time out is reached exit */
 377:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     while (((hrtc->Instance->ISR) & RTC_ISR_WUTWF) == 0U)
 378:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
 379:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 380:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       {
 381:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
 382:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 383:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 384:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         /* Set RTC state */
 385:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 386:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 387:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         return HAL_TIMEOUT;
 388:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       }
 389:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     }
 390:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 391:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Reset all RTC CR register bits */
 392:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Instance->CR &= 0x00000000U;
 393:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Instance->WUTR = 0x0000FFFFU;
 394:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Instance->PRER = 0x007F00FFU;
 395:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Instance->CALIBR = 0x00000000U;
 396:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Instance->ALRMAR = 0x00000000U;
 397:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Instance->ALRMBR = 0x00000000U;
 398:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100x
 399:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Instance->SHIFTR = 0x00000000U;
 400:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Instance->CALR = 0x00000000U;
 401:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Instance->ALRMASSR = 0x00000000U;
 402:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Instance->ALRMBSSR = 0x00000000U;
 403:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC
 404:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Reset ISR register and exit initialization mode */
 405:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Instance->ISR = 0x00000000U;
 406:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 407:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Reset Tamper and alternate functions configuration register */
 408:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Instance->TAFCR = 0x00000000U;
 409:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 410:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Wait for synchro */
 411:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 412:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
 413:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       /* Enable the write protection for RTC registers */
 414:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 415:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 416:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       hrtc->State = HAL_RTC_STATE_ERROR;
 417:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 418:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       return HAL_ERROR;
 419:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     }
 420:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
 421:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 422:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
 423:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 424:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 425:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
 426:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   if (hrtc->MspDeInitCallback == NULL)
 427:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
 428:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 429:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
 430:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 431:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* DeInit the low level hardware: CLOCK, NVIC.*/
 432:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   hrtc->MspDeInitCallback(hrtc);
ARM GAS  /tmp/ccF0iA9m.s 			page 9


 433:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 434:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #else
 435:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* De-Initialize RTC MSP */
 436:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   HAL_RTC_MspDeInit(hrtc);
 437:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
 438:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 439:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_RESET;
 440:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 441:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Release Lock */
 442:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 443:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 444:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   return HAL_OK;
 445:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** }
 446:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 447:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
 448:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** /**
 449:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @brief  Register a User RTC Callback
 450:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *         To be used instead of the weak predefined callback
 451:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @param  hrtc RTC handle
 452:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @param  CallbackID ID of the callback to be registered
 453:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *         This parameter can be one of the following values:
 454:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_ALARM_A_EVENT_CB_ID          Alarm A Event Callback ID
 455:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_ALARM_B_EVENT_CB_ID          Alarm B Event Callback ID
 456:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TIMESTAMP_EVENT_CB_ID        TimeStamp Event Callback ID
 457:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_WAKEUPTIMER_EVENT_CB_ID      WakeUp Timer Event Callback ID
 458:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TAMPER1_EVENT_CB_ID          Tamper 1 Callback ID
 459:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TAMPER2_EVENT_CB_ID          Tamper 2 Callback ID
 460:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TAMPER3_EVENT_CB_ID          Tamper 3 Callback ID
 461:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_MSPINIT_CB_ID                Msp Init callback ID
 462:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_MSPDEINIT_CB_ID              Msp DeInit callback ID
 463:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @param  pCallback pointer to the Callback function
 464:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @retval HAL status
 465:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   */
 466:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_RegisterCallback(RTC_HandleTypeDef *hrtc, HAL_RTC_CallbackIDTypeDef Callb
 467:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** {
 468:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_OK;
 469:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 470:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   if (pCallback == NULL)
 471:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
 472:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     return HAL_ERROR;
 473:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
 474:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 475:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Process locked */
 476:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 477:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 478:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   if (HAL_RTC_STATE_READY == hrtc->State)
 479:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
 480:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     switch (CallbackID)
 481:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
 482:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       case HAL_RTC_ALARM_A_EVENT_CB_ID :
 483:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         hrtc->AlarmAEventCallback = pCallback;
 484:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         break;
 485:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 486:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       case HAL_RTC_ALARM_B_EVENT_CB_ID :
 487:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         hrtc->AlarmBEventCallback = pCallback;
 488:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         break;
 489:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
ARM GAS  /tmp/ccF0iA9m.s 			page 10


 490:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       case HAL_RTC_TIMESTAMP_EVENT_CB_ID :
 491:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         hrtc->TimeStampEventCallback = pCallback;
 492:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         break;
 493:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 494:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       case HAL_RTC_WAKEUPTIMER_EVENT_CB_ID :
 495:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         hrtc->WakeUpTimerEventCallback = pCallback;
 496:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         break;
 497:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 498:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       case HAL_RTC_TAMPER1_EVENT_CB_ID :
 499:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         hrtc->Tamper1EventCallback = pCallback;
 500:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         break;
 501:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 502:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100x
 503:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       case HAL_RTC_TAMPER2_EVENT_CB_ID :
 504:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         hrtc->Tamper2EventCallback = pCallback;
 505:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         break;
 506:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 507:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       case HAL_RTC_TAMPER3_EVENT_CB_ID :
 508:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         hrtc->Tamper3EventCallback = pCallback;
 509:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         break;
 510:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC
 511:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 512:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       case HAL_RTC_MSPINIT_CB_ID :
 513:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         hrtc->MspInitCallback = pCallback;
 514:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         break;
 515:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 516:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       case HAL_RTC_MSPDEINIT_CB_ID :
 517:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         hrtc->MspDeInitCallback = pCallback;
 518:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         break;
 519:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 520:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       default :
 521:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         /* Return error status */
 522:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         status =  HAL_ERROR;
 523:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         break;
 524:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     }
 525:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
 526:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   else if (HAL_RTC_STATE_RESET == hrtc->State)
 527:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
 528:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     switch (CallbackID)
 529:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
 530:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       case HAL_RTC_MSPINIT_CB_ID :
 531:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         hrtc->MspInitCallback = pCallback;
 532:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         break;
 533:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 534:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       case HAL_RTC_MSPDEINIT_CB_ID :
 535:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         hrtc->MspDeInitCallback = pCallback;
 536:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         break;
 537:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 538:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       default :
 539:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         /* Return error status */
 540:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         status =  HAL_ERROR;
 541:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         break;
 542:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     }
 543:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
 544:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   else
 545:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
 546:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Return error status */
ARM GAS  /tmp/ccF0iA9m.s 			page 11


 547:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     status =  HAL_ERROR;
 548:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
 549:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 550:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Release Lock */
 551:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 552:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 553:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   return status;
 554:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** }
 555:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 556:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** /**
 557:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @brief  Unregister an RTC Callback
 558:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *         RTC callabck is redirected to the weak predefined callback
 559:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @param  hrtc RTC handle
 560:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @param  CallbackID ID of the callback to be unregistered
 561:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *         This parameter can be one of the following values:
 562:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_ALARM_A_EVENT_CB_ID          Alarm A Event Callback ID
 563:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_ALARM_B_EVENT_CB_ID          Alarm B Event Callback ID
 564:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TIMESTAMP_EVENT_CB_ID        TimeStamp Event Callback ID
 565:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_WAKEUPTIMER_EVENT_CB_ID      WakeUp Timer Event Callback ID
 566:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TAMPER1_EVENT_CB_ID          Tamper 1 Callback ID
 567:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TAMPER2_EVENT_CB_ID          Tamper 2 Callback ID
 568:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TAMPER3_EVENT_CB_ID          Tamper 3 Callback ID
 569:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_MSPINIT_CB_ID Msp Init callback ID
 570:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_MSPDEINIT_CB_ID Msp DeInit callback ID
 571:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @retval HAL status
 572:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   */
 573:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_UnRegisterCallback(RTC_HandleTypeDef *hrtc, HAL_RTC_CallbackIDTypeDef Cal
 574:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** {
 575:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_OK;
 576:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 577:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Process locked */
 578:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 579:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 580:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   if (HAL_RTC_STATE_READY == hrtc->State)
 581:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
 582:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     switch (CallbackID)
 583:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
 584:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       case HAL_RTC_ALARM_A_EVENT_CB_ID :
 585:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         hrtc->AlarmAEventCallback = HAL_RTC_AlarmAEventCallback;         /* Legacy weak AlarmAEvent
 586:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         break;
 587:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 588:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       case HAL_RTC_ALARM_B_EVENT_CB_ID :
 589:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         hrtc->AlarmBEventCallback = HAL_RTCEx_AlarmBEventCallback;          /* Legacy weak AlarmBEv
 590:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         break;
 591:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 592:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       case HAL_RTC_TIMESTAMP_EVENT_CB_ID :
 593:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         hrtc->TimeStampEventCallback = HAL_RTCEx_TimeStampEventCallback;    /* Legacy weak TimeStam
 594:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         break;
 595:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 596:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       case HAL_RTC_WAKEUPTIMER_EVENT_CB_ID :
 597:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         hrtc->WakeUpTimerEventCallback = HAL_RTCEx_WakeUpTimerEventCallback; /* Legacy weak WakeUpT
 598:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         break;
 599:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 600:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       case HAL_RTC_TAMPER1_EVENT_CB_ID :
 601:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         hrtc->Tamper1EventCallback = HAL_RTCEx_Tamper1EventCallback;         /* Legacy weak Tamper1
 602:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         break;
 603:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
ARM GAS  /tmp/ccF0iA9m.s 			page 12


 604:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100x
 605:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       case HAL_RTC_TAMPER2_EVENT_CB_ID :
 606:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         hrtc->Tamper2EventCallback = HAL_RTCEx_Tamper2EventCallback;         /* Legacy weak Tamper2
 607:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         break;
 608:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 609:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       case HAL_RTC_TAMPER3_EVENT_CB_ID :
 610:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         hrtc->Tamper3EventCallback = HAL_RTCEx_Tamper3EventCallback;         /* Legacy weak Tamper3
 611:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         break;
 612:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #endif
 613:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       case HAL_RTC_MSPINIT_CB_ID :
 614:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         hrtc->MspInitCallback = HAL_RTC_MspInit;
 615:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         break;
 616:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 617:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       case HAL_RTC_MSPDEINIT_CB_ID :
 618:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 619:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         break;
 620:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 621:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       default :
 622:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         /* Return error status */
 623:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         status =  HAL_ERROR;
 624:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         break;
 625:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     }
 626:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
 627:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   else if (HAL_RTC_STATE_RESET == hrtc->State)
 628:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
 629:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     switch (CallbackID)
 630:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
 631:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       case HAL_RTC_MSPINIT_CB_ID :
 632:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         hrtc->MspInitCallback = HAL_RTC_MspInit;
 633:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         break;
 634:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 635:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       case HAL_RTC_MSPDEINIT_CB_ID :
 636:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 637:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         break;
 638:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 639:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       default :
 640:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         /* Return error status */
 641:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         status =  HAL_ERROR;
 642:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         break;
 643:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     }
 644:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
 645:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   else
 646:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
 647:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Return error status */
 648:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     status =  HAL_ERROR;
 649:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
 650:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 651:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Release Lock */
 652:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 653:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 654:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   return status;
 655:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** }
 656:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
 657:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 658:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** /**
 659:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @brief  Initialize the RTC MSP.
 660:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @param  hrtc RTC handle
ARM GAS  /tmp/ccF0iA9m.s 			page 13


 661:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @retval None
 662:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   */
 663:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** __weak void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
 664:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** {
  26              		.loc 1 664 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
  32 0000 7047     		bx	lr
  33              		.cfi_endproc
  34              	.LFE74:
  36              		.section	.text.HAL_RTC_MspDeInit,"ax",%progbits
  37              		.align	1
  38              		.weak	HAL_RTC_MspDeInit
  39              		.syntax unified
  40              		.thumb
  41              		.thumb_func
  42              		.fpu softvfp
  44              	HAL_RTC_MspDeInit:
  45              	.LFB75:
 665:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Prevent unused argument(s) compilation warning */
 666:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   UNUSED(hrtc);
 667:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 668:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 669:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****             the HAL_RTC_MspInit could be implemented in the user file
 670:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****    */
 671:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** }
 672:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 673:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** /**
 674:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @brief  DeInitialize the RTC MSP.
 675:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @param  hrtc RTC handle
 676:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @retval None
 677:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   */
 678:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** __weak void HAL_RTC_MspDeInit(RTC_HandleTypeDef *hrtc)
 679:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** {
  46              		.loc 1 679 0
  47              		.cfi_startproc
  48              		@ args = 0, pretend = 0, frame = 0
  49              		@ frame_needed = 0, uses_anonymous_args = 0
  50              		@ link register save eliminated.
  51              	.LVL1:
  52 0000 7047     		bx	lr
  53              		.cfi_endproc
  54              	.LFE75:
  56              		.section	.text.HAL_RTC_DeactivateAlarm,"ax",%progbits
  57              		.align	1
  58              		.global	HAL_RTC_DeactivateAlarm
  59              		.syntax unified
  60              		.thumb
  61              		.thumb_func
  62              		.fpu softvfp
  64              	HAL_RTC_DeactivateAlarm:
  65              	.LFB82:
 680:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Prevent unused argument(s) compilation warning */
 681:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   UNUSED(hrtc);
ARM GAS  /tmp/ccF0iA9m.s 			page 14


 682:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 683:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 684:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****             the HAL_RTC_MspDeInit could be implemented in the user file
 685:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****    */
 686:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** }
 687:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 688:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** /**
 689:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @}
 690:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   */
 691:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 692:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** /** @addtogroup RTC_Exported_Functions_Group2
 693:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****  *  @brief   RTC Time and Date functions
 694:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****  *
 695:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** @verbatim
 696:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****  ===============================================================================
 697:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****                  ##### RTC Time and Date functions #####
 698:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****  ===============================================================================
 699:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 700:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****  [..] This section provides functions allowing to configure Time and Date features
 701:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 702:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** @endverbatim
 703:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @{
 704:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   */
 705:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 706:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** /**
 707:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @brief  Set RTC current time.
 708:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @param  hrtc RTC handle
 709:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @param  sTime Pointer to Time structure
 710:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
 711:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 712:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN: Binary data format
 713:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD: BCD data format
 714:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @retval HAL status
 715:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   */
 716:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
 717:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** {
 718:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   uint32_t tmpreg;
 719:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 720:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Check the parameters */
 721:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 722:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 723:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 724:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 725:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Process Locked */
 726:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 727:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 728:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 729:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 730:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   if (Format == RTC_FORMAT_BIN)
 731:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
 732:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 733:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
 734:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(sTime->Hours));
 735:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 736:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     }
 737:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     else
 738:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
ARM GAS  /tmp/ccF0iA9m.s 			page 15


 739:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       sTime->TimeFormat = 0x00U;
 740:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sTime->Hours));
 741:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     }
 742:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(sTime->Minutes));
 743:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(sTime->Seconds));
 744:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 745:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 746:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****                         ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 747:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****                         ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 748:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****                         (((uint32_t)sTime->TimeFormat) << 16U));
 749:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
 750:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   else
 751:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
 752:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 753:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
 754:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 755:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 756:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     }
 757:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     else
 758:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
 759:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       sTime->TimeFormat = 0x00U;
 760:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 761:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     }
 762:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 763:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 764:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 765:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)(sTime->Minutes) << 8U) | \
 766:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)sTime->Seconds) | \
 767:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)(sTime->TimeFormat) << 16U));
 768:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
 769:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   UNUSED(tmpreg);
 770:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 771:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 772:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 773:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Set Initialization mode */
 774:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   if (RTC_EnterInitMode(hrtc) != HAL_OK)
 775:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
 776:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 777:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 778:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 779:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Set RTC state */
 780:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_ERROR;
 781:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 782:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Process Unlocked */
 783:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     __HAL_UNLOCK(hrtc);
 784:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 785:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     return HAL_ERROR;
 786:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
 787:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   else
 788:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
 789:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Set the RTC_TR register */
 790:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 791:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 792:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Clear the bits to be configured */
 793:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 794:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 795:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Configure the RTC_CR register */
ARM GAS  /tmp/ccF0iA9m.s 			page 16


 796:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 797:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 798:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Exit Initialization mode */
 799:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 801:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Wait for synchro */
 802:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 803:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
 804:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       /* Enable the write protection for RTC registers */
 805:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 806:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 807:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       hrtc->State = HAL_RTC_STATE_ERROR;
 808:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 809:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       /* Process Unlocked */
 810:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       __HAL_UNLOCK(hrtc);
 811:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 812:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       return HAL_ERROR;
 813:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     }
 814:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 815:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 816:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 817:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 818:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_READY;
 819:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 820:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     __HAL_UNLOCK(hrtc);
 821:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 822:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     return HAL_OK;
 823:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
 824:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** }
 825:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 826:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** /**
 827:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @brief  Get RTC current time.
 828:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @param  hrtc RTC handle
 829:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @param  sTime Pointer to Time structure with Hours, Minutes and Seconds fields returned
 830:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *                with input format (BIN or BCD), also SubSeconds field (if availabale) returning 
 831:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *                RTC_SSR register content and SecondFraction field the Synchronous pre-scaler
 832:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *                factor to be used for second fraction ratio computation.
 833:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
 834:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 835:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN: Binary data format
 836:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD: BCD data format
 837:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @note  If available, you can use SubSeconds and SecondFraction (sTime structure fields returned
 838:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *        value in second fraction ratio with time unit following generic formula:
 839:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *        Second fraction ratio * time_unit= [(SecondFraction-SubSeconds)/(SecondFraction+1)] * ti
 840:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *        This conversion can be performed only if no shift operation is pending (ie. SHFP=0) when
 841:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @note You must call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
 842:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * in the higher-order calendar shadow registers to ensure consistency between the time and date v
 843:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *        Reading RTC current time locks the values in calendar shadow registers until Current dat
 844:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *        to ensure consistency between the time and date values.
 845:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @retval HAL status
 846:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   */
 847:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
 848:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** {
 849:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   uint32_t tmpreg;
 850:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 851:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Check the parameters */
 852:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
ARM GAS  /tmp/ccF0iA9m.s 			page 17


 853:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 854:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100x
 855:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Get subseconds structure field from the corresponding register*/
 856:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   sTime->SubSeconds = (uint32_t)((hrtc->Instance->SSR) & RTC_SSR_SS);
 857:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 858:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Get SecondFraction structure field from the corresponding register field*/
 859:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 860:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC
 861:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 862:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Get the TR register */
 863:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 864:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 865:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Fill the structure fields with the read parameters */
 866:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 867:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 868:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 869:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 870:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 871:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Check the input parameters format */
 872:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   if (Format == RTC_FORMAT_BIN)
 873:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
 874:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Convert the time structure parameters to Binary format */
 875:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 876:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 877:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 878:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
 879:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 880:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   return HAL_OK;
 881:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** }
 882:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 883:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** /**
 884:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @brief  Set RTC current date.
 885:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @param  hrtc RTC handle
 886:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @param  sDate Pointer to date structure
 887:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @param  Format specifies the format of the entered parameters.
 888:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 889:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN: Binary data format
 890:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD: BCD data format
 891:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @retval HAL status
 892:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   */
 893:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
 894:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** {
 895:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   uint32_t datetmpreg;
 896:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 897:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Check the parameters */
 898:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 899:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 900:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Process Locked */
 901:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 902:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 903:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 904:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 905:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 906:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
 907:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 908:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
 909:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
ARM GAS  /tmp/ccF0iA9m.s 			page 18


 910:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 911:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 912:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   if (Format == RTC_FORMAT_BIN)
 913:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
 914:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     assert_param(IS_RTC_YEAR(sDate->Year));
 915:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     assert_param(IS_RTC_MONTH(sDate->Month));
 916:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     assert_param(IS_RTC_DATE(sDate->Date));
 917:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 918:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 919:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****                   ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 920:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****                   ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 921:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****                   ((uint32_t)sDate->WeekDay << 13U));
 922:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
 923:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   else
 924:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
 925:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 926:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 927:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 928:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 929:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 930:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****                   (((uint32_t)sDate->Month) << 8U) | \
 931:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****                   ((uint32_t)sDate->Date) | \
 932:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****                   (((uint32_t)sDate->WeekDay) << 13U));
 933:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
 934:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 935:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 936:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 937:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 938:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Set Initialization mode */
 939:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   if (RTC_EnterInitMode(hrtc) != HAL_OK)
 940:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
 941:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 942:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 943:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 944:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Set RTC state*/
 945:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_ERROR;
 946:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 947:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Process Unlocked */
 948:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     __HAL_UNLOCK(hrtc);
 949:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 950:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     return HAL_ERROR;
 951:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
 952:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   else
 953:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
 954:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Set the RTC_DR register */
 955:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 956:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 957:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Exit Initialization mode */
 958:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 959:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 960:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Wait for synchro */
 961:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 962:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
 963:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       /* Enable the write protection for RTC registers */
 964:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 965:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 966:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       hrtc->State = HAL_RTC_STATE_ERROR;
ARM GAS  /tmp/ccF0iA9m.s 			page 19


 967:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 968:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       /* Process Unlocked */
 969:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       __HAL_UNLOCK(hrtc);
 970:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 971:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       return HAL_ERROR;
 972:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     }
 973:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 974:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 975:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 976:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 977:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_READY ;
 978:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 979:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Process Unlocked */
 980:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     __HAL_UNLOCK(hrtc);
 981:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 982:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     return HAL_OK;
 983:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
 984:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** }
 985:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 986:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** /**
 987:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @brief  Get RTC current date.
 988:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @param  hrtc RTC handle
 989:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @param  sDate Pointer to Date structure
 990:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
 991:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 992:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN:  Binary data format
 993:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD:  BCD data format
 994:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @note You must call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
 995:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * in the higher-order calendar shadow registers to ensure consistency between the time and date v
 996:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * Reading RTC current time locks the values in calendar shadow registers until Current date is re
 997:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @retval HAL status
 998:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   */
 999:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
1000:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** {
1001:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   uint32_t datetmpreg;
1002:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1003:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Check the parameters */
1004:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
1005:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1006:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Get the DR register */
1007:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
1008:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1009:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Fill the structure fields with the read parameters */
1010:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
1011:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
1012:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
1013:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
1014:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1015:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Check the input parameters format */
1016:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   if (Format == RTC_FORMAT_BIN)
1017:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
1018:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Convert the date structure parameters to Binary format */
1019:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
1020:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
1021:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
1022:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
1023:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   return HAL_OK;
ARM GAS  /tmp/ccF0iA9m.s 			page 20


1024:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** }
1025:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1026:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** /**
1027:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @}
1028:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   */
1029:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1030:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** /** @addtogroup RTC_Exported_Functions_Group3
1031:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****  *  @brief   RTC Alarm functions
1032:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****  *
1033:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** @verbatim
1034:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****  ===============================================================================
1035:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****                  ##### RTC Alarm functions #####
1036:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****  ===============================================================================
1037:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1038:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****  [..] This section provides functions allowing to configure Alarm feature
1039:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1040:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** @endverbatim
1041:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @{
1042:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   */
1043:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** /**
1044:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @brief  Set the specified RTC Alarm.
1045:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @param  hrtc RTC handle
1046:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @param  sAlarm Pointer to Alarm structure
1047:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
1048:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1049:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BIN: Binary data format
1050:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BCD: BCD data format
1051:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @retval HAL status
1052:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   */
1053:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Form
1054:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** {
1055:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   uint32_t tickstart;
1056:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   uint32_t tmpreg;
1057:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1058:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100x
1059:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   uint32_t subsecondtmpreg = 0;
1060:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC
1061:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1062:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Check the parameters */
1063:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
1064:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(sAlarm->Alarm));
1065:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
1066:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
1067:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100x
1068:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
1069:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
1070:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC
1071:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1072:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Process Locked */
1073:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
1074:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1075:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
1076:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1077:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   if (Format == RTC_FORMAT_BIN)
1078:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
1079:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
1080:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
ARM GAS  /tmp/ccF0iA9m.s 			page 21


1081:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
1082:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
1083:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     }
1084:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     else
1085:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
1086:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00U;
1087:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
1088:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     }
1089:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
1090:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
1091:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1092:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
1093:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
1094:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
1095:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     }
1096:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     else
1097:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
1098:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
1099:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     }
1100:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1101:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
1102:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
1103:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
1104:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
1105:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
1106:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
1107:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask));
1108:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
1109:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   else
1110:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
1111:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
1112:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
1113:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
1114:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
1115:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     }
1116:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     else
1117:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
1118:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00U;
1119:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
1120:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     }
1121:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1122:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
1123:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
1124:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1125:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
1126:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
1127:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
1128:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     }
1129:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     else
1130:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
1131:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
1132:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     }
1133:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1134:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
1135:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
1136:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds) | \
1137:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
ARM GAS  /tmp/ccF0iA9m.s 			page 22


1138:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
1139:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
1140:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask));
1141:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
1142:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1143:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100x
1144:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Configure the Alarm A or Alarm B Sub Second registers */
1145:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmS
1146:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC
1147:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1148:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
1149:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
1150:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1151:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Configure the Alarm register */
1152:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   if (sAlarm->Alarm == RTC_ALARM_A)
1153:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
1154:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Disable the Alarm A interrupt */
1155:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     __HAL_RTC_ALARMA_DISABLE(hrtc);
1156:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1157:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */
1158:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
1159:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1160:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     tickstart = HAL_GetTick();
1161:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
1162:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
1163:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
1164:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
1165:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       {
1166:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1167:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
1168:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1169:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
1170:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1171:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         /* Process Unlocked */
1172:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
1173:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1174:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         return HAL_TIMEOUT;
1175:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       }
1176:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     }
1177:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1178:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
1179:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100x
1180:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Configure the Alarm A Sub Second register */
1181:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Instance->ALRMASSR = subsecondtmpreg;
1182:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC
1183:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
1184:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     __HAL_RTC_ALARMA_ENABLE(hrtc);
1185:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
1186:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   else
1187:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
1188:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Disable the Alarm B interrupt */
1189:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     __HAL_RTC_ALARMB_DISABLE(hrtc);
1190:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1191:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */
1192:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
1193:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1194:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     tickstart = HAL_GetTick();
ARM GAS  /tmp/ccF0iA9m.s 			page 23


1195:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
1196:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
1197:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
1198:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
1199:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       {
1200:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1201:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
1202:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1203:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
1204:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1205:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         /* Process Unlocked */
1206:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
1207:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1208:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         return HAL_TIMEOUT;
1209:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       }
1210:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     }
1211:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1212:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
1213:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100x
1214:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Configure the Alarm B Sub Second register */
1215:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Instance->ALRMBSSR = subsecondtmpreg;
1216:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC
1217:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
1218:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     __HAL_RTC_ALARMB_ENABLE(hrtc);
1219:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
1220:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1221:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
1222:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
1223:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1224:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Change RTC state */
1225:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY;
1226:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1227:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Process Unlocked */
1228:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
1229:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1230:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   return HAL_OK;
1231:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** }
1232:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1233:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** /**
1234:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @brief  Set the specified RTC Alarm with Interrupt.
1235:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @param  hrtc RTC handle
1236:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @param  sAlarm Pointer to Alarm structure
1237:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
1238:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1239:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BIN: Binary data format
1240:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BCD: BCD data format
1241:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @note   The Alarm register can only be written when the corresponding Alarm
1242:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
1243:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
1244:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @retval HAL status
1245:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   */
1246:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t F
1247:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** {
1248:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   uint32_t tickstart = 0;
1249:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   uint32_t tmpreg = 0;
1250:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100x
1251:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   uint32_t subsecondtmpreg = 0;
ARM GAS  /tmp/ccF0iA9m.s 			page 24


1252:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC
1253:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1254:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Check the parameters */
1255:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
1256:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(sAlarm->Alarm));
1257:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
1258:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
1259:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100x
1260:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
1261:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
1262:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC
1263:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1264:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Process Locked */
1265:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
1266:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1267:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
1268:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1269:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   if (Format == RTC_FORMAT_BIN)
1270:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
1271:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
1272:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
1273:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
1274:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
1275:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     }
1276:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     else
1277:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
1278:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00U;
1279:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
1280:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     }
1281:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
1282:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
1283:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1284:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
1285:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
1286:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
1287:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     }
1288:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     else
1289:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
1290:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
1291:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     }
1292:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
1293:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
1294:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
1295:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
1296:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
1297:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
1298:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask));
1299:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
1300:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   else
1301:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
1302:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
1303:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
1304:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
1305:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
1306:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     }
1307:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     else
1308:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
ARM GAS  /tmp/ccF0iA9m.s 			page 25


1309:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00U;
1310:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
1311:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     }
1312:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1313:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
1314:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
1315:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1316:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
1317:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
1318:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
1319:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     }
1320:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     else
1321:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
1322:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
1323:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     }
1324:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
1325:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
1326:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds) | \
1327:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
1328:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
1329:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
1330:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask));
1331:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
1332:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100x
1333:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Configure the Alarm A or Alarm B Sub Second registers */
1334:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmS
1335:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC
1336:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1337:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
1338:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
1339:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1340:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Configure the Alarm register */
1341:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   if (sAlarm->Alarm == RTC_ALARM_A)
1342:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
1343:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Disable the Alarm A interrupt */
1344:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     __HAL_RTC_ALARMA_DISABLE(hrtc);
1345:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1346:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Clear flag alarm A */
1347:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
1348:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1349:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     tickstart = HAL_GetTick();
1350:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
1351:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
1352:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
1353:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
1354:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       {
1355:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1356:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
1357:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1358:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
1359:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1360:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         /* Process Unlocked */
1361:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
1362:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1363:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         return HAL_TIMEOUT;
1364:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       }
1365:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     }
ARM GAS  /tmp/ccF0iA9m.s 			page 26


1366:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1367:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
1368:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100x
1369:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Configure the Alarm A Sub Second register */
1370:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Instance->ALRMASSR = subsecondtmpreg;
1371:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC
1372:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
1373:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     __HAL_RTC_ALARMA_ENABLE(hrtc);
1374:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Configure the Alarm interrupt */
1375:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
1376:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
1377:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   else
1378:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
1379:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Disable the Alarm B interrupt */
1380:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     __HAL_RTC_ALARMB_DISABLE(hrtc);
1381:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1382:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Clear flag alarm B */
1383:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
1384:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1385:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     tickstart = HAL_GetTick();
1386:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
1387:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
1388:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
1389:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
1390:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       {
1391:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1392:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
1393:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1394:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
1395:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1396:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         /* Process Unlocked */
1397:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
1398:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1399:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         return HAL_TIMEOUT;
1400:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       }
1401:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     }
1402:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1403:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
1404:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100x
1405:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Configure the Alarm B Sub Second register */
1406:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Instance->ALRMBSSR = subsecondtmpreg;
1407:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC
1408:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
1409:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     __HAL_RTC_ALARMB_ENABLE(hrtc);
1410:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Configure the Alarm interrupt */
1411:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
1412:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
1413:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1414:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* RTC Alarm Interrupt Configuration: EXTI configuration */
1415:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   __HAL_RTC_ALARM_EXTI_ENABLE_IT();
1416:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1417:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
1418:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1419:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
1420:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
1421:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1422:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY;
ARM GAS  /tmp/ccF0iA9m.s 			page 27


1423:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1424:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Process Unlocked */
1425:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
1426:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1427:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   return HAL_OK;
1428:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** }
1429:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1430:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** /**
1431:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @brief  Deactivate the specified RTC Alarm.
1432:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @param  hrtc RTC handle
1433:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @param  Alarm Specifies the Alarm.
1434:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1435:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *            @arg RTC_ALARM_A:  AlarmA
1436:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *            @arg RTC_ALARM_B:  AlarmB
1437:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @retval HAL status
1438:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   */
1439:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
1440:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** {
  66              		.loc 1 1440 0
  67              		.cfi_startproc
  68              		@ args = 0, pretend = 0, frame = 0
  69              		@ frame_needed = 0, uses_anonymous_args = 0
  70              	.LVL2:
  71              		.loc 1 1440 0
  72 0000 38B5     		push	{r3, r4, r5, lr}
  73              	.LCFI0:
  74              		.cfi_def_cfa_offset 16
  75              		.cfi_offset 3, -16
  76              		.cfi_offset 4, -12
  77              		.cfi_offset 5, -8
  78              		.cfi_offset 14, -4
1441:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   uint32_t tickstart;
1442:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1443:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Check the parameters */
1444:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(Alarm));
1445:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1446:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Process Locked */
1447:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
  79              		.loc 1 1447 0
  80 0002 037F     		ldrb	r3, [r0, #28]	@ zero_extendqisi2
  81 0004 012B     		cmp	r3, #1
  82 0006 55D0     		beq	.L11
  83 0008 0446     		mov	r4, r0
  84              		.loc 1 1447 0 is_stmt 0 discriminator 2
  85 000a 0123     		movs	r3, #1
  86 000c 0377     		strb	r3, [r0, #28]
1448:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1449:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
  87              		.loc 1 1449 0 is_stmt 1 discriminator 2
  88 000e 0223     		movs	r3, #2
  89 0010 4377     		strb	r3, [r0, #29]
1450:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1451:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
1452:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
  90              		.loc 1 1452 0 discriminator 2
  91 0012 0368     		ldr	r3, [r0]
  92 0014 CA22     		movs	r2, #202
ARM GAS  /tmp/ccF0iA9m.s 			page 28


  93 0016 5A62     		str	r2, [r3, #36]
  94 0018 0368     		ldr	r3, [r0]
  95 001a 5322     		movs	r2, #83
  96 001c 5A62     		str	r2, [r3, #36]
1453:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1454:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   if (Alarm == RTC_ALARM_A)
  97              		.loc 1 1454 0 discriminator 2
  98 001e B1F5807F 		cmp	r1, #256
  99 0022 1FD0     		beq	.L13
1455:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
1456:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* AlarmA */
1457:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     __HAL_RTC_ALARMA_DISABLE(hrtc);
1458:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1459:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */
1460:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
1461:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1462:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     tickstart = HAL_GetTick();
1463:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1464:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1465:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
1466:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
1467:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
1468:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       {
1469:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1470:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
1471:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1472:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
1473:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1474:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         /* Process Unlocked */
1475:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
1476:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1477:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         return HAL_TIMEOUT;
1478:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       }
1479:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     }
1480:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
1481:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   else
1482:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
1483:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* AlarmB */
1484:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     __HAL_RTC_ALARMB_DISABLE(hrtc);
 100              		.loc 1 1484 0
 101 0024 0268     		ldr	r2, [r0]
 102 0026 9368     		ldr	r3, [r2, #8]
 103 0028 23F40073 		bic	r3, r3, #512
 104 002c 9360     		str	r3, [r2, #8]
1485:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1486:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */
1487:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 105              		.loc 1 1487 0
 106 002e 0268     		ldr	r2, [r0]
 107 0030 9368     		ldr	r3, [r2, #8]
 108 0032 23F40053 		bic	r3, r3, #8192
 109 0036 9360     		str	r3, [r2, #8]
1488:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1489:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 110              		.loc 1 1489 0
 111 0038 FFF7FEFF 		bl	HAL_GetTick
 112              	.LVL3:
ARM GAS  /tmp/ccF0iA9m.s 			page 29


 113 003c 0546     		mov	r5, r0
 114              	.LVL4:
 115              	.L9:
1490:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1491:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1492:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 116              		.loc 1 1492 0
 117 003e 2368     		ldr	r3, [r4]
 118 0040 DB68     		ldr	r3, [r3, #12]
 119 0042 13F0020F 		tst	r3, #2
 120 0046 2DD1     		bne	.L8
1493:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
1494:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 121              		.loc 1 1494 0
 122 0048 FFF7FEFF 		bl	HAL_GetTick
 123              	.LVL5:
 124 004c 401B     		subs	r0, r0, r5
 125 004e B0F57A7F 		cmp	r0, #1000
 126 0052 F4D9     		bls	.L9
1495:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       {
1496:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1497:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 127              		.loc 1 1497 0
 128 0054 2368     		ldr	r3, [r4]
 129 0056 FF22     		movs	r2, #255
 130 0058 5A62     		str	r2, [r3, #36]
1498:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1499:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 131              		.loc 1 1499 0
 132 005a 0320     		movs	r0, #3
 133 005c 6077     		strb	r0, [r4, #29]
1500:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1501:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         /* Process Unlocked */
1502:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 134              		.loc 1 1502 0
 135 005e 0023     		movs	r3, #0
 136 0060 2377     		strb	r3, [r4, #28]
1503:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1504:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         return HAL_TIMEOUT;
 137              		.loc 1 1504 0
 138 0062 38BD     		pop	{r3, r4, r5, pc}
 139              	.LVL6:
 140              	.L13:
1457:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 141              		.loc 1 1457 0
 142 0064 0268     		ldr	r2, [r0]
 143 0066 9368     		ldr	r3, [r2, #8]
 144 0068 23F48073 		bic	r3, r3, #256
 145 006c 9360     		str	r3, [r2, #8]
1460:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 146              		.loc 1 1460 0
 147 006e 0268     		ldr	r2, [r0]
 148 0070 9368     		ldr	r3, [r2, #8]
 149 0072 23F48053 		bic	r3, r3, #4096
 150 0076 9360     		str	r3, [r2, #8]
1462:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 151              		.loc 1 1462 0
ARM GAS  /tmp/ccF0iA9m.s 			page 30


 152 0078 FFF7FEFF 		bl	HAL_GetTick
 153              	.LVL7:
 154 007c 0546     		mov	r5, r0
 155              	.LVL8:
 156              	.L6:
1465:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
 157              		.loc 1 1465 0
 158 007e 2368     		ldr	r3, [r4]
 159 0080 DB68     		ldr	r3, [r3, #12]
 160 0082 13F0010F 		tst	r3, #1
 161 0086 0DD1     		bne	.L8
1467:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       {
 162              		.loc 1 1467 0
 163 0088 FFF7FEFF 		bl	HAL_GetTick
 164              	.LVL9:
 165 008c 401B     		subs	r0, r0, r5
 166 008e B0F57A7F 		cmp	r0, #1000
 167 0092 F4D9     		bls	.L6
1470:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 168              		.loc 1 1470 0
 169 0094 2368     		ldr	r3, [r4]
 170 0096 FF22     		movs	r2, #255
 171 0098 5A62     		str	r2, [r3, #36]
1472:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 172              		.loc 1 1472 0
 173 009a 0320     		movs	r0, #3
 174 009c 6077     		strb	r0, [r4, #29]
1475:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 175              		.loc 1 1475 0
 176 009e 0023     		movs	r3, #0
 177 00a0 2377     		strb	r3, [r4, #28]
1477:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       }
 178              		.loc 1 1477 0
 179 00a2 38BD     		pop	{r3, r4, r5, pc}
 180              	.LVL10:
 181              	.L8:
1505:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       }
1506:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     }
1507:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
1508:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
1509:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 182              		.loc 1 1509 0
 183 00a4 2368     		ldr	r3, [r4]
 184 00a6 FF22     		movs	r2, #255
 185 00a8 5A62     		str	r2, [r3, #36]
1510:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1511:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY;
 186              		.loc 1 1511 0
 187 00aa 0123     		movs	r3, #1
 188 00ac 6377     		strb	r3, [r4, #29]
1512:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1513:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Process Unlocked */
1514:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 189              		.loc 1 1514 0
 190 00ae 0020     		movs	r0, #0
 191 00b0 2077     		strb	r0, [r4, #28]
1515:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
ARM GAS  /tmp/ccF0iA9m.s 			page 31


1516:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   return HAL_OK;
 192              		.loc 1 1516 0
 193 00b2 38BD     		pop	{r3, r4, r5, pc}
 194              	.LVL11:
 195              	.L11:
1447:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 196              		.loc 1 1447 0
 197 00b4 0220     		movs	r0, #2
 198              	.LVL12:
1517:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** }
 199              		.loc 1 1517 0
 200 00b6 38BD     		pop	{r3, r4, r5, pc}
 201              		.cfi_endproc
 202              	.LFE82:
 204              		.section	.text.HAL_RTC_AlarmAEventCallback,"ax",%progbits
 205              		.align	1
 206              		.weak	HAL_RTC_AlarmAEventCallback
 207              		.syntax unified
 208              		.thumb
 209              		.thumb_func
 210              		.fpu softvfp
 212              	HAL_RTC_AlarmAEventCallback:
 213              	.LFB85:
1518:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1519:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** /**
1520:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @brief  Get the RTC Alarm value and masks.
1521:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @param  hrtc RTC handle
1522:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @param  sAlarm Pointer to Date structure
1523:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @param  Alarm Specifies the Alarm.
1524:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1525:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *             @arg RTC_ALARM_A: AlarmA
1526:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *             @arg RTC_ALARM_B: AlarmB
1527:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
1528:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1529:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BIN: Binary data format
1530:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BCD: BCD data format
1531:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @retval HAL status
1532:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   */
1533:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alar
1534:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** {
1535:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   uint32_t tmpreg;
1536:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100x
1537:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   uint32_t subsecondtmpreg;
1538:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC
1539:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1540:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Check the parameters */
1541:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
1542:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(Alarm));
1543:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1544:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   if (Alarm == RTC_ALARM_A)
1545:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
1546:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* AlarmA */
1547:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     sAlarm->Alarm = RTC_ALARM_A;
1548:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1549:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
1550:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100x
1551:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
ARM GAS  /tmp/ccF0iA9m.s 			page 32


1552:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC
1553:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
1554:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   else
1555:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
1556:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     sAlarm->Alarm = RTC_ALARM_B;
1557:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1558:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
1559:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100x
1560:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
1561:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC
1562:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
1563:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1564:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Fill the structure with the read parameters */
1565:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   sAlarm->AlarmTime.Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> 16U);
1566:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   sAlarm->AlarmTime.Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> 8U);
1567:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   sAlarm->AlarmTime.Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU));
1568:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   sAlarm->AlarmTime.TimeFormat = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16U);
1569:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100x
1570:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
1571:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC
1572:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24);
1573:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
1574:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
1575:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1576:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   if (Format == RTC_FORMAT_BIN)
1577:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
1578:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
1579:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
1580:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
1581:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
1582:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
1583:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1584:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   return HAL_OK;
1585:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** }
1586:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1587:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** /**
1588:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @brief  Handle Alarm interrupt request.
1589:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @param  hrtc RTC handle
1590:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @retval None
1591:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   */
1592:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
1593:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** {
1594:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Get the AlarmA interrupt source enable status */
1595:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
1596:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
1597:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Get the pending status of the AlarmA Interrupt */
1598:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
1599:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
1600:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       /* AlarmA callback */
1601:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
1602:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       hrtc->AlarmAEventCallback(hrtc);
1603:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #else
1604:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       HAL_RTC_AlarmAEventCallback(hrtc);
1605:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
1606:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1607:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       /* Clear the AlarmA interrupt pending bit */
1608:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
ARM GAS  /tmp/ccF0iA9m.s 			page 33


1609:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     }
1610:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
1611:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1612:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Get the AlarmB interrupt source enable status */
1613:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
1614:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
1615:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Get the pending status of the AlarmB Interrupt */
1616:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
1617:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
1618:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       /* AlarmB callback */
1619:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
1620:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       hrtc->AlarmBEventCallback(hrtc);
1621:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #else
1622:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       HAL_RTCEx_AlarmBEventCallback(hrtc);
1623:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
1624:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1625:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       /* Clear the AlarmB interrupt pending bit */
1626:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
1627:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     }
1628:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
1629:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Clear the EXTI's line Flag for RTC Alarm */
1630:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
1631:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1632:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Change RTC state */
1633:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY;
1634:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** }
1635:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1636:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** /**
1637:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @brief  Alarm A callback.
1638:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @param  hrtc RTC handle
1639:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @retval None
1640:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   */
1641:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** __weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
1642:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** {
 214              		.loc 1 1642 0
 215              		.cfi_startproc
 216              		@ args = 0, pretend = 0, frame = 0
 217              		@ frame_needed = 0, uses_anonymous_args = 0
 218              		@ link register save eliminated.
 219              	.LVL13:
 220 0000 7047     		bx	lr
 221              		.cfi_endproc
 222              	.LFE85:
 224              		.section	.text.HAL_RTC_AlarmIRQHandler,"ax",%progbits
 225              		.align	1
 226              		.global	HAL_RTC_AlarmIRQHandler
 227              		.syntax unified
 228              		.thumb
 229              		.thumb_func
 230              		.fpu softvfp
 232              	HAL_RTC_AlarmIRQHandler:
 233              	.LFB84:
1593:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Get the AlarmA interrupt source enable status */
 234              		.loc 1 1593 0
 235              		.cfi_startproc
 236              		@ args = 0, pretend = 0, frame = 0
 237              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccF0iA9m.s 			page 34


 238              	.LVL14:
1593:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Get the AlarmA interrupt source enable status */
 239              		.loc 1 1593 0
 240 0000 10B5     		push	{r4, lr}
 241              	.LCFI1:
 242              		.cfi_def_cfa_offset 8
 243              		.cfi_offset 4, -8
 244              		.cfi_offset 14, -4
 245 0002 0446     		mov	r4, r0
1595:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
 246              		.loc 1 1595 0
 247 0004 0368     		ldr	r3, [r0]
 248 0006 9A68     		ldr	r2, [r3, #8]
 249 0008 12F4805F 		tst	r2, #4096
 250 000c 03D0     		beq	.L16
1598:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
 251              		.loc 1 1598 0
 252 000e DB68     		ldr	r3, [r3, #12]
 253 0010 13F4807F 		tst	r3, #256
 254 0014 0FD1     		bne	.L19
 255              	.LVL15:
 256              	.L16:
1613:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
 257              		.loc 1 1613 0
 258 0016 2368     		ldr	r3, [r4]
 259 0018 9A68     		ldr	r2, [r3, #8]
 260 001a 12F4005F 		tst	r2, #8192
 261 001e 03D0     		beq	.L17
1616:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
 262              		.loc 1 1616 0
 263 0020 DB68     		ldr	r3, [r3, #12]
 264 0022 13F4007F 		tst	r3, #512
 265 0026 0FD1     		bne	.L20
 266              	.L17:
1630:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 267              		.loc 1 1630 0
 268 0028 4FF40032 		mov	r2, #131072
 269 002c 0B4B     		ldr	r3, .L21
 270 002e 5A61     		str	r2, [r3, #20]
1633:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** }
 271              		.loc 1 1633 0
 272 0030 0123     		movs	r3, #1
 273 0032 6377     		strb	r3, [r4, #29]
 274 0034 10BD     		pop	{r4, pc}
 275              	.LVL16:
 276              	.L19:
1604:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
 277              		.loc 1 1604 0
 278 0036 FFF7FEFF 		bl	HAL_RTC_AlarmAEventCallback
 279              	.LVL17:
1608:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     }
 280              		.loc 1 1608 0
 281 003a 2268     		ldr	r2, [r4]
 282 003c D368     		ldr	r3, [r2, #12]
 283 003e DBB2     		uxtb	r3, r3
 284 0040 63F4C073 		orn	r3, r3, #384
 285 0044 D360     		str	r3, [r2, #12]
ARM GAS  /tmp/ccF0iA9m.s 			page 35


 286 0046 E6E7     		b	.L16
 287              	.L20:
1622:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
 288              		.loc 1 1622 0
 289 0048 2046     		mov	r0, r4
 290 004a FFF7FEFF 		bl	HAL_RTCEx_AlarmBEventCallback
 291              	.LVL18:
1626:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     }
 292              		.loc 1 1626 0
 293 004e 2268     		ldr	r2, [r4]
 294 0050 D368     		ldr	r3, [r2, #12]
 295 0052 DBB2     		uxtb	r3, r3
 296 0054 63F42073 		orn	r3, r3, #640
 297 0058 D360     		str	r3, [r2, #12]
 298 005a E5E7     		b	.L17
 299              	.L22:
 300              		.align	2
 301              	.L21:
 302 005c 00040140 		.word	1073808384
 303              		.cfi_endproc
 304              	.LFE84:
 306              		.section	.text.HAL_RTC_PollForAlarmAEvent,"ax",%progbits
 307              		.align	1
 308              		.global	HAL_RTC_PollForAlarmAEvent
 309              		.syntax unified
 310              		.thumb
 311              		.thumb_func
 312              		.fpu softvfp
 314              	HAL_RTC_PollForAlarmAEvent:
 315              	.LFB86:
1643:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Prevent unused argument(s) compilation warning */
1644:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   UNUSED(hrtc);
1645:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1646:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1647:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****             the HAL_RTC_AlarmAEventCallback could be implemented in the user file
1648:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****    */
1649:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** }
1650:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1651:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** /**
1652:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @brief  Handle AlarmA Polling request.
1653:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @param  hrtc RTC handle
1654:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @param  Timeout Timeout duration
1655:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @retval HAL status
1656:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   */
1657:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_PollForAlarmAEvent(RTC_HandleTypeDef *hrtc, uint32_t Timeout)
1658:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** {
 316              		.loc 1 1658 0
 317              		.cfi_startproc
 318              		@ args = 0, pretend = 0, frame = 0
 319              		@ frame_needed = 0, uses_anonymous_args = 0
 320              	.LVL19:
 321 0000 70B5     		push	{r4, r5, r6, lr}
 322              	.LCFI2:
 323              		.cfi_def_cfa_offset 16
 324              		.cfi_offset 4, -16
 325              		.cfi_offset 5, -12
 326              		.cfi_offset 6, -8
ARM GAS  /tmp/ccF0iA9m.s 			page 36


 327              		.cfi_offset 14, -4
 328 0002 0446     		mov	r4, r0
 329 0004 0D46     		mov	r5, r1
1659:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1660:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   uint32_t tickstart = HAL_GetTick();
 330              		.loc 1 1660 0
 331 0006 FFF7FEFF 		bl	HAL_GetTick
 332              	.LVL20:
 333 000a 0646     		mov	r6, r0
 334              	.LVL21:
 335              	.L25:
1661:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1662:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) == 0U)
 336              		.loc 1 1662 0
 337 000c 2368     		ldr	r3, [r4]
 338 000e DA68     		ldr	r2, [r3, #12]
 339 0010 12F4807F 		tst	r2, #256
 340 0014 0CD1     		bne	.L30
1663:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
1664:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     if (Timeout != HAL_MAX_DELAY)
 341              		.loc 1 1664 0
 342 0016 B5F1FF3F 		cmp	r5, #-1
 343 001a F7D0     		beq	.L25
1665:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
1666:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 344              		.loc 1 1666 0
 345 001c FFF7FEFF 		bl	HAL_GetTick
 346              	.LVL22:
 347 0020 801B     		subs	r0, r0, r6
 348 0022 8542     		cmp	r5, r0
 349 0024 01D3     		bcc	.L26
 350              		.loc 1 1666 0 is_stmt 0 discriminator 1
 351 0026 002D     		cmp	r5, #0
 352 0028 F0D1     		bne	.L25
 353              	.L26:
1667:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       {
1668:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 354              		.loc 1 1668 0 is_stmt 1
 355 002a 0320     		movs	r0, #3
 356 002c 6077     		strb	r0, [r4, #29]
1669:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         return HAL_TIMEOUT;
 357              		.loc 1 1669 0
 358 002e 70BD     		pop	{r4, r5, r6, pc}
 359              	.LVL23:
 360              	.L30:
1670:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       }
1671:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     }
1672:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
1673:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1674:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Clear the Alarm interrupt pending bit */
1675:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 361              		.loc 1 1675 0
 362 0030 DA68     		ldr	r2, [r3, #12]
 363 0032 D2B2     		uxtb	r2, r2
 364 0034 62F4C072 		orn	r2, r2, #384
 365 0038 DA60     		str	r2, [r3, #12]
1676:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
ARM GAS  /tmp/ccF0iA9m.s 			page 37


1677:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Change RTC state */
1678:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY;
 366              		.loc 1 1678 0
 367 003a 0123     		movs	r3, #1
 368 003c 6377     		strb	r3, [r4, #29]
1679:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1680:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   return HAL_OK;
 369              		.loc 1 1680 0
 370 003e 0020     		movs	r0, #0
1681:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** }
 371              		.loc 1 1681 0
 372 0040 70BD     		pop	{r4, r5, r6, pc}
 373              		.cfi_endproc
 374              	.LFE86:
 376              		.section	.text.HAL_RTC_WaitForSynchro,"ax",%progbits
 377              		.align	1
 378              		.global	HAL_RTC_WaitForSynchro
 379              		.syntax unified
 380              		.thumb
 381              		.thumb_func
 382              		.fpu softvfp
 384              	HAL_RTC_WaitForSynchro:
 385              	.LFB87:
1682:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1683:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** /**
1684:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @}
1685:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   */
1686:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1687:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** /** @addtogroup RTC_Exported_Functions_Group4
1688:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****  *  @brief   Peripheral Control functions
1689:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****  *
1690:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** @verbatim
1691:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****  ===============================================================================
1692:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****                      ##### Peripheral Control functions #####
1693:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****  ===============================================================================
1694:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     [..]
1695:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     This subsection provides functions allowing to
1696:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       (+) Wait for RTC Time and Date Synchronization
1697:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1698:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** @endverbatim
1699:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @{
1700:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   */
1701:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1702:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** /**
1703:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @brief  Wait until the RTC Time and Date registers (RTC_TR and RTC_DR) are
1704:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *         synchronized with RTC APB clock.
1705:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @note   The RTC Resynchronization mode is write protected, use the
1706:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
1707:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @note   To read the calendar through the shadow registers after Calendar
1708:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *         initialization, calendar update or after wakeup from low power modes
1709:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *         the software must first clear the RSF flag.
1710:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *         The software must then wait until it is set again before reading
1711:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *         the calendar, which means that the calendar registers have been
1712:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *         correctly copied into the RTC_TR and RTC_DR shadow registers.
1713:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @param  hrtc RTC handle
1714:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @retval HAL status
1715:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   */
ARM GAS  /tmp/ccF0iA9m.s 			page 38


1716:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
1717:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** {
 386              		.loc 1 1717 0
 387              		.cfi_startproc
 388              		@ args = 0, pretend = 0, frame = 0
 389              		@ frame_needed = 0, uses_anonymous_args = 0
 390              	.LVL24:
 391 0000 38B5     		push	{r3, r4, r5, lr}
 392              	.LCFI3:
 393              		.cfi_def_cfa_offset 16
 394              		.cfi_offset 3, -16
 395              		.cfi_offset 4, -12
 396              		.cfi_offset 5, -8
 397              		.cfi_offset 14, -4
1718:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   uint32_t tickstart;
1719:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1720:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100x
1721:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* If RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
1722:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 398              		.loc 1 1722 0
 399 0002 0368     		ldr	r3, [r0]
 400 0004 9A68     		ldr	r2, [r3, #8]
 401 0006 12F0200F 		tst	r2, #32
 402 000a 01D0     		beq	.L38
1723:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC
1724:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
1725:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Clear RSF flag */
1726:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
1727:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1728:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     tickstart = HAL_GetTick();
1729:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1730:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Wait the registers to be synchronised */
1731:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
1732:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
1733:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
1734:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       {
1735:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         return HAL_TIMEOUT;
1736:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       }
1737:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     }
1738:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
1739:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1740:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   return HAL_OK;
 403              		.loc 1 1740 0
 404 000c 0020     		movs	r0, #0
 405              	.LVL25:
 406 000e 38BD     		pop	{r3, r4, r5, pc}
 407              	.LVL26:
 408              	.L38:
 409 0010 0446     		mov	r4, r0
1726:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 410              		.loc 1 1726 0
 411 0012 DA68     		ldr	r2, [r3, #12]
 412 0014 22F0A002 		bic	r2, r2, #160
 413 0018 DA60     		str	r2, [r3, #12]
1728:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 414              		.loc 1 1728 0
 415 001a FFF7FEFF 		bl	HAL_GetTick
ARM GAS  /tmp/ccF0iA9m.s 			page 39


 416              	.LVL27:
 417 001e 0546     		mov	r5, r0
 418              	.LVL28:
 419              	.L33:
1731:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
 420              		.loc 1 1731 0
 421 0020 2368     		ldr	r3, [r4]
 422 0022 DB68     		ldr	r3, [r3, #12]
 423 0024 13F0200F 		tst	r3, #32
 424 0028 07D1     		bne	.L39
1733:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       {
 425              		.loc 1 1733 0
 426 002a FFF7FEFF 		bl	HAL_GetTick
 427              	.LVL29:
 428 002e 401B     		subs	r0, r0, r5
 429 0030 B0F57A7F 		cmp	r0, #1000
 430 0034 F4D9     		bls	.L33
1735:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       }
 431              		.loc 1 1735 0
 432 0036 0320     		movs	r0, #3
1741:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** }
 433              		.loc 1 1741 0
 434 0038 38BD     		pop	{r3, r4, r5, pc}
 435              	.LVL30:
 436              	.L39:
1740:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** }
 437              		.loc 1 1740 0
 438 003a 0020     		movs	r0, #0
 439 003c 38BD     		pop	{r3, r4, r5, pc}
 440              		.cfi_endproc
 441              	.LFE87:
 443              		.section	.text.HAL_RTC_GetState,"ax",%progbits
 444              		.align	1
 445              		.global	HAL_RTC_GetState
 446              		.syntax unified
 447              		.thumb
 448              		.thumb_func
 449              		.fpu softvfp
 451              	HAL_RTC_GetState:
 452              	.LFB88:
1742:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1743:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** /**
1744:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @}
1745:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   */
1746:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1747:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** /** @addtogroup RTC_Exported_Functions_Group5
1748:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****  *  @brief   Peripheral State functions
1749:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****  *
1750:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** @verbatim
1751:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****  ===============================================================================
1752:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****                      ##### Peripheral State functions #####
1753:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****  ===============================================================================
1754:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     [..]
1755:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     This subsection provides functions allowing to
1756:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       (+) Get RTC state
1757:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1758:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** @endverbatim
ARM GAS  /tmp/ccF0iA9m.s 			page 40


1759:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @{
1760:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   */
1761:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** /**
1762:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @brief  Return the RTC handle state.
1763:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @param  hrtc RTC handle
1764:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @retval HAL state
1765:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   */
1766:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** HAL_RTCStateTypeDef HAL_RTC_GetState(RTC_HandleTypeDef *hrtc)
1767:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** {
 453              		.loc 1 1767 0
 454              		.cfi_startproc
 455              		@ args = 0, pretend = 0, frame = 0
 456              		@ frame_needed = 0, uses_anonymous_args = 0
 457              		@ link register save eliminated.
 458              	.LVL31:
1768:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Return RTC handle state */
1769:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   return hrtc->State;
 459              		.loc 1 1769 0
 460 0000 407F     		ldrb	r0, [r0, #29]	@ zero_extendqisi2
 461              	.LVL32:
1770:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** }
 462              		.loc 1 1770 0
 463 0002 7047     		bx	lr
 464              		.cfi_endproc
 465              	.LFE88:
 467              		.section	.text.RTC_EnterInitMode,"ax",%progbits
 468              		.align	1
 469              		.global	RTC_EnterInitMode
 470              		.syntax unified
 471              		.thumb
 472              		.thumb_func
 473              		.fpu softvfp
 475              	RTC_EnterInitMode:
 476              	.LFB89:
1771:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1772:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** /**
1773:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @}
1774:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   */
1775:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** /**
1776:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @}
1777:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   */
1778:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1779:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** /** @addtogroup RTC_Private_Functions
1780:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @{
1781:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   */
1782:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** /**
1783:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @brief  Enter the RTC Initialization mode.
1784:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the
1785:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
1786:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @param  hrtc RTC handle
1787:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @retval HAL status
1788:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   */
1789:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
1790:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** {
 477              		.loc 1 1790 0
 478              		.cfi_startproc
 479              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccF0iA9m.s 			page 41


 480              		@ frame_needed = 0, uses_anonymous_args = 0
 481              	.LVL33:
 482 0000 38B5     		push	{r3, r4, r5, lr}
 483              	.LCFI4:
 484              		.cfi_def_cfa_offset 16
 485              		.cfi_offset 3, -16
 486              		.cfi_offset 4, -12
 487              		.cfi_offset 5, -8
 488              		.cfi_offset 14, -4
1791:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   uint32_t tickstart;
1792:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1793:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Check if the Initialization mode is set */
1794:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 489              		.loc 1 1794 0
 490 0002 0368     		ldr	r3, [r0]
 491 0004 DA68     		ldr	r2, [r3, #12]
 492 0006 12F0400F 		tst	r2, #64
 493 000a 01D0     		beq	.L48
1795:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
1796:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Set the Initialization mode */
1797:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
1798:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1799:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     tickstart = HAL_GetTick();
1800:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Wait till RTC is in INIT state and if Time out is reached exit */
1801:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
1802:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
1803:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
1804:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       {
1805:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****         return HAL_TIMEOUT;
1806:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       }
1807:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     }
1808:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
1809:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1810:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   return HAL_OK;
 494              		.loc 1 1810 0
 495 000c 0020     		movs	r0, #0
 496              	.LVL34:
 497 000e 38BD     		pop	{r3, r4, r5, pc}
 498              	.LVL35:
 499              	.L48:
 500 0010 0446     		mov	r4, r0
1797:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 501              		.loc 1 1797 0
 502 0012 4FF0FF32 		mov	r2, #-1
 503 0016 DA60     		str	r2, [r3, #12]
1799:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Wait till RTC is in INIT state and if Time out is reached exit */
 504              		.loc 1 1799 0
 505 0018 FFF7FEFF 		bl	HAL_GetTick
 506              	.LVL36:
 507 001c 0546     		mov	r5, r0
 508              	.LVL37:
 509              	.L43:
1801:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
 510              		.loc 1 1801 0
 511 001e 2368     		ldr	r3, [r4]
 512 0020 DB68     		ldr	r3, [r3, #12]
 513 0022 13F0400F 		tst	r3, #64
ARM GAS  /tmp/ccF0iA9m.s 			page 42


 514 0026 07D1     		bne	.L49
1803:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       {
 515              		.loc 1 1803 0
 516 0028 FFF7FEFF 		bl	HAL_GetTick
 517              	.LVL38:
 518 002c 401B     		subs	r0, r0, r5
 519 002e B0F57A7F 		cmp	r0, #1000
 520 0032 F4D9     		bls	.L43
1805:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       }
 521              		.loc 1 1805 0
 522 0034 0320     		movs	r0, #3
1811:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** }
 523              		.loc 1 1811 0
 524 0036 38BD     		pop	{r3, r4, r5, pc}
 525              	.LVL39:
 526              	.L49:
1810:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** }
 527              		.loc 1 1810 0
 528 0038 0020     		movs	r0, #0
 529 003a 38BD     		pop	{r3, r4, r5, pc}
 530              		.cfi_endproc
 531              	.LFE89:
 533              		.section	.text.HAL_RTC_Init,"ax",%progbits
 534              		.align	1
 535              		.global	HAL_RTC_Init
 536              		.syntax unified
 537              		.thumb
 538              		.thumb_func
 539              		.fpu softvfp
 541              	HAL_RTC_Init:
 542              	.LFB72:
 237:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Check the RTC peripheral state */
 543              		.loc 1 237 0
 544              		.cfi_startproc
 545              		@ args = 0, pretend = 0, frame = 0
 546              		@ frame_needed = 0, uses_anonymous_args = 0
 547              	.LVL40:
 239:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
 548              		.loc 1 239 0
 549 0000 0028     		cmp	r0, #0
 550 0002 4CD0     		beq	.L54
 237:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   /* Check the RTC peripheral state */
 551              		.loc 1 237 0
 552 0004 38B5     		push	{r3, r4, r5, lr}
 553              	.LCFI5:
 554              		.cfi_def_cfa_offset 16
 555              		.cfi_offset 3, -16
 556              		.cfi_offset 4, -12
 557              		.cfi_offset 5, -8
 558              		.cfi_offset 14, -4
 559 0006 0446     		mov	r4, r0
 282:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
 560              		.loc 1 282 0
 561 0008 437F     		ldrb	r3, [r0, #29]	@ zero_extendqisi2
 562 000a 002B     		cmp	r3, #0
 563 000c 3CD0     		beq	.L59
 564              	.LVL41:
ARM GAS  /tmp/ccF0iA9m.s 			page 43


 565              	.L52:
 293:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 566              		.loc 1 293 0
 567 000e 0223     		movs	r3, #2
 568 0010 6377     		strb	r3, [r4, #29]
 296:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 569              		.loc 1 296 0
 570 0012 2368     		ldr	r3, [r4]
 571 0014 CA22     		movs	r2, #202
 572 0016 5A62     		str	r2, [r3, #36]
 573 0018 2368     		ldr	r3, [r4]
 574 001a 5322     		movs	r2, #83
 575 001c 5A62     		str	r2, [r3, #36]
 299:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
 576              		.loc 1 299 0
 577 001e 2046     		mov	r0, r4
 578 0020 FFF7FEFF 		bl	RTC_EnterInitMode
 579              	.LVL42:
 580 0024 0246     		mov	r2, r0
 581 0026 0028     		cmp	r0, #0
 582 0028 32D1     		bne	.L60
 312:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Set RTC_CR register */
 583              		.loc 1 312 0
 584 002a 2168     		ldr	r1, [r4]
 585 002c 8B68     		ldr	r3, [r1, #8]
 586 002e 23F4E003 		bic	r3, r3, #7340032
 587 0032 23F04003 		bic	r3, r3, #64
 588 0036 8B60     		str	r3, [r1, #8]
 314:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 589              		.loc 1 314 0
 590 0038 2068     		ldr	r0, [r4]
 591 003a 8168     		ldr	r1, [r0, #8]
 592 003c 6368     		ldr	r3, [r4, #4]
 593 003e 2569     		ldr	r5, [r4, #16]
 594 0040 2B43     		orrs	r3, r3, r5
 595 0042 6569     		ldr	r5, [r4, #20]
 596 0044 2B43     		orrs	r3, r3, r5
 597 0046 0B43     		orrs	r3, r3, r1
 598 0048 8360     		str	r3, [r0, #8]
 317:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 599              		.loc 1 317 0
 600 004a 2368     		ldr	r3, [r4]
 601 004c E168     		ldr	r1, [r4, #12]
 602 004e 1961     		str	r1, [r3, #16]
 318:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 603              		.loc 1 318 0
 604 0050 2168     		ldr	r1, [r4]
 605 0052 0B69     		ldr	r3, [r1, #16]
 606 0054 A068     		ldr	r0, [r4, #8]
 607 0056 43EA0043 		orr	r3, r3, r0, lsl #16
 608 005a 0B61     		str	r3, [r1, #16]
 321:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 609              		.loc 1 321 0
 610 005c 2168     		ldr	r1, [r4]
 611 005e CB68     		ldr	r3, [r1, #12]
 612 0060 23F08003 		bic	r3, r3, #128
 613 0064 CB60     		str	r3, [r1, #12]
ARM GAS  /tmp/ccF0iA9m.s 			page 44


 323:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 614              		.loc 1 323 0
 615 0066 2168     		ldr	r1, [r4]
 616 0068 0B6C     		ldr	r3, [r1, #64]
 617 006a 23F48023 		bic	r3, r3, #262144
 618 006e 0B64     		str	r3, [r1, #64]
 324:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 619              		.loc 1 324 0
 620 0070 2168     		ldr	r1, [r4]
 621 0072 0B6C     		ldr	r3, [r1, #64]
 622 0074 A069     		ldr	r0, [r4, #24]
 623 0076 0343     		orrs	r3, r3, r0
 624 0078 0B64     		str	r3, [r1, #64]
 327:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 625              		.loc 1 327 0
 626 007a 2368     		ldr	r3, [r4]
 627 007c FF21     		movs	r1, #255
 628 007e 5962     		str	r1, [r3, #36]
 330:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 629              		.loc 1 330 0
 630 0080 0123     		movs	r3, #1
 631 0082 6377     		strb	r3, [r4, #29]
 632              	.L51:
 334:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 633              		.loc 1 334 0
 634 0084 1046     		mov	r0, r2
 635 0086 38BD     		pop	{r3, r4, r5, pc}
 636              	.LVL43:
 637              	.L59:
 285:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 638              		.loc 1 285 0
 639 0088 0377     		strb	r3, [r0, #28]
 288:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
 640              		.loc 1 288 0
 641 008a FFF7FEFF 		bl	HAL_RTC_MspInit
 642              	.LVL44:
 643 008e BEE7     		b	.L52
 644              	.L60:
 302:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 645              		.loc 1 302 0
 646 0090 2368     		ldr	r3, [r4]
 647 0092 FF22     		movs	r2, #255
 648 0094 5A62     		str	r2, [r3, #36]
 305:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 649              		.loc 1 305 0
 650 0096 0423     		movs	r3, #4
 651 0098 6377     		strb	r3, [r4, #29]
 307:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
 652              		.loc 1 307 0
 653 009a 0122     		movs	r2, #1
 654 009c F2E7     		b	.L51
 655              	.LVL45:
 656              	.L54:
 657              	.LCFI6:
 658              		.cfi_def_cfa_offset 0
 659              		.cfi_restore 3
 660              		.cfi_restore 4
ARM GAS  /tmp/ccF0iA9m.s 			page 45


 661              		.cfi_restore 5
 662              		.cfi_restore 14
 241:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
 663              		.loc 1 241 0
 664 009e 0122     		movs	r2, #1
 334:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 665              		.loc 1 334 0
 666 00a0 1046     		mov	r0, r2
 667              	.LVL46:
 668 00a2 7047     		bx	lr
 669              		.cfi_endproc
 670              	.LFE72:
 672              		.section	.text.HAL_RTC_DeInit,"ax",%progbits
 673              		.align	1
 674              		.global	HAL_RTC_DeInit
 675              		.syntax unified
 676              		.thumb
 677              		.thumb_func
 678              		.fpu softvfp
 680              	HAL_RTC_DeInit:
 681              	.LFB73:
 343:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   uint32_t tickstart;
 682              		.loc 1 343 0
 683              		.cfi_startproc
 684              		@ args = 0, pretend = 0, frame = 0
 685              		@ frame_needed = 0, uses_anonymous_args = 0
 686              	.LVL47:
 687 0000 38B5     		push	{r3, r4, r5, lr}
 688              	.LCFI7:
 689              		.cfi_def_cfa_offset 16
 690              		.cfi_offset 3, -16
 691              		.cfi_offset 4, -12
 692              		.cfi_offset 5, -8
 693              		.cfi_offset 14, -4
 694 0002 0446     		mov	r4, r0
 350:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 695              		.loc 1 350 0
 696 0004 0223     		movs	r3, #2
 697 0006 4377     		strb	r3, [r0, #29]
 353:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 698              		.loc 1 353 0
 699 0008 0368     		ldr	r3, [r0]
 700 000a CA22     		movs	r2, #202
 701 000c 5A62     		str	r2, [r3, #36]
 702 000e 0368     		ldr	r3, [r0]
 703 0010 5322     		movs	r2, #83
 704 0012 5A62     		str	r2, [r3, #36]
 356:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
 705              		.loc 1 356 0
 706 0014 FFF7FEFF 		bl	RTC_EnterInitMode
 707              	.LVL48:
 708 0018 38B1     		cbz	r0, .L62
 359:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 709              		.loc 1 359 0
 710 001a 2368     		ldr	r3, [r4]
 711 001c FF22     		movs	r2, #255
 712 001e 5A62     		str	r2, [r3, #36]
ARM GAS  /tmp/ccF0iA9m.s 			page 46


 362:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 713              		.loc 1 362 0
 714 0020 0423     		movs	r3, #4
 715 0022 6377     		strb	r3, [r4, #29]
 364:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
 716              		.loc 1 364 0
 717 0024 0125     		movs	r5, #1
 718              	.L63:
 445:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 719              		.loc 1 445 0
 720 0026 2846     		mov	r0, r5
 721 0028 38BD     		pop	{r3, r4, r5, pc}
 722              	.LVL49:
 723              	.L62:
 369:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Instance->DR = 0x00002101U;
 724              		.loc 1 369 0
 725 002a 2368     		ldr	r3, [r4]
 726 002c 0022     		movs	r2, #0
 727 002e 1A60     		str	r2, [r3]
 370:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Reset All CR bits except CR[2:0] */
 728              		.loc 1 370 0
 729 0030 2368     		ldr	r3, [r4]
 730 0032 42F20112 		movw	r2, #8449
 731 0036 5A60     		str	r2, [r3, #4]
 372:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 732              		.loc 1 372 0
 733 0038 2268     		ldr	r2, [r4]
 734 003a 9368     		ldr	r3, [r2, #8]
 735 003c 03F00703 		and	r3, r3, #7
 736 0040 9360     		str	r3, [r2, #8]
 374:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 737              		.loc 1 374 0
 738 0042 FFF7FEFF 		bl	HAL_GetTick
 739              	.LVL50:
 740 0046 0546     		mov	r5, r0
 741              	.LVL51:
 742              	.L64:
 377:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
 743              		.loc 1 377 0
 744 0048 2368     		ldr	r3, [r4]
 745 004a DA68     		ldr	r2, [r3, #12]
 746 004c 12F0040F 		tst	r2, #4
 747 0050 0BD1     		bne	.L68
 379:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       {
 748              		.loc 1 379 0
 749 0052 FFF7FEFF 		bl	HAL_GetTick
 750              	.LVL52:
 751 0056 401B     		subs	r0, r0, r5
 752 0058 B0F57A7F 		cmp	r0, #1000
 753 005c F4D9     		bls	.L64
 382:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 754              		.loc 1 382 0
 755 005e 2368     		ldr	r3, [r4]
 756 0060 FF22     		movs	r2, #255
 757 0062 5A62     		str	r2, [r3, #36]
 385:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 758              		.loc 1 385 0
ARM GAS  /tmp/ccF0iA9m.s 			page 47


 759 0064 0325     		movs	r5, #3
 760              	.LVL53:
 761 0066 6577     		strb	r5, [r4, #29]
 387:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       }
 762              		.loc 1 387 0
 763 0068 DDE7     		b	.L63
 764              	.LVL54:
 765              	.L68:
 392:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Instance->WUTR = 0x0000FFFFU;
 766              		.loc 1 392 0
 767 006a 9A68     		ldr	r2, [r3, #8]
 768 006c 0022     		movs	r2, #0
 769 006e 9A60     		str	r2, [r3, #8]
 393:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Instance->PRER = 0x007F00FFU;
 770              		.loc 1 393 0
 771 0070 2368     		ldr	r3, [r4]
 772 0072 4FF6FF71 		movw	r1, #65535
 773 0076 5961     		str	r1, [r3, #20]
 394:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Instance->CALIBR = 0x00000000U;
 774              		.loc 1 394 0
 775 0078 2368     		ldr	r3, [r4]
 776 007a 1549     		ldr	r1, .L69
 777 007c 1961     		str	r1, [r3, #16]
 395:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Instance->ALRMAR = 0x00000000U;
 778              		.loc 1 395 0
 779 007e 2368     		ldr	r3, [r4]
 780 0080 9A61     		str	r2, [r3, #24]
 396:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Instance->ALRMBR = 0x00000000U;
 781              		.loc 1 396 0
 782 0082 2368     		ldr	r3, [r4]
 783 0084 DA61     		str	r2, [r3, #28]
 397:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100x
 784              		.loc 1 397 0
 785 0086 2368     		ldr	r3, [r4]
 786 0088 1A62     		str	r2, [r3, #32]
 399:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Instance->CALR = 0x00000000U;
 787              		.loc 1 399 0
 788 008a 2368     		ldr	r3, [r4]
 789 008c DA62     		str	r2, [r3, #44]
 400:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Instance->ALRMASSR = 0x00000000U;
 790              		.loc 1 400 0
 791 008e 2368     		ldr	r3, [r4]
 792 0090 DA63     		str	r2, [r3, #60]
 401:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     hrtc->Instance->ALRMBSSR = 0x00000000U;
 793              		.loc 1 401 0
 794 0092 2368     		ldr	r3, [r4]
 795 0094 5A64     		str	r2, [r3, #68]
 402:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC
 796              		.loc 1 402 0
 797 0096 2368     		ldr	r3, [r4]
 798 0098 9A64     		str	r2, [r3, #72]
 405:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 799              		.loc 1 405 0
 800 009a 2368     		ldr	r3, [r4]
 801 009c DA60     		str	r2, [r3, #12]
 408:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 802              		.loc 1 408 0
ARM GAS  /tmp/ccF0iA9m.s 			page 48


 803 009e 2368     		ldr	r3, [r4]
 804 00a0 1A64     		str	r2, [r3, #64]
 411:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
 805              		.loc 1 411 0
 806 00a2 2046     		mov	r0, r4
 807 00a4 FFF7FEFF 		bl	HAL_RTC_WaitForSynchro
 808              	.LVL55:
 809 00a8 0546     		mov	r5, r0
 810              	.LVL56:
 811 00aa 30B1     		cbz	r0, .L66
 414:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 812              		.loc 1 414 0
 813 00ac 2368     		ldr	r3, [r4]
 814 00ae FF22     		movs	r2, #255
 815 00b0 5A62     		str	r2, [r3, #36]
 416:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 816              		.loc 1 416 0
 817 00b2 0423     		movs	r3, #4
 818 00b4 6377     		strb	r3, [r4, #29]
 418:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     }
 819              		.loc 1 418 0
 820 00b6 0125     		movs	r5, #1
 821 00b8 B5E7     		b	.L63
 822              	.L66:
 423:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 823              		.loc 1 423 0
 824 00ba 2368     		ldr	r3, [r4]
 825 00bc FF22     		movs	r2, #255
 826 00be 5A62     		str	r2, [r3, #36]
 436:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
 827              		.loc 1 436 0
 828 00c0 2046     		mov	r0, r4
 829 00c2 FFF7FEFF 		bl	HAL_RTC_MspDeInit
 830              	.LVL57:
 439:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 831              		.loc 1 439 0
 832 00c6 0023     		movs	r3, #0
 833 00c8 6377     		strb	r3, [r4, #29]
 442:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 834              		.loc 1 442 0
 835 00ca 2377     		strb	r3, [r4, #28]
 444:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** }
 836              		.loc 1 444 0
 837 00cc ABE7     		b	.L63
 838              	.L70:
 839 00ce 00BF     		.align	2
 840              	.L69:
 841 00d0 FF007F00 		.word	8323327
 842              		.cfi_endproc
 843              	.LFE73:
 845              		.section	.text.RTC_ByteToBcd2,"ax",%progbits
 846              		.align	1
 847              		.global	RTC_ByteToBcd2
 848              		.syntax unified
 849              		.thumb
 850              		.thumb_func
 851              		.fpu softvfp
ARM GAS  /tmp/ccF0iA9m.s 			page 49


 853              	RTC_ByteToBcd2:
 854              	.LFB90:
1812:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1813:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1814:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** /**
1815:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @brief  Convert a 2 digit decimal to BCD format.
1816:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @param  Value Byte to be converted
1817:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @retval Converted byte
1818:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   */
1819:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** uint8_t RTC_ByteToBcd2(uint8_t Value)
1820:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** {
 855              		.loc 1 1820 0
 856              		.cfi_startproc
 857              		@ args = 0, pretend = 0, frame = 0
 858              		@ frame_needed = 0, uses_anonymous_args = 0
 859              		@ link register save eliminated.
 860              	.LVL58:
1821:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   uint32_t bcdhigh = 0U;
 861              		.loc 1 1821 0
 862 0000 0023     		movs	r3, #0
1822:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   uint8_t Param = Value;
1823:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1824:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   while (Param >= 10U)
 863              		.loc 1 1824 0
 864 0002 02E0     		b	.L72
 865              	.LVL59:
 866              	.L73:
1825:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
1826:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     bcdhigh++;
 867              		.loc 1 1826 0
 868 0004 0133     		adds	r3, r3, #1
 869              	.LVL60:
1827:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     Param -= 10U;
 870              		.loc 1 1827 0
 871 0006 0A38     		subs	r0, r0, #10
 872              	.LVL61:
 873 0008 C0B2     		uxtb	r0, r0
 874              	.LVL62:
 875              	.L72:
1824:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
 876              		.loc 1 1824 0
 877 000a 0928     		cmp	r0, #9
 878 000c FAD8     		bhi	.L73
1828:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
1829:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1830:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   return ((uint8_t)(bcdhigh << 4U) | Param);
 879              		.loc 1 1830 0
 880 000e 1B01     		lsls	r3, r3, #4
 881              	.LVL63:
 882 0010 DBB2     		uxtb	r3, r3
1831:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** }
 883              		.loc 1 1831 0
 884 0012 1843     		orrs	r0, r0, r3
 885              	.LVL64:
 886 0014 7047     		bx	lr
 887              		.cfi_endproc
 888              	.LFE90:
ARM GAS  /tmp/ccF0iA9m.s 			page 50


 890              		.section	.text.HAL_RTC_SetTime,"ax",%progbits
 891              		.align	1
 892              		.global	HAL_RTC_SetTime
 893              		.syntax unified
 894              		.thumb
 895              		.thumb_func
 896              		.fpu softvfp
 898              	HAL_RTC_SetTime:
 899              	.LFB76:
 717:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   uint32_t tmpreg;
 900              		.loc 1 717 0
 901              		.cfi_startproc
 902              		@ args = 0, pretend = 0, frame = 0
 903              		@ frame_needed = 0, uses_anonymous_args = 0
 904              	.LVL65:
 726:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 905              		.loc 1 726 0
 906 0000 037F     		ldrb	r3, [r0, #28]	@ zero_extendqisi2
 907 0002 012B     		cmp	r3, #1
 908 0004 71D0     		beq	.L82
 717:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   uint32_t tmpreg;
 909              		.loc 1 717 0 discriminator 2
 910 0006 70B5     		push	{r4, r5, r6, lr}
 911              	.LCFI8:
 912              		.cfi_def_cfa_offset 16
 913              		.cfi_offset 4, -16
 914              		.cfi_offset 5, -12
 915              		.cfi_offset 6, -8
 916              		.cfi_offset 14, -4
 917 0008 0E46     		mov	r6, r1
 918 000a 0446     		mov	r4, r0
 726:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 919              		.loc 1 726 0 discriminator 2
 920 000c 0123     		movs	r3, #1
 921 000e 0377     		strb	r3, [r0, #28]
 728:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 922              		.loc 1 728 0 discriminator 2
 923 0010 0223     		movs	r3, #2
 924 0012 4377     		strb	r3, [r0, #29]
 730:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
 925              		.loc 1 730 0 discriminator 2
 926 0014 52BB     		cbnz	r2, .L76
 732:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
 927              		.loc 1 732 0
 928 0016 0368     		ldr	r3, [r0]
 929 0018 9B68     		ldr	r3, [r3, #8]
 930 001a 13F0400F 		tst	r3, #64
 931 001e 01D1     		bne	.L77
 739:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sTime->Hours));
 932              		.loc 1 739 0
 933 0020 0023     		movs	r3, #0
 934 0022 CB70     		strb	r3, [r1, #3]
 935              	.L77:
 745:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****                         ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 936              		.loc 1 745 0
 937 0024 3078     		ldrb	r0, [r6]	@ zero_extendqisi2
 938              	.LVL66:
ARM GAS  /tmp/ccF0iA9m.s 			page 51


 939 0026 FFF7FEFF 		bl	RTC_ByteToBcd2
 940              	.LVL67:
 941 002a 0504     		lsls	r5, r0, #16
 746:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****                         ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 942              		.loc 1 746 0
 943 002c 7078     		ldrb	r0, [r6, #1]	@ zero_extendqisi2
 944 002e FFF7FEFF 		bl	RTC_ByteToBcd2
 945              	.LVL68:
 745:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****                         ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 946              		.loc 1 745 0
 947 0032 45EA0025 		orr	r5, r5, r0, lsl #8
 747:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****                         (((uint32_t)sTime->TimeFormat) << 16U));
 948              		.loc 1 747 0
 949 0036 B078     		ldrb	r0, [r6, #2]	@ zero_extendqisi2
 950 0038 FFF7FEFF 		bl	RTC_ByteToBcd2
 951              	.LVL69:
 746:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****                         ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 952              		.loc 1 746 0
 953 003c 2843     		orrs	r0, r0, r5
 748:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
 954              		.loc 1 748 0
 955 003e F578     		ldrb	r5, [r6, #3]	@ zero_extendqisi2
 745:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****                         ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 956              		.loc 1 745 0
 957 0040 40EA0545 		orr	r5, r0, r5, lsl #16
 958              	.LVL70:
 959              	.L78:
 771:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 960              		.loc 1 771 0
 961 0044 2368     		ldr	r3, [r4]
 962 0046 CA22     		movs	r2, #202
 963 0048 5A62     		str	r2, [r3, #36]
 964 004a 2368     		ldr	r3, [r4]
 965 004c 5322     		movs	r2, #83
 966 004e 5A62     		str	r2, [r3, #36]
 774:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
 967              		.loc 1 774 0
 968 0050 2046     		mov	r0, r4
 969 0052 FFF7FEFF 		bl	RTC_EnterInitMode
 970              	.LVL71:
 971 0056 D8B1     		cbz	r0, .L80
 777:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 972              		.loc 1 777 0
 973 0058 2368     		ldr	r3, [r4]
 974 005a FF22     		movs	r2, #255
 975 005c 5A62     		str	r2, [r3, #36]
 780:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 976              		.loc 1 780 0
 977 005e 0423     		movs	r3, #4
 978 0060 6377     		strb	r3, [r4, #29]
 783:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 979              		.loc 1 783 0
 980 0062 0023     		movs	r3, #0
 981 0064 2377     		strb	r3, [r4, #28]
 785:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
 982              		.loc 1 785 0
 983 0066 0123     		movs	r3, #1
ARM GAS  /tmp/ccF0iA9m.s 			page 52


 984              	.LVL72:
 985              	.L75:
 824:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 986              		.loc 1 824 0
 987 0068 1846     		mov	r0, r3
 988 006a 70BD     		pop	{r4, r5, r6, pc}
 989              	.LVL73:
 990              	.L76:
 752:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
 991              		.loc 1 752 0
 992 006c 0368     		ldr	r3, [r0]
 993 006e 9B68     		ldr	r3, [r3, #8]
 994 0070 13F0400F 		tst	r3, #64
 995 0074 01D1     		bne	.L79
 759:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 996              		.loc 1 759 0
 997 0076 0023     		movs	r3, #0
 998 0078 CB70     		strb	r3, [r1, #3]
 999              	.L79:
 764:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)(sTime->Minutes) << 8U) | \
 1000              		.loc 1 764 0
 1001 007a 3578     		ldrb	r5, [r6]	@ zero_extendqisi2
 765:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)sTime->Seconds) | \
 1002              		.loc 1 765 0
 1003 007c 7078     		ldrb	r0, [r6, #1]	@ zero_extendqisi2
 1004              	.LVL74:
 1005 007e 0002     		lsls	r0, r0, #8
 764:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)(sTime->Minutes) << 8U) | \
 1006              		.loc 1 764 0
 1007 0080 40EA0540 		orr	r0, r0, r5, lsl #16
 766:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)(sTime->TimeFormat) << 16U));
 1008              		.loc 1 766 0
 1009 0084 B578     		ldrb	r5, [r6, #2]	@ zero_extendqisi2
 765:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)sTime->Seconds) | \
 1010              		.loc 1 765 0
 1011 0086 2843     		orrs	r0, r0, r5
 767:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
 1012              		.loc 1 767 0
 1013 0088 F578     		ldrb	r5, [r6, #3]	@ zero_extendqisi2
 764:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)(sTime->Minutes) << 8U) | \
 1014              		.loc 1 764 0
 1015 008a 40EA0545 		orr	r5, r0, r5, lsl #16
 1016              	.LVL75:
 1017 008e D9E7     		b	.L78
 1018              	.LVL76:
 1019              	.L80:
 790:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1020              		.loc 1 790 0
 1021 0090 2368     		ldr	r3, [r4]
 1022 0092 05F07F35 		and	r5, r5, #2139062143
 1023              	.LVL77:
 1024 0096 25F0FE45 		bic	r5, r5, #2130706432
 1025 009a 1D60     		str	r5, [r3]
 793:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1026              		.loc 1 793 0
 1027 009c 2268     		ldr	r2, [r4]
 1028 009e 9368     		ldr	r3, [r2, #8]
ARM GAS  /tmp/ccF0iA9m.s 			page 53


 1029 00a0 23F48023 		bic	r3, r3, #262144
 1030 00a4 9360     		str	r3, [r2, #8]
 796:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1031              		.loc 1 796 0
 1032 00a6 2168     		ldr	r1, [r4]
 1033 00a8 8B68     		ldr	r3, [r1, #8]
 1034 00aa F268     		ldr	r2, [r6, #12]
 1035 00ac 3069     		ldr	r0, [r6, #16]
 1036 00ae 0243     		orrs	r2, r2, r0
 1037 00b0 1343     		orrs	r3, r3, r2
 1038 00b2 8B60     		str	r3, [r1, #8]
 799:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1039              		.loc 1 799 0
 1040 00b4 2268     		ldr	r2, [r4]
 1041 00b6 D368     		ldr	r3, [r2, #12]
 1042 00b8 23F08003 		bic	r3, r3, #128
 1043 00bc D360     		str	r3, [r2, #12]
 802:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
 1044              		.loc 1 802 0
 1045 00be 2046     		mov	r0, r4
 1046 00c0 FFF7FEFF 		bl	HAL_RTC_WaitForSynchro
 1047              	.LVL78:
 1048 00c4 0346     		mov	r3, r0
 1049 00c6 38B9     		cbnz	r0, .L87
 816:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1050              		.loc 1 816 0
 1051 00c8 2268     		ldr	r2, [r4]
 1052 00ca FF21     		movs	r1, #255
 1053 00cc 5162     		str	r1, [r2, #36]
 818:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1054              		.loc 1 818 0
 1055 00ce 0122     		movs	r2, #1
 1056 00d0 6277     		strb	r2, [r4, #29]
 820:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1057              		.loc 1 820 0
 1058 00d2 0022     		movs	r2, #0
 1059 00d4 2277     		strb	r2, [r4, #28]
 822:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
 1060              		.loc 1 822 0
 1061 00d6 C7E7     		b	.L75
 1062              	.L87:
 805:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1063              		.loc 1 805 0
 1064 00d8 2368     		ldr	r3, [r4]
 1065 00da FF22     		movs	r2, #255
 1066 00dc 5A62     		str	r2, [r3, #36]
 807:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1067              		.loc 1 807 0
 1068 00de 0423     		movs	r3, #4
 1069 00e0 6377     		strb	r3, [r4, #29]
 810:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1070              		.loc 1 810 0
 1071 00e2 0023     		movs	r3, #0
 1072 00e4 2377     		strb	r3, [r4, #28]
 812:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     }
 1073              		.loc 1 812 0
 1074 00e6 0123     		movs	r3, #1
ARM GAS  /tmp/ccF0iA9m.s 			page 54


 1075 00e8 BEE7     		b	.L75
 1076              	.LVL79:
 1077              	.L82:
 1078              	.LCFI9:
 1079              		.cfi_def_cfa_offset 0
 1080              		.cfi_restore 4
 1081              		.cfi_restore 5
 1082              		.cfi_restore 6
 1083              		.cfi_restore 14
 726:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1084              		.loc 1 726 0
 1085 00ea 0223     		movs	r3, #2
 824:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1086              		.loc 1 824 0
 1087 00ec 1846     		mov	r0, r3
 1088              	.LVL80:
 1089 00ee 7047     		bx	lr
 1090              		.cfi_endproc
 1091              	.LFE76:
 1093              		.section	.text.HAL_RTC_SetDate,"ax",%progbits
 1094              		.align	1
 1095              		.global	HAL_RTC_SetDate
 1096              		.syntax unified
 1097              		.thumb
 1098              		.thumb_func
 1099              		.fpu softvfp
 1101              	HAL_RTC_SetDate:
 1102              	.LFB78:
 894:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   uint32_t datetmpreg;
 1103              		.loc 1 894 0
 1104              		.cfi_startproc
 1105              		@ args = 0, pretend = 0, frame = 0
 1106              		@ frame_needed = 0, uses_anonymous_args = 0
 1107              	.LVL81:
 901:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1108              		.loc 1 901 0
 1109 0000 037F     		ldrb	r3, [r0, #28]	@ zero_extendqisi2
 1110 0002 012B     		cmp	r3, #1
 1111 0004 60D0     		beq	.L95
 894:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   uint32_t datetmpreg;
 1112              		.loc 1 894 0 discriminator 2
 1113 0006 70B5     		push	{r4, r5, r6, lr}
 1114              	.LCFI10:
 1115              		.cfi_def_cfa_offset 16
 1116              		.cfi_offset 4, -16
 1117              		.cfi_offset 5, -12
 1118              		.cfi_offset 6, -8
 1119              		.cfi_offset 14, -4
 901:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1120              		.loc 1 901 0 discriminator 2
 1121 0008 0123     		movs	r3, #1
 1122 000a 0377     		strb	r3, [r0, #28]
 903:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1123              		.loc 1 903 0 discriminator 2
 1124 000c 0223     		movs	r3, #2
 1125 000e 4377     		strb	r3, [r0, #29]
 905:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
ARM GAS  /tmp/ccF0iA9m.s 			page 55


 1126              		.loc 1 905 0 discriminator 2
 1127 0010 3AB9     		cbnz	r2, .L90
 905:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
 1128              		.loc 1 905 0 is_stmt 0 discriminator 1
 1129 0012 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 1130 0014 13F0100F 		tst	r3, #16
 1131 0018 03D0     		beq	.L90
 907:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
 1132              		.loc 1 907 0 is_stmt 1
 1133 001a 03F0EF03 		and	r3, r3, #239
 1134 001e 0A33     		adds	r3, r3, #10
 1135 0020 4B70     		strb	r3, [r1, #1]
 1136              	.L90:
 1137 0022 0E46     		mov	r6, r1
 1138 0024 0446     		mov	r4, r0
 912:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
 1139              		.loc 1 912 0
 1140 0026 1ABB     		cbnz	r2, .L91
 918:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****                   ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 1141              		.loc 1 918 0
 1142 0028 C878     		ldrb	r0, [r1, #3]	@ zero_extendqisi2
 1143              	.LVL82:
 1144 002a FFF7FEFF 		bl	RTC_ByteToBcd2
 1145              	.LVL83:
 1146 002e 0504     		lsls	r5, r0, #16
 919:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****                   ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 1147              		.loc 1 919 0
 1148 0030 7078     		ldrb	r0, [r6, #1]	@ zero_extendqisi2
 1149 0032 FFF7FEFF 		bl	RTC_ByteToBcd2
 1150              	.LVL84:
 918:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****                   ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 1151              		.loc 1 918 0
 1152 0036 45EA0025 		orr	r5, r5, r0, lsl #8
 920:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****                   ((uint32_t)sDate->WeekDay << 13U));
 1153              		.loc 1 920 0
 1154 003a B078     		ldrb	r0, [r6, #2]	@ zero_extendqisi2
 1155 003c FFF7FEFF 		bl	RTC_ByteToBcd2
 1156              	.LVL85:
 919:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****                   ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 1157              		.loc 1 919 0
 1158 0040 2843     		orrs	r0, r0, r5
 921:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
 1159              		.loc 1 921 0
 1160 0042 3578     		ldrb	r5, [r6]	@ zero_extendqisi2
 918:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****                   ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 1161              		.loc 1 918 0
 1162 0044 40EA4535 		orr	r5, r0, r5, lsl #13
 1163              	.LVL86:
 1164              	.L92:
 936:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1165              		.loc 1 936 0
 1166 0048 2368     		ldr	r3, [r4]
 1167 004a CA22     		movs	r2, #202
 1168 004c 5A62     		str	r2, [r3, #36]
 1169 004e 2368     		ldr	r3, [r4]
 1170 0050 5322     		movs	r2, #83
 1171 0052 5A62     		str	r2, [r3, #36]
ARM GAS  /tmp/ccF0iA9m.s 			page 56


 939:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
 1172              		.loc 1 939 0
 1173 0054 2046     		mov	r0, r4
 1174 0056 FFF7FEFF 		bl	RTC_EnterInitMode
 1175              	.LVL87:
 1176 005a A0B1     		cbz	r0, .L93
 942:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1177              		.loc 1 942 0
 1178 005c 2368     		ldr	r3, [r4]
 1179 005e FF22     		movs	r2, #255
 1180 0060 5A62     		str	r2, [r3, #36]
 945:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1181              		.loc 1 945 0
 1182 0062 0423     		movs	r3, #4
 1183 0064 6377     		strb	r3, [r4, #29]
 948:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1184              		.loc 1 948 0
 1185 0066 0023     		movs	r3, #0
 1186 0068 2377     		strb	r3, [r4, #28]
 950:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
 1187              		.loc 1 950 0
 1188 006a 0123     		movs	r3, #1
 1189              	.LVL88:
 1190              	.L89:
 984:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1191              		.loc 1 984 0
 1192 006c 1846     		mov	r0, r3
 1193 006e 70BD     		pop	{r4, r5, r6, pc}
 1194              	.LVL89:
 1195              	.L91:
 929:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****                   (((uint32_t)sDate->Month) << 8U) | \
 1196              		.loc 1 929 0
 1197 0070 CD78     		ldrb	r5, [r1, #3]	@ zero_extendqisi2
 930:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****                   ((uint32_t)sDate->Date) | \
 1198              		.loc 1 930 0
 1199 0072 4878     		ldrb	r0, [r1, #1]	@ zero_extendqisi2
 1200              	.LVL90:
 1201 0074 0002     		lsls	r0, r0, #8
 929:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****                   (((uint32_t)sDate->Month) << 8U) | \
 1202              		.loc 1 929 0
 1203 0076 40EA0540 		orr	r0, r0, r5, lsl #16
 931:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****                   (((uint32_t)sDate->WeekDay) << 13U));
 1204              		.loc 1 931 0
 1205 007a 8D78     		ldrb	r5, [r1, #2]	@ zero_extendqisi2
 930:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****                   ((uint32_t)sDate->Date) | \
 1206              		.loc 1 930 0
 1207 007c 2843     		orrs	r0, r0, r5
 932:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
 1208              		.loc 1 932 0
 1209 007e 0D78     		ldrb	r5, [r1]	@ zero_extendqisi2
 929:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****                   (((uint32_t)sDate->Month) << 8U) | \
 1210              		.loc 1 929 0
 1211 0080 40EA4535 		orr	r5, r0, r5, lsl #13
 1212              	.LVL91:
 1213 0084 E0E7     		b	.L92
 1214              	.LVL92:
 1215              	.L93:
ARM GAS  /tmp/ccF0iA9m.s 			page 57


 955:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1216              		.loc 1 955 0
 1217 0086 2368     		ldr	r3, [r4]
 1218 0088 25F07F45 		bic	r5, r5, #-16777216
 1219              	.LVL93:
 1220 008c 25F0C005 		bic	r5, r5, #192
 1221 0090 5D60     		str	r5, [r3, #4]
 958:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1222              		.loc 1 958 0
 1223 0092 2268     		ldr	r2, [r4]
 1224 0094 D368     		ldr	r3, [r2, #12]
 1225 0096 23F08003 		bic	r3, r3, #128
 1226 009a D360     		str	r3, [r2, #12]
 961:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
 1227              		.loc 1 961 0
 1228 009c 2046     		mov	r0, r4
 1229 009e FFF7FEFF 		bl	HAL_RTC_WaitForSynchro
 1230              	.LVL94:
 1231 00a2 0346     		mov	r3, r0
 1232 00a4 38B9     		cbnz	r0, .L100
 975:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1233              		.loc 1 975 0
 1234 00a6 2268     		ldr	r2, [r4]
 1235 00a8 FF21     		movs	r1, #255
 1236 00aa 5162     		str	r1, [r2, #36]
 977:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1237              		.loc 1 977 0
 1238 00ac 0122     		movs	r2, #1
 1239 00ae 6277     		strb	r2, [r4, #29]
 980:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1240              		.loc 1 980 0
 1241 00b0 0022     		movs	r2, #0
 1242 00b2 2277     		strb	r2, [r4, #28]
 982:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
 1243              		.loc 1 982 0
 1244 00b4 DAE7     		b	.L89
 1245              	.L100:
 964:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1246              		.loc 1 964 0
 1247 00b6 2368     		ldr	r3, [r4]
 1248 00b8 FF22     		movs	r2, #255
 1249 00ba 5A62     		str	r2, [r3, #36]
 966:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1250              		.loc 1 966 0
 1251 00bc 0423     		movs	r3, #4
 1252 00be 6377     		strb	r3, [r4, #29]
 969:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1253              		.loc 1 969 0
 1254 00c0 0023     		movs	r3, #0
 1255 00c2 2377     		strb	r3, [r4, #28]
 971:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     }
 1256              		.loc 1 971 0
 1257 00c4 0123     		movs	r3, #1
 1258 00c6 D1E7     		b	.L89
 1259              	.LVL95:
 1260              	.L95:
 1261              	.LCFI11:
ARM GAS  /tmp/ccF0iA9m.s 			page 58


 1262              		.cfi_def_cfa_offset 0
 1263              		.cfi_restore 4
 1264              		.cfi_restore 5
 1265              		.cfi_restore 6
 1266              		.cfi_restore 14
 901:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1267              		.loc 1 901 0
 1268 00c8 0223     		movs	r3, #2
 984:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1269              		.loc 1 984 0
 1270 00ca 1846     		mov	r0, r3
 1271              	.LVL96:
 1272 00cc 7047     		bx	lr
 1273              		.cfi_endproc
 1274              	.LFE78:
 1276              		.section	.text.HAL_RTC_SetAlarm,"ax",%progbits
 1277              		.align	1
 1278              		.global	HAL_RTC_SetAlarm
 1279              		.syntax unified
 1280              		.thumb
 1281              		.thumb_func
 1282              		.fpu softvfp
 1284              	HAL_RTC_SetAlarm:
 1285              	.LFB80:
1054:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   uint32_t tickstart;
 1286              		.loc 1 1054 0
 1287              		.cfi_startproc
 1288              		@ args = 0, pretend = 0, frame = 0
 1289              		@ frame_needed = 0, uses_anonymous_args = 0
 1290              	.LVL97:
 1291 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1292              	.LCFI12:
 1293              		.cfi_def_cfa_offset 24
 1294              		.cfi_offset 3, -24
 1295              		.cfi_offset 4, -20
 1296              		.cfi_offset 5, -16
 1297              		.cfi_offset 6, -12
 1298              		.cfi_offset 7, -8
 1299              		.cfi_offset 14, -4
 1300              	.LVL98:
1073:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1301              		.loc 1 1073 0
 1302 0002 037F     		ldrb	r3, [r0, #28]	@ zero_extendqisi2
 1303 0004 012B     		cmp	r3, #1
 1304 0006 00F0A980 		beq	.L113
 1305 000a 0D46     		mov	r5, r1
 1306 000c 0446     		mov	r4, r0
1073:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1307              		.loc 1 1073 0 is_stmt 0 discriminator 2
 1308 000e 0123     		movs	r3, #1
 1309 0010 0377     		strb	r3, [r0, #28]
1075:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1310              		.loc 1 1075 0 is_stmt 1 discriminator 2
 1311 0012 0223     		movs	r3, #2
 1312 0014 4377     		strb	r3, [r0, #29]
1077:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
 1313              		.loc 1 1077 0 discriminator 2
ARM GAS  /tmp/ccF0iA9m.s 			page 59


 1314 0016 002A     		cmp	r2, #0
 1315 0018 4DD1     		bne	.L103
1079:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
 1316              		.loc 1 1079 0
 1317 001a 0368     		ldr	r3, [r0]
 1318 001c 9B68     		ldr	r3, [r3, #8]
 1319 001e 13F0400F 		tst	r3, #64
 1320 0022 01D1     		bne	.L104
1086:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 1321              		.loc 1 1086 0
 1322 0024 0023     		movs	r3, #0
 1323 0026 CB70     		strb	r3, [r1, #3]
 1324              	.L104:
1092:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
 1325              		.loc 1 1092 0
 1326 0028 EE69     		ldr	r6, [r5, #28]
1101:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 1327              		.loc 1 1101 0
 1328 002a 2878     		ldrb	r0, [r5]	@ zero_extendqisi2
 1329              	.LVL99:
 1330 002c FFF7FEFF 		bl	RTC_ByteToBcd2
 1331              	.LVL100:
 1332 0030 0704     		lsls	r7, r0, #16
1102:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 1333              		.loc 1 1102 0
 1334 0032 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 1335 0034 FFF7FEFF 		bl	RTC_ByteToBcd2
 1336              	.LVL101:
1101:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 1337              		.loc 1 1101 0
 1338 0038 47EA0027 		orr	r7, r7, r0, lsl #8
1103:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 1339              		.loc 1 1103 0
 1340 003c A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 1341 003e FFF7FEFF 		bl	RTC_ByteToBcd2
 1342              	.LVL102:
1102:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 1343              		.loc 1 1102 0
 1344 0042 0743     		orrs	r7, r7, r0
1104:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 1345              		.loc 1 1104 0
 1346 0044 E878     		ldrb	r0, [r5, #3]	@ zero_extendqisi2
1103:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 1347              		.loc 1 1103 0
 1348 0046 47EA0047 		orr	r7, r7, r0, lsl #16
1105:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1349              		.loc 1 1105 0
 1350 004a 95F82000 		ldrb	r0, [r5, #32]	@ zero_extendqisi2
 1351 004e FFF7FEFF 		bl	RTC_ByteToBcd2
 1352              	.LVL103:
1104:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 1353              		.loc 1 1104 0
 1354 0052 47EA0060 		orr	r0, r7, r0, lsl #24
1105:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1355              		.loc 1 1105 0
 1356 0056 0643     		orrs	r6, r6, r0
1107:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
ARM GAS  /tmp/ccF0iA9m.s 			page 60


 1357              		.loc 1 1107 0
 1358 0058 6B69     		ldr	r3, [r5, #20]
1101:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 1359              		.loc 1 1101 0
 1360 005a 1E43     		orrs	r6, r6, r3
 1361              	.LVL104:
 1362              	.L105:
1145:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC
 1363              		.loc 1 1145 0
 1364 005c 6F68     		ldr	r7, [r5, #4]
 1365 005e AB69     		ldr	r3, [r5, #24]
 1366 0060 1F43     		orrs	r7, r7, r3
 1367              	.LVL105:
1149:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1368              		.loc 1 1149 0
 1369 0062 2368     		ldr	r3, [r4]
 1370 0064 CA22     		movs	r2, #202
 1371 0066 5A62     		str	r2, [r3, #36]
 1372 0068 2368     		ldr	r3, [r4]
 1373 006a 5322     		movs	r2, #83
 1374 006c 5A62     		str	r2, [r3, #36]
1152:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
 1375              		.loc 1 1152 0
 1376 006e 6B6A     		ldr	r3, [r5, #36]
 1377 0070 B3F5807F 		cmp	r3, #256
 1378 0074 39D0     		beq	.L115
1189:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1379              		.loc 1 1189 0
 1380 0076 2268     		ldr	r2, [r4]
 1381 0078 9368     		ldr	r3, [r2, #8]
 1382 007a 23F40073 		bic	r3, r3, #512
 1383 007e 9360     		str	r3, [r2, #8]
1192:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1384              		.loc 1 1192 0
 1385 0080 2268     		ldr	r2, [r4]
 1386 0082 9368     		ldr	r3, [r2, #8]
 1387 0084 23F40053 		bic	r3, r3, #8192
 1388 0088 9360     		str	r3, [r2, #8]
1194:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
 1389              		.loc 1 1194 0
 1390 008a FFF7FEFF 		bl	HAL_GetTick
 1391              	.LVL106:
 1392 008e 0546     		mov	r5, r0
 1393              	.LVL107:
 1394              	.L111:
1196:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
 1395              		.loc 1 1196 0
 1396 0090 2368     		ldr	r3, [r4]
 1397 0092 DA68     		ldr	r2, [r3, #12]
 1398 0094 12F0020F 		tst	r2, #2
 1399 0098 50D1     		bne	.L116
1198:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       {
 1400              		.loc 1 1198 0
 1401 009a FFF7FEFF 		bl	HAL_GetTick
 1402              	.LVL108:
 1403 009e 401B     		subs	r0, r0, r5
 1404 00a0 B0F57A7F 		cmp	r0, #1000
ARM GAS  /tmp/ccF0iA9m.s 			page 61


 1405 00a4 F4D9     		bls	.L111
1201:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1406              		.loc 1 1201 0
 1407 00a6 2368     		ldr	r3, [r4]
 1408 00a8 FF22     		movs	r2, #255
 1409 00aa 5A62     		str	r2, [r3, #36]
1203:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1410              		.loc 1 1203 0
 1411 00ac 0320     		movs	r0, #3
 1412 00ae 6077     		strb	r0, [r4, #29]
1206:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1413              		.loc 1 1206 0
 1414 00b0 0023     		movs	r3, #0
 1415 00b2 2377     		strb	r3, [r4, #28]
1208:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       }
 1416              		.loc 1 1208 0
 1417 00b4 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1418              	.LVL109:
 1419              	.L103:
1111:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
 1420              		.loc 1 1111 0
 1421 00b6 0368     		ldr	r3, [r0]
 1422 00b8 9B68     		ldr	r3, [r3, #8]
 1423 00ba 13F0400F 		tst	r3, #64
 1424 00be 01D1     		bne	.L106
1118:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 1425              		.loc 1 1118 0
 1426 00c0 0023     		movs	r3, #0
 1427 00c2 CB70     		strb	r3, [r1, #3]
 1428              	.L106:
1125:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
 1429              		.loc 1 1125 0
 1430 00c4 EE69     		ldr	r6, [r5, #28]
1134:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 1431              		.loc 1 1134 0
 1432 00c6 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
 1433              	.LVL110:
1135:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 1434              		.loc 1 1135 0
 1435 00c8 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
 1436 00ca 1B02     		lsls	r3, r3, #8
1134:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 1437              		.loc 1 1134 0
 1438 00cc 43EA0243 		orr	r3, r3, r2, lsl #16
1136:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 1439              		.loc 1 1136 0
 1440 00d0 AA78     		ldrb	r2, [r5, #2]	@ zero_extendqisi2
1135:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 1441              		.loc 1 1135 0
 1442 00d2 1343     		orrs	r3, r3, r2
1137:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 1443              		.loc 1 1137 0
 1444 00d4 EA78     		ldrb	r2, [r5, #3]	@ zero_extendqisi2
1136:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 1445              		.loc 1 1136 0
 1446 00d6 43EA0243 		orr	r3, r3, r2, lsl #16
1138:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
ARM GAS  /tmp/ccF0iA9m.s 			page 62


 1447              		.loc 1 1138 0
 1448 00da 95F82020 		ldrb	r2, [r5, #32]	@ zero_extendqisi2
1137:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 1449              		.loc 1 1137 0
 1450 00de 43EA0263 		orr	r3, r3, r2, lsl #24
1138:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1451              		.loc 1 1138 0
 1452 00e2 1E43     		orrs	r6, r6, r3
1140:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
 1453              		.loc 1 1140 0
 1454 00e4 6B69     		ldr	r3, [r5, #20]
1134:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 1455              		.loc 1 1134 0
 1456 00e6 1E43     		orrs	r6, r6, r3
 1457              	.LVL111:
 1458 00e8 B8E7     		b	.L105
 1459              	.LVL112:
 1460              	.L115:
1155:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1461              		.loc 1 1155 0
 1462 00ea 2268     		ldr	r2, [r4]
 1463 00ec 9368     		ldr	r3, [r2, #8]
 1464 00ee 23F48073 		bic	r3, r3, #256
 1465 00f2 9360     		str	r3, [r2, #8]
1158:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1466              		.loc 1 1158 0
 1467 00f4 2268     		ldr	r2, [r4]
 1468 00f6 9368     		ldr	r3, [r2, #8]
 1469 00f8 23F48053 		bic	r3, r3, #4096
 1470 00fc 9360     		str	r3, [r2, #8]
1160:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
 1471              		.loc 1 1160 0
 1472 00fe FFF7FEFF 		bl	HAL_GetTick
 1473              	.LVL113:
 1474 0102 0546     		mov	r5, r0
 1475              	.LVL114:
 1476              	.L108:
1162:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
 1477              		.loc 1 1162 0
 1478 0104 2368     		ldr	r3, [r4]
 1479 0106 DA68     		ldr	r2, [r3, #12]
 1480 0108 12F0010F 		tst	r2, #1
 1481 010c 0DD1     		bne	.L117
1164:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       {
 1482              		.loc 1 1164 0
 1483 010e FFF7FEFF 		bl	HAL_GetTick
 1484              	.LVL115:
 1485 0112 401B     		subs	r0, r0, r5
 1486 0114 B0F57A7F 		cmp	r0, #1000
 1487 0118 F4D9     		bls	.L108
1167:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1488              		.loc 1 1167 0
 1489 011a 2368     		ldr	r3, [r4]
 1490 011c FF22     		movs	r2, #255
 1491 011e 5A62     		str	r2, [r3, #36]
1169:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1492              		.loc 1 1169 0
ARM GAS  /tmp/ccF0iA9m.s 			page 63


 1493 0120 0320     		movs	r0, #3
 1494 0122 6077     		strb	r0, [r4, #29]
1172:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1495              		.loc 1 1172 0
 1496 0124 0023     		movs	r3, #0
 1497 0126 2377     		strb	r3, [r4, #28]
1174:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       }
 1498              		.loc 1 1174 0
 1499 0128 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1500              	.LVL116:
 1501              	.L117:
1178:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100x
 1502              		.loc 1 1178 0
 1503 012a DE61     		str	r6, [r3, #28]
1181:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC
 1504              		.loc 1 1181 0
 1505 012c 2368     		ldr	r3, [r4]
 1506 012e 5F64     		str	r7, [r3, #68]
1184:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
 1507              		.loc 1 1184 0
 1508 0130 2268     		ldr	r2, [r4]
 1509 0132 9368     		ldr	r3, [r2, #8]
 1510 0134 43F48073 		orr	r3, r3, #256
 1511 0138 9360     		str	r3, [r2, #8]
 1512 013a 07E0     		b	.L110
 1513              	.L116:
1212:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100x
 1514              		.loc 1 1212 0
 1515 013c 1E62     		str	r6, [r3, #32]
1215:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC
 1516              		.loc 1 1215 0
 1517 013e 2368     		ldr	r3, [r4]
 1518 0140 9F64     		str	r7, [r3, #72]
1218:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
 1519              		.loc 1 1218 0
 1520 0142 2268     		ldr	r2, [r4]
 1521 0144 9368     		ldr	r3, [r2, #8]
 1522 0146 43F40073 		orr	r3, r3, #512
 1523 014a 9360     		str	r3, [r2, #8]
 1524              	.L110:
1222:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1525              		.loc 1 1222 0
 1526 014c 2368     		ldr	r3, [r4]
 1527 014e FF22     		movs	r2, #255
 1528 0150 5A62     		str	r2, [r3, #36]
1225:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1529              		.loc 1 1225 0
 1530 0152 0123     		movs	r3, #1
 1531 0154 6377     		strb	r3, [r4, #29]
1228:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1532              		.loc 1 1228 0
 1533 0156 0020     		movs	r0, #0
 1534 0158 2077     		strb	r0, [r4, #28]
1230:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** }
 1535              		.loc 1 1230 0
 1536 015a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1537              	.LVL117:
ARM GAS  /tmp/ccF0iA9m.s 			page 64


 1538              	.L113:
1073:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1539              		.loc 1 1073 0
 1540 015c 0220     		movs	r0, #2
 1541              	.LVL118:
1231:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1542              		.loc 1 1231 0
 1543 015e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1544              		.cfi_endproc
 1545              	.LFE80:
 1547              		.section	.text.HAL_RTC_SetAlarm_IT,"ax",%progbits
 1548              		.align	1
 1549              		.global	HAL_RTC_SetAlarm_IT
 1550              		.syntax unified
 1551              		.thumb
 1552              		.thumb_func
 1553              		.fpu softvfp
 1555              	HAL_RTC_SetAlarm_IT:
 1556              	.LFB81:
1247:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   uint32_t tickstart = 0;
 1557              		.loc 1 1247 0
 1558              		.cfi_startproc
 1559              		@ args = 0, pretend = 0, frame = 0
 1560              		@ frame_needed = 0, uses_anonymous_args = 0
 1561              	.LVL119:
 1562 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1563              	.LCFI13:
 1564              		.cfi_def_cfa_offset 24
 1565              		.cfi_offset 3, -24
 1566              		.cfi_offset 4, -20
 1567              		.cfi_offset 5, -16
 1568              		.cfi_offset 6, -12
 1569              		.cfi_offset 7, -8
 1570              		.cfi_offset 14, -4
 1571              	.LVL120:
1265:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1572              		.loc 1 1265 0
 1573 0002 037F     		ldrb	r3, [r0, #28]	@ zero_extendqisi2
 1574 0004 012B     		cmp	r3, #1
 1575 0006 00F0BE80 		beq	.L130
 1576 000a 0D46     		mov	r5, r1
 1577 000c 0446     		mov	r4, r0
1265:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1578              		.loc 1 1265 0 is_stmt 0 discriminator 2
 1579 000e 0123     		movs	r3, #1
 1580 0010 0377     		strb	r3, [r0, #28]
1267:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1581              		.loc 1 1267 0 is_stmt 1 discriminator 2
 1582 0012 0223     		movs	r3, #2
 1583 0014 4377     		strb	r3, [r0, #29]
1269:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
 1584              		.loc 1 1269 0 discriminator 2
 1585 0016 002A     		cmp	r2, #0
 1586 0018 4ED1     		bne	.L120
1271:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
 1587              		.loc 1 1271 0
 1588 001a 0368     		ldr	r3, [r0]
ARM GAS  /tmp/ccF0iA9m.s 			page 65


 1589 001c 9B68     		ldr	r3, [r3, #8]
 1590 001e 13F0400F 		tst	r3, #64
 1591 0022 01D1     		bne	.L121
1278:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 1592              		.loc 1 1278 0
 1593 0024 0023     		movs	r3, #0
 1594 0026 CB70     		strb	r3, [r1, #3]
 1595              	.L121:
1284:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
 1596              		.loc 1 1284 0
 1597 0028 EE69     		ldr	r6, [r5, #28]
1292:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 1598              		.loc 1 1292 0
 1599 002a 2878     		ldrb	r0, [r5]	@ zero_extendqisi2
 1600              	.LVL121:
 1601 002c FFF7FEFF 		bl	RTC_ByteToBcd2
 1602              	.LVL122:
 1603 0030 0704     		lsls	r7, r0, #16
1293:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 1604              		.loc 1 1293 0
 1605 0032 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 1606 0034 FFF7FEFF 		bl	RTC_ByteToBcd2
 1607              	.LVL123:
1292:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 1608              		.loc 1 1292 0
 1609 0038 47EA0027 		orr	r7, r7, r0, lsl #8
1294:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 1610              		.loc 1 1294 0
 1611 003c A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 1612 003e FFF7FEFF 		bl	RTC_ByteToBcd2
 1613              	.LVL124:
1293:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 1614              		.loc 1 1293 0
 1615 0042 0743     		orrs	r7, r7, r0
1295:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 1616              		.loc 1 1295 0
 1617 0044 E878     		ldrb	r0, [r5, #3]	@ zero_extendqisi2
1294:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 1618              		.loc 1 1294 0
 1619 0046 47EA0047 		orr	r7, r7, r0, lsl #16
1296:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1620              		.loc 1 1296 0
 1621 004a 95F82000 		ldrb	r0, [r5, #32]	@ zero_extendqisi2
 1622 004e FFF7FEFF 		bl	RTC_ByteToBcd2
 1623              	.LVL125:
1295:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 1624              		.loc 1 1295 0
 1625 0052 47EA0060 		orr	r0, r7, r0, lsl #24
1296:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1626              		.loc 1 1296 0
 1627 0056 0643     		orrs	r6, r6, r0
1298:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
 1628              		.loc 1 1298 0
 1629 0058 6B69     		ldr	r3, [r5, #20]
1292:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 1630              		.loc 1 1292 0
 1631 005a 1E43     		orrs	r6, r6, r3
ARM GAS  /tmp/ccF0iA9m.s 			page 66


 1632              	.LVL126:
 1633              	.L122:
1334:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC
 1634              		.loc 1 1334 0
 1635 005c 6F68     		ldr	r7, [r5, #4]
 1636 005e AB69     		ldr	r3, [r5, #24]
 1637 0060 1F43     		orrs	r7, r7, r3
 1638              	.LVL127:
1338:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1639              		.loc 1 1338 0
 1640 0062 2368     		ldr	r3, [r4]
 1641 0064 CA22     		movs	r2, #202
 1642 0066 5A62     		str	r2, [r3, #36]
 1643 0068 2368     		ldr	r3, [r4]
 1644 006a 5322     		movs	r2, #83
 1645 006c 5A62     		str	r2, [r3, #36]
1341:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
 1646              		.loc 1 1341 0
 1647 006e 6B6A     		ldr	r3, [r5, #36]
 1648 0070 B3F5807F 		cmp	r3, #256
 1649 0074 3AD0     		beq	.L132
1380:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1650              		.loc 1 1380 0
 1651 0076 2268     		ldr	r2, [r4]
 1652 0078 9368     		ldr	r3, [r2, #8]
 1653 007a 23F40073 		bic	r3, r3, #512
 1654 007e 9360     		str	r3, [r2, #8]
1383:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1655              		.loc 1 1383 0
 1656 0080 2268     		ldr	r2, [r4]
 1657 0082 D368     		ldr	r3, [r2, #12]
 1658 0084 DBB2     		uxtb	r3, r3
 1659 0086 63F42073 		orn	r3, r3, #640
 1660 008a D360     		str	r3, [r2, #12]
1385:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
 1661              		.loc 1 1385 0
 1662 008c FFF7FEFF 		bl	HAL_GetTick
 1663              	.LVL128:
 1664 0090 0546     		mov	r5, r0
 1665              	.LVL129:
 1666              	.L128:
1387:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
 1667              		.loc 1 1387 0
 1668 0092 2368     		ldr	r3, [r4]
 1669 0094 DA68     		ldr	r2, [r3, #12]
 1670 0096 12F0020F 		tst	r2, #2
 1671 009a 56D1     		bne	.L133
1389:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       {
 1672              		.loc 1 1389 0
 1673 009c FFF7FEFF 		bl	HAL_GetTick
 1674              	.LVL130:
 1675 00a0 401B     		subs	r0, r0, r5
 1676 00a2 B0F57A7F 		cmp	r0, #1000
 1677 00a6 F4D9     		bls	.L128
1392:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1678              		.loc 1 1392 0
 1679 00a8 2368     		ldr	r3, [r4]
ARM GAS  /tmp/ccF0iA9m.s 			page 67


 1680 00aa FF22     		movs	r2, #255
 1681 00ac 5A62     		str	r2, [r3, #36]
1394:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1682              		.loc 1 1394 0
 1683 00ae 0320     		movs	r0, #3
 1684 00b0 6077     		strb	r0, [r4, #29]
1397:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1685              		.loc 1 1397 0
 1686 00b2 0023     		movs	r3, #0
 1687 00b4 2377     		strb	r3, [r4, #28]
1399:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       }
 1688              		.loc 1 1399 0
 1689 00b6 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1690              	.LVL131:
 1691              	.L120:
1302:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
 1692              		.loc 1 1302 0
 1693 00b8 0368     		ldr	r3, [r0]
 1694 00ba 9B68     		ldr	r3, [r3, #8]
 1695 00bc 13F0400F 		tst	r3, #64
 1696 00c0 01D1     		bne	.L123
1309:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 1697              		.loc 1 1309 0
 1698 00c2 0023     		movs	r3, #0
 1699 00c4 CB70     		strb	r3, [r1, #3]
 1700              	.L123:
1316:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
 1701              		.loc 1 1316 0
 1702 00c6 EE69     		ldr	r6, [r5, #28]
1324:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 1703              		.loc 1 1324 0
 1704 00c8 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
 1705              	.LVL132:
1325:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 1706              		.loc 1 1325 0
 1707 00ca 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
 1708 00cc 1B02     		lsls	r3, r3, #8
1324:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 1709              		.loc 1 1324 0
 1710 00ce 43EA0243 		orr	r3, r3, r2, lsl #16
1326:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 1711              		.loc 1 1326 0
 1712 00d2 AA78     		ldrb	r2, [r5, #2]	@ zero_extendqisi2
1325:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 1713              		.loc 1 1325 0
 1714 00d4 1343     		orrs	r3, r3, r2
1327:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 1715              		.loc 1 1327 0
 1716 00d6 EA78     		ldrb	r2, [r5, #3]	@ zero_extendqisi2
1326:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 1717              		.loc 1 1326 0
 1718 00d8 43EA0243 		orr	r3, r3, r2, lsl #16
1328:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1719              		.loc 1 1328 0
 1720 00dc 95F82020 		ldrb	r2, [r5, #32]	@ zero_extendqisi2
1327:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 1721              		.loc 1 1327 0
ARM GAS  /tmp/ccF0iA9m.s 			page 68


 1722 00e0 43EA0263 		orr	r3, r3, r2, lsl #24
1328:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1723              		.loc 1 1328 0
 1724 00e4 1E43     		orrs	r6, r6, r3
1330:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
 1725              		.loc 1 1330 0
 1726 00e6 6B69     		ldr	r3, [r5, #20]
1324:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 1727              		.loc 1 1324 0
 1728 00e8 1E43     		orrs	r6, r6, r3
 1729              	.LVL133:
 1730 00ea B7E7     		b	.L122
 1731              	.LVL134:
 1732              	.L132:
1344:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1733              		.loc 1 1344 0
 1734 00ec 2268     		ldr	r2, [r4]
 1735 00ee 9368     		ldr	r3, [r2, #8]
 1736 00f0 23F48073 		bic	r3, r3, #256
 1737 00f4 9360     		str	r3, [r2, #8]
1347:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1738              		.loc 1 1347 0
 1739 00f6 2268     		ldr	r2, [r4]
 1740 00f8 D368     		ldr	r3, [r2, #12]
 1741 00fa DBB2     		uxtb	r3, r3
 1742 00fc 63F4C073 		orn	r3, r3, #384
 1743 0100 D360     		str	r3, [r2, #12]
1349:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
 1744              		.loc 1 1349 0
 1745 0102 FFF7FEFF 		bl	HAL_GetTick
 1746              	.LVL135:
 1747 0106 0546     		mov	r5, r0
 1748              	.LVL136:
 1749              	.L125:
1351:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     {
 1750              		.loc 1 1351 0
 1751 0108 2368     		ldr	r3, [r4]
 1752 010a DA68     		ldr	r2, [r3, #12]
 1753 010c 12F0010F 		tst	r2, #1
 1754 0110 0DD1     		bne	.L134
1353:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       {
 1755              		.loc 1 1353 0
 1756 0112 FFF7FEFF 		bl	HAL_GetTick
 1757              	.LVL137:
 1758 0116 401B     		subs	r0, r0, r5
 1759 0118 B0F57A7F 		cmp	r0, #1000
 1760 011c F4D9     		bls	.L125
1356:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1761              		.loc 1 1356 0
 1762 011e 2368     		ldr	r3, [r4]
 1763 0120 FF22     		movs	r2, #255
 1764 0122 5A62     		str	r2, [r3, #36]
1358:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1765              		.loc 1 1358 0
 1766 0124 0320     		movs	r0, #3
 1767 0126 6077     		strb	r0, [r4, #29]
1361:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
ARM GAS  /tmp/ccF0iA9m.s 			page 69


 1768              		.loc 1 1361 0
 1769 0128 0023     		movs	r3, #0
 1770 012a 2377     		strb	r3, [r4, #28]
1363:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****       }
 1771              		.loc 1 1363 0
 1772 012c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1773              	.LVL138:
 1774              	.L134:
1367:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100x
 1775              		.loc 1 1367 0
 1776 012e DE61     		str	r6, [r3, #28]
1370:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC
 1777              		.loc 1 1370 0
 1778 0130 2368     		ldr	r3, [r4]
 1779 0132 5F64     		str	r7, [r3, #68]
1373:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Configure the Alarm interrupt */
 1780              		.loc 1 1373 0
 1781 0134 2268     		ldr	r2, [r4]
 1782 0136 9368     		ldr	r3, [r2, #8]
 1783 0138 43F48073 		orr	r3, r3, #256
 1784 013c 9360     		str	r3, [r2, #8]
1375:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
 1785              		.loc 1 1375 0
 1786 013e 2268     		ldr	r2, [r4]
 1787 0140 9368     		ldr	r3, [r2, #8]
 1788 0142 43F48053 		orr	r3, r3, #4096
 1789 0146 9360     		str	r3, [r2, #8]
 1790 0148 0CE0     		b	.L127
 1791              	.L133:
1403:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100x
 1792              		.loc 1 1403 0
 1793 014a 1E62     		str	r6, [r3, #32]
1406:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC
 1794              		.loc 1 1406 0
 1795 014c 2368     		ldr	r3, [r4]
 1796 014e 9F64     		str	r7, [r3, #72]
1409:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     /* Configure the Alarm interrupt */
 1797              		.loc 1 1409 0
 1798 0150 2268     		ldr	r2, [r4]
 1799 0152 9368     		ldr	r3, [r2, #8]
 1800 0154 43F40073 		orr	r3, r3, #512
 1801 0158 9360     		str	r3, [r2, #8]
1411:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
 1802              		.loc 1 1411 0
 1803 015a 2268     		ldr	r2, [r4]
 1804 015c 9368     		ldr	r3, [r2, #8]
 1805 015e 43F40053 		orr	r3, r3, #8192
 1806 0162 9360     		str	r3, [r2, #8]
 1807              	.L127:
1415:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1808              		.loc 1 1415 0
 1809 0164 094B     		ldr	r3, .L135
 1810 0166 1A68     		ldr	r2, [r3]
 1811 0168 42F40032 		orr	r2, r2, #131072
 1812 016c 1A60     		str	r2, [r3]
1417:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1813              		.loc 1 1417 0
ARM GAS  /tmp/ccF0iA9m.s 			page 70


 1814 016e 9A68     		ldr	r2, [r3, #8]
 1815 0170 42F40032 		orr	r2, r2, #131072
 1816 0174 9A60     		str	r2, [r3, #8]
1420:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1817              		.loc 1 1420 0
 1818 0176 2368     		ldr	r3, [r4]
 1819 0178 FF22     		movs	r2, #255
 1820 017a 5A62     		str	r2, [r3, #36]
1422:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1821              		.loc 1 1422 0
 1822 017c 0123     		movs	r3, #1
 1823 017e 6377     		strb	r3, [r4, #29]
1425:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1824              		.loc 1 1425 0
 1825 0180 0020     		movs	r0, #0
 1826 0182 2077     		strb	r0, [r4, #28]
1427:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** }
 1827              		.loc 1 1427 0
 1828 0184 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1829              	.LVL139:
 1830              	.L130:
1265:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1831              		.loc 1 1265 0
 1832 0186 0220     		movs	r0, #2
 1833              	.LVL140:
1428:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1834              		.loc 1 1428 0
 1835 0188 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1836              	.L136:
 1837 018a 00BF     		.align	2
 1838              	.L135:
 1839 018c 00040140 		.word	1073808384
 1840              		.cfi_endproc
 1841              	.LFE81:
 1843              		.section	.text.RTC_Bcd2ToByte,"ax",%progbits
 1844              		.align	1
 1845              		.global	RTC_Bcd2ToByte
 1846              		.syntax unified
 1847              		.thumb
 1848              		.thumb_func
 1849              		.fpu softvfp
 1851              	RTC_Bcd2ToByte:
 1852              	.LFB91:
1832:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
1833:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** /**
1834:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @brief  Convert from 2 digit BCD to Binary.
1835:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @param  Value BCD value to be converted
1836:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   * @retval Converted word
1837:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   */
1838:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** uint8_t RTC_Bcd2ToByte(uint8_t Value)
1839:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** {
 1853              		.loc 1 1839 0
 1854              		.cfi_startproc
 1855              		@ args = 0, pretend = 0, frame = 0
 1856              		@ frame_needed = 0, uses_anonymous_args = 0
 1857              		@ link register save eliminated.
 1858              	.LVL141:
ARM GAS  /tmp/ccF0iA9m.s 			page 71


1840:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   uint32_t tmp;
1841:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 1859              		.loc 1 1841 0
 1860 0000 0309     		lsrs	r3, r0, #4
 1861 0002 03EB8303 		add	r3, r3, r3, lsl #2
 1862 0006 5A00     		lsls	r2, r3, #1
 1863              	.LVL142:
1842:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 1864              		.loc 1 1842 0
 1865 0008 00F00F00 		and	r0, r0, #15
 1866              	.LVL143:
 1867 000c 1044     		add	r0, r0, r2
1843:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** }
 1868              		.loc 1 1843 0
 1869 000e C0B2     		uxtb	r0, r0
 1870 0010 7047     		bx	lr
 1871              		.cfi_endproc
 1872              	.LFE91:
 1874              		.section	.text.HAL_RTC_GetTime,"ax",%progbits
 1875              		.align	1
 1876              		.global	HAL_RTC_GetTime
 1877              		.syntax unified
 1878              		.thumb
 1879              		.thumb_func
 1880              		.fpu softvfp
 1882              	HAL_RTC_GetTime:
 1883              	.LFB77:
 848:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   uint32_t tmpreg;
 1884              		.loc 1 848 0
 1885              		.cfi_startproc
 1886              		@ args = 0, pretend = 0, frame = 0
 1887              		@ frame_needed = 0, uses_anonymous_args = 0
 1888              	.LVL144:
 1889 0000 70B5     		push	{r4, r5, r6, lr}
 1890              	.LCFI14:
 1891              		.cfi_def_cfa_offset 16
 1892              		.cfi_offset 4, -16
 1893              		.cfi_offset 5, -12
 1894              		.cfi_offset 6, -8
 1895              		.cfi_offset 14, -4
 856:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1896              		.loc 1 856 0
 1897 0002 0368     		ldr	r3, [r0]
 1898 0004 9B6A     		ldr	r3, [r3, #40]
 1899 0006 9BB2     		uxth	r3, r3
 1900 0008 4B60     		str	r3, [r1, #4]
 859:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC
 1901              		.loc 1 859 0
 1902 000a 0368     		ldr	r3, [r0]
 1903 000c 1B69     		ldr	r3, [r3, #16]
 1904 000e C3F30E03 		ubfx	r3, r3, #0, #15
 1905 0012 8B60     		str	r3, [r1, #8]
 863:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1906              		.loc 1 863 0
 1907 0014 0368     		ldr	r3, [r0]
 1908 0016 1B68     		ldr	r3, [r3]
 1909 0018 03F07F33 		and	r3, r3, #2139062143
ARM GAS  /tmp/ccF0iA9m.s 			page 72


 1910 001c 23F0FE43 		bic	r3, r3, #2130706432
 1911              	.LVL145:
 866:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 1912              		.loc 1 866 0
 1913 0020 1D0C     		lsrs	r5, r3, #16
 1914 0022 05F03F00 		and	r0, r5, #63
 1915              	.LVL146:
 1916 0026 0870     		strb	r0, [r1]
 867:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 1917              		.loc 1 867 0
 1918 0028 C3F30626 		ubfx	r6, r3, #8, #7
 1919 002c 4E70     		strb	r6, [r1, #1]
 868:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 1920              		.loc 1 868 0
 1921 002e 03F07F04 		and	r4, r3, #127
 1922 0032 8C70     		strb	r4, [r1, #2]
 869:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1923              		.loc 1 869 0
 1924 0034 05F04005 		and	r5, r5, #64
 1925 0038 CD70     		strb	r5, [r1, #3]
 872:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
 1926              		.loc 1 872 0
 1927 003a 5AB9     		cbnz	r2, .L139
 1928 003c 0D46     		mov	r5, r1
 875:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 1929              		.loc 1 875 0
 1930 003e FFF7FEFF 		bl	RTC_Bcd2ToByte
 1931              	.LVL147:
 1932 0042 2870     		strb	r0, [r5]
 876:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 1933              		.loc 1 876 0
 1934 0044 3046     		mov	r0, r6
 1935 0046 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1936              	.LVL148:
 1937 004a 6870     		strb	r0, [r5, #1]
 877:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
 1938              		.loc 1 877 0
 1939 004c 2046     		mov	r0, r4
 1940 004e FFF7FEFF 		bl	RTC_Bcd2ToByte
 1941              	.LVL149:
 1942 0052 A870     		strb	r0, [r5, #2]
 1943              	.LVL150:
 1944              	.L139:
 881:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1945              		.loc 1 881 0
 1946 0054 0020     		movs	r0, #0
 1947 0056 70BD     		pop	{r4, r5, r6, pc}
 1948              		.cfi_endproc
 1949              	.LFE77:
 1951              		.section	.text.HAL_RTC_GetDate,"ax",%progbits
 1952              		.align	1
 1953              		.global	HAL_RTC_GetDate
 1954              		.syntax unified
 1955              		.thumb
 1956              		.thumb_func
 1957              		.fpu softvfp
 1959              	HAL_RTC_GetDate:
ARM GAS  /tmp/ccF0iA9m.s 			page 73


 1960              	.LFB79:
1000:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   uint32_t datetmpreg;
 1961              		.loc 1 1000 0
 1962              		.cfi_startproc
 1963              		@ args = 0, pretend = 0, frame = 0
 1964              		@ frame_needed = 0, uses_anonymous_args = 0
 1965              	.LVL151:
 1966 0000 70B5     		push	{r4, r5, r6, lr}
 1967              	.LCFI15:
 1968              		.cfi_def_cfa_offset 16
 1969              		.cfi_offset 4, -16
 1970              		.cfi_offset 5, -12
 1971              		.cfi_offset 6, -8
 1972              		.cfi_offset 14, -4
1007:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1973              		.loc 1 1007 0
 1974 0002 0368     		ldr	r3, [r0]
 1975 0004 5B68     		ldr	r3, [r3, #4]
 1976 0006 23F07F43 		bic	r3, r3, #-16777216
 1977 000a 23F0C003 		bic	r3, r3, #192
 1978              	.LVL152:
1010:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 1979              		.loc 1 1010 0
 1980 000e 180C     		lsrs	r0, r3, #16
 1981              	.LVL153:
 1982 0010 C870     		strb	r0, [r1, #3]
1011:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 1983              		.loc 1 1011 0
 1984 0012 C3F30426 		ubfx	r6, r3, #8, #5
 1985 0016 4E70     		strb	r6, [r1, #1]
1012:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 1986              		.loc 1 1012 0
 1987 0018 03F03F05 		and	r5, r3, #63
 1988 001c 8D70     		strb	r5, [r1, #2]
1013:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 1989              		.loc 1 1013 0
 1990 001e C3F34233 		ubfx	r3, r3, #13, #3
 1991              	.LVL154:
 1992 0022 0B70     		strb	r3, [r1]
1016:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
 1993              		.loc 1 1016 0
 1994 0024 5AB9     		cbnz	r2, .L142
 1995 0026 0C46     		mov	r4, r1
1019:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 1996              		.loc 1 1019 0
 1997 0028 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1998              	.LVL155:
 1999 002c E070     		strb	r0, [r4, #3]
1020:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 2000              		.loc 1 1020 0
 2001 002e 3046     		mov	r0, r6
 2002 0030 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2003              	.LVL156:
 2004 0034 6070     		strb	r0, [r4, #1]
1021:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
 2005              		.loc 1 1021 0
 2006 0036 2846     		mov	r0, r5
ARM GAS  /tmp/ccF0iA9m.s 			page 74


 2007 0038 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2008              	.LVL157:
 2009 003c A070     		strb	r0, [r4, #2]
 2010              	.LVL158:
 2011              	.L142:
1024:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 2012              		.loc 1 1024 0
 2013 003e 0020     		movs	r0, #0
 2014 0040 70BD     		pop	{r4, r5, r6, pc}
 2015              		.cfi_endproc
 2016              	.LFE79:
 2018              		.section	.text.HAL_RTC_GetAlarm,"ax",%progbits
 2019              		.align	1
 2020              		.global	HAL_RTC_GetAlarm
 2021              		.syntax unified
 2022              		.thumb
 2023              		.thumb_func
 2024              		.fpu softvfp
 2026              	HAL_RTC_GetAlarm:
 2027              	.LFB83:
1534:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   uint32_t tmpreg;
 2028              		.loc 1 1534 0
 2029              		.cfi_startproc
 2030              		@ args = 0, pretend = 0, frame = 0
 2031              		@ frame_needed = 0, uses_anonymous_args = 0
 2032              	.LVL159:
 2033 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2034              	.LCFI16:
 2035              		.cfi_def_cfa_offset 24
 2036              		.cfi_offset 3, -24
 2037              		.cfi_offset 4, -20
 2038              		.cfi_offset 5, -16
 2039              		.cfi_offset 6, -12
 2040              		.cfi_offset 7, -8
 2041              		.cfi_offset 14, -4
1544:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
 2042              		.loc 1 1544 0
 2043 0002 B2F5807F 		cmp	r2, #256
 2044 0006 34D0     		beq	.L149
1556:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 2045              		.loc 1 1556 0
 2046 0008 4FF40072 		mov	r2, #512
 2047              	.LVL160:
 2048 000c 4A62     		str	r2, [r1, #36]
1558:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100x
 2049              		.loc 1 1558 0
 2050 000e 0068     		ldr	r0, [r0]
 2051              	.LVL161:
 2052 0010 026A     		ldr	r2, [r0, #32]
 2053              	.LVL162:
1560:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC
 2054              		.loc 1 1560 0
 2055 0012 876C     		ldr	r7, [r0, #72]
 2056 0014 C7F30E07 		ubfx	r7, r7, #0, #15
 2057              	.LVL163:
 2058              	.L146:
1565:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   sAlarm->AlarmTime.Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> 8U);
ARM GAS  /tmp/ccF0iA9m.s 			page 75


 2059              		.loc 1 1565 0
 2060 0018 C2F30744 		ubfx	r4, r2, #16, #8
 2061 001c 04F03F00 		and	r0, r4, #63
 2062 0020 0870     		strb	r0, [r1]
1566:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   sAlarm->AlarmTime.Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU));
 2063              		.loc 1 1566 0
 2064 0022 C2F30626 		ubfx	r6, r2, #8, #7
 2065 0026 4E70     		strb	r6, [r1, #1]
1567:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   sAlarm->AlarmTime.TimeFormat = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16U);
 2066              		.loc 1 1567 0
 2067 0028 02F07F05 		and	r5, r2, #127
 2068 002c 8D70     		strb	r5, [r1, #2]
1568:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100x
 2069              		.loc 1 1568 0
 2070 002e 04F04004 		and	r4, r4, #64
 2071 0032 CC70     		strb	r4, [r1, #3]
1570:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC
 2072              		.loc 1 1570 0
 2073 0034 4F60     		str	r7, [r1, #4]
1572:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 2074              		.loc 1 1572 0
 2075 0036 C2F30567 		ubfx	r7, r2, #24, #6
 2076              	.LVL164:
 2077 003a 81F82070 		strb	r7, [r1, #32]
1573:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 2078              		.loc 1 1573 0
 2079 003e 02F08044 		and	r4, r2, #1073741824
 2080 0042 CC61     		str	r4, [r1, #28]
1574:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 2081              		.loc 1 1574 0
 2082 0044 02F08032 		and	r2, r2, #-2139062144
 2083              	.LVL165:
 2084 0048 4A61     		str	r2, [r1, #20]
1576:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   {
 2085              		.loc 1 1576 0
 2086 004a 83B9     		cbnz	r3, .L147
 2087 004c 0C46     		mov	r4, r1
1578:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 2088              		.loc 1 1578 0
 2089 004e FFF7FEFF 		bl	RTC_Bcd2ToByte
 2090              	.LVL166:
 2091 0052 2070     		strb	r0, [r4]
1579:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 2092              		.loc 1 1579 0
 2093 0054 3046     		mov	r0, r6
 2094 0056 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2095              	.LVL167:
 2096 005a 6070     		strb	r0, [r4, #1]
1580:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 2097              		.loc 1 1580 0
 2098 005c 2846     		mov	r0, r5
 2099 005e FFF7FEFF 		bl	RTC_Bcd2ToByte
 2100              	.LVL168:
 2101 0062 A070     		strb	r0, [r4, #2]
1581:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c ****   }
 2102              		.loc 1 1581 0
 2103 0064 3846     		mov	r0, r7
ARM GAS  /tmp/ccF0iA9m.s 			page 76


 2104 0066 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2105              	.LVL169:
 2106 006a 84F82000 		strb	r0, [r4, #32]
 2107              	.LVL170:
 2108              	.L147:
1585:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 2109              		.loc 1 1585 0
 2110 006e 0020     		movs	r0, #0
 2111 0070 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2112              	.LVL171:
 2113              	.L149:
1547:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** 
 2114              		.loc 1 1547 0
 2115 0072 4A62     		str	r2, [r1, #36]
1549:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100x
 2116              		.loc 1 1549 0
 2117 0074 0068     		ldr	r0, [r0]
 2118              	.LVL172:
 2119 0076 C269     		ldr	r2, [r0, #28]
 2120              	.LVL173:
1551:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_rtc.c **** #endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC
 2121              		.loc 1 1551 0
 2122 0078 476C     		ldr	r7, [r0, #68]
 2123 007a C7F30E07 		ubfx	r7, r7, #0, #15
 2124              	.LVL174:
 2125 007e CBE7     		b	.L146
 2126              		.cfi_endproc
 2127              	.LFE83:
 2129              		.text
 2130              	.Letext0:
 2131              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 2132              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 2133              		.file 4 "..//Source/stm/lib/CMSIS/Include/core_cm3.h"
 2134              		.file 5 "..//Source/stm/lib/CMSIS/Device/ST/STM32L1xx/Include/system_stm32l1xx.h"
 2135              		.file 6 "..//Source/stm/lib/CMSIS/Device/ST/STM32L1xx/Include/stm32l151xba.h"
 2136              		.file 7 "..//Source/stm/lib/CMSIS/Device/ST/STM32L1xx/Include/stm32l1xx.h"
 2137              		.file 8 "..//Source/stm/lib/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal_def.h"
 2138              		.file 9 "..//Source/stm/lib/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal_rtc.h"
 2139              		.file 10 "..//Source/stm/lib/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal.h"
 2140              		.file 11 "..//Source/stm/lib/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal_rtc_ex.h"
ARM GAS  /tmp/ccF0iA9m.s 			page 77


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32l1xx_hal_rtc.c
     /tmp/ccF0iA9m.s:16     .text.HAL_RTC_MspInit:0000000000000000 $t
     /tmp/ccF0iA9m.s:23     .text.HAL_RTC_MspInit:0000000000000000 HAL_RTC_MspInit
     /tmp/ccF0iA9m.s:37     .text.HAL_RTC_MspDeInit:0000000000000000 $t
     /tmp/ccF0iA9m.s:44     .text.HAL_RTC_MspDeInit:0000000000000000 HAL_RTC_MspDeInit
     /tmp/ccF0iA9m.s:57     .text.HAL_RTC_DeactivateAlarm:0000000000000000 $t
     /tmp/ccF0iA9m.s:64     .text.HAL_RTC_DeactivateAlarm:0000000000000000 HAL_RTC_DeactivateAlarm
     /tmp/ccF0iA9m.s:205    .text.HAL_RTC_AlarmAEventCallback:0000000000000000 $t
     /tmp/ccF0iA9m.s:212    .text.HAL_RTC_AlarmAEventCallback:0000000000000000 HAL_RTC_AlarmAEventCallback
     /tmp/ccF0iA9m.s:225    .text.HAL_RTC_AlarmIRQHandler:0000000000000000 $t
     /tmp/ccF0iA9m.s:232    .text.HAL_RTC_AlarmIRQHandler:0000000000000000 HAL_RTC_AlarmIRQHandler
     /tmp/ccF0iA9m.s:302    .text.HAL_RTC_AlarmIRQHandler:000000000000005c $d
     /tmp/ccF0iA9m.s:307    .text.HAL_RTC_PollForAlarmAEvent:0000000000000000 $t
     /tmp/ccF0iA9m.s:314    .text.HAL_RTC_PollForAlarmAEvent:0000000000000000 HAL_RTC_PollForAlarmAEvent
     /tmp/ccF0iA9m.s:377    .text.HAL_RTC_WaitForSynchro:0000000000000000 $t
     /tmp/ccF0iA9m.s:384    .text.HAL_RTC_WaitForSynchro:0000000000000000 HAL_RTC_WaitForSynchro
     /tmp/ccF0iA9m.s:444    .text.HAL_RTC_GetState:0000000000000000 $t
     /tmp/ccF0iA9m.s:451    .text.HAL_RTC_GetState:0000000000000000 HAL_RTC_GetState
     /tmp/ccF0iA9m.s:468    .text.RTC_EnterInitMode:0000000000000000 $t
     /tmp/ccF0iA9m.s:475    .text.RTC_EnterInitMode:0000000000000000 RTC_EnterInitMode
     /tmp/ccF0iA9m.s:534    .text.HAL_RTC_Init:0000000000000000 $t
     /tmp/ccF0iA9m.s:541    .text.HAL_RTC_Init:0000000000000000 HAL_RTC_Init
     /tmp/ccF0iA9m.s:673    .text.HAL_RTC_DeInit:0000000000000000 $t
     /tmp/ccF0iA9m.s:680    .text.HAL_RTC_DeInit:0000000000000000 HAL_RTC_DeInit
     /tmp/ccF0iA9m.s:841    .text.HAL_RTC_DeInit:00000000000000d0 $d
     /tmp/ccF0iA9m.s:846    .text.RTC_ByteToBcd2:0000000000000000 $t
     /tmp/ccF0iA9m.s:853    .text.RTC_ByteToBcd2:0000000000000000 RTC_ByteToBcd2
     /tmp/ccF0iA9m.s:891    .text.HAL_RTC_SetTime:0000000000000000 $t
     /tmp/ccF0iA9m.s:898    .text.HAL_RTC_SetTime:0000000000000000 HAL_RTC_SetTime
     /tmp/ccF0iA9m.s:1094   .text.HAL_RTC_SetDate:0000000000000000 $t
     /tmp/ccF0iA9m.s:1101   .text.HAL_RTC_SetDate:0000000000000000 HAL_RTC_SetDate
     /tmp/ccF0iA9m.s:1277   .text.HAL_RTC_SetAlarm:0000000000000000 $t
     /tmp/ccF0iA9m.s:1284   .text.HAL_RTC_SetAlarm:0000000000000000 HAL_RTC_SetAlarm
     /tmp/ccF0iA9m.s:1548   .text.HAL_RTC_SetAlarm_IT:0000000000000000 $t
     /tmp/ccF0iA9m.s:1555   .text.HAL_RTC_SetAlarm_IT:0000000000000000 HAL_RTC_SetAlarm_IT
     /tmp/ccF0iA9m.s:1839   .text.HAL_RTC_SetAlarm_IT:000000000000018c $d
     /tmp/ccF0iA9m.s:1844   .text.RTC_Bcd2ToByte:0000000000000000 $t
     /tmp/ccF0iA9m.s:1851   .text.RTC_Bcd2ToByte:0000000000000000 RTC_Bcd2ToByte
     /tmp/ccF0iA9m.s:1875   .text.HAL_RTC_GetTime:0000000000000000 $t
     /tmp/ccF0iA9m.s:1882   .text.HAL_RTC_GetTime:0000000000000000 HAL_RTC_GetTime
     /tmp/ccF0iA9m.s:1952   .text.HAL_RTC_GetDate:0000000000000000 $t
     /tmp/ccF0iA9m.s:1959   .text.HAL_RTC_GetDate:0000000000000000 HAL_RTC_GetDate
     /tmp/ccF0iA9m.s:2019   .text.HAL_RTC_GetAlarm:0000000000000000 $t
     /tmp/ccF0iA9m.s:2026   .text.HAL_RTC_GetAlarm:0000000000000000 HAL_RTC_GetAlarm
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
HAL_RTCEx_AlarmBEventCallback
