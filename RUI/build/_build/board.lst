ARM GAS  /tmp/ccD3wtrw.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"board.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.OnCalibrateSystemWakeupTimeTimerEvent,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	OnCalibrateSystemWakeupTimeTimerEvent:
  23              	.LFB72:
  24              		.file 1 "..//Source/stm/board/board_stm32l151cd/board.c"
   1:..//Source/stm/board/board_stm32l151cd/board.c **** /*!
   2:..//Source/stm/board/board_stm32l151cd/board.c ****  * \file      board.c
   3:..//Source/stm/board/board_stm32l151cd/board.c ****  *
   4:..//Source/stm/board/board_stm32l151cd/board.c ****  * \brief     Target board general functions implementation
   5:..//Source/stm/board/board_stm32l151cd/board.c ****  *
   6:..//Source/stm/board/board_stm32l151cd/board.c ****  * \copyright Revised BSD License, see section \ref LICENSE.
   7:..//Source/stm/board/board_stm32l151cd/board.c ****  *
   8:..//Source/stm/board/board_stm32l151cd/board.c ****  * \code
   9:..//Source/stm/board/board_stm32l151cd/board.c ****  *                ______                              _
  10:..//Source/stm/board/board_stm32l151cd/board.c ****  *               / _____)             _              | |
  11:..//Source/stm/board/board_stm32l151cd/board.c ****  *              ( (____  _____ ____ _| |_ _____  ____| |__
  12:..//Source/stm/board/board_stm32l151cd/board.c ****  *               \____ \| ___ |    (_   _) ___ |/ ___)  _ \
  13:..//Source/stm/board/board_stm32l151cd/board.c ****  *               _____) ) ____| | | || |_| ____( (___| | | |
  14:..//Source/stm/board/board_stm32l151cd/board.c ****  *              (______/|_____)_|_|_| \__)_____)\____)_| |_|
  15:..//Source/stm/board/board_stm32l151cd/board.c ****  *              (C)2013-2017 Semtech
  16:..//Source/stm/board/board_stm32l151cd/board.c ****  *
  17:..//Source/stm/board/board_stm32l151cd/board.c ****  * \endcode
  18:..//Source/stm/board/board_stm32l151cd/board.c ****  *
  19:..//Source/stm/board/board_stm32l151cd/board.c ****  * \author    Miguel Luis ( Semtech )
  20:..//Source/stm/board/board_stm32l151cd/board.c ****  *
  21:..//Source/stm/board/board_stm32l151cd/board.c ****  * \author    Gregory Cristian ( Semtech )
  22:..//Source/stm/board/board_stm32l151cd/board.c ****  */
  23:..//Source/stm/board/board_stm32l151cd/board.c **** #include "stm32l1xx.h"
  24:..//Source/stm/board/board_stm32l151cd/board.c **** #include "utilities.h"
  25:..//Source/stm/board/board_stm32l151cd/board.c **** #include "delay.h"
  26:..//Source/stm/board/board_stm32l151cd/board.c **** #include "gpio.h"
  27:..//Source/stm/board/board_stm32l151cd/board.c **** #include "gpio-ioe.h"
  28:..//Source/stm/board/board_stm32l151cd/board.c **** #include "adc.h"
  29:..//Source/stm/board/board_stm32l151cd/board.c **** #include "spi.h"
  30:..//Source/stm/board/board_stm32l151cd/board.c **** #include "i2c.h"
  31:..//Source/stm/board/board_stm32l151cd/board.c **** #include "uart.h"
  32:..//Source/stm/board/board_stm32l151cd/board.c **** #include "timer.h"
  33:..//Source/stm/board/board_stm32l151cd/board.c **** #include "gps.h"
  34:..//Source/stm/board/board_stm32l151cd/board.c **** //#include "mpl3115.h"
ARM GAS  /tmp/ccD3wtrw.s 			page 2


  35:..//Source/stm/board/board_stm32l151cd/board.c **** //#include "mag3110.h"
  36:..//Source/stm/board/board_stm32l151cd/board.c **** //#include "mma8451.h"
  37:..//Source/stm/board/board_stm32l151cd/board.c **** //#include "sx9500.h"
  38:..//Source/stm/board/board_stm32l151cd/board.c **** #include "board-config.h"
  39:..//Source/stm/board/board_stm32l151cd/board.c **** #include "rtc-board.h"
  40:..//Source/stm/board/board_stm32l151cd/board.c **** #include "sx1276-board.h"
  41:..//Source/stm/board/board_stm32l151cd/board.c **** #if defined( USE_USB_CDC )
  42:..//Source/stm/board/board_stm32l151cd/board.c **** #include "uart-usb-board.h"
  43:..//Source/stm/board/board_stm32l151cd/board.c **** #endif
  44:..//Source/stm/board/board_stm32l151cd/board.c **** #include "board.h"
  45:..//Source/stm/board/board_stm32l151cd/board.c **** 
  46:..//Source/stm/board/board_stm32l151cd/board.c **** /*!
  47:..//Source/stm/board/board_stm32l151cd/board.c ****  * Unique Devices IDs register set ( STM32L1xxx )
  48:..//Source/stm/board/board_stm32l151cd/board.c ****  */
  49:..//Source/stm/board/board_stm32l151cd/board.c **** #define         ID1                                 ( 0x1FF80050 )
  50:..//Source/stm/board/board_stm32l151cd/board.c **** #define         ID2                                 ( 0x1FF80054 )
  51:..//Source/stm/board/board_stm32l151cd/board.c **** #define         ID3                                 ( 0x1FF80064 )
  52:..//Source/stm/board/board_stm32l151cd/board.c **** 
  53:..//Source/stm/board/board_stm32l151cd/board.c **** /*!
  54:..//Source/stm/board/board_stm32l151cd/board.c ****  * LED GPIO pins objects
  55:..//Source/stm/board/board_stm32l151cd/board.c ****  */
  56:..//Source/stm/board/board_stm32l151cd/board.c **** Gpio_t Led1;
  57:..//Source/stm/board/board_stm32l151cd/board.c **** Gpio_t Led2;
  58:..//Source/stm/board/board_stm32l151cd/board.c **** Gpio_t Led3;
  59:..//Source/stm/board/board_stm32l151cd/board.c **** Gpio_t Led4;
  60:..//Source/stm/board/board_stm32l151cd/board.c **** 
  61:..//Source/stm/board/board_stm32l151cd/board.c **** Gpio_t UsbDetect;
  62:..//Source/stm/board/board_stm32l151cd/board.c **** 
  63:..//Source/stm/board/board_stm32l151cd/board.c **** /*
  64:..//Source/stm/board/board_stm32l151cd/board.c ****  * MCU objects
  65:..//Source/stm/board/board_stm32l151cd/board.c ****  */
  66:..//Source/stm/board/board_stm32l151cd/board.c **** Adc_t Adc;
  67:..//Source/stm/board/board_stm32l151cd/board.c **** I2c_t I2c;
  68:..//Source/stm/board/board_stm32l151cd/board.c **** Uart_t Uart1;
  69:..//Source/stm/board/board_stm32l151cd/board.c **** #if defined( USE_USB_CDC )
  70:..//Source/stm/board/board_stm32l151cd/board.c **** Uart_t UartUsb;
  71:..//Source/stm/board/board_stm32l151cd/board.c **** #endif
  72:..//Source/stm/board/board_stm32l151cd/board.c **** 
  73:..//Source/stm/board/board_stm32l151cd/board.c **** /*!
  74:..//Source/stm/board/board_stm32l151cd/board.c ****  * Initializes the unused GPIO to a know status
  75:..//Source/stm/board/board_stm32l151cd/board.c ****  */
  76:..//Source/stm/board/board_stm32l151cd/board.c **** static void BoardUnusedIoInit( void );
  77:..//Source/stm/board/board_stm32l151cd/board.c **** 
  78:..//Source/stm/board/board_stm32l151cd/board.c **** /*!
  79:..//Source/stm/board/board_stm32l151cd/board.c ****  * System Clock Configuration
  80:..//Source/stm/board/board_stm32l151cd/board.c ****  */
  81:..//Source/stm/board/board_stm32l151cd/board.c **** static void SystemClockConfig( void );
  82:..//Source/stm/board/board_stm32l151cd/board.c **** 
  83:..//Source/stm/board/board_stm32l151cd/board.c **** /*!
  84:..//Source/stm/board/board_stm32l151cd/board.c ****  * Used to measure and calibrate the system wake-up time from STOP mode
  85:..//Source/stm/board/board_stm32l151cd/board.c ****  */
  86:..//Source/stm/board/board_stm32l151cd/board.c **** static void CalibrateSystemWakeupTime( void );
  87:..//Source/stm/board/board_stm32l151cd/board.c **** 
  88:..//Source/stm/board/board_stm32l151cd/board.c **** /*!
  89:..//Source/stm/board/board_stm32l151cd/board.c ****  * System Clock Re-Configuration when waking up from STOP mode
  90:..//Source/stm/board/board_stm32l151cd/board.c ****  */
  91:..//Source/stm/board/board_stm32l151cd/board.c **** static void SystemClockReConfig( void );
ARM GAS  /tmp/ccD3wtrw.s 			page 3


  92:..//Source/stm/board/board_stm32l151cd/board.c **** 
  93:..//Source/stm/board/board_stm32l151cd/board.c **** /*!
  94:..//Source/stm/board/board_stm32l151cd/board.c ****  * Timer used at first boot to calibrate the SystemWakeupTime
  95:..//Source/stm/board/board_stm32l151cd/board.c ****  */
  96:..//Source/stm/board/board_stm32l151cd/board.c **** static TimerEvent_t CalibrateSystemWakeupTimeTimer;
  97:..//Source/stm/board/board_stm32l151cd/board.c **** 
  98:..//Source/stm/board/board_stm32l151cd/board.c **** /*!
  99:..//Source/stm/board/board_stm32l151cd/board.c ****  * Flag to indicate if the MCU is Initialized
 100:..//Source/stm/board/board_stm32l151cd/board.c ****  */
 101:..//Source/stm/board/board_stm32l151cd/board.c **** static bool McuInitialized = false;
 102:..//Source/stm/board/board_stm32l151cd/board.c **** 
 103:..//Source/stm/board/board_stm32l151cd/board.c **** /*!
 104:..//Source/stm/board/board_stm32l151cd/board.c ****  * Flag to indicate if the SystemWakeupTime is Calibrated
 105:..//Source/stm/board/board_stm32l151cd/board.c ****  */
 106:..//Source/stm/board/board_stm32l151cd/board.c **** static bool SystemWakeupTimeCalibrated = false;
 107:..//Source/stm/board/board_stm32l151cd/board.c **** 
 108:..//Source/stm/board/board_stm32l151cd/board.c **** /*!
 109:..//Source/stm/board/board_stm32l151cd/board.c ****  * Callback indicating the end of the system wake-up time calibration
 110:..//Source/stm/board/board_stm32l151cd/board.c ****  */
 111:..//Source/stm/board/board_stm32l151cd/board.c **** static void OnCalibrateSystemWakeupTimeTimerEvent( void )
 112:..//Source/stm/board/board_stm32l151cd/board.c **** {
  25              		.loc 1 112 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
 113:..//Source/stm/board/board_stm32l151cd/board.c ****     SystemWakeupTimeCalibrated = true;
  30              		.loc 1 113 0
  31 0000 0122     		movs	r2, #1
  32 0002 014B     		ldr	r3, .L2
  33 0004 1A70     		strb	r2, [r3]
  34 0006 7047     		bx	lr
  35              	.L3:
  36              		.align	2
  37              	.L2:
  38 0008 00000000 		.word	.LANCHOR0
  39              		.cfi_endproc
  40              	.LFE72:
  42              		.section	.text.SystemClockReConfig,"ax",%progbits
  43              		.align	1
  44              		.syntax unified
  45              		.thumb
  46              		.thumb_func
  47              		.fpu softvfp
  49              	SystemClockReConfig:
  50              	.LFB86:
 114:..//Source/stm/board/board_stm32l151cd/board.c **** }
 115:..//Source/stm/board/board_stm32l151cd/board.c **** 
 116:..//Source/stm/board/board_stm32l151cd/board.c **** /*!
 117:..//Source/stm/board/board_stm32l151cd/board.c ****  * Nested interrupt counter.
 118:..//Source/stm/board/board_stm32l151cd/board.c ****  *
 119:..//Source/stm/board/board_stm32l151cd/board.c ****  * \remark Interrupt should only be fully disabled once the value is 0
 120:..//Source/stm/board/board_stm32l151cd/board.c ****  */
 121:..//Source/stm/board/board_stm32l151cd/board.c **** static uint8_t IrqNestLevel = 0;
 122:..//Source/stm/board/board_stm32l151cd/board.c **** 
 123:..//Source/stm/board/board_stm32l151cd/board.c **** void BoardDisableIrq( void )
 124:..//Source/stm/board/board_stm32l151cd/board.c **** {
ARM GAS  /tmp/ccD3wtrw.s 			page 4


 125:..//Source/stm/board/board_stm32l151cd/board.c ****     __disable_irq( );
 126:..//Source/stm/board/board_stm32l151cd/board.c ****     IrqNestLevel++;
 127:..//Source/stm/board/board_stm32l151cd/board.c **** }
 128:..//Source/stm/board/board_stm32l151cd/board.c **** 
 129:..//Source/stm/board/board_stm32l151cd/board.c **** void BoardEnableIrq( void )
 130:..//Source/stm/board/board_stm32l151cd/board.c **** {
 131:..//Source/stm/board/board_stm32l151cd/board.c ****     IrqNestLevel--;
 132:..//Source/stm/board/board_stm32l151cd/board.c ****     if( IrqNestLevel == 0 )
 133:..//Source/stm/board/board_stm32l151cd/board.c ****     {
 134:..//Source/stm/board/board_stm32l151cd/board.c ****         __enable_irq( );
 135:..//Source/stm/board/board_stm32l151cd/board.c ****     }
 136:..//Source/stm/board/board_stm32l151cd/board.c **** }
 137:..//Source/stm/board/board_stm32l151cd/board.c **** 
 138:..//Source/stm/board/board_stm32l151cd/board.c **** /*void BoardInitPeriph( void )
 139:..//Source/stm/board/board_stm32l151cd/board.c **** {
 140:..//Source/stm/board/board_stm32l151cd/board.c ****     Gpio_t ioPin;
 141:..//Source/stm/board/board_stm32l151cd/board.c **** 
 142:..//Source/stm/board/board_stm32l151cd/board.c ****     // Init the GPIO pins
 143:..//Source/stm/board/board_stm32l151cd/board.c ****     GpioInit( &ioPin, DC_DC_EN, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 144:..//Source/stm/board/board_stm32l151cd/board.c ****     GpioInit( &ioPin, IRQ_MPL3115, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 145:..//Source/stm/board/board_stm32l151cd/board.c ****     GpioInit( &ioPin, IRQ_MAG3110, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 146:..//Source/stm/board/board_stm32l151cd/board.c ****     GpioInit( &ioPin, GPS_POWER_ON, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 147:..//Source/stm/board/board_stm32l151cd/board.c ****     GpioInit( &ioPin, RADIO_PUSH_BUTTON, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 148:..//Source/stm/board/board_stm32l151cd/board.c ****     GpioInit( &ioPin, BOARD_POWER_DOWN, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 149:..//Source/stm/board/board_stm32l151cd/board.c ****     GpioInit( &ioPin, SPARE_IO_EXT_5, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 150:..//Source/stm/board/board_stm32l151cd/board.c ****     GpioInit( &ioPin, SPARE_IO_EXT_6, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 151:..//Source/stm/board/board_stm32l151cd/board.c ****     GpioInit( &ioPin, SPARE_IO_EXT_7, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 152:..//Source/stm/board/board_stm32l151cd/board.c ****     GpioInit( &ioPin, N_IRQ_SX9500, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 153:..//Source/stm/board/board_stm32l151cd/board.c ****     GpioInit( &ioPin, IRQ_1_MMA8451, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 154:..//Source/stm/board/board_stm32l151cd/board.c ****     GpioInit( &ioPin, IRQ_2_MMA8451, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 155:..//Source/stm/board/board_stm32l151cd/board.c ****     GpioInit( &ioPin, TX_EN_SX9500, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 156:..//Source/stm/board/board_stm32l151cd/board.c ****     GpioInit( &Led1, LED_1, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 157:..//Source/stm/board/board_stm32l151cd/board.c ****     GpioInit( &Led2, LED_2, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 158:..//Source/stm/board/board_stm32l151cd/board.c ****     GpioInit( &Led3, LED_3, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 159:..//Source/stm/board/board_stm32l151cd/board.c ****     GpioInit( &Led4, LED_4, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 160:..//Source/stm/board/board_stm32l151cd/board.c **** 
 161:..//Source/stm/board/board_stm32l151cd/board.c ****     // Init temperature, pressure and altitude sensor
 162:..//Source/stm/board/board_stm32l151cd/board.c ****     MPL3115Init( );
 163:..//Source/stm/board/board_stm32l151cd/board.c **** 
 164:..//Source/stm/board/board_stm32l151cd/board.c ****     // Init accelerometer
 165:..//Source/stm/board/board_stm32l151cd/board.c ****     MMA8451Init( );
 166:..//Source/stm/board/board_stm32l151cd/board.c **** 
 167:..//Source/stm/board/board_stm32l151cd/board.c ****     // Init magnetometer
 168:..//Source/stm/board/board_stm32l151cd/board.c ****     MAG3110Init( );
 169:..//Source/stm/board/board_stm32l151cd/board.c **** 
 170:..//Source/stm/board/board_stm32l151cd/board.c ****     // Init SAR
 171:..//Source/stm/board/board_stm32l151cd/board.c ****     SX9500Init( );
 172:..//Source/stm/board/board_stm32l151cd/board.c **** 
 173:..//Source/stm/board/board_stm32l151cd/board.c ****     // Init GPS
 174:..//Source/stm/board/board_stm32l151cd/board.c ****     GpsInit( );
 175:..//Source/stm/board/board_stm32l151cd/board.c **** 
 176:..//Source/stm/board/board_stm32l151cd/board.c ****     // Switch LED 1, 2, 3, 4 OFF
 177:..//Source/stm/board/board_stm32l151cd/board.c ****     GpioWrite( &Led1, 1 );
 178:..//Source/stm/board/board_stm32l151cd/board.c ****     GpioWrite( &Led2, 1 );
 179:..//Source/stm/board/board_stm32l151cd/board.c ****     GpioWrite( &Led3, 1 );
 180:..//Source/stm/board/board_stm32l151cd/board.c ****     GpioWrite( &Led4, 1 );
 181:..//Source/stm/board/board_stm32l151cd/board.c **** }
ARM GAS  /tmp/ccD3wtrw.s 			page 5


 182:..//Source/stm/board/board_stm32l151cd/board.c **** */
 183:..//Source/stm/board/board_stm32l151cd/board.c **** void BoardInitMcu( void )
 184:..//Source/stm/board/board_stm32l151cd/board.c **** {
 185:..//Source/stm/board/board_stm32l151cd/board.c ****     if( McuInitialized == false )
 186:..//Source/stm/board/board_stm32l151cd/board.c ****     {
 187:..//Source/stm/board/board_stm32l151cd/board.c **** #if defined( USE_BOOTLOADER )
 188:..//Source/stm/board/board_stm32l151cd/board.c ****         // Set the Vector Table base location at 0x3000
 189:..//Source/stm/board/board_stm32l151cd/board.c ****         SCB->VTOR = FLASH_BASE | 0x3000;
 190:..//Source/stm/board/board_stm32l151cd/board.c **** #endif
 191:..//Source/stm/board/board_stm32l151cd/board.c ****         HAL_Init( );
 192:..//Source/stm/board/board_stm32l151cd/board.c **** 
 193:..//Source/stm/board/board_stm32l151cd/board.c ****         SystemClockConfig( );
 194:..//Source/stm/board/board_stm32l151cd/board.c **** 
 195:..//Source/stm/board/board_stm32l151cd/board.c **** //      GpioInit( &UsbDetect, USB_ON, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 196:..//Source/stm/board/board_stm32l151cd/board.c **** 
 197:..//Source/stm/board/board_stm32l151cd/board.c ****         RtcInit( );
 198:..//Source/stm/board/board_stm32l151cd/board.c **** 
 199:..//Source/stm/board/board_stm32l151cd/board.c **** #if defined( USE_USB_CDC )
 200:..//Source/stm/board/board_stm32l151cd/board.c ****         {
 201:..//Source/stm/board/board_stm32l151cd/board.c ****             Gpio_t ioPin;
 202:..//Source/stm/board/board_stm32l151cd/board.c **** 
 203:..//Source/stm/board/board_stm32l151cd/board.c ****             GpioInit( &ioPin, USB_DM, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 204:..//Source/stm/board/board_stm32l151cd/board.c **** 
 205:..//Source/stm/board/board_stm32l151cd/board.c ****             if( GpioRead( &ioPin ) == 0 )
 206:..//Source/stm/board/board_stm32l151cd/board.c ****             {
 207:..//Source/stm/board/board_stm32l151cd/board.c ****                 UartInit( &UartUsb, UART_USB_CDC, NC, NC );
 208:..//Source/stm/board/board_stm32l151cd/board.c ****                 UartConfig( &UartUsb, RX_TX, 115200, UART_8_BIT, UART_1_STOP_BIT, NO_PARITY, NO_FLO
 209:..//Source/stm/board/board_stm32l151cd/board.c **** 
 210:..//Source/stm/board/board_stm32l151cd/board.c ****                 DelayMs( 1000 ); // 1000 ms for Usb initialization
 211:..//Source/stm/board/board_stm32l151cd/board.c ****             }
 212:..//Source/stm/board/board_stm32l151cd/board.c ****             else
 213:..//Source/stm/board/board_stm32l151cd/board.c ****             {
 214:..//Source/stm/board/board_stm32l151cd/board.c ****                 GpioInit( &ioPin, USB_DM, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 215:..//Source/stm/board/board_stm32l151cd/board.c ****             }
 216:..//Source/stm/board/board_stm32l151cd/board.c ****         }
 217:..//Source/stm/board/board_stm32l151cd/board.c **** #endif
 218:..//Source/stm/board/board_stm32l151cd/board.c ****         BoardUnusedIoInit( );
 219:..//Source/stm/board/board_stm32l151cd/board.c **** 
 220:..//Source/stm/board/board_stm32l151cd/board.c ****         I2cInit( &I2c, I2C_1, I2C_SCL, I2C_SDA );
 221:..//Source/stm/board/board_stm32l151cd/board.c ****     }
 222:..//Source/stm/board/board_stm32l151cd/board.c ****     else
 223:..//Source/stm/board/board_stm32l151cd/board.c ****     {
 224:..//Source/stm/board/board_stm32l151cd/board.c ****         SystemClockReConfig( );
 225:..//Source/stm/board/board_stm32l151cd/board.c ****     }
 226:..//Source/stm/board/board_stm32l151cd/board.c **** 
 227:..//Source/stm/board/board_stm32l151cd/board.c ****     AdcInit( &Adc, BAT_LEVEL_PIN );
 228:..//Source/stm/board/board_stm32l151cd/board.c **** 
 229:..//Source/stm/board/board_stm32l151cd/board.c ****     SpiInit( &SX1276.Spi, SPI_1, RADIO_MOSI, RADIO_MISO, RADIO_SCLK, NC );
 230:..//Source/stm/board/board_stm32l151cd/board.c ****     SX1276IoInit( );
 231:..//Source/stm/board/board_stm32l151cd/board.c **** 
 232:..//Source/stm/board/board_stm32l151cd/board.c ****     if( McuInitialized == false )
 233:..//Source/stm/board/board_stm32l151cd/board.c ****     {
 234:..//Source/stm/board/board_stm32l151cd/board.c ****         McuInitialized = true;
 235:..//Source/stm/board/board_stm32l151cd/board.c ****         if( GetBoardPowerSource( ) == BATTERY_POWER )
 236:..//Source/stm/board/board_stm32l151cd/board.c ****         {
 237:..//Source/stm/board/board_stm32l151cd/board.c ****             CalibrateSystemWakeupTime( );
 238:..//Source/stm/board/board_stm32l151cd/board.c ****         }
ARM GAS  /tmp/ccD3wtrw.s 			page 6


 239:..//Source/stm/board/board_stm32l151cd/board.c ****     }
 240:..//Source/stm/board/board_stm32l151cd/board.c **** }
 241:..//Source/stm/board/board_stm32l151cd/board.c **** 
 242:..//Source/stm/board/board_stm32l151cd/board.c **** void BoardResetMcu( void )
 243:..//Source/stm/board/board_stm32l151cd/board.c **** {
 244:..//Source/stm/board/board_stm32l151cd/board.c ****     BoardDisableIrq( );
 245:..//Source/stm/board/board_stm32l151cd/board.c **** 
 246:..//Source/stm/board/board_stm32l151cd/board.c ****     //Restart system
 247:..//Source/stm/board/board_stm32l151cd/board.c ****     NVIC_SystemReset( );
 248:..//Source/stm/board/board_stm32l151cd/board.c **** 
 249:..//Source/stm/board/board_stm32l151cd/board.c **** }
 250:..//Source/stm/board/board_stm32l151cd/board.c **** 
 251:..//Source/stm/board/board_stm32l151cd/board.c **** void BoardDeInitMcu( void )
 252:..//Source/stm/board/board_stm32l151cd/board.c **** {
 253:..//Source/stm/board/board_stm32l151cd/board.c ****     Gpio_t ioPin;
 254:..//Source/stm/board/board_stm32l151cd/board.c **** 
 255:..//Source/stm/board/board_stm32l151cd/board.c ****     AdcDeInit( &Adc );
 256:..//Source/stm/board/board_stm32l151cd/board.c **** 
 257:..//Source/stm/board/board_stm32l151cd/board.c ****     SpiDeInit( &SX1276.Spi );
 258:..//Source/stm/board/board_stm32l151cd/board.c ****     SX1276IoDeInit( );
 259:..//Source/stm/board/board_stm32l151cd/board.c **** 
 260:..//Source/stm/board/board_stm32l151cd/board.c ****     GpioInit( &ioPin, OSC_HSE_IN, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 261:..//Source/stm/board/board_stm32l151cd/board.c ****     GpioInit( &ioPin, OSC_HSE_OUT, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 262:..//Source/stm/board/board_stm32l151cd/board.c **** 
 263:..//Source/stm/board/board_stm32l151cd/board.c ****     GpioInit( &ioPin, OSC_LSE_IN, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 264:..//Source/stm/board/board_stm32l151cd/board.c ****     GpioInit( &ioPin, OSC_LSE_OUT, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 265:..//Source/stm/board/board_stm32l151cd/board.c **** 
 266:..//Source/stm/board/board_stm32l151cd/board.c ****     GpioInit( &UsbDetect, USB_ON, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 267:..//Source/stm/board/board_stm32l151cd/board.c **** }
 268:..//Source/stm/board/board_stm32l151cd/board.c **** 
 269:..//Source/stm/board/board_stm32l151cd/board.c **** uint32_t BoardGetRandomSeed( void )
 270:..//Source/stm/board/board_stm32l151cd/board.c **** {
 271:..//Source/stm/board/board_stm32l151cd/board.c ****     return ( ( *( uint32_t* )ID1 ) ^ ( *( uint32_t* )ID2 ) ^ ( *( uint32_t* )ID3 ) );
 272:..//Source/stm/board/board_stm32l151cd/board.c **** }
 273:..//Source/stm/board/board_stm32l151cd/board.c **** 
 274:..//Source/stm/board/board_stm32l151cd/board.c **** void BoardGetUniqueId( uint8_t *id )
 275:..//Source/stm/board/board_stm32l151cd/board.c **** {
 276:..//Source/stm/board/board_stm32l151cd/board.c ****     id[7] = ( ( *( uint32_t* )ID1 )+ ( *( uint32_t* )ID3 ) ) >> 24;
 277:..//Source/stm/board/board_stm32l151cd/board.c ****     id[6] = ( ( *( uint32_t* )ID1 )+ ( *( uint32_t* )ID3 ) ) >> 16;
 278:..//Source/stm/board/board_stm32l151cd/board.c ****     id[5] = ( ( *( uint32_t* )ID1 )+ ( *( uint32_t* )ID3 ) ) >> 8;
 279:..//Source/stm/board/board_stm32l151cd/board.c ****     id[4] = ( ( *( uint32_t* )ID1 )+ ( *( uint32_t* )ID3 ) );
 280:..//Source/stm/board/board_stm32l151cd/board.c ****     id[3] = ( ( *( uint32_t* )ID2 ) ) >> 24;
 281:..//Source/stm/board/board_stm32l151cd/board.c ****     id[2] = ( ( *( uint32_t* )ID2 ) ) >> 16;
 282:..//Source/stm/board/board_stm32l151cd/board.c ****     id[1] = ( ( *( uint32_t* )ID2 ) ) >> 8;
 283:..//Source/stm/board/board_stm32l151cd/board.c ****     id[0] = ( ( *( uint32_t* )ID2 ) );
 284:..//Source/stm/board/board_stm32l151cd/board.c **** }
 285:..//Source/stm/board/board_stm32l151cd/board.c **** 
 286:..//Source/stm/board/board_stm32l151cd/board.c **** /*!
 287:..//Source/stm/board/board_stm32l151cd/board.c ****  * Factory power supply
 288:..//Source/stm/board/board_stm32l151cd/board.c ****  */
 289:..//Source/stm/board/board_stm32l151cd/board.c **** #define FACTORY_POWER_SUPPLY                        3300 // mV
 290:..//Source/stm/board/board_stm32l151cd/board.c **** 
 291:..//Source/stm/board/board_stm32l151cd/board.c **** /*!
 292:..//Source/stm/board/board_stm32l151cd/board.c ****  * VREF calibration value
 293:..//Source/stm/board/board_stm32l151cd/board.c ****  */
 294:..//Source/stm/board/board_stm32l151cd/board.c **** #define VREFINT_CAL                                 ( *( uint16_t* )0x1FF80078 )
 295:..//Source/stm/board/board_stm32l151cd/board.c **** 
ARM GAS  /tmp/ccD3wtrw.s 			page 7


 296:..//Source/stm/board/board_stm32l151cd/board.c **** /*!
 297:..//Source/stm/board/board_stm32l151cd/board.c ****  * ADC maximum value
 298:..//Source/stm/board/board_stm32l151cd/board.c ****  */
 299:..//Source/stm/board/board_stm32l151cd/board.c **** #define ADC_MAX_VALUE                               4095
 300:..//Source/stm/board/board_stm32l151cd/board.c **** 
 301:..//Source/stm/board/board_stm32l151cd/board.c **** /*!
 302:..//Source/stm/board/board_stm32l151cd/board.c ****  * Battery thresholds
 303:..//Source/stm/board/board_stm32l151cd/board.c ****  */
 304:..//Source/stm/board/board_stm32l151cd/board.c **** #define BATTERY_MAX_LEVEL                           4150 // mV
 305:..//Source/stm/board/board_stm32l151cd/board.c **** #define BATTERY_MIN_LEVEL                           3200 // mV
 306:..//Source/stm/board/board_stm32l151cd/board.c **** #define BATTERY_SHUTDOWN_LEVEL                      3100 // mV
 307:..//Source/stm/board/board_stm32l151cd/board.c **** 
 308:..//Source/stm/board/board_stm32l151cd/board.c **** static uint16_t BatteryVoltage = BATTERY_MAX_LEVEL;
 309:..//Source/stm/board/board_stm32l151cd/board.c **** 
 310:..//Source/stm/board/board_stm32l151cd/board.c **** uint16_t BoardBatteryMeasureVolage( void )
 311:..//Source/stm/board/board_stm32l151cd/board.c **** {
 312:..//Source/stm/board/board_stm32l151cd/board.c ****     uint16_t vdd = 0;
 313:..//Source/stm/board/board_stm32l151cd/board.c ****     uint16_t vref = VREFINT_CAL;
 314:..//Source/stm/board/board_stm32l151cd/board.c ****     uint16_t vdiv = 0;
 315:..//Source/stm/board/board_stm32l151cd/board.c ****     uint16_t batteryVoltage = 0;
 316:..//Source/stm/board/board_stm32l151cd/board.c **** 
 317:..//Source/stm/board/board_stm32l151cd/board.c ****     vdiv = AdcReadChannel( &Adc, BAT_LEVEL_CHANNEL );
 318:..//Source/stm/board/board_stm32l151cd/board.c ****     //vref = AdcReadChannel( &Adc, ADC_CHANNEL_VREFINT );
 319:..//Source/stm/board/board_stm32l151cd/board.c **** 
 320:..//Source/stm/board/board_stm32l151cd/board.c ****     vdd = ( float )FACTORY_POWER_SUPPLY * ( float )VREFINT_CAL / ( float )vref;
 321:..//Source/stm/board/board_stm32l151cd/board.c ****     batteryVoltage = vdd * ( ( float )vdiv / ( float )ADC_MAX_VALUE );
 322:..//Source/stm/board/board_stm32l151cd/board.c **** 
 323:..//Source/stm/board/board_stm32l151cd/board.c ****     //                                vDiv
 324:..//Source/stm/board/board_stm32l151cd/board.c ****     // Divider bridge  VBAT <-> 470k -<--|-->- 470k <-> GND => vBat = 2 * vDiv
 325:..//Source/stm/board/board_stm32l151cd/board.c ****     batteryVoltage = 2 * batteryVoltage;
 326:..//Source/stm/board/board_stm32l151cd/board.c ****     return batteryVoltage;
 327:..//Source/stm/board/board_stm32l151cd/board.c **** }
 328:..//Source/stm/board/board_stm32l151cd/board.c **** 
 329:..//Source/stm/board/board_stm32l151cd/board.c **** uint32_t BoardGetBatteryVoltage( void )
 330:..//Source/stm/board/board_stm32l151cd/board.c **** {
 331:..//Source/stm/board/board_stm32l151cd/board.c ****     return BatteryVoltage;
 332:..//Source/stm/board/board_stm32l151cd/board.c **** }
 333:..//Source/stm/board/board_stm32l151cd/board.c **** 
 334:..//Source/stm/board/board_stm32l151cd/board.c **** uint8_t BoardGetBatteryLevel( void )
 335:..//Source/stm/board/board_stm32l151cd/board.c **** {
 336:..//Source/stm/board/board_stm32l151cd/board.c ****     uint8_t batteryLevel = 0;
 337:..//Source/stm/board/board_stm32l151cd/board.c **** 
 338:..//Source/stm/board/board_stm32l151cd/board.c ****     BatteryVoltage = BoardBatteryMeasureVolage( );
 339:..//Source/stm/board/board_stm32l151cd/board.c **** 
 340:..//Source/stm/board/board_stm32l151cd/board.c ****     if( GetBoardPowerSource( ) == USB_POWER )
 341:..//Source/stm/board/board_stm32l151cd/board.c ****     {
 342:..//Source/stm/board/board_stm32l151cd/board.c ****         batteryLevel = 0;
 343:..//Source/stm/board/board_stm32l151cd/board.c ****     }
 344:..//Source/stm/board/board_stm32l151cd/board.c ****     else
 345:..//Source/stm/board/board_stm32l151cd/board.c ****     {
 346:..//Source/stm/board/board_stm32l151cd/board.c ****         if( BatteryVoltage >= BATTERY_MAX_LEVEL )
 347:..//Source/stm/board/board_stm32l151cd/board.c ****         {
 348:..//Source/stm/board/board_stm32l151cd/board.c ****             batteryLevel = 254;
 349:..//Source/stm/board/board_stm32l151cd/board.c ****         }
 350:..//Source/stm/board/board_stm32l151cd/board.c ****         else if( ( BatteryVoltage > BATTERY_MIN_LEVEL ) && ( BatteryVoltage < BATTERY_MAX_LEVEL ) )
 351:..//Source/stm/board/board_stm32l151cd/board.c ****         {
 352:..//Source/stm/board/board_stm32l151cd/board.c ****             batteryLevel = ( ( 253 * ( BatteryVoltage - BATTERY_MIN_LEVEL ) ) / ( BATTERY_MAX_LEVEL
ARM GAS  /tmp/ccD3wtrw.s 			page 8


 353:..//Source/stm/board/board_stm32l151cd/board.c ****         }
 354:..//Source/stm/board/board_stm32l151cd/board.c ****         else if( ( BatteryVoltage > BATTERY_SHUTDOWN_LEVEL ) && ( BatteryVoltage <= BATTERY_MIN_LEV
 355:..//Source/stm/board/board_stm32l151cd/board.c ****         {
 356:..//Source/stm/board/board_stm32l151cd/board.c ****             batteryLevel = 1;
 357:..//Source/stm/board/board_stm32l151cd/board.c ****         }
 358:..//Source/stm/board/board_stm32l151cd/board.c ****         else //if( BatteryVoltage <= BATTERY_SHUTDOWN_LEVEL )
 359:..//Source/stm/board/board_stm32l151cd/board.c ****         {
 360:..//Source/stm/board/board_stm32l151cd/board.c ****             batteryLevel = 255;
 361:..//Source/stm/board/board_stm32l151cd/board.c ****             //GpioInit( &DcDcEnable, DC_DC_EN, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 362:..//Source/stm/board/board_stm32l151cd/board.c ****             //GpioInit( &BoardPowerDown, BOARD_POWER_DOWN, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 
 363:..//Source/stm/board/board_stm32l151cd/board.c ****         }
 364:..//Source/stm/board/board_stm32l151cd/board.c ****     }
 365:..//Source/stm/board/board_stm32l151cd/board.c ****     return batteryLevel;
 366:..//Source/stm/board/board_stm32l151cd/board.c **** }
 367:..//Source/stm/board/board_stm32l151cd/board.c **** 
 368:..//Source/stm/board/board_stm32l151cd/board.c **** static void BoardUnusedIoInit( void )
 369:..//Source/stm/board/board_stm32l151cd/board.c **** {
 370:..//Source/stm/board/board_stm32l151cd/board.c ****     Gpio_t ioPin;
 371:..//Source/stm/board/board_stm32l151cd/board.c **** 
 372:..//Source/stm/board/board_stm32l151cd/board.c ****     if( GetBoardPowerSource( ) == BATTERY_POWER )
 373:..//Source/stm/board/board_stm32l151cd/board.c ****     {
 374:..//Source/stm/board/board_stm32l151cd/board.c ****         GpioInit( &ioPin, USB_DM, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 375:..//Source/stm/board/board_stm32l151cd/board.c ****         GpioInit( &ioPin, USB_DP, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 376:..//Source/stm/board/board_stm32l151cd/board.c ****     }
 377:..//Source/stm/board/board_stm32l151cd/board.c **** 
 378:..//Source/stm/board/board_stm32l151cd/board.c ****     GpioInit( &ioPin, TEST_POINT1, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 379:..//Source/stm/board/board_stm32l151cd/board.c ****     GpioInit( &ioPin, TEST_POINT2, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 380:..//Source/stm/board/board_stm32l151cd/board.c ****     GpioInit( &ioPin, TEST_POINT3, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 381:..//Source/stm/board/board_stm32l151cd/board.c ****     GpioInit( &ioPin, TEST_POINT4, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 382:..//Source/stm/board/board_stm32l151cd/board.c **** 
 383:..//Source/stm/board/board_stm32l151cd/board.c ****     GpioInit( &ioPin, PIN_NC, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 384:..//Source/stm/board/board_stm32l151cd/board.c ****     GpioInit( &ioPin, BOOT_1, PIN_ANALOGIC, PIN_OPEN_DRAIN, PIN_NO_PULL, 0 );
 385:..//Source/stm/board/board_stm32l151cd/board.c **** 
 386:..//Source/stm/board/board_stm32l151cd/board.c ****     GpioInit( &ioPin, RF_RXTX, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 387:..//Source/stm/board/board_stm32l151cd/board.c ****     GpioInit( &ioPin, WKUP1, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 388:..//Source/stm/board/board_stm32l151cd/board.c **** 
 389:..//Source/stm/board/board_stm32l151cd/board.c **** #if defined( USE_DEBUGGER )
 390:..//Source/stm/board/board_stm32l151cd/board.c ****     HAL_DBGMCU_EnableDBGStopMode( );
 391:..//Source/stm/board/board_stm32l151cd/board.c ****     HAL_DBGMCU_EnableDBGSleepMode( );
 392:..//Source/stm/board/board_stm32l151cd/board.c ****     HAL_DBGMCU_EnableDBGStandbyMode( );
 393:..//Source/stm/board/board_stm32l151cd/board.c **** #else
 394:..//Source/stm/board/board_stm32l151cd/board.c ****     HAL_DBGMCU_DisableDBGSleepMode( );
 395:..//Source/stm/board/board_stm32l151cd/board.c ****     HAL_DBGMCU_DisableDBGStopMode( );
 396:..//Source/stm/board/board_stm32l151cd/board.c ****     HAL_DBGMCU_DisableDBGStandbyMode( );
 397:..//Source/stm/board/board_stm32l151cd/board.c **** 
 398:..//Source/stm/board/board_stm32l151cd/board.c ****     GpioInit( &ioPin, SWDIO, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 399:..//Source/stm/board/board_stm32l151cd/board.c ****     GpioInit( &ioPin, SWCLK, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 400:..//Source/stm/board/board_stm32l151cd/board.c **** #endif
 401:..//Source/stm/board/board_stm32l151cd/board.c **** }
 402:..//Source/stm/board/board_stm32l151cd/board.c **** 
 403:..//Source/stm/board/board_stm32l151cd/board.c **** void SystemClockConfig( void )
 404:..//Source/stm/board/board_stm32l151cd/board.c **** {
 405:..//Source/stm/board/board_stm32l151cd/board.c ****     RCC_OscInitTypeDef RCC_OscInitStruct;
 406:..//Source/stm/board/board_stm32l151cd/board.c ****     RCC_ClkInitTypeDef RCC_ClkInitStruct;
 407:..//Source/stm/board/board_stm32l151cd/board.c ****     RCC_PeriphCLKInitTypeDef PeriphClkInit;
 408:..//Source/stm/board/board_stm32l151cd/board.c **** 
 409:..//Source/stm/board/board_stm32l151cd/board.c ****     __HAL_RCC_PWR_CLK_ENABLE( );
ARM GAS  /tmp/ccD3wtrw.s 			page 9


 410:..//Source/stm/board/board_stm32l151cd/board.c **** 
 411:..//Source/stm/board/board_stm32l151cd/board.c ****     __HAL_PWR_VOLTAGESCALING_CONFIG( PWR_REGULATOR_VOLTAGE_SCALE1 );
 412:..//Source/stm/board/board_stm32l151cd/board.c **** 
 413:..//Source/stm/board/board_stm32l151cd/board.c ****     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE;
 414:..//Source/stm/board/board_stm32l151cd/board.c ****     RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 415:..//Source/stm/board/board_stm32l151cd/board.c ****     RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 416:..//Source/stm/board/board_stm32l151cd/board.c ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 417:..//Source/stm/board/board_stm32l151cd/board.c ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 418:..//Source/stm/board/board_stm32l151cd/board.c ****     RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 419:..//Source/stm/board/board_stm32l151cd/board.c ****     RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 420:..//Source/stm/board/board_stm32l151cd/board.c ****     if( HAL_RCC_OscConfig( &RCC_OscInitStruct ) != HAL_OK )
 421:..//Source/stm/board/board_stm32l151cd/board.c ****     {
 422:..//Source/stm/board/board_stm32l151cd/board.c ****         assert_param( FAIL );
 423:..//Source/stm/board/board_stm32l151cd/board.c ****     }
 424:..//Source/stm/board/board_stm32l151cd/board.c **** 
 425:..//Source/stm/board/board_stm32l151cd/board.c ****     RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 426:..//Source/stm/board/board_stm32l151cd/board.c ****                                   RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 427:..//Source/stm/board/board_stm32l151cd/board.c ****     RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 428:..//Source/stm/board/board_stm32l151cd/board.c ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 429:..//Source/stm/board/board_stm32l151cd/board.c ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 430:..//Source/stm/board/board_stm32l151cd/board.c ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 431:..//Source/stm/board/board_stm32l151cd/board.c ****     if( HAL_RCC_ClockConfig( &RCC_ClkInitStruct, FLASH_LATENCY_1 ) != HAL_OK )
 432:..//Source/stm/board/board_stm32l151cd/board.c ****     {
 433:..//Source/stm/board/board_stm32l151cd/board.c ****         assert_param( FAIL );
 434:..//Source/stm/board/board_stm32l151cd/board.c ****     }
 435:..//Source/stm/board/board_stm32l151cd/board.c **** 
 436:..//Source/stm/board/board_stm32l151cd/board.c ****     PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 437:..//Source/stm/board/board_stm32l151cd/board.c ****     PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 438:..//Source/stm/board/board_stm32l151cd/board.c ****     if( HAL_RCCEx_PeriphCLKConfig( &PeriphClkInit ) != HAL_OK )
 439:..//Source/stm/board/board_stm32l151cd/board.c ****     {
 440:..//Source/stm/board/board_stm32l151cd/board.c ****         assert_param( FAIL );
 441:..//Source/stm/board/board_stm32l151cd/board.c ****     }
 442:..//Source/stm/board/board_stm32l151cd/board.c **** 
 443:..//Source/stm/board/board_stm32l151cd/board.c ****     HAL_SYSTICK_Config( HAL_RCC_GetHCLKFreq( ) / 1000 );
 444:..//Source/stm/board/board_stm32l151cd/board.c **** 
 445:..//Source/stm/board/board_stm32l151cd/board.c ****     HAL_SYSTICK_CLKSourceConfig( SYSTICK_CLKSOURCE_HCLK );
 446:..//Source/stm/board/board_stm32l151cd/board.c **** 
 447:..//Source/stm/board/board_stm32l151cd/board.c ****     // HAL_NVIC_GetPriorityGrouping
 448:..//Source/stm/board/board_stm32l151cd/board.c ****     HAL_NVIC_SetPriorityGrouping( NVIC_PRIORITYGROUP_4 );
 449:..//Source/stm/board/board_stm32l151cd/board.c **** 
 450:..//Source/stm/board/board_stm32l151cd/board.c ****     // SysTick_IRQn interrupt configuration
 451:..//Source/stm/board/board_stm32l151cd/board.c ****     HAL_NVIC_SetPriority( SysTick_IRQn, 0, 0 );
 452:..//Source/stm/board/board_stm32l151cd/board.c **** }
 453:..//Source/stm/board/board_stm32l151cd/board.c **** 
 454:..//Source/stm/board/board_stm32l151cd/board.c **** void CalibrateSystemWakeupTime( void )
 455:..//Source/stm/board/board_stm32l151cd/board.c **** {
 456:..//Source/stm/board/board_stm32l151cd/board.c ****     if( SystemWakeupTimeCalibrated == false )
 457:..//Source/stm/board/board_stm32l151cd/board.c ****     {
 458:..//Source/stm/board/board_stm32l151cd/board.c ****         TimerInit( &CalibrateSystemWakeupTimeTimer, OnCalibrateSystemWakeupTimeTimerEvent );
 459:..//Source/stm/board/board_stm32l151cd/board.c ****         TimerSetValue( &CalibrateSystemWakeupTimeTimer, 1000 );
 460:..//Source/stm/board/board_stm32l151cd/board.c ****         TimerStart( &CalibrateSystemWakeupTimeTimer );
 461:..//Source/stm/board/board_stm32l151cd/board.c ****         while( SystemWakeupTimeCalibrated == false )
 462:..//Source/stm/board/board_stm32l151cd/board.c ****         {
 463:..//Source/stm/board/board_stm32l151cd/board.c ****             TimerLowPowerHandler( );
 464:..//Source/stm/board/board_stm32l151cd/board.c ****         }
 465:..//Source/stm/board/board_stm32l151cd/board.c ****     }
 466:..//Source/stm/board/board_stm32l151cd/board.c **** }
ARM GAS  /tmp/ccD3wtrw.s 			page 10


 467:..//Source/stm/board/board_stm32l151cd/board.c **** 
 468:..//Source/stm/board/board_stm32l151cd/board.c **** void SystemClockReConfig( void )
 469:..//Source/stm/board/board_stm32l151cd/board.c **** {
  51              		.loc 1 469 0
  52              		.cfi_startproc
  53              		@ args = 0, pretend = 0, frame = 8
  54              		@ frame_needed = 0, uses_anonymous_args = 0
  55              		@ link register save eliminated.
  56 0000 82B0     		sub	sp, sp, #8
  57              	.LCFI0:
  58              		.cfi_def_cfa_offset 8
  59              	.LBB10:
 470:..//Source/stm/board/board_stm32l151cd/board.c ****     __HAL_RCC_PWR_CLK_ENABLE( );
  60              		.loc 1 470 0
  61 0002 174B     		ldr	r3, .L9
  62 0004 5A6A     		ldr	r2, [r3, #36]
  63 0006 42F08052 		orr	r2, r2, #268435456
  64 000a 5A62     		str	r2, [r3, #36]
  65 000c 5A6A     		ldr	r2, [r3, #36]
  66 000e 02F08052 		and	r2, r2, #268435456
  67 0012 0192     		str	r2, [sp, #4]
  68 0014 019A     		ldr	r2, [sp, #4]
  69              	.LBE10:
 471:..//Source/stm/board/board_stm32l151cd/board.c ****     __HAL_PWR_VOLTAGESCALING_CONFIG( PWR_REGULATOR_VOLTAGE_SCALE1 );
  70              		.loc 1 471 0
  71 0016 1349     		ldr	r1, .L9+4
  72 0018 0A68     		ldr	r2, [r1]
  73 001a 22F4C052 		bic	r2, r2, #6144
  74 001e 42F40062 		orr	r2, r2, #2048
  75 0022 0A60     		str	r2, [r1]
 472:..//Source/stm/board/board_stm32l151cd/board.c **** 
 473:..//Source/stm/board/board_stm32l151cd/board.c ****     /* Enable HSE */
 474:..//Source/stm/board/board_stm32l151cd/board.c ****     __HAL_RCC_HSE_CONFIG( RCC_HSE_ON );
  76              		.loc 1 474 0
  77 0024 1A68     		ldr	r2, [r3]
  78 0026 42F48032 		orr	r2, r2, #65536
  79 002a 1A60     		str	r2, [r3]
  80              	.L5:
 475:..//Source/stm/board/board_stm32l151cd/board.c **** 
 476:..//Source/stm/board/board_stm32l151cd/board.c ****     /* Wait till HSE is ready */
 477:..//Source/stm/board/board_stm32l151cd/board.c ****     while( __HAL_RCC_GET_FLAG( RCC_FLAG_HSERDY ) == RESET )
  81              		.loc 1 477 0 discriminator 1
  82 002c 0C4B     		ldr	r3, .L9
  83 002e 1B68     		ldr	r3, [r3]
  84 0030 13F4003F 		tst	r3, #131072
  85 0034 FAD0     		beq	.L5
 478:..//Source/stm/board/board_stm32l151cd/board.c ****     {
 479:..//Source/stm/board/board_stm32l151cd/board.c ****     }
 480:..//Source/stm/board/board_stm32l151cd/board.c **** 
 481:..//Source/stm/board/board_stm32l151cd/board.c ****     /* Enable PLL */
 482:..//Source/stm/board/board_stm32l151cd/board.c ****     __HAL_RCC_PLL_ENABLE( );
  86              		.loc 1 482 0
  87 0036 0122     		movs	r2, #1
  88 0038 0B4B     		ldr	r3, .L9+8
  89 003a 1A60     		str	r2, [r3]
  90              	.L6:
 483:..//Source/stm/board/board_stm32l151cd/board.c **** 
ARM GAS  /tmp/ccD3wtrw.s 			page 11


 484:..//Source/stm/board/board_stm32l151cd/board.c ****     /* Wait till PLL is ready */
 485:..//Source/stm/board/board_stm32l151cd/board.c ****     while( __HAL_RCC_GET_FLAG( RCC_FLAG_PLLRDY ) == RESET )
  91              		.loc 1 485 0 discriminator 1
  92 003c 084B     		ldr	r3, .L9
  93 003e 1B68     		ldr	r3, [r3]
  94 0040 13F0007F 		tst	r3, #33554432
  95 0044 FAD0     		beq	.L6
 486:..//Source/stm/board/board_stm32l151cd/board.c ****     {
 487:..//Source/stm/board/board_stm32l151cd/board.c ****     }
 488:..//Source/stm/board/board_stm32l151cd/board.c **** 
 489:..//Source/stm/board/board_stm32l151cd/board.c ****     /* Select PLL as system clock source */
 490:..//Source/stm/board/board_stm32l151cd/board.c ****     __HAL_RCC_SYSCLK_CONFIG ( RCC_SYSCLKSOURCE_PLLCLK );
  96              		.loc 1 490 0
  97 0046 064A     		ldr	r2, .L9
  98 0048 9368     		ldr	r3, [r2, #8]
  99 004a 43F00303 		orr	r3, r3, #3
 100 004e 9360     		str	r3, [r2, #8]
 101              	.L7:
 491:..//Source/stm/board/board_stm32l151cd/board.c **** 
 492:..//Source/stm/board/board_stm32l151cd/board.c ****     /* Wait till PLL is used as system clock source */
 493:..//Source/stm/board/board_stm32l151cd/board.c ****     while( __HAL_RCC_GET_SYSCLK_SOURCE( ) != RCC_SYSCLKSOURCE_STATUS_PLLCLK )
 102              		.loc 1 493 0 discriminator 1
 103 0050 034B     		ldr	r3, .L9
 104 0052 9B68     		ldr	r3, [r3, #8]
 105 0054 03F00C03 		and	r3, r3, #12
 106 0058 0C2B     		cmp	r3, #12
 107 005a F9D1     		bne	.L7
 494:..//Source/stm/board/board_stm32l151cd/board.c ****     {
 495:..//Source/stm/board/board_stm32l151cd/board.c ****     }
 496:..//Source/stm/board/board_stm32l151cd/board.c **** }
 108              		.loc 1 496 0
 109 005c 02B0     		add	sp, sp, #8
 110              	.LCFI1:
 111              		.cfi_def_cfa_offset 0
 112              		@ sp needed
 113 005e 7047     		bx	lr
 114              	.L10:
 115              		.align	2
 116              	.L9:
 117 0060 00380240 		.word	1073887232
 118 0064 00700040 		.word	1073770496
 119 0068 60004742 		.word	1111949408
 120              		.cfi_endproc
 121              	.LFE86:
 123              		.section	.text.SystemClockConfig,"ax",%progbits
 124              		.align	1
 125              		.syntax unified
 126              		.thumb
 127              		.thumb_func
 128              		.fpu softvfp
 130              	SystemClockConfig:
 131              	.LFB84:
 404:..//Source/stm/board/board_stm32l151cd/board.c ****     RCC_OscInitTypeDef RCC_OscInitStruct;
 132              		.loc 1 404 0
 133              		.cfi_startproc
 134              		@ args = 0, pretend = 0, frame = 88
 135              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccD3wtrw.s 			page 12


 136 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 137              	.LCFI2:
 138              		.cfi_def_cfa_offset 20
 139              		.cfi_offset 4, -20
 140              		.cfi_offset 5, -16
 141              		.cfi_offset 6, -12
 142              		.cfi_offset 7, -8
 143              		.cfi_offset 14, -4
 144 0002 97B0     		sub	sp, sp, #92
 145              	.LCFI3:
 146              		.cfi_def_cfa_offset 112
 147              	.LBB11:
 409:..//Source/stm/board/board_stm32l151cd/board.c **** 
 148              		.loc 1 409 0
 149 0004 254B     		ldr	r3, .L13
 150 0006 5A6A     		ldr	r2, [r3, #36]
 151 0008 42F08052 		orr	r2, r2, #268435456
 152 000c 5A62     		str	r2, [r3, #36]
 153 000e 5B6A     		ldr	r3, [r3, #36]
 154 0010 03F08053 		and	r3, r3, #268435456
 155 0014 0193     		str	r3, [sp, #4]
 156 0016 019B     		ldr	r3, [sp, #4]
 157              	.LBE11:
 411:..//Source/stm/board/board_stm32l151cd/board.c **** 
 158              		.loc 1 411 0
 159 0018 214A     		ldr	r2, .L13+4
 160 001a 1368     		ldr	r3, [r2]
 161 001c 23F4C053 		bic	r3, r3, #6144
 162 0020 43F40063 		orr	r3, r3, #2048
 163 0024 1360     		str	r3, [r2]
 413:..//Source/stm/board/board_stm32l151cd/board.c ****     RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 164              		.loc 1 413 0
 165 0026 0523     		movs	r3, #5
 166 0028 0993     		str	r3, [sp, #36]
 414:..//Source/stm/board/board_stm32l151cd/board.c ****     RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 167              		.loc 1 414 0
 168 002a 0125     		movs	r5, #1
 169 002c 0A95     		str	r5, [sp, #40]
 415:..//Source/stm/board/board_stm32l151cd/board.c ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 170              		.loc 1 415 0
 171 002e 0B95     		str	r5, [sp, #44]
 416:..//Source/stm/board/board_stm32l151cd/board.c ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 172              		.loc 1 416 0
 173 0030 0223     		movs	r3, #2
 174 0032 1293     		str	r3, [sp, #72]
 417:..//Source/stm/board/board_stm32l151cd/board.c ****     RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 175              		.loc 1 417 0
 176 0034 4FF48037 		mov	r7, #65536
 177 0038 1397     		str	r7, [sp, #76]
 418:..//Source/stm/board/board_stm32l151cd/board.c ****     RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 178              		.loc 1 418 0
 179 003a 4FF44023 		mov	r3, #786432
 180 003e 1493     		str	r3, [sp, #80]
 419:..//Source/stm/board/board_stm32l151cd/board.c ****     if( HAL_RCC_OscConfig( &RCC_OscInitStruct ) != HAL_OK )
 181              		.loc 1 419 0
 182 0040 4FF40003 		mov	r3, #8388608
 183 0044 1593     		str	r3, [sp, #84]
ARM GAS  /tmp/ccD3wtrw.s 			page 13


 420:..//Source/stm/board/board_stm32l151cd/board.c ****     {
 184              		.loc 1 420 0
 185 0046 09A8     		add	r0, sp, #36
 186 0048 FFF7FEFF 		bl	HAL_RCC_OscConfig
 187              	.LVL0:
 425:..//Source/stm/board/board_stm32l151cd/board.c ****                                   RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 188              		.loc 1 425 0
 189 004c 0F23     		movs	r3, #15
 190 004e 0493     		str	r3, [sp, #16]
 427:..//Source/stm/board/board_stm32l151cd/board.c ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 191              		.loc 1 427 0
 192 0050 0326     		movs	r6, #3
 193 0052 0596     		str	r6, [sp, #20]
 428:..//Source/stm/board/board_stm32l151cd/board.c ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 194              		.loc 1 428 0
 195 0054 0024     		movs	r4, #0
 196 0056 0694     		str	r4, [sp, #24]
 429:..//Source/stm/board/board_stm32l151cd/board.c ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 197              		.loc 1 429 0
 198 0058 0794     		str	r4, [sp, #28]
 430:..//Source/stm/board/board_stm32l151cd/board.c ****     if( HAL_RCC_ClockConfig( &RCC_ClkInitStruct, FLASH_LATENCY_1 ) != HAL_OK )
 199              		.loc 1 430 0
 200 005a 0894     		str	r4, [sp, #32]
 431:..//Source/stm/board/board_stm32l151cd/board.c ****     {
 201              		.loc 1 431 0
 202 005c 2946     		mov	r1, r5
 203 005e 04A8     		add	r0, sp, #16
 204 0060 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 205              	.LVL1:
 436:..//Source/stm/board/board_stm32l151cd/board.c ****     PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 206              		.loc 1 436 0
 207 0064 0295     		str	r5, [sp, #8]
 437:..//Source/stm/board/board_stm32l151cd/board.c ****     if( HAL_RCCEx_PeriphCLKConfig( &PeriphClkInit ) != HAL_OK )
 208              		.loc 1 437 0
 209 0066 0397     		str	r7, [sp, #12]
 438:..//Source/stm/board/board_stm32l151cd/board.c ****     {
 210              		.loc 1 438 0
 211 0068 02A8     		add	r0, sp, #8
 212 006a FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 213              	.LVL2:
 443:..//Source/stm/board/board_stm32l151cd/board.c **** 
 214              		.loc 1 443 0
 215 006e FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 216              	.LVL3:
 217 0072 0C4B     		ldr	r3, .L13+8
 218 0074 A3FB0030 		umull	r3, r0, r3, r0
 219 0078 8009     		lsrs	r0, r0, #6
 220 007a FFF7FEFF 		bl	HAL_SYSTICK_Config
 221              	.LVL4:
 445:..//Source/stm/board/board_stm32l151cd/board.c **** 
 222              		.loc 1 445 0
 223 007e 0420     		movs	r0, #4
 224 0080 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 225              	.LVL5:
 448:..//Source/stm/board/board_stm32l151cd/board.c **** 
 226              		.loc 1 448 0
 227 0084 3046     		mov	r0, r6
ARM GAS  /tmp/ccD3wtrw.s 			page 14


 228 0086 FFF7FEFF 		bl	HAL_NVIC_SetPriorityGrouping
 229              	.LVL6:
 451:..//Source/stm/board/board_stm32l151cd/board.c **** }
 230              		.loc 1 451 0
 231 008a 2246     		mov	r2, r4
 232 008c 2146     		mov	r1, r4
 233 008e 4FF0FF30 		mov	r0, #-1
 234 0092 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 235              	.LVL7:
 452:..//Source/stm/board/board_stm32l151cd/board.c **** 
 236              		.loc 1 452 0
 237 0096 17B0     		add	sp, sp, #92
 238              	.LCFI4:
 239              		.cfi_def_cfa_offset 20
 240              		@ sp needed
 241 0098 F0BD     		pop	{r4, r5, r6, r7, pc}
 242              	.L14:
 243 009a 00BF     		.align	2
 244              	.L13:
 245 009c 00380240 		.word	1073887232
 246 00a0 00700040 		.word	1073770496
 247 00a4 D34D6210 		.word	274877907
 248              		.cfi_endproc
 249              	.LFE84:
 251              		.section	.text.CalibrateSystemWakeupTime,"ax",%progbits
 252              		.align	1
 253              		.syntax unified
 254              		.thumb
 255              		.thumb_func
 256              		.fpu softvfp
 258              	CalibrateSystemWakeupTime:
 259              	.LFB85:
 455:..//Source/stm/board/board_stm32l151cd/board.c ****     if( SystemWakeupTimeCalibrated == false )
 260              		.loc 1 455 0
 261              		.cfi_startproc
 262              		@ args = 0, pretend = 0, frame = 0
 263              		@ frame_needed = 0, uses_anonymous_args = 0
 456:..//Source/stm/board/board_stm32l151cd/board.c ****     {
 264              		.loc 1 456 0
 265 0000 0C4B     		ldr	r3, .L24
 266 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 267 0004 03B1     		cbz	r3, .L23
 268 0006 7047     		bx	lr
 269              	.L23:
 455:..//Source/stm/board/board_stm32l151cd/board.c ****     if( SystemWakeupTimeCalibrated == false )
 270              		.loc 1 455 0
 271 0008 10B5     		push	{r4, lr}
 272              	.LCFI5:
 273              		.cfi_def_cfa_offset 8
 274              		.cfi_offset 4, -8
 275              		.cfi_offset 14, -4
 458:..//Source/stm/board/board_stm32l151cd/board.c ****         TimerSetValue( &CalibrateSystemWakeupTimeTimer, 1000 );
 276              		.loc 1 458 0
 277 000a 0B4C     		ldr	r4, .L24+4
 278 000c 0B49     		ldr	r1, .L24+8
 279 000e 2046     		mov	r0, r4
 280 0010 FFF7FEFF 		bl	TimerInit
ARM GAS  /tmp/ccD3wtrw.s 			page 15


 281              	.LVL8:
 459:..//Source/stm/board/board_stm32l151cd/board.c ****         TimerStart( &CalibrateSystemWakeupTimeTimer );
 282              		.loc 1 459 0
 283 0014 4FF47A71 		mov	r1, #1000
 284 0018 2046     		mov	r0, r4
 285 001a FFF7FEFF 		bl	TimerSetValue
 286              	.LVL9:
 460:..//Source/stm/board/board_stm32l151cd/board.c ****         while( SystemWakeupTimeCalibrated == false )
 287              		.loc 1 460 0
 288 001e 2046     		mov	r0, r4
 289 0020 FFF7FEFF 		bl	TimerStart
 290              	.LVL10:
 461:..//Source/stm/board/board_stm32l151cd/board.c ****         {
 291              		.loc 1 461 0
 292 0024 01E0     		b	.L17
 293              	.L18:
 463:..//Source/stm/board/board_stm32l151cd/board.c ****         }
 294              		.loc 1 463 0
 295 0026 FFF7FEFF 		bl	TimerLowPowerHandler
 296              	.LVL11:
 297              	.L17:
 461:..//Source/stm/board/board_stm32l151cd/board.c ****         {
 298              		.loc 1 461 0
 299 002a 024B     		ldr	r3, .L24
 300 002c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 301 002e 002B     		cmp	r3, #0
 302 0030 F9D0     		beq	.L18
 303 0032 10BD     		pop	{r4, pc}
 304              	.L25:
 305              		.align	2
 306              	.L24:
 307 0034 00000000 		.word	.LANCHOR0
 308 0038 00000000 		.word	.LANCHOR1
 309 003c 00000000 		.word	OnCalibrateSystemWakeupTimeTimerEvent
 310              		.cfi_endproc
 311              	.LFE85:
 313              		.section	.text.BoardDisableIrq,"ax",%progbits
 314              		.align	1
 315              		.global	BoardDisableIrq
 316              		.syntax unified
 317              		.thumb
 318              		.thumb_func
 319              		.fpu softvfp
 321              	BoardDisableIrq:
 322              	.LFB73:
 124:..//Source/stm/board/board_stm32l151cd/board.c ****     __disable_irq( );
 323              		.loc 1 124 0
 324              		.cfi_startproc
 325              		@ args = 0, pretend = 0, frame = 0
 326              		@ frame_needed = 0, uses_anonymous_args = 0
 327              		@ link register save eliminated.
 328              	.LBB12:
 329              	.LBB13:
 330              		.file 2 "..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h"
   1:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
ARM GAS  /tmp/ccD3wtrw.s 			page 16


   4:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /*
   8:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  *
  10:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  *
  12:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  *
  16:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  *
  18:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
  24:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
  25:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
  28:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
  34:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
  38:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
  39:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
  43:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
  46:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
  49:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
  55:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
  58:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccD3wtrw.s 			page 17


  61:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
  64:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
  67:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
  70:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
  78:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
  86:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
  94:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 102:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 110:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 113:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 116:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 117:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccD3wtrw.s 			page 18


 118:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   @{
 122:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 123:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 124:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 125:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 129:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 131:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 133:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 134:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 135:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 136:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 140:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 142:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 331              		.loc 2 142 0
 332              		.syntax unified
 333              	@ 142 "..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h" 1
 334 0000 72B6     		cpsid i
 335              	@ 0 "" 2
 336              		.thumb
 337              		.syntax unified
 338              	.LBE13:
 339              	.LBE12:
 126:..//Source/stm/board/board_stm32l151cd/board.c **** }
 340              		.loc 1 126 0
 341 0002 024A     		ldr	r2, .L27
 342 0004 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 343 0006 0133     		adds	r3, r3, #1
 344 0008 1370     		strb	r3, [r2]
 345 000a 7047     		bx	lr
 346              	.L28:
 347              		.align	2
 348              	.L27:
 349 000c 00000000 		.word	.LANCHOR2
 350              		.cfi_endproc
 351              	.LFE73:
 353              		.section	.text.BoardEnableIrq,"ax",%progbits
 354              		.align	1
 355              		.global	BoardEnableIrq
 356              		.syntax unified
 357              		.thumb
 358              		.thumb_func
 359              		.fpu softvfp
 361              	BoardEnableIrq:
 362              	.LFB74:
 130:..//Source/stm/board/board_stm32l151cd/board.c ****     IrqNestLevel--;
ARM GAS  /tmp/ccD3wtrw.s 			page 19


 363              		.loc 1 130 0
 364              		.cfi_startproc
 365              		@ args = 0, pretend = 0, frame = 0
 366              		@ frame_needed = 0, uses_anonymous_args = 0
 367              		@ link register save eliminated.
 131:..//Source/stm/board/board_stm32l151cd/board.c ****     if( IrqNestLevel == 0 )
 368              		.loc 1 131 0
 369 0000 034A     		ldr	r2, .L31
 370 0002 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 371 0004 013B     		subs	r3, r3, #1
 372 0006 DBB2     		uxtb	r3, r3
 373 0008 1370     		strb	r3, [r2]
 132:..//Source/stm/board/board_stm32l151cd/board.c ****     {
 374              		.loc 1 132 0
 375 000a 03B9     		cbnz	r3, .L29
 376              	.LBB14:
 377              	.LBB15:
 131:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 378              		.loc 2 131 0
 379              		.syntax unified
 380              	@ 131 "..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h" 1
 381 000c 62B6     		cpsie i
 382              	@ 0 "" 2
 383              		.thumb
 384              		.syntax unified
 385              	.L29:
 386 000e 7047     		bx	lr
 387              	.L32:
 388              		.align	2
 389              	.L31:
 390 0010 00000000 		.word	.LANCHOR2
 391              	.LBE15:
 392              	.LBE14:
 393              		.cfi_endproc
 394              	.LFE74:
 396              		.section	.text.BoardResetMcu,"ax",%progbits
 397              		.align	1
 398              		.global	BoardResetMcu
 399              		.syntax unified
 400              		.thumb
 401              		.thumb_func
 402              		.fpu softvfp
 404              	BoardResetMcu:
 405              	.LFB76:
 243:..//Source/stm/board/board_stm32l151cd/board.c ****     BoardDisableIrq( );
 406              		.loc 1 243 0
 407              		.cfi_startproc
 408              		@ Volatile: function does not return.
 409              		@ args = 0, pretend = 0, frame = 0
 410              		@ frame_needed = 0, uses_anonymous_args = 0
 411 0000 08B5     		push	{r3, lr}
 412              	.LCFI6:
 413              		.cfi_def_cfa_offset 8
 414              		.cfi_offset 3, -8
 415              		.cfi_offset 14, -4
 244:..//Source/stm/board/board_stm32l151cd/board.c **** 
 416              		.loc 1 244 0
ARM GAS  /tmp/ccD3wtrw.s 			page 20


 417 0002 FFF7FEFF 		bl	BoardDisableIrq
 418              	.LVL12:
 419              	.LBB22:
 420              	.LBB23:
 421              	.LBB24:
 422              	.LBB25:
 143:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 144:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 145:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 146:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 147:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 150:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 151:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 153:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 154:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 155:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 157:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 158:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 159:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 160:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 162:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 166:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 168:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 169:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 170:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 172:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 173:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 174:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 175:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 176:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 177:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 181:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 183:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 185:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 186:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 187:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 189:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 193:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
ARM GAS  /tmp/ccD3wtrw.s 			page 21


 194:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 195:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 197:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 198:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 199:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 200:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 201:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 205:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 207:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 208:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 209:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 211:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 212:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 213:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 214:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 215:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 219:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 221:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 222:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 223:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 225:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 226:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 227:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 228:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 229:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 233:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 235:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 237:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 240:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 241:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 242:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 243:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 247:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 249:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 250:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccD3wtrw.s 			page 22


 251:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 253:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 254:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 255:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 256:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 258:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 262:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 264:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 265:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 266:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 268:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 269:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 270:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 271:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 272:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 273:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 277:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 279:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 281:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 282:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 283:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 285:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 289:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 291:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 293:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 294:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 295:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 296:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 297:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 301:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 303:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 304:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 305:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 307:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccD3wtrw.s 			page 23


 308:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 309:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 310:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 312:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 316:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 318:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 319:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 320:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 322:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 323:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 324:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 325:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 326:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 327:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 331:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 333:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 335:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 336:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 337:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 339:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 343:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 345:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 347:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 348:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 349:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 350:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 352:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 355:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 356:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 358:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 359:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 360:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 362:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 363:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 364:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccD3wtrw.s 			page 24


 365:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 366:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 370:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 372:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 374:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 375:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 376:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 377:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 378:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 382:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 384:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 385:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 386:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 388:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 389:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 390:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 391:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 393:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 397:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 399:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 400:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 401:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 403:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 404:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 405:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 406:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 407:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 408:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 412:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 414:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 416:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 417:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 418:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 420:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
ARM GAS  /tmp/ccD3wtrw.s 			page 25


 422:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 424:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 426:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 428:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 429:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 430:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 431:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 435:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 439:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 441:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 443:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 444:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 445:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 446:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 450:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 452:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 454:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 455:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 456:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 457:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 461:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 463:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 464:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 465:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 467:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 468:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 469:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 470:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 472:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 475:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 476:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 478:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
ARM GAS  /tmp/ccD3wtrw.s 			page 26


 479:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 480:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 482:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 483:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 484:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 485:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 486:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 487:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 491:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 493:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 495:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 496:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 497:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 499:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 503:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 505:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 507:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 508:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 509:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 510:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 511:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 516:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 518:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 520:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 521:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 522:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 523:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 524:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 526:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 527:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 529:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 530:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 531:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 533:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 534:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 535:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccD3wtrw.s 			page 27


 536:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 538:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 541:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 542:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 544:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 545:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 546:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 548:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 549:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 550:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 551:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 552:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 553:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 554:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 557:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 559:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 560:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 561:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 562:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 563:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 564:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 565:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 567:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 568:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 569:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 571:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 573:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 574:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 575:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 576:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 577:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 579:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 580:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 583:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 584:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 585:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 586:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 587:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   mode.
 588:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   
 589:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 590:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 591:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 592:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
ARM GAS  /tmp/ccD3wtrw.s 			page 28


 593:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 594:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 595:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 596:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 597:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 598:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 599:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 600:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 601:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return result;
 602:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 603:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 604:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 605:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 606:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 607:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 608:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 609:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 610:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 611:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 612:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 613:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 614:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 615:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 616:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 617:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 618:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 619:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 620:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 621:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 622:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return result;
 623:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 624:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 625:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 626:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 627:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 628:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 629:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 630:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 631:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 632:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   mode.
 633:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   
 634:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 635:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 636:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 637:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 638:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 639:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 640:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 641:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 642:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 643:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 644:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 645:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 646:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 647:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 648:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 649:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
ARM GAS  /tmp/ccD3wtrw.s 			page 29


 650:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 651:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 652:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 654:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 655:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 656:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 657:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 658:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 659:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 660:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 661:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 662:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 663:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 664:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 665:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 666:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 667:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 668:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 669:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 670:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 671:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 672:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 673:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 674:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   mode.
 675:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 676:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 677:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 678:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 679:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 680:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 681:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 682:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 683:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 684:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 685:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 686:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 687:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 688:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return result;
 689:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 690:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 691:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 692:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 693:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 694:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 695:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 696:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 697:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 698:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 699:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 700:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 701:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 702:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 703:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 704:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 705:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 706:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return 0U;
ARM GAS  /tmp/ccD3wtrw.s 			page 30


 707:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 708:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 709:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 710:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return result;
 711:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 712:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 713:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 714:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 715:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 716:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 717:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 718:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 719:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 720:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   mode.
 721:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 722:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 723:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 724:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 725:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 726:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 727:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 728:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 729:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 730:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 731:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 732:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 733:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 734:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 735:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 736:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 737:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 738:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 739:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 740:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 741:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 742:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 743:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 744:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 745:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 746:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 747:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 748:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 749:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 750:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 751:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 752:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 753:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 754:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 755:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 756:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 757:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 758:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 759:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 760:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 761:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 762:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 763:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
ARM GAS  /tmp/ccD3wtrw.s 			page 31


 764:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 765:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 766:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 767:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 768:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 769:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 770:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 771:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 772:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 773:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 774:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 775:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 776:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 777:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 778:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 779:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 780:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 781:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 782:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 783:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 784:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 785:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 786:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 787:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 788:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 789:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 790:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 791:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 792:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 793:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 794:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 795:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 796:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 797:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 798:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 799:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 800:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 801:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 802:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 803:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 804:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 805:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 806:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 807:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 808:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 809:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 810:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 811:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 812:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 813:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 814:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 815:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 816:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   @{
 817:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** */
 818:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 819:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 820:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
ARM GAS  /tmp/ccD3wtrw.s 			page 32


 821:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 822:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 823:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 824:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 825:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 826:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 827:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 828:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 829:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 830:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 831:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 832:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 833:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 834:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 835:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 836:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 837:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 838:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 839:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 840:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 841:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 842:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 843:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 844:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 845:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 846:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 847:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 848:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 849:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 850:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 851:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 852:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 853:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 854:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 855:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 856:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 857:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 858:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 859:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 860:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 861:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 862:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 863:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 864:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 865:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 866:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 867:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 868:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 869:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 870:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 871:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 872:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 873:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 874:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 875:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 876:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 877:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
ARM GAS  /tmp/ccD3wtrw.s 			page 33


 878:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 879:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 423              		.loc 2 879 0
 424              		.syntax unified
 425              	@ 879 "..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h" 1
 426 0006 BFF34F8F 		dsb 0xF
 427              	@ 0 "" 2
 428              		.thumb
 429              		.syntax unified
 430              	.LBE25:
 431              	.LBE24:
 432              		.file 3 "..//Source/stm/lib/CMSIS/Include/core_cm3.h"
   1:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**************************************************************************//**
   2:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  * @file     core_cm3.h
   3:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  * @version  V5.0.8
   5:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  * @date     04. June 2018
   6:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  ******************************************************************************/
   7:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /*
   8:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  *
  10:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  * SPDX-License-Identifier: Apache-2.0
  11:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  *
  12:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  * not use this file except in compliance with the License.
  14:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  * You may obtain a copy of the License at
  15:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  *
  16:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  *
  18:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  * Unless required by applicable law or agreed to in writing, software
  19:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  * See the License for the specific language governing permissions and
  22:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  * limitations under the License.
  23:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
  24:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
  25:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #if   defined ( __ICCARM__ )
  26:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #elif defined (__clang__)
  28:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #pragma clang system_header   /* treat file as system include file */
  29:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #endif
  30:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
  31:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #ifndef __CORE_CM3_H_GENERIC
  32:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define __CORE_CM3_H_GENERIC
  33:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
  34:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #include <stdint.h>
  35:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
  36:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #ifdef __cplusplus
  37:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  extern "C" {
  38:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #endif
  39:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
  40:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
  41:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
  44:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****      Function definitions in header files are used to allow 'inlining'.
ARM GAS  /tmp/ccD3wtrw.s 			page 34


  46:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
  47:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****      Unions are used for effective representation of core registers.
  49:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
  50:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****      Function-like macros are used to allow more efficient code.
  52:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
  53:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
  54:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
  55:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /*******************************************************************************
  56:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  *                 CMSIS definitions
  57:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  ******************************************************************************/
  58:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
  59:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \ingroup Cortex_M3
  60:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   @{
  61:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
  62:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
  63:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #include "cmsis_version.h"
  64:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
  65:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /*  CMSIS CM3 definitions */
  66:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16U) | \
  69:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****                                     __CM3_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
  71:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define __CORTEX_M                (3U)                                   /*!< Cortex-M Core */
  72:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
  73:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     This core does not support an FPU at all
  75:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** */
  76:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define __FPU_USED       0U
  77:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
  78:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #if defined ( __CC_ARM )
  79:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #if defined __TARGET_FPU_VFP
  80:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #endif
  82:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
  83:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #if defined __ARM_PCS_VFP
  85:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #endif
  87:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
  88:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #elif defined ( __GNUC__ )
  89:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #endif
  92:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
  93:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #elif defined ( __ICCARM__ )
  94:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #if defined __ARMVFP__
  95:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #endif
  97:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
  98:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #elif defined ( __TI_ARM__ )
  99:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #if defined __TI_VFP_SUPPORT__
 100:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #endif
 102:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccD3wtrw.s 			page 35


 103:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #elif defined ( __TASKING__ )
 104:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #if defined __FPU_VFP__
 105:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #endif
 107:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 108:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #elif defined ( __CSMC__ )
 109:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #if ( __CSMC__ & 0x400U)
 110:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #endif
 112:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 113:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #endif
 114:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 115:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 117:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 118:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #ifdef __cplusplus
 119:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** }
 120:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #endif
 121:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 122:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #endif /* __CORE_CM3_H_GENERIC */
 123:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 124:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #ifndef __CMSIS_GENERIC
 125:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 126:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #ifndef __CORE_CM3_H_DEPENDANT
 127:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define __CORE_CM3_H_DEPENDANT
 128:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 129:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #ifdef __cplusplus
 130:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  extern "C" {
 131:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #endif
 132:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 133:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* check device defines and use defaults */
 134:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #if defined __CHECK_DEVICE_DEFINES
 135:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #ifndef __CM3_REV
 136:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     #define __CM3_REV               0x0200U
 137:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     #warning "__CM3_REV not defined in device header file; using default!"
 138:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #endif
 139:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 140:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #ifndef __MPU_PRESENT
 141:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     #define __MPU_PRESENT             0U
 142:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 143:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #endif
 144:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 145:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #ifndef __NVIC_PRIO_BITS
 146:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     #define __NVIC_PRIO_BITS          3U
 147:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 148:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #endif
 149:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 150:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #ifndef __Vendor_SysTickConfig
 151:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     #define __Vendor_SysTickConfig    0U
 152:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 153:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #endif
 154:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #endif
 155:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 156:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* IO definitions (access restrictions to peripheral registers) */
 157:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
 158:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 159:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccD3wtrw.s 			page 36


 160:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     <strong>IO Type Qualifiers</strong> are used
 161:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     \li to specify the access to peripheral variables.
 162:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     \li for automatic generation of peripheral register debug information.
 163:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** */
 164:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #ifdef __cplusplus
 165:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 166:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #else
 167:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 168:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #endif
 169:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 170:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 171:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 172:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* following defines should be used for structure members */
 173:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 174:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 175:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 176:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 177:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /*@} end of group Cortex_M3 */
 178:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 179:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 180:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 181:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /*******************************************************************************
 182:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  *                 Register Abstraction
 183:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   Core Register contain:
 184:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   - Core Register
 185:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   - Core NVIC Register
 186:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   - Core SCB Register
 187:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   - Core SysTick Register
 188:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   - Core Debug Register
 189:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   - Core MPU Register
 190:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  ******************************************************************************/
 191:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
 192:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 193:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 194:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** */
 195:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 196:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
 197:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \ingroup    CMSIS_core_register
 198:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 199:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief      Core Register type definitions.
 200:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   @{
 201:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
 202:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 203:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
 204:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 205:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
 206:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** typedef union
 207:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
 208:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   struct
 209:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   {
 210:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved */
 211:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 212:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 213:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 214:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 215:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 216:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access */
ARM GAS  /tmp/ccD3wtrw.s 			page 37


 217:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access */
 218:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** } APSR_Type;
 219:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 220:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* APSR Register Definitions */
 221:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 222:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 223:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 224:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 225:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 226:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 227:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 228:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 229:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 230:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 231:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 232:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 233:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define APSR_Q_Pos                         27U                                            /*!< APSR
 234:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define APSR_Q_Msk                         (1UL << APSR_Q_Pos)                            /*!< APSR
 235:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 236:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 237:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
 238:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 239:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
 240:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** typedef union
 241:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
 242:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   struct
 243:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   {
 244:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 245:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 246:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access */
 247:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access */
 248:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** } IPSR_Type;
 249:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 250:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* IPSR Register Definitions */
 251:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 252:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 253:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 254:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 255:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
 256:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 257:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
 258:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** typedef union
 259:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
 260:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   struct
 261:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   {
 262:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 263:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:1;               /*!< bit:      9  Reserved */
 264:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     uint32_t ICI_IT_1:6;                 /*!< bit: 10..15  ICI/IT part 1 */
 265:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     uint32_t _reserved1:8;               /*!< bit: 16..23  Reserved */
 266:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit */
 267:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     uint32_t ICI_IT_2:2;                 /*!< bit: 25..26  ICI/IT part 2 */
 268:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 269:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 270:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 271:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 272:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 273:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access */
ARM GAS  /tmp/ccD3wtrw.s 			page 38


 274:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access */
 275:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** } xPSR_Type;
 276:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 277:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* xPSR Register Definitions */
 278:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 279:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 280:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 281:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 282:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 283:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 284:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 285:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 286:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 287:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 288:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 289:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 290:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define xPSR_Q_Pos                         27U                                            /*!< xPSR
 291:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define xPSR_Q_Msk                         (1UL << xPSR_Q_Pos)                            /*!< xPSR
 292:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 293:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define xPSR_ICI_IT_2_Pos                  25U                                            /*!< xPSR
 294:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define xPSR_ICI_IT_2_Msk                  (3UL << xPSR_ICI_IT_2_Pos)                     /*!< xPSR
 295:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 296:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 297:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 298:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 299:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define xPSR_ICI_IT_1_Pos                  10U                                            /*!< xPSR
 300:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define xPSR_ICI_IT_1_Msk                  (0x3FUL << xPSR_ICI_IT_1_Pos)                  /*!< xPSR
 301:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 302:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 303:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 304:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 305:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 306:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
 307:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief  Union type to access the Control Registers (CONTROL).
 308:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
 309:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** typedef union
 310:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
 311:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   struct
 312:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   {
 313:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 314:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 315:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 316:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access */
 317:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access */
 318:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** } CONTROL_Type;
 319:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 320:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* CONTROL Register Definitions */
 321:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 322:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 323:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 324:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 325:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 326:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 327:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_CORE */
 328:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 329:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 330:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
ARM GAS  /tmp/ccD3wtrw.s 			page 39


 331:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \ingroup    CMSIS_core_register
 332:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 333:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief      Type definitions for the NVIC Registers
 334:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   @{
 335:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
 336:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 337:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
 338:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 339:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
 340:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** typedef struct
 341:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
 342:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t ISER[8U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 343:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED0[24U];
 344:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t ICER[8U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 345:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****         uint32_t RSERVED1[24U];
 346:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t ISPR[8U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 347:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED2[24U];
 348:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t ICPR[8U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 349:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED3[24U];
 350:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t IABR[8U];               /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register */
 351:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED4[56U];
 352:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint8_t  IP[240U];               /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 353:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED5[644U];
 354:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __OM  uint32_t STIR;                   /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 355:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** }  NVIC_Type;
 356:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 357:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* Software Triggered Interrupt Register Definitions */
 358:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define NVIC_STIR_INTID_Pos                 0U                                         /*!< STIR: I
 359:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL /*<< NVIC_STIR_INTID_Pos*/)        /*!< STIR: I
 360:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 361:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_NVIC */
 362:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 363:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 364:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
 365:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_core_register
 366:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 367:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief    Type definitions for the System Control Block Registers
 368:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   @{
 369:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
 370:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 371:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
 372:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the System Control Block (SCB).
 373:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
 374:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** typedef struct
 375:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
 376:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 377:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 378:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 379:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 380:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 381:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 382:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint8_t  SHP[12U];               /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 383:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 384:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CFSR;                   /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 385:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t HFSR;                   /*!< Offset: 0x02C (R/W)  HardFault Status Register */
 386:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t DFSR;                   /*!< Offset: 0x030 (R/W)  Debug Fault Status Register */
 387:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t MMFAR;                  /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
ARM GAS  /tmp/ccD3wtrw.s 			page 40


 388:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t BFAR;                   /*!< Offset: 0x038 (R/W)  BusFault Address Register */
 389:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t AFSR;                   /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 390:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PFR[2U];                /*!< Offset: 0x040 (R/ )  Processor Feature Register */
 391:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t DFR;                    /*!< Offset: 0x048 (R/ )  Debug Feature Register */
 392:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t ADR;                    /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register */
 393:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t MMFR[4U];               /*!< Offset: 0x050 (R/ )  Memory Model Feature Register */
 394:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t ISAR[5U];               /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 395:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED0[5U];
 396:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CPACR;                  /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 397:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** } SCB_Type;
 398:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 399:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* SCB CPUID Register Definitions */
 400:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 401:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 402:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 403:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 404:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 405:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 406:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 407:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 408:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 409:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 410:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 411:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 412:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 413:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 414:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 415:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 416:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 417:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 418:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 419:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 420:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 421:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 422:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 423:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 424:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 425:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 426:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 427:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 428:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 429:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 430:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 431:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 432:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 433:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 434:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 435:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 436:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 437:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 438:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 439:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 440:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11U                                            /*!< SCB 
 441:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 442:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 443:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 444:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
ARM GAS  /tmp/ccD3wtrw.s 			page 41


 445:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 446:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* SCB Vector Table Offset Register Definitions */
 447:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #if defined (__CM3_REV) && (__CM3_REV < 0x0201U)                   /* core r2p1 */
 448:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29U                                            /*!< SCB 
 449:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (1UL << SCB_VTOR_TBLBASE_Pos)                  /*!< SCB 
 450:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 451:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 452:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 453:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #else
 454:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 455:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 456:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #endif
 457:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 458:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 459:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 460:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 461:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 462:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 463:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 464:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 465:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 466:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 467:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 468:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8U                                            /*!< SCB 
 469:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 470:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 471:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 472:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 473:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 474:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 475:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 476:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 477:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0U                                            /*!< SCB 
 478:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB 
 479:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 480:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* SCB System Control Register Definitions */
 481:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 482:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 483:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 484:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 485:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 486:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 487:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 488:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 489:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 490:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 491:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 492:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 493:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 494:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8U                                            /*!< SCB 
 495:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 496:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 497:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4U                                            /*!< SCB 
 498:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 499:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 500:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 501:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
ARM GAS  /tmp/ccD3wtrw.s 			page 42


 502:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 503:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1U                                            /*!< SCB 
 504:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 505:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 506:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0U                                            /*!< SCB 
 507:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL /*<< SCB_CCR_NONBASETHRDENA_Pos*/)        /*!< SCB 
 508:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 509:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 510:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18U                                            /*!< SCB 
 511:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 512:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 513:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17U                                            /*!< SCB 
 514:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 515:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 516:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16U                                            /*!< SCB 
 517:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 518:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 519:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 520:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 521:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 522:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14U                                            /*!< SCB 
 523:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 524:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 525:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13U                                            /*!< SCB 
 526:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 527:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 528:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12U                                            /*!< SCB 
 529:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 530:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 531:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11U                                            /*!< SCB 
 532:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 533:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 534:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10U                                            /*!< SCB 
 535:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 536:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 537:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8U                                            /*!< SCB 
 538:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 539:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 540:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7U                                            /*!< SCB 
 541:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 542:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 543:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3U                                            /*!< SCB 
 544:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 545:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 546:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1U                                            /*!< SCB 
 547:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 548:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 549:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0U                                            /*!< SCB 
 550:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL /*<< SCB_SHCSR_MEMFAULTACT_Pos*/)         /*!< SCB 
 551:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 552:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* SCB Configurable Fault Status Register Definitions */
 553:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16U                                            /*!< SCB 
 554:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 555:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 556:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8U                                            /*!< SCB 
 557:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 558:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccD3wtrw.s 			page 43


 559:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0U                                            /*!< SCB 
 560:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL /*<< SCB_CFSR_MEMFAULTSR_Pos*/)        /*!< SCB 
 561:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 562:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* MemManage Fault Status Register (part of SCB Configurable Fault Status Register) */
 563:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_MMARVALID_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 7U)               /*!< SCB 
 564:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_MMARVALID_Msk             (1UL << SCB_CFSR_MMARVALID_Pos)                /*!< SCB 
 565:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 566:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_MSTKERR_Pos               (SCB_SHCSR_MEMFAULTACT_Pos + 4U)               /*!< SCB 
 567:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_MSTKERR_Msk               (1UL << SCB_CFSR_MSTKERR_Pos)                  /*!< SCB 
 568:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 569:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_MUNSTKERR_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 3U)               /*!< SCB 
 570:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_MUNSTKERR_Msk             (1UL << SCB_CFSR_MUNSTKERR_Pos)                /*!< SCB 
 571:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 572:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_DACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 1U)               /*!< SCB 
 573:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_DACCVIOL_Msk              (1UL << SCB_CFSR_DACCVIOL_Pos)                 /*!< SCB 
 574:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 575:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_IACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 0U)               /*!< SCB 
 576:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_IACCVIOL_Msk              (1UL /*<< SCB_CFSR_IACCVIOL_Pos*/)             /*!< SCB 
 577:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 578:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* BusFault Status Register (part of SCB Configurable Fault Status Register) */
 579:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_BFARVALID_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 7U)                  /*!< SCB 
 580:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_BFARVALID_Msk            (1UL << SCB_CFSR_BFARVALID_Pos)                 /*!< SCB 
 581:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 582:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_STKERR_Pos               (SCB_CFSR_BUSFAULTSR_Pos + 4U)                  /*!< SCB 
 583:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_STKERR_Msk               (1UL << SCB_CFSR_STKERR_Pos)                    /*!< SCB 
 584:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 585:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_UNSTKERR_Pos             (SCB_CFSR_BUSFAULTSR_Pos + 3U)                  /*!< SCB 
 586:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_UNSTKERR_Msk             (1UL << SCB_CFSR_UNSTKERR_Pos)                  /*!< SCB 
 587:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 588:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_IMPRECISERR_Pos          (SCB_CFSR_BUSFAULTSR_Pos + 2U)                  /*!< SCB 
 589:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_IMPRECISERR_Msk          (1UL << SCB_CFSR_IMPRECISERR_Pos)               /*!< SCB 
 590:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 591:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_PRECISERR_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 1U)                  /*!< SCB 
 592:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_PRECISERR_Msk            (1UL << SCB_CFSR_PRECISERR_Pos)                 /*!< SCB 
 593:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 594:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_IBUSERR_Pos              (SCB_CFSR_BUSFAULTSR_Pos + 0U)                  /*!< SCB 
 595:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_IBUSERR_Msk              (1UL << SCB_CFSR_IBUSERR_Pos)                   /*!< SCB 
 596:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 597:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* UsageFault Status Register (part of SCB Configurable Fault Status Register) */
 598:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_DIVBYZERO_Pos            (SCB_CFSR_USGFAULTSR_Pos + 9U)                  /*!< SCB 
 599:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_DIVBYZERO_Msk            (1UL << SCB_CFSR_DIVBYZERO_Pos)                 /*!< SCB 
 600:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 601:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_UNALIGNED_Pos            (SCB_CFSR_USGFAULTSR_Pos + 8U)                  /*!< SCB 
 602:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_UNALIGNED_Msk            (1UL << SCB_CFSR_UNALIGNED_Pos)                 /*!< SCB 
 603:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 604:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_NOCP_Pos                 (SCB_CFSR_USGFAULTSR_Pos + 3U)                  /*!< SCB 
 605:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_NOCP_Msk                 (1UL << SCB_CFSR_NOCP_Pos)                      /*!< SCB 
 606:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 607:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_INVPC_Pos                (SCB_CFSR_USGFAULTSR_Pos + 2U)                  /*!< SCB 
 608:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_INVPC_Msk                (1UL << SCB_CFSR_INVPC_Pos)                     /*!< SCB 
 609:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 610:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_INVSTATE_Pos             (SCB_CFSR_USGFAULTSR_Pos + 1U)                  /*!< SCB 
 611:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_INVSTATE_Msk             (1UL << SCB_CFSR_INVSTATE_Pos)                  /*!< SCB 
 612:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 613:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_UNDEFINSTR_Pos           (SCB_CFSR_USGFAULTSR_Pos + 0U)                  /*!< SCB 
 614:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_UNDEFINSTR_Msk           (1UL << SCB_CFSR_UNDEFINSTR_Pos)                /*!< SCB 
 615:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccD3wtrw.s 			page 44


 616:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* SCB Hard Fault Status Register Definitions */
 617:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31U                                            /*!< SCB 
 618:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 619:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 620:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30U                                            /*!< SCB 
 621:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 622:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 623:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1U                                            /*!< SCB 
 624:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 625:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 626:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 627:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4U                                            /*!< SCB 
 628:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 629:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 630:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3U                                            /*!< SCB 
 631:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 632:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 633:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2U                                            /*!< SCB 
 634:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 635:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 636:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1U                                            /*!< SCB 
 637:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 638:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 639:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0U                                            /*!< SCB 
 640:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1UL /*<< SCB_DFSR_HALTED_Pos*/)               /*!< SCB 
 641:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 642:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_SCB */
 643:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 644:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 645:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
 646:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_core_register
 647:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 648:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief    Type definitions for the System Control and ID Register not in the SCB
 649:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   @{
 650:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
 651:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 652:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
 653:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the System Control and ID Register not in the SCB.
 654:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
 655:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** typedef struct
 656:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
 657:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED0[1U];
 658:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t ICTR;                   /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 659:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #if defined (__CM3_REV) && (__CM3_REV >= 0x200U)
 660:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t ACTLR;                  /*!< Offset: 0x008 (R/W)  Auxiliary Control Register */
 661:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #else
 662:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED1[1U];
 663:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #endif
 664:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** } SCnSCB_Type;
 665:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 666:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 667:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0U                                         /*!< ICTR: I
 668:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: I
 669:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 670:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* Auxiliary Control Register Definitions */
 671:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 672:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2U                                         /*!< ACTLR: 
ARM GAS  /tmp/ccD3wtrw.s 			page 45


 673:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 674:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 675:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1U                                         /*!< ACTLR: 
 676:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 677:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 678:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0U                                         /*!< ACTLR: 
 679:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL /*<< SCnSCB_ACTLR_DISMCYCINT_Pos*/)    /*!< ACTLR: 
 680:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 681:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_SCnotSCB */
 682:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 683:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 684:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
 685:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_core_register
 686:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 687:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief    Type definitions for the System Timer Registers.
 688:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   @{
 689:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
 690:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 691:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
 692:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the System Timer (SysTick).
 693:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
 694:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** typedef struct
 695:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
 696:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 697:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 698:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 699:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 700:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** } SysTick_Type;
 701:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 702:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 703:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 704:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 705:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 706:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 707:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 708:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 709:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 710:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 711:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 712:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 713:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 714:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 715:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* SysTick Reload Register Definitions */
 716:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 717:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 718:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 719:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* SysTick Current Register Definitions */
 720:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 721:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 722:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 723:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* SysTick Calibration Register Definitions */
 724:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 725:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 726:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 727:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 728:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 729:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccD3wtrw.s 			page 46


 730:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 731:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 732:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 733:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_SysTick */
 734:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 735:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 736:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
 737:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_core_register
 738:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 739:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief    Type definitions for the Instrumentation Trace Macrocell (ITM)
 740:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   @{
 741:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
 742:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 743:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
 744:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 745:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
 746:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** typedef struct
 747:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
 748:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __OM  union
 749:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   {
 750:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     __OM  uint8_t    u8;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit */
 751:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
 752:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     __OM  uint32_t   u32;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit */
 753:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   }  PORT [32U];                         /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers */
 754:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED0[864U];
 755:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t TER;                    /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register */
 756:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED1[15U];
 757:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t TPR;                    /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register */
 758:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED2[15U];
 759:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t TCR;                    /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register */
 760:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED3[29U];
 761:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __OM  uint32_t IWR;                    /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register *
 762:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t IRR;                    /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register */
 763:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t IMCR;                   /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
 764:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED4[43U];
 765:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __OM  uint32_t LAR;                    /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register */
 766:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t LSR;                    /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register */
 767:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED5[6U];
 768:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PID4;                   /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 769:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PID5;                   /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 770:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PID6;                   /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 771:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PID7;                   /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 772:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PID0;                   /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 773:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PID1;                   /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 774:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PID2;                   /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 775:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PID3;                   /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 776:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t CID0;                   /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 777:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t CID1;                   /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 778:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t CID2;                   /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 779:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t CID3;                   /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 780:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** } ITM_Type;
 781:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 782:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 783:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0U                                            /*!< ITM 
 784:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFFFFFFFFUL /*<< ITM_TPR_PRIVMASK_Pos*/)     /*!< ITM 
 785:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 786:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* ITM Trace Control Register Definitions */
ARM GAS  /tmp/ccD3wtrw.s 			page 47


 787:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23U                                            /*!< ITM 
 788:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 789:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 790:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_TCR_TraceBusID_Pos             16U                                            /*!< ITM 
 791:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 792:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 793:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_TCR_GTSFREQ_Pos                10U                                            /*!< ITM 
 794:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 795:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 796:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8U                                            /*!< ITM 
 797:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 798:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 799:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4U                                            /*!< ITM 
 800:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 801:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 802:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3U                                            /*!< ITM 
 803:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 804:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 805:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2U                                            /*!< ITM 
 806:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 807:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 808:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1U                                            /*!< ITM 
 809:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 810:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 811:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0U                                            /*!< ITM 
 812:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1UL /*<< ITM_TCR_ITMENA_Pos*/)                /*!< ITM 
 813:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 814:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* ITM Integration Write Register Definitions */
 815:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0U                                            /*!< ITM 
 816:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL /*<< ITM_IWR_ATVALIDM_Pos*/)              /*!< ITM 
 817:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 818:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* ITM Integration Read Register Definitions */
 819:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0U                                            /*!< ITM 
 820:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1UL /*<< ITM_IRR_ATREADYM_Pos*/)              /*!< ITM 
 821:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 822:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 823:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0U                                            /*!< ITM 
 824:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL /*<< ITM_IMCR_INTEGRATION_Pos*/)          /*!< ITM 
 825:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 826:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* ITM Lock Status Register Definitions */
 827:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2U                                            /*!< ITM 
 828:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 829:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 830:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_LSR_Access_Pos                  1U                                            /*!< ITM 
 831:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 832:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 833:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_LSR_Present_Pos                 0U                                            /*!< ITM 
 834:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_LSR_Present_Msk                (1UL /*<< ITM_LSR_Present_Pos*/)               /*!< ITM 
 835:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 836:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /*@}*/ /* end of group CMSIS_ITM */
 837:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 838:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 839:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
 840:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_core_register
 841:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 842:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief    Type definitions for the Data Watchpoint and Trace (DWT)
 843:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   @{
ARM GAS  /tmp/ccD3wtrw.s 			page 48


 844:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
 845:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 846:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
 847:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 848:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
 849:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** typedef struct
 850:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
 851:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  Control Register */
 852:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CYCCNT;                 /*!< Offset: 0x004 (R/W)  Cycle Count Register */
 853:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CPICNT;                 /*!< Offset: 0x008 (R/W)  CPI Count Register */
 854:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t EXCCNT;                 /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 855:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t SLEEPCNT;               /*!< Offset: 0x010 (R/W)  Sleep Count Register */
 856:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t LSUCNT;                 /*!< Offset: 0x014 (R/W)  LSU Count Register */
 857:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t FOLDCNT;                /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 858:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PCSR;                   /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 859:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t COMP0;                  /*!< Offset: 0x020 (R/W)  Comparator Register 0 */
 860:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t MASK0;                  /*!< Offset: 0x024 (R/W)  Mask Register 0 */
 861:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t FUNCTION0;              /*!< Offset: 0x028 (R/W)  Function Register 0 */
 862:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED0[1U];
 863:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t COMP1;                  /*!< Offset: 0x030 (R/W)  Comparator Register 1 */
 864:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t MASK1;                  /*!< Offset: 0x034 (R/W)  Mask Register 1 */
 865:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t FUNCTION1;              /*!< Offset: 0x038 (R/W)  Function Register 1 */
 866:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED1[1U];
 867:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t COMP2;                  /*!< Offset: 0x040 (R/W)  Comparator Register 2 */
 868:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t MASK2;                  /*!< Offset: 0x044 (R/W)  Mask Register 2 */
 869:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t FUNCTION2;              /*!< Offset: 0x048 (R/W)  Function Register 2 */
 870:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED2[1U];
 871:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t COMP3;                  /*!< Offset: 0x050 (R/W)  Comparator Register 3 */
 872:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t MASK3;                  /*!< Offset: 0x054 (R/W)  Mask Register 3 */
 873:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t FUNCTION3;              /*!< Offset: 0x058 (R/W)  Function Register 3 */
 874:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** } DWT_Type;
 875:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 876:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* DWT Control Register Definitions */
 877:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NUMCOMP_Pos               28U                                         /*!< DWT CTR
 878:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 879:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 880:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Pos              27U                                         /*!< DWT CTR
 881:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 882:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 883:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26U                                         /*!< DWT CTR
 884:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 885:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 886:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Pos              25U                                         /*!< DWT CTR
 887:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 888:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 889:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Pos              24U                                         /*!< DWT CTR
 890:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 891:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 892:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Pos             22U                                         /*!< DWT CTR
 893:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 894:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 895:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21U                                         /*!< DWT CTR
 896:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 897:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 898:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Pos             20U                                         /*!< DWT CTR
 899:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 900:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccD3wtrw.s 			page 49


 901:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19U                                         /*!< DWT CTR
 902:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 903:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 904:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Pos             18U                                         /*!< DWT CTR
 905:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 906:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 907:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Pos             17U                                         /*!< DWT CTR
 908:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 909:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 910:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Pos             16U                                         /*!< DWT CTR
 911:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 912:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 913:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12U                                         /*!< DWT CTR
 914:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 915:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 916:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SYNCTAP_Pos               10U                                         /*!< DWT CTR
 917:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 918:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 919:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCTAP_Pos                 9U                                         /*!< DWT CTR
 920:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 921:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 922:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTINIT_Pos               5U                                         /*!< DWT CTR
 923:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 924:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 925:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTPRESET_Pos             1U                                         /*!< DWT CTR
 926:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 927:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 928:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Pos              0U                                         /*!< DWT CTR
 929:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL /*<< DWT_CTRL_CYCCNTENA_Pos*/)       /*!< DWT CTR
 930:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 931:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* DWT CPI Count Register Definitions */
 932:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CPICNT_CPICNT_Pos               0U                                         /*!< DWT CPI
 933:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL /*<< DWT_CPICNT_CPICNT_Pos*/)       /*!< DWT CPI
 934:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 935:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* DWT Exception Overhead Count Register Definitions */
 936:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Pos               0U                                         /*!< DWT EXC
 937:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL /*<< DWT_EXCCNT_EXCCNT_Pos*/)       /*!< DWT EXC
 938:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 939:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* DWT Sleep Count Register Definitions */
 940:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0U                                         /*!< DWT SLE
 941:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL /*<< DWT_SLEEPCNT_SLEEPCNT_Pos*/)   /*!< DWT SLE
 942:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 943:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* DWT LSU Count Register Definitions */
 944:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Pos               0U                                         /*!< DWT LSU
 945:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL /*<< DWT_LSUCNT_LSUCNT_Pos*/)       /*!< DWT LSU
 946:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 947:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* DWT Folded-instruction Count Register Definitions */
 948:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0U                                         /*!< DWT FOL
 949:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL /*<< DWT_FOLDCNT_FOLDCNT_Pos*/)     /*!< DWT FOL
 950:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 951:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* DWT Comparator Mask Register Definitions */
 952:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_MASK_MASK_Pos                   0U                                         /*!< DWT MAS
 953:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL /*<< DWT_MASK_MASK_Pos*/)           /*!< DWT MAS
 954:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 955:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* DWT Comparator Function Register Definitions */
 956:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_MATCHED_Pos           24U                                         /*!< DWT FUN
 957:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
ARM GAS  /tmp/ccD3wtrw.s 			page 50


 958:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 959:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16U                                         /*!< DWT FUN
 960:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
 961:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 962:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12U                                         /*!< DWT FUN
 963:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
 964:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 965:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10U                                         /*!< DWT FUN
 966:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
 967:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 968:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9U                                         /*!< DWT FUN
 969:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
 970:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 971:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8U                                         /*!< DWT FUN
 972:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
 973:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 974:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7U                                         /*!< DWT FUN
 975:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
 976:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 977:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5U                                         /*!< DWT FUN
 978:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
 979:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 980:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Pos           0U                                         /*!< DWT FUN
 981:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL /*<< DWT_FUNCTION_FUNCTION_Pos*/)    /*!< DWT FUN
 982:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 983:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /*@}*/ /* end of group CMSIS_DWT */
 984:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 985:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 986:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
 987:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_core_register
 988:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_TPI     Trace Port Interface (TPI)
 989:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief    Type definitions for the Trace Port Interface (TPI)
 990:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   @{
 991:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
 992:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 993:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
 994:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the Trace Port Interface Register (TPI).
 995:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
 996:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** typedef struct
 997:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
 998:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t SSPSR;                  /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
 999:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CSPSR;                  /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
1000:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED0[2U];
1001:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t ACPR;                   /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
1002:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED1[55U];
1003:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t SPPR;                   /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
1004:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED2[131U];
1005:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t FFSR;                   /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
1006:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t FFCR;                   /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
1007:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t FSCR;                   /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
1008:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED3[759U];
1009:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t TRIGGER;                /*!< Offset: 0xEE8 (R/ )  TRIGGER Register */
1010:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t FIFO0;                  /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
1011:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t ITATBCTR2;              /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
1012:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED4[1U];
1013:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t ITATBCTR0;              /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
1014:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t FIFO1;                  /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
ARM GAS  /tmp/ccD3wtrw.s 			page 51


1015:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t ITCTRL;                 /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
1016:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED5[39U];
1017:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CLAIMSET;               /*!< Offset: 0xFA0 (R/W)  Claim tag set */
1018:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CLAIMCLR;               /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
1019:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED7[8U];
1020:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t DEVID;                  /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
1021:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t DEVTYPE;                /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
1022:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** } TPI_Type;
1023:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1024:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
1025:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_ACPR_PRESCALER_Pos              0U                                         /*!< TPI ACP
1026:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL /*<< TPI_ACPR_PRESCALER_Pos*/)    /*!< TPI ACP
1027:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1028:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* TPI Selected Pin Protocol Register Definitions */
1029:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_SPPR_TXMODE_Pos                 0U                                         /*!< TPI SPP
1030:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL /*<< TPI_SPPR_TXMODE_Pos*/)          /*!< TPI SPP
1031:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1032:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* TPI Formatter and Flush Status Register Definitions */
1033:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtNonStop_Pos              3U                                         /*!< TPI FFS
1034:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
1035:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1036:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_TCPresent_Pos              2U                                         /*!< TPI FFS
1037:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
1038:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1039:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtStopped_Pos              1U                                         /*!< TPI FFS
1040:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
1041:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1042:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FlInProg_Pos               0U                                         /*!< TPI FFS
1043:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL /*<< TPI_FFSR_FlInProg_Pos*/)        /*!< TPI FFS
1044:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1045:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* TPI Formatter and Flush Control Register Definitions */
1046:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FFCR_TrigIn_Pos                 8U                                         /*!< TPI FFC
1047:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
1048:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1049:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FFCR_EnFCont_Pos                1U                                         /*!< TPI FFC
1050:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
1051:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1052:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* TPI TRIGGER Register Definitions */
1053:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Pos             0U                                         /*!< TPI TRI
1054:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL /*<< TPI_TRIGGER_TRIGGER_Pos*/)      /*!< TPI TRI
1055:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1056:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
1057:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1058:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
1059:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1060:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1061:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
1062:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1063:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1064:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
1065:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1066:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1067:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
1068:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1069:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM2_Pos                 16U                                         /*!< TPI FIF
1070:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
1071:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccD3wtrw.s 			page 52


1072:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM1_Pos                  8U                                         /*!< TPI FIF
1073:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
1074:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1075:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM0_Pos                  0U                                         /*!< TPI FIF
1076:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL /*<< TPI_FIFO0_ETM0_Pos*/)          /*!< TPI FIF
1077:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1078:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* TPI ITATBCTR2 Register Definitions */
1079:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY2_Pos          0U                                         /*!< TPI ITA
1080:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY2_Msk         (0x1UL /*<< TPI_ITATBCTR2_ATREADY2_Pos*/)   /*!< TPI ITA
1081:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1082:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY1_Pos          0U                                         /*!< TPI ITA
1083:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY1_Msk         (0x1UL /*<< TPI_ITATBCTR2_ATREADY1_Pos*/)   /*!< TPI ITA
1084:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1085:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
1086:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1087:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
1088:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1089:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1090:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
1091:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1092:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1093:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
1094:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1095:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1096:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
1097:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1098:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM2_Pos                 16U                                         /*!< TPI FIF
1099:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
1100:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1101:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM1_Pos                  8U                                         /*!< TPI FIF
1102:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
1103:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1104:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM0_Pos                  0U                                         /*!< TPI FIF
1105:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL /*<< TPI_FIFO1_ITM0_Pos*/)          /*!< TPI FIF
1106:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1107:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* TPI ITATBCTR0 Register Definitions */
1108:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY2_Pos          0U                                         /*!< TPI ITA
1109:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY2_Msk         (0x1UL /*<< TPI_ITATBCTR0_ATREADY2_Pos*/)   /*!< TPI ITA
1110:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1111:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY1_Pos          0U                                         /*!< TPI ITA
1112:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY1_Msk         (0x1UL /*<< TPI_ITATBCTR0_ATREADY1_Pos*/)   /*!< TPI ITA
1113:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1114:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* TPI Integration Mode Control Register Definitions */
1115:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_ITCTRL_Mode_Pos                 0U                                         /*!< TPI ITC
1116:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_ITCTRL_Mode_Msk                (0x3UL /*<< TPI_ITCTRL_Mode_Pos*/)          /*!< TPI ITC
1117:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1118:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* TPI DEVID Register Definitions */
1119:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NRZVALID_Pos             11U                                         /*!< TPI DEV
1120:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1121:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1122:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MANCVALID_Pos            10U                                         /*!< TPI DEV
1123:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1124:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1125:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_PTINVALID_Pos             9U                                         /*!< TPI DEV
1126:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1127:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1128:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MinBufSz_Pos              6U                                         /*!< TPI DEV
ARM GAS  /tmp/ccD3wtrw.s 			page 53


1129:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1130:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1131:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_AsynClkIn_Pos             5U                                         /*!< TPI DEV
1132:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1133:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1134:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NrTraceInput_Pos          0U                                         /*!< TPI DEV
1135:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL /*<< TPI_DEVID_NrTraceInput_Pos*/)  /*!< TPI DEV
1136:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1137:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* TPI DEVTYPE Register Definitions */
1138:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_SubType_Pos             4U                                         /*!< TPI DEV
1139:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL /*<< TPI_DEVTYPE_SubType_Pos*/)      /*!< TPI DEV
1140:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1141:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_MajorType_Pos           0U                                         /*!< TPI DEV
1142:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1143:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1144:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /*@}*/ /* end of group CMSIS_TPI */
1145:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1146:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1147:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1148:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1149:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_core_register
1150:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1151:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
1152:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   @{
1153:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
1154:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1155:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1156:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
1157:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
1158:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** typedef struct
1159:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
1160:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
1161:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
1162:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
1163:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1164:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1165:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RBAR_A1;                /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1166:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RASR_A1;                /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1167:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RBAR_A2;                /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1168:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RASR_A2;                /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1169:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RBAR_A3;                /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1170:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RASR_A3;                /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1171:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** } MPU_Type;
1172:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1173:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_TYPE_RALIASES                  4U
1174:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1175:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* MPU Type Register Definitions */
1176:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
1177:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1178:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1179:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
1180:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1181:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1182:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
1183:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
1184:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1185:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* MPU Control Register Definitions */
ARM GAS  /tmp/ccD3wtrw.s 			page 54


1186:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
1187:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1188:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1189:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
1190:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1191:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1192:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
1193:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
1194:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1195:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* MPU Region Number Register Definitions */
1196:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
1197:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
1198:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1199:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* MPU Region Base Address Register Definitions */
1200:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5U                                            /*!< MPU 
1201:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1202:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1203:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
1204:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1205:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1206:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
1207:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
1208:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1209:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* MPU Region Attribute and Size Register Definitions */
1210:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
1211:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1212:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1213:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
1214:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1215:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1216:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
1217:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1218:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1219:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
1220:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1221:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1222:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
1223:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1224:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1225:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
1226:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1227:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1228:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
1229:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1230:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1231:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
1232:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1233:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1234:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
1235:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1236:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1237:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
1238:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
1239:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1240:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_MPU */
1241:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #endif
1242:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccD3wtrw.s 			page 55


1243:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1244:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1245:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_core_register
1246:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1247:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief    Type definitions for the Core Debug Registers
1248:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   @{
1249:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
1250:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1251:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1252:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the Core Debug Register (CoreDebug).
1253:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
1254:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** typedef struct
1255:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
1256:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t DHCSR;                  /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1257:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __OM  uint32_t DCRSR;                  /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1258:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t DCRDR;                  /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1259:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t DEMCR;                  /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1260:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** } CoreDebug_Type;
1261:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1262:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* Debug Halting Control and Status Register Definitions */
1263:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16U                                            /*!< Core
1264:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1265:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1266:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25U                                            /*!< Core
1267:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1268:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1269:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24U                                            /*!< Core
1270:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1271:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1272:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19U                                            /*!< Core
1273:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1274:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1275:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18U                                            /*!< Core
1276:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1277:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1278:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17U                                            /*!< Core
1279:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1280:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1281:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16U                                            /*!< Core
1282:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1283:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1284:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5U                                            /*!< Core
1285:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1286:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1287:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3U                                            /*!< Core
1288:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1289:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1290:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2U                                            /*!< Core
1291:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1292:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1293:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1U                                            /*!< Core
1294:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1295:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1296:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0U                                            /*!< Core
1297:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL /*<< CoreDebug_DHCSR_C_DEBUGEN_Pos*/)     /*!< Core
1298:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1299:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* Debug Core Register Selector Register Definitions */
ARM GAS  /tmp/ccD3wtrw.s 			page 56


1300:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16U                                            /*!< Core
1301:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1302:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1303:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0U                                            /*!< Core
1304:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL /*<< CoreDebug_DCRSR_REGSEL_Pos*/)     /*!< Core
1305:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1306:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* Debug Exception and Monitor Control Register Definitions */
1307:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24U                                            /*!< Core
1308:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1309:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1310:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19U                                            /*!< Core
1311:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1312:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1313:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18U                                            /*!< Core
1314:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1315:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1316:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17U                                            /*!< Core
1317:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1318:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1319:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16U                                            /*!< Core
1320:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1321:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1322:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10U                                            /*!< Core
1323:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1324:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1325:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9U                                            /*!< Core
1326:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1327:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1328:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8U                                            /*!< Core
1329:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1330:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1331:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7U                                            /*!< Core
1332:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1333:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1334:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6U                                            /*!< Core
1335:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1336:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1337:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5U                                            /*!< Core
1338:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1339:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1340:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4U                                            /*!< Core
1341:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1342:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1343:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0U                                            /*!< Core
1344:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< Core
1345:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1346:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_CoreDebug */
1347:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1348:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1349:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1350:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \ingroup    CMSIS_core_register
1351:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
1352:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
1353:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   @{
1354:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
1355:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1356:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
ARM GAS  /tmp/ccD3wtrw.s 			page 57


1357:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
1358:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \param[in] field  Name of the register bit field.
1359:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
1360:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \return           Masked and shifted value.
1361:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** */
1362:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
1363:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1364:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1365:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief     Mask and shift a register value to extract a bit filed value.
1366:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \param[in] field  Name of the register bit field.
1367:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
1368:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \return           Masked and shifted bit field value.
1369:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** */
1370:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
1371:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1372:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_core_bitfield */
1373:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1374:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1375:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1376:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \ingroup    CMSIS_core_register
1377:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \defgroup   CMSIS_core_base     Core Definitions
1378:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief      Definitions for base addresses, unions, and structures.
1379:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   @{
1380:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
1381:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1382:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* Memory mapping of Core Hardware */
1383:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1384:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address */
1385:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address */
1386:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address */
1387:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1388:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
1389:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
1390:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1391:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1392:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1393:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1394:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1395:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1396:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1397:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1398:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1399:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1400:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1401:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1402:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
1403:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
1404:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #endif
1405:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1406:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /*@} */
1407:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1408:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1409:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1410:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /*******************************************************************************
1411:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  *                Hardware Abstraction Layer
1412:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   Core Function Interface contains:
1413:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   - Core NVIC Functions
ARM GAS  /tmp/ccD3wtrw.s 			page 58


1414:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   - Core SysTick Functions
1415:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   - Core Debug Functions
1416:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   - Core Register Access Functions
1417:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  ******************************************************************************/
1418:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1419:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1420:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** */
1421:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1422:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1423:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1424:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
1425:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1426:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_Core_FunctionInterface
1427:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1428:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
1429:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   @{
1430:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
1431:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1432:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #ifdef CMSIS_NVIC_VIRTUAL
1433:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
1434:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
1435:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #endif
1436:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
1437:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #else
1438:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
1439:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
1440:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
1441:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
1442:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
1443:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
1444:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
1445:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
1446:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #define NVIC_GetActive              __NVIC_GetActive
1447:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
1448:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
1449:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
1450:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #endif /* CMSIS_NVIC_VIRTUAL */
1451:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1452:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #ifdef CMSIS_VECTAB_VIRTUAL
1453:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
1454:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****    #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
1455:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #endif
1456:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
1457:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #else
1458:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #define NVIC_SetVector              __NVIC_SetVector
1459:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #define NVIC_GetVector              __NVIC_GetVector
1460:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
1461:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1462:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define NVIC_USER_IRQ_OFFSET          16
1463:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1464:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1465:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
1466:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
1467:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
1468:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
1469:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1470:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccD3wtrw.s 			page 59


1471:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1472:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief   Set Priority Grouping
1473:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \details Sets the priority grouping field using the required unlock sequence.
1474:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****            The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1475:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****            Only values from 0..7 are used.
1476:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****            In case of a conflict between priority grouping and available
1477:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1478:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \param [in]      PriorityGroup  Priority grouping field.
1479:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
1480:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** __STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1481:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
1482:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   uint32_t reg_value;
1483:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 a
1484:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1485:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1486:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to chan
1487:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   reg_value  =  (reg_value                                   |
1488:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1489:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****                 (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key a
1490:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   SCB->AIRCR =  reg_value;
1491:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** }
1492:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1493:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1494:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1495:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief   Get Priority Grouping
1496:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \details Reads the priority grouping field from the NVIC Interrupt Controller.
1497:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1498:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
1499:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
1500:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
1501:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
1502:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** }
1503:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1504:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1505:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1506:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief   Enable Interrupt
1507:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
1508:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \param [in]      IRQn  Device specific interrupt number.
1509:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \note    IRQn must not be negative.
1510:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
1511:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
1512:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
1513:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   if ((int32_t)(IRQn) >= 0)
1514:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   {
1515:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1516:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   }
1517:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** }
1518:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1519:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1520:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1521:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief   Get Interrupt Enable status
1522:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
1523:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \param [in]      IRQn  Device specific interrupt number.
1524:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \return             0  Interrupt is not enabled.
1525:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \return             1  Interrupt is enabled.
1526:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \note    IRQn must not be negative.
1527:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
ARM GAS  /tmp/ccD3wtrw.s 			page 60


1528:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
1529:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
1530:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   if ((int32_t)(IRQn) >= 0)
1531:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   {
1532:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     return((uint32_t)(((NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL)
1533:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   }
1534:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   else
1535:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   {
1536:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     return(0U);
1537:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   }
1538:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** }
1539:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1540:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1541:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1542:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief   Disable Interrupt
1543:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
1544:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \param [in]      IRQn  Device specific interrupt number.
1545:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \note    IRQn must not be negative.
1546:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
1547:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
1548:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
1549:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   if ((int32_t)(IRQn) >= 0)
1550:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   {
1551:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1552:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     __DSB();
1553:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     __ISB();
1554:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   }
1555:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** }
1556:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1557:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1558:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1559:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief   Get Pending Interrupt
1560:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
1561:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \param [in]      IRQn  Device specific interrupt number.
1562:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \return             0  Interrupt status is not pending.
1563:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \return             1  Interrupt status is pending.
1564:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \note    IRQn must not be negative.
1565:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
1566:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
1567:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
1568:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   if ((int32_t)(IRQn) >= 0)
1569:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   {
1570:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL)
1571:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   }
1572:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   else
1573:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   {
1574:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     return(0U);
1575:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   }
1576:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** }
1577:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1578:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1579:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1580:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief   Set Pending Interrupt
1581:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
1582:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \param [in]      IRQn  Device specific interrupt number.
1583:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \note    IRQn must not be negative.
1584:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
ARM GAS  /tmp/ccD3wtrw.s 			page 61


1585:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
1586:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
1587:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   if ((int32_t)(IRQn) >= 0)
1588:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   {
1589:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1590:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   }
1591:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** }
1592:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1593:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1594:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1595:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief   Clear Pending Interrupt
1596:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
1597:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \param [in]      IRQn  Device specific interrupt number.
1598:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \note    IRQn must not be negative.
1599:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
1600:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1601:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
1602:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   if ((int32_t)(IRQn) >= 0)
1603:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   {
1604:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1605:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   }
1606:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** }
1607:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1608:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1609:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1610:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief   Get Active Interrupt
1611:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \details Reads the active register in the NVIC and returns the active bit for the device specific
1612:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \param [in]      IRQn  Device specific interrupt number.
1613:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \return             0  Interrupt status is not active.
1614:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \return             1  Interrupt status is active.
1615:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \note    IRQn must not be negative.
1616:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
1617:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
1618:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
1619:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   if ((int32_t)(IRQn) >= 0)
1620:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   {
1621:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL)
1622:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   }
1623:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   else
1624:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   {
1625:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     return(0U);
1626:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   }
1627:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** }
1628:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1629:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1630:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1631:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief   Set Interrupt Priority
1632:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
1633:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****            The interrupt number can be positive to specify a device specific interrupt,
1634:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****            or negative to specify a processor exception.
1635:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \param [in]      IRQn  Interrupt number.
1636:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \param [in]  priority  Priority to set.
1637:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \note    The priority cannot be set for every processor exception.
1638:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
1639:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1640:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
1641:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   if ((int32_t)(IRQn) >= 0)
ARM GAS  /tmp/ccD3wtrw.s 			page 62


1642:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   {
1643:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (u
1644:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   }
1645:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   else
1646:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   {
1647:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (u
1648:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   }
1649:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** }
1650:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1651:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1652:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1653:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief   Get Interrupt Priority
1654:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \details Reads the priority of a device specific interrupt or a processor exception.
1655:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****            The interrupt number can be positive to specify a device specific interrupt,
1656:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****            or negative to specify a processor exception.
1657:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \param [in]   IRQn  Interrupt number.
1658:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \return             Interrupt Priority.
1659:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****                       Value is aligned automatically to the implemented priority bits of the microc
1660:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
1661:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
1662:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
1663:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1664:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   if ((int32_t)(IRQn) >= 0)
1665:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   {
1666:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
1667:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   }
1668:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   else
1669:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   {
1670:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     return(((uint32_t)SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
1671:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   }
1672:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** }
1673:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1674:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1675:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1676:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief   Encode Priority
1677:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \details Encodes the priority for an interrupt with the given priority group,
1678:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****            preemptive priority value, and subpriority value.
1679:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****            In case of a conflict between priority grouping and available
1680:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1681:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \param [in]     PriorityGroup  Used priority group.
1682:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
1683:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \param [in]       SubPriority  Subpriority value (starting from 0).
1684:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \return                        Encoded priority. Value can be used in the function \ref NVIC_SetP
1685:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
1686:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
1687:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
1688:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
1689:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   uint32_t PreemptPriorityBits;
1690:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   uint32_t SubPriorityBits;
1691:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1692:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
1693:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
1694:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1695:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   return (
1696:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****            ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits
1697:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****            ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
1698:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****          );
ARM GAS  /tmp/ccD3wtrw.s 			page 63


1699:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** }
1700:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1701:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1702:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1703:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief   Decode Priority
1704:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \details Decodes an interrupt priority value with a given priority group to
1705:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****            preemptive priority value and subpriority value.
1706:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****            In case of a conflict between priority grouping and available
1707:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****            priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
1708:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \param [in]         Priority   Priority value, which can be retrieved with the function \ref NVIC
1709:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \param [in]     PriorityGroup  Used priority group.
1710:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
1711:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \param [out]     pSubPriority  Subpriority value (starting from 0).
1712:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
1713:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* cons
1714:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
1715:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
1716:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   uint32_t PreemptPriorityBits;
1717:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   uint32_t SubPriorityBits;
1718:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1719:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
1720:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
1721:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1722:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1
1723:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1
1724:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** }
1725:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1726:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1727:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1728:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief   Set Interrupt Vector
1729:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \details Sets an interrupt vector in SRAM based interrupt vector table.
1730:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****            The interrupt number can be positive to specify a device specific interrupt,
1731:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****            or negative to specify a processor exception.
1732:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****            VTOR must been relocated to SRAM before.
1733:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \param [in]   IRQn      Interrupt number
1734:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \param [in]   vector    Address of interrupt handler function
1735:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
1736:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** __STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
1737:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
1738:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   uint32_t *vectors = (uint32_t *)SCB->VTOR;
1739:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET] = vector;
1740:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** }
1741:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1742:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1743:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1744:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief   Get Interrupt Vector
1745:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \details Reads an interrupt vector from interrupt vector table.
1746:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****            The interrupt number can be positive to specify a device specific interrupt,
1747:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****            or negative to specify a processor exception.
1748:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \param [in]   IRQn      Interrupt number.
1749:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \return                 Address of interrupt handler function
1750:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
1751:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t __NVIC_GetVector(IRQn_Type IRQn)
1752:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
1753:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   uint32_t *vectors = (uint32_t *)SCB->VTOR;
1754:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   return vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET];
1755:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** }
ARM GAS  /tmp/ccD3wtrw.s 			page 64


1756:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1757:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1758:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1759:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief   System Reset
1760:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \details Initiates a system reset request to reset the MCU.
1761:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
1762:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** __NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
1763:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
1764:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __DSB();                                                          /* Ensure all outstanding memor
1765:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****                                                                        buffered write are completed
1766:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
1767:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****                            (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 433              		.loc 3 1767 0
 434 000a 0549     		ldr	r1, .L36
 435 000c CA68     		ldr	r2, [r1, #12]
 436 000e 02F4E062 		and	r2, r2, #1792
1766:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****                            (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 437              		.loc 3 1766 0
 438 0012 044B     		ldr	r3, .L36+4
 439 0014 1343     		orrs	r3, r3, r2
 440 0016 CB60     		str	r3, [r1, #12]
 441              	.LBB26:
 442              	.LBB27:
 443              		.loc 2 879 0
 444              		.syntax unified
 445              	@ 879 "..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h" 1
 446 0018 BFF34F8F 		dsb 0xF
 447              	@ 0 "" 2
 448              		.thumb
 449              		.syntax unified
 450              	.L34:
 451              	.LBE27:
 452              	.LBE26:
1768:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****                             SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchange
1769:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __DSB();                                                          /* Ensure completion of memory 
1770:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1771:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   for(;;)                                                           /* wait until reset */
1772:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   {
1773:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     __NOP();
 453              		.loc 3 1773 0
 454              		.syntax unified
 455              	@ 1773 "..//Source/stm/lib/CMSIS/Include/core_cm3.h" 1
 456 001c 00BF     		nop
 457              	@ 0 "" 2
 458              		.thumb
 459              		.syntax unified
 460 001e FDE7     		b	.L34
 461              	.L37:
 462              		.align	2
 463              	.L36:
 464 0020 00ED00E0 		.word	-536810240
 465 0024 0400FA05 		.word	100270084
 466              	.LBE23:
 467              	.LBE22:
 468              		.cfi_endproc
 469              	.LFE76:
 471              		.section	.text.BoardDeInitMcu,"ax",%progbits
ARM GAS  /tmp/ccD3wtrw.s 			page 65


 472              		.align	1
 473              		.global	BoardDeInitMcu
 474              		.syntax unified
 475              		.thumb
 476              		.thumb_func
 477              		.fpu softvfp
 479              	BoardDeInitMcu:
 480              	.LFB77:
 252:..//Source/stm/board/board_stm32l151cd/board.c ****     Gpio_t ioPin;
 481              		.loc 1 252 0
 482              		.cfi_startproc
 483              		@ args = 0, pretend = 0, frame = 16
 484              		@ frame_needed = 0, uses_anonymous_args = 0
 485 0000 10B5     		push	{r4, lr}
 486              	.LCFI7:
 487              		.cfi_def_cfa_offset 8
 488              		.cfi_offset 4, -8
 489              		.cfi_offset 14, -4
 490 0002 86B0     		sub	sp, sp, #24
 491              	.LCFI8:
 492              		.cfi_def_cfa_offset 32
 255:..//Source/stm/board/board_stm32l151cd/board.c **** 
 493              		.loc 1 255 0
 494 0004 1948     		ldr	r0, .L40
 495 0006 FFF7FEFF 		bl	AdcDeInit
 496              	.LVL13:
 257:..//Source/stm/board/board_stm32l151cd/board.c ****     SX1276IoDeInit( );
 497              		.loc 1 257 0
 498 000a 1948     		ldr	r0, .L40+4
 499 000c FFF7FEFF 		bl	SpiDeInit
 500              	.LVL14:
 258:..//Source/stm/board/board_stm32l151cd/board.c **** 
 501              		.loc 1 258 0
 502 0010 FFF7FEFF 		bl	SX1276IoDeInit
 503              	.LVL15:
 260:..//Source/stm/board/board_stm32l151cd/board.c ****     GpioInit( &ioPin, OSC_HSE_OUT, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 504              		.loc 1 260 0
 505 0014 0024     		movs	r4, #0
 506 0016 0194     		str	r4, [sp, #4]
 507 0018 0094     		str	r4, [sp]
 508 001a 2346     		mov	r3, r4
 509 001c 0322     		movs	r2, #3
 510 001e 6021     		movs	r1, #96
 511 0020 03A8     		add	r0, sp, #12
 512 0022 FFF7FEFF 		bl	GpioInit
 513              	.LVL16:
 261:..//Source/stm/board/board_stm32l151cd/board.c **** 
 514              		.loc 1 261 0
 515 0026 0194     		str	r4, [sp, #4]
 516 0028 0094     		str	r4, [sp]
 517 002a 2346     		mov	r3, r4
 518 002c 0322     		movs	r2, #3
 519 002e 6121     		movs	r1, #97
 520 0030 03A8     		add	r0, sp, #12
 521 0032 FFF7FEFF 		bl	GpioInit
 522              	.LVL17:
 263:..//Source/stm/board/board_stm32l151cd/board.c ****     GpioInit( &ioPin, OSC_LSE_OUT, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
ARM GAS  /tmp/ccD3wtrw.s 			page 66


 523              		.loc 1 263 0
 524 0036 0194     		str	r4, [sp, #4]
 525 0038 0094     		str	r4, [sp]
 526 003a 2346     		mov	r3, r4
 527 003c 2246     		mov	r2, r4
 528 003e 2E21     		movs	r1, #46
 529 0040 03A8     		add	r0, sp, #12
 530 0042 FFF7FEFF 		bl	GpioInit
 531              	.LVL18:
 264:..//Source/stm/board/board_stm32l151cd/board.c **** 
 532              		.loc 1 264 0
 533 0046 0194     		str	r4, [sp, #4]
 534 0048 0094     		str	r4, [sp]
 535 004a 2346     		mov	r3, r4
 536 004c 2246     		mov	r2, r4
 537 004e 2F21     		movs	r1, #47
 538 0050 03A8     		add	r0, sp, #12
 539 0052 FFF7FEFF 		bl	GpioInit
 540              	.LVL19:
 266:..//Source/stm/board/board_stm32l151cd/board.c **** }
 541              		.loc 1 266 0
 542 0056 0194     		str	r4, [sp, #4]
 543 0058 0094     		str	r4, [sp]
 544 005a 2346     		mov	r3, r4
 545 005c 0322     		movs	r2, #3
 546 005e 0221     		movs	r1, #2
 547 0060 0448     		ldr	r0, .L40+8
 548 0062 FFF7FEFF 		bl	GpioInit
 549              	.LVL20:
 267:..//Source/stm/board/board_stm32l151cd/board.c **** 
 550              		.loc 1 267 0
 551 0066 06B0     		add	sp, sp, #24
 552              	.LCFI9:
 553              		.cfi_def_cfa_offset 8
 554              		@ sp needed
 555 0068 10BD     		pop	{r4, pc}
 556              	.L41:
 557 006a 00BF     		.align	2
 558              	.L40:
 559 006c 00000000 		.word	Adc
 560 0070 54000000 		.word	SX1276+84
 561 0074 00000000 		.word	UsbDetect
 562              		.cfi_endproc
 563              	.LFE77:
 565              		.section	.text.BoardGetRandomSeed,"ax",%progbits
 566              		.align	1
 567              		.global	BoardGetRandomSeed
 568              		.syntax unified
 569              		.thumb
 570              		.thumb_func
 571              		.fpu softvfp
 573              	BoardGetRandomSeed:
 574              	.LFB78:
 270:..//Source/stm/board/board_stm32l151cd/board.c ****     return ( ( *( uint32_t* )ID1 ) ^ ( *( uint32_t* )ID2 ) ^ ( *( uint32_t* )ID3 ) );
 575              		.loc 1 270 0
 576              		.cfi_startproc
 577              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccD3wtrw.s 			page 67


 578              		@ frame_needed = 0, uses_anonymous_args = 0
 579              		@ link register save eliminated.
 271:..//Source/stm/board/board_stm32l151cd/board.c **** }
 580              		.loc 1 271 0
 581 0000 044B     		ldr	r3, .L43
 582 0002 1B68     		ldr	r3, [r3]
 583 0004 044A     		ldr	r2, .L43+4
 584 0006 1068     		ldr	r0, [r2]
 585 0008 4340     		eors	r3, r3, r0
 586 000a 1032     		adds	r2, r2, #16
 587 000c 1068     		ldr	r0, [r2]
 272:..//Source/stm/board/board_stm32l151cd/board.c **** 
 588              		.loc 1 272 0
 589 000e 5840     		eors	r0, r0, r3
 590 0010 7047     		bx	lr
 591              	.L44:
 592 0012 00BF     		.align	2
 593              	.L43:
 594 0014 5000F81F 		.word	536346704
 595 0018 5400F81F 		.word	536346708
 596              		.cfi_endproc
 597              	.LFE78:
 599              		.section	.text.BoardGetUniqueId,"ax",%progbits
 600              		.align	1
 601              		.global	BoardGetUniqueId
 602              		.syntax unified
 603              		.thumb
 604              		.thumb_func
 605              		.fpu softvfp
 607              	BoardGetUniqueId:
 608              	.LFB79:
 275:..//Source/stm/board/board_stm32l151cd/board.c ****     id[7] = ( ( *( uint32_t* )ID1 )+ ( *( uint32_t* )ID3 ) ) >> 24;
 609              		.loc 1 275 0
 610              		.cfi_startproc
 611              		@ args = 0, pretend = 0, frame = 0
 612              		@ frame_needed = 0, uses_anonymous_args = 0
 613              		@ link register save eliminated.
 614              	.LVL21:
 615 0000 10B4     		push	{r4}
 616              	.LCFI10:
 617              		.cfi_def_cfa_offset 4
 618              		.cfi_offset 4, -4
 276:..//Source/stm/board/board_stm32l151cd/board.c ****     id[6] = ( ( *( uint32_t* )ID1 )+ ( *( uint32_t* )ID3 ) ) >> 16;
 619              		.loc 1 276 0
 620 0002 1049     		ldr	r1, .L47
 621 0004 0B68     		ldr	r3, [r1]
 622 0006 104A     		ldr	r2, .L47+4
 623 0008 1468     		ldr	r4, [r2]
 624 000a 2344     		add	r3, r3, r4
 625 000c 1B0E     		lsrs	r3, r3, #24
 626 000e C371     		strb	r3, [r0, #7]
 277:..//Source/stm/board/board_stm32l151cd/board.c ****     id[5] = ( ( *( uint32_t* )ID1 )+ ( *( uint32_t* )ID3 ) ) >> 8;
 627              		.loc 1 277 0
 628 0010 0B68     		ldr	r3, [r1]
 629 0012 1468     		ldr	r4, [r2]
 630 0014 2344     		add	r3, r3, r4
 631 0016 1B0C     		lsrs	r3, r3, #16
ARM GAS  /tmp/ccD3wtrw.s 			page 68


 632 0018 8371     		strb	r3, [r0, #6]
 278:..//Source/stm/board/board_stm32l151cd/board.c ****     id[4] = ( ( *( uint32_t* )ID1 )+ ( *( uint32_t* )ID3 ) );
 633              		.loc 1 278 0
 634 001a 0B68     		ldr	r3, [r1]
 635 001c 1468     		ldr	r4, [r2]
 636 001e 2344     		add	r3, r3, r4
 637 0020 1B0A     		lsrs	r3, r3, #8
 638 0022 4371     		strb	r3, [r0, #5]
 279:..//Source/stm/board/board_stm32l151cd/board.c ****     id[3] = ( ( *( uint32_t* )ID2 ) ) >> 24;
 639              		.loc 1 279 0
 640 0024 0B68     		ldr	r3, [r1]
 641 0026 1268     		ldr	r2, [r2]
 642 0028 1344     		add	r3, r3, r2
 643 002a 0371     		strb	r3, [r0, #4]
 280:..//Source/stm/board/board_stm32l151cd/board.c ****     id[2] = ( ( *( uint32_t* )ID2 ) ) >> 16;
 644              		.loc 1 280 0
 645 002c 074B     		ldr	r3, .L47+8
 646 002e DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 647 0030 C270     		strb	r2, [r0, #3]
 281:..//Source/stm/board/board_stm32l151cd/board.c ****     id[1] = ( ( *( uint32_t* )ID2 ) ) >> 8;
 648              		.loc 1 281 0
 649 0032 5A88     		ldrh	r2, [r3, #2]
 650 0034 8270     		strb	r2, [r0, #2]
 282:..//Source/stm/board/board_stm32l151cd/board.c ****     id[0] = ( ( *( uint32_t* )ID2 ) );
 651              		.loc 1 282 0
 652 0036 1A68     		ldr	r2, [r3]
 653 0038 120A     		lsrs	r2, r2, #8
 654 003a 4270     		strb	r2, [r0, #1]
 283:..//Source/stm/board/board_stm32l151cd/board.c **** }
 655              		.loc 1 283 0
 656 003c 1B68     		ldr	r3, [r3]
 657 003e 0370     		strb	r3, [r0]
 284:..//Source/stm/board/board_stm32l151cd/board.c **** 
 658              		.loc 1 284 0
 659 0040 10BC     		pop	{r4}
 660              	.LCFI11:
 661              		.cfi_restore 4
 662              		.cfi_def_cfa_offset 0
 663 0042 7047     		bx	lr
 664              	.L48:
 665              		.align	2
 666              	.L47:
 667 0044 5000F81F 		.word	536346704
 668 0048 6400F81F 		.word	536346724
 669 004c 5400F81F 		.word	536346708
 670              		.cfi_endproc
 671              	.LFE79:
 673              		.global	__aeabi_ui2f
 674              		.global	__aeabi_fmul
 675              		.global	__aeabi_fdiv
 676              		.global	__aeabi_f2uiz
 677              		.global	__aeabi_i2f
 678              		.section	.text.BoardBatteryMeasureVolage,"ax",%progbits
 679              		.align	1
 680              		.global	BoardBatteryMeasureVolage
 681              		.syntax unified
 682              		.thumb
ARM GAS  /tmp/ccD3wtrw.s 			page 69


 683              		.thumb_func
 684              		.fpu softvfp
 686              	BoardBatteryMeasureVolage:
 687              	.LFB80:
 311:..//Source/stm/board/board_stm32l151cd/board.c ****     uint16_t vdd = 0;
 688              		.loc 1 311 0
 689              		.cfi_startproc
 690              		@ args = 0, pretend = 0, frame = 0
 691              		@ frame_needed = 0, uses_anonymous_args = 0
 692 0000 70B5     		push	{r4, r5, r6, lr}
 693              	.LCFI12:
 694              		.cfi_def_cfa_offset 16
 695              		.cfi_offset 4, -16
 696              		.cfi_offset 5, -12
 697              		.cfi_offset 6, -8
 698              		.cfi_offset 14, -4
 699              	.LVL22:
 313:..//Source/stm/board/board_stm32l151cd/board.c ****     uint16_t vdiv = 0;
 700              		.loc 1 313 0
 701 0002 154C     		ldr	r4, .L51
 702 0004 2588     		ldrh	r5, [r4]
 703              	.LVL23:
 317:..//Source/stm/board/board_stm32l151cd/board.c ****     //vref = AdcReadChannel( &Adc, ADC_CHANNEL_VREFINT );
 704              		.loc 1 317 0
 705 0006 0821     		movs	r1, #8
 706 0008 1448     		ldr	r0, .L51+4
 707 000a FFF7FEFF 		bl	AdcReadChannel
 708              	.LVL24:
 709 000e 0646     		mov	r6, r0
 710              	.LVL25:
 320:..//Source/stm/board/board_stm32l151cd/board.c ****     batteryVoltage = vdd * ( ( float )vdiv / ( float )ADC_MAX_VALUE );
 711              		.loc 1 320 0
 712 0010 2088     		ldrh	r0, [r4]
 713 0012 FFF7FEFF 		bl	__aeabi_ui2f
 714              	.LVL26:
 715 0016 1249     		ldr	r1, .L51+8
 716 0018 FFF7FEFF 		bl	__aeabi_fmul
 717              	.LVL27:
 718 001c 0446     		mov	r4, r0
 719 001e 2846     		mov	r0, r5
 720 0020 FFF7FEFF 		bl	__aeabi_ui2f
 721              	.LVL28:
 722 0024 0146     		mov	r1, r0
 723 0026 2046     		mov	r0, r4
 724 0028 FFF7FEFF 		bl	__aeabi_fdiv
 725              	.LVL29:
 726 002c FFF7FEFF 		bl	__aeabi_f2uiz
 727              	.LVL30:
 728 0030 85B2     		uxth	r5, r0
 729              	.LVL31:
 321:..//Source/stm/board/board_stm32l151cd/board.c **** 
 730              		.loc 1 321 0
 731 0032 3046     		mov	r0, r6
 732 0034 FFF7FEFF 		bl	__aeabi_ui2f
 733              	.LVL32:
 734 0038 0A49     		ldr	r1, .L51+12
 735 003a FFF7FEFF 		bl	__aeabi_fdiv
ARM GAS  /tmp/ccD3wtrw.s 			page 70


 736              	.LVL33:
 737 003e 0446     		mov	r4, r0
 738 0040 2846     		mov	r0, r5
 739 0042 FFF7FEFF 		bl	__aeabi_i2f
 740              	.LVL34:
 741 0046 2146     		mov	r1, r4
 742 0048 FFF7FEFF 		bl	__aeabi_fmul
 743              	.LVL35:
 744 004c FFF7FEFF 		bl	__aeabi_f2uiz
 745              	.LVL36:
 746 0050 80B2     		uxth	r0, r0
 747              	.LVL37:
 325:..//Source/stm/board/board_stm32l151cd/board.c ****     return batteryVoltage;
 748              		.loc 1 325 0
 749 0052 4000     		lsls	r0, r0, #1
 750              	.LVL38:
 751 0054 80B2     		uxth	r0, r0
 752              	.LVL39:
 327:..//Source/stm/board/board_stm32l151cd/board.c **** 
 753              		.loc 1 327 0
 754 0056 70BD     		pop	{r4, r5, r6, pc}
 755              	.LVL40:
 756              	.L52:
 757              		.align	2
 758              	.L51:
 759 0058 7800F81F 		.word	536346744
 760 005c 00000000 		.word	Adc
 761 0060 00404E45 		.word	1162756096
 762 0064 00F07F45 		.word	1166012416
 763              		.cfi_endproc
 764              	.LFE80:
 766              		.section	.text.BoardGetBatteryVoltage,"ax",%progbits
 767              		.align	1
 768              		.global	BoardGetBatteryVoltage
 769              		.syntax unified
 770              		.thumb
 771              		.thumb_func
 772              		.fpu softvfp
 774              	BoardGetBatteryVoltage:
 775              	.LFB81:
 330:..//Source/stm/board/board_stm32l151cd/board.c ****     return BatteryVoltage;
 776              		.loc 1 330 0
 777              		.cfi_startproc
 778              		@ args = 0, pretend = 0, frame = 0
 779              		@ frame_needed = 0, uses_anonymous_args = 0
 780              		@ link register save eliminated.
 332:..//Source/stm/board/board_stm32l151cd/board.c **** 
 781              		.loc 1 332 0
 782 0000 014B     		ldr	r3, .L54
 783 0002 1888     		ldrh	r0, [r3]
 784 0004 7047     		bx	lr
 785              	.L55:
 786 0006 00BF     		.align	2
 787              	.L54:
 788 0008 00000000 		.word	.LANCHOR3
 789              		.cfi_endproc
 790              	.LFE81:
ARM GAS  /tmp/ccD3wtrw.s 			page 71


 792              		.section	.text.SysTick_Handler,"ax",%progbits
 793              		.align	1
 794              		.global	SysTick_Handler
 795              		.syntax unified
 796              		.thumb
 797              		.thumb_func
 798              		.fpu softvfp
 800              	SysTick_Handler:
 801              	.LFB87:
 497:..//Source/stm/board/board_stm32l151cd/board.c **** 
 498:..//Source/stm/board/board_stm32l151cd/board.c **** void SysTick_Handler( void )
 499:..//Source/stm/board/board_stm32l151cd/board.c **** {
 802              		.loc 1 499 0
 803              		.cfi_startproc
 804              		@ args = 0, pretend = 0, frame = 0
 805              		@ frame_needed = 0, uses_anonymous_args = 0
 806 0000 08B5     		push	{r3, lr}
 807              	.LCFI13:
 808              		.cfi_def_cfa_offset 8
 809              		.cfi_offset 3, -8
 810              		.cfi_offset 14, -4
 500:..//Source/stm/board/board_stm32l151cd/board.c ****     HAL_IncTick( );
 811              		.loc 1 500 0
 812 0002 FFF7FEFF 		bl	HAL_IncTick
 813              	.LVL41:
 501:..//Source/stm/board/board_stm32l151cd/board.c ****     HAL_SYSTICK_IRQHandler( );
 814              		.loc 1 501 0
 815 0006 FFF7FEFF 		bl	HAL_SYSTICK_IRQHandler
 816              	.LVL42:
 817 000a 08BD     		pop	{r3, pc}
 818              		.cfi_endproc
 819              	.LFE87:
 821              		.section	.text.GetBoardPowerSource,"ax",%progbits
 822              		.align	1
 823              		.global	GetBoardPowerSource
 824              		.syntax unified
 825              		.thumb
 826              		.thumb_func
 827              		.fpu softvfp
 829              	GetBoardPowerSource:
 830              	.LFB88:
 502:..//Source/stm/board/board_stm32l151cd/board.c **** }
 503:..//Source/stm/board/board_stm32l151cd/board.c **** 
 504:..//Source/stm/board/board_stm32l151cd/board.c **** uint8_t GetBoardPowerSource( void )
 505:..//Source/stm/board/board_stm32l151cd/board.c **** {
 831              		.loc 1 505 0
 832              		.cfi_startproc
 833              		@ args = 0, pretend = 0, frame = 0
 834              		@ frame_needed = 0, uses_anonymous_args = 0
 835              		@ link register save eliminated.
 506:..//Source/stm/board/board_stm32l151cd/board.c **** #if defined( USE_USB_CDC )
 507:..//Source/stm/board/board_stm32l151cd/board.c ****     if( GpioRead( &UsbDetect ) == 1 )
 508:..//Source/stm/board/board_stm32l151cd/board.c ****     {
 509:..//Source/stm/board/board_stm32l151cd/board.c ****         return USB_POWER;
 510:..//Source/stm/board/board_stm32l151cd/board.c ****     }
 511:..//Source/stm/board/board_stm32l151cd/board.c ****     else
 512:..//Source/stm/board/board_stm32l151cd/board.c ****     {
ARM GAS  /tmp/ccD3wtrw.s 			page 72


 513:..//Source/stm/board/board_stm32l151cd/board.c ****         return BATTERY_POWER;
 514:..//Source/stm/board/board_stm32l151cd/board.c ****     }
 515:..//Source/stm/board/board_stm32l151cd/board.c **** #else
 516:..//Source/stm/board/board_stm32l151cd/board.c ****     return BATTERY_POWER;
 517:..//Source/stm/board/board_stm32l151cd/board.c **** #endif
 518:..//Source/stm/board/board_stm32l151cd/board.c **** }
 836              		.loc 1 518 0
 837 0000 0120     		movs	r0, #1
 838 0002 7047     		bx	lr
 839              		.cfi_endproc
 840              	.LFE88:
 842              		.section	.text.BoardUnusedIoInit,"ax",%progbits
 843              		.align	1
 844              		.syntax unified
 845              		.thumb
 846              		.thumb_func
 847              		.fpu softvfp
 849              	BoardUnusedIoInit:
 850              	.LFB83:
 369:..//Source/stm/board/board_stm32l151cd/board.c ****     Gpio_t ioPin;
 851              		.loc 1 369 0
 852              		.cfi_startproc
 853              		@ args = 0, pretend = 0, frame = 16
 854              		@ frame_needed = 0, uses_anonymous_args = 0
 855 0000 10B5     		push	{r4, lr}
 856              	.LCFI14:
 857              		.cfi_def_cfa_offset 8
 858              		.cfi_offset 4, -8
 859              		.cfi_offset 14, -4
 860 0002 86B0     		sub	sp, sp, #24
 861              	.LCFI15:
 862              		.cfi_def_cfa_offset 32
 372:..//Source/stm/board/board_stm32l151cd/board.c ****     {
 863              		.loc 1 372 0
 864 0004 FFF7FEFF 		bl	GetBoardPowerSource
 865              	.LVL43:
 866 0008 0128     		cmp	r0, #1
 867 000a 58D0     		beq	.L62
 868              	.L60:
 378:..//Source/stm/board/board_stm32l151cd/board.c ****     GpioInit( &ioPin, TEST_POINT2, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 869              		.loc 1 378 0
 870 000c 0024     		movs	r4, #0
 871 000e 0194     		str	r4, [sp, #4]
 872 0010 0094     		str	r4, [sp]
 873 0012 2346     		mov	r3, r4
 874 0014 0322     		movs	r2, #3
 875 0016 1C21     		movs	r1, #28
 876 0018 03A8     		add	r0, sp, #12
 877 001a FFF7FEFF 		bl	GpioInit
 878              	.LVL44:
 379:..//Source/stm/board/board_stm32l151cd/board.c ****     GpioInit( &ioPin, TEST_POINT3, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 879              		.loc 1 379 0
 880 001e 0194     		str	r4, [sp, #4]
 881 0020 0094     		str	r4, [sp]
 882 0022 2346     		mov	r3, r4
 883 0024 0322     		movs	r2, #3
 884 0026 1D21     		movs	r1, #29
ARM GAS  /tmp/ccD3wtrw.s 			page 73


 885 0028 03A8     		add	r0, sp, #12
 886 002a FFF7FEFF 		bl	GpioInit
 887              	.LVL45:
 380:..//Source/stm/board/board_stm32l151cd/board.c ****     GpioInit( &ioPin, TEST_POINT4, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 888              		.loc 1 380 0
 889 002e 0194     		str	r4, [sp, #4]
 890 0030 0094     		str	r4, [sp]
 891 0032 2346     		mov	r3, r4
 892 0034 0322     		movs	r2, #3
 893 0036 1E21     		movs	r1, #30
 894 0038 03A8     		add	r0, sp, #12
 895 003a FFF7FEFF 		bl	GpioInit
 896              	.LVL46:
 381:..//Source/stm/board/board_stm32l151cd/board.c **** 
 897              		.loc 1 381 0
 898 003e 0194     		str	r4, [sp, #4]
 899 0040 0094     		str	r4, [sp]
 900 0042 2346     		mov	r3, r4
 901 0044 0322     		movs	r2, #3
 902 0046 1F21     		movs	r1, #31
 903 0048 03A8     		add	r0, sp, #12
 904 004a FFF7FEFF 		bl	GpioInit
 905              	.LVL47:
 383:..//Source/stm/board/board_stm32l151cd/board.c ****     GpioInit( &ioPin, BOOT_1, PIN_ANALOGIC, PIN_OPEN_DRAIN, PIN_NO_PULL, 0 );
 906              		.loc 1 383 0
 907 004e 0194     		str	r4, [sp, #4]
 908 0050 0094     		str	r4, [sp]
 909 0052 2346     		mov	r3, r4
 910 0054 0322     		movs	r2, #3
 911 0056 1521     		movs	r1, #21
 912 0058 03A8     		add	r0, sp, #12
 913 005a FFF7FEFF 		bl	GpioInit
 914              	.LVL48:
 384:..//Source/stm/board/board_stm32l151cd/board.c **** 
 915              		.loc 1 384 0
 916 005e 0194     		str	r4, [sp, #4]
 917 0060 0094     		str	r4, [sp]
 918 0062 0123     		movs	r3, #1
 919 0064 0322     		movs	r2, #3
 920 0066 1221     		movs	r1, #18
 921 0068 03A8     		add	r0, sp, #12
 922 006a FFF7FEFF 		bl	GpioInit
 923              	.LVL49:
 386:..//Source/stm/board/board_stm32l151cd/board.c ****     GpioInit( &ioPin, WKUP1, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 924              		.loc 1 386 0
 925 006e 0194     		str	r4, [sp, #4]
 926 0070 0094     		str	r4, [sp]
 927 0072 2346     		mov	r3, r4
 928 0074 0322     		movs	r2, #3
 929 0076 1146     		mov	r1, r2
 930 0078 03A8     		add	r0, sp, #12
 931 007a FFF7FEFF 		bl	GpioInit
 932              	.LVL50:
 387:..//Source/stm/board/board_stm32l151cd/board.c **** 
 933              		.loc 1 387 0
 934 007e 0194     		str	r4, [sp, #4]
 935 0080 0094     		str	r4, [sp]
ARM GAS  /tmp/ccD3wtrw.s 			page 74


 936 0082 2346     		mov	r3, r4
 937 0084 0322     		movs	r2, #3
 938 0086 0821     		movs	r1, #8
 939 0088 03A8     		add	r0, sp, #12
 940 008a FFF7FEFF 		bl	GpioInit
 941              	.LVL51:
 394:..//Source/stm/board/board_stm32l151cd/board.c ****     HAL_DBGMCU_DisableDBGStopMode( );
 942              		.loc 1 394 0
 943 008e FFF7FEFF 		bl	HAL_DBGMCU_DisableDBGSleepMode
 944              	.LVL52:
 395:..//Source/stm/board/board_stm32l151cd/board.c ****     HAL_DBGMCU_DisableDBGStandbyMode( );
 945              		.loc 1 395 0
 946 0092 FFF7FEFF 		bl	HAL_DBGMCU_DisableDBGStopMode
 947              	.LVL53:
 396:..//Source/stm/board/board_stm32l151cd/board.c **** 
 948              		.loc 1 396 0
 949 0096 FFF7FEFF 		bl	HAL_DBGMCU_DisableDBGStandbyMode
 950              	.LVL54:
 398:..//Source/stm/board/board_stm32l151cd/board.c ****     GpioInit( &ioPin, SWCLK, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 951              		.loc 1 398 0
 952 009a 0194     		str	r4, [sp, #4]
 953 009c 0094     		str	r4, [sp]
 954 009e 2346     		mov	r3, r4
 955 00a0 0322     		movs	r2, #3
 956 00a2 0D21     		movs	r1, #13
 957 00a4 03A8     		add	r0, sp, #12
 958 00a6 FFF7FEFF 		bl	GpioInit
 959              	.LVL55:
 399:..//Source/stm/board/board_stm32l151cd/board.c **** #endif
 960              		.loc 1 399 0
 961 00aa 0194     		str	r4, [sp, #4]
 962 00ac 0094     		str	r4, [sp]
 963 00ae 2346     		mov	r3, r4
 964 00b0 0322     		movs	r2, #3
 965 00b2 0E21     		movs	r1, #14
 966 00b4 03A8     		add	r0, sp, #12
 967 00b6 FFF7FEFF 		bl	GpioInit
 968              	.LVL56:
 401:..//Source/stm/board/board_stm32l151cd/board.c **** 
 969              		.loc 1 401 0
 970 00ba 06B0     		add	sp, sp, #24
 971              	.LCFI16:
 972              		.cfi_remember_state
 973              		.cfi_def_cfa_offset 8
 974              		@ sp needed
 975 00bc 10BD     		pop	{r4, pc}
 976              	.L62:
 977              	.LCFI17:
 978              		.cfi_restore_state
 374:..//Source/stm/board/board_stm32l151cd/board.c ****         GpioInit( &ioPin, USB_DP, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 979              		.loc 1 374 0
 980 00be 0024     		movs	r4, #0
 981 00c0 0194     		str	r4, [sp, #4]
 982 00c2 0094     		str	r4, [sp]
 983 00c4 2346     		mov	r3, r4
 984 00c6 0322     		movs	r2, #3
 985 00c8 0B21     		movs	r1, #11
ARM GAS  /tmp/ccD3wtrw.s 			page 75


 986 00ca 03A8     		add	r0, sp, #12
 987 00cc FFF7FEFF 		bl	GpioInit
 988              	.LVL57:
 375:..//Source/stm/board/board_stm32l151cd/board.c ****     }
 989              		.loc 1 375 0
 990 00d0 0194     		str	r4, [sp, #4]
 991 00d2 0094     		str	r4, [sp]
 992 00d4 2346     		mov	r3, r4
 993 00d6 0322     		movs	r2, #3
 994 00d8 0C21     		movs	r1, #12
 995 00da 0DEB0100 		add	r0, sp, r1
 996 00de FFF7FEFF 		bl	GpioInit
 997              	.LVL58:
 998 00e2 93E7     		b	.L60
 999              		.cfi_endproc
 1000              	.LFE83:
 1002              		.section	.text.BoardInitMcu,"ax",%progbits
 1003              		.align	1
 1004              		.global	BoardInitMcu
 1005              		.syntax unified
 1006              		.thumb
 1007              		.thumb_func
 1008              		.fpu softvfp
 1010              	BoardInitMcu:
 1011              	.LFB75:
 184:..//Source/stm/board/board_stm32l151cd/board.c ****     if( McuInitialized == false )
 1012              		.loc 1 184 0
 1013              		.cfi_startproc
 1014              		@ args = 0, pretend = 0, frame = 0
 1015              		@ frame_needed = 0, uses_anonymous_args = 0
 1016 0000 00B5     		push	{lr}
 1017              	.LCFI18:
 1018              		.cfi_def_cfa_offset 4
 1019              		.cfi_offset 14, -4
 1020 0002 83B0     		sub	sp, sp, #12
 1021              	.LCFI19:
 1022              		.cfi_def_cfa_offset 16
 185:..//Source/stm/board/board_stm32l151cd/board.c ****     {
 1023              		.loc 1 185 0
 1024 0004 1A4B     		ldr	r3, .L69
 1025 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1026 0008 5BBB     		cbnz	r3, .L64
 191:..//Source/stm/board/board_stm32l151cd/board.c **** 
 1027              		.loc 1 191 0
 1028 000a FFF7FEFF 		bl	HAL_Init
 1029              	.LVL59:
 193:..//Source/stm/board/board_stm32l151cd/board.c **** 
 1030              		.loc 1 193 0
 1031 000e FFF7FEFF 		bl	SystemClockConfig
 1032              	.LVL60:
 197:..//Source/stm/board/board_stm32l151cd/board.c **** 
 1033              		.loc 1 197 0
 1034 0012 FFF7FEFF 		bl	RtcInit
 1035              	.LVL61:
 218:..//Source/stm/board/board_stm32l151cd/board.c **** 
 1036              		.loc 1 218 0
 1037 0016 FFF7FEFF 		bl	BoardUnusedIoInit
ARM GAS  /tmp/ccD3wtrw.s 			page 76


 1038              	.LVL62:
 220:..//Source/stm/board/board_stm32l151cd/board.c ****     }
 1039              		.loc 1 220 0
 1040 001a 1723     		movs	r3, #23
 1041 001c 1622     		movs	r2, #22
 1042 001e 0021     		movs	r1, #0
 1043 0020 1448     		ldr	r0, .L69+4
 1044 0022 FFF7FEFF 		bl	I2cInit
 1045              	.LVL63:
 1046              	.L65:
 227:..//Source/stm/board/board_stm32l151cd/board.c **** 
 1047              		.loc 1 227 0
 1048 0026 1021     		movs	r1, #16
 1049 0028 1348     		ldr	r0, .L69+8
 1050 002a FFF7FEFF 		bl	AdcInit
 1051              	.LVL64:
 229:..//Source/stm/board/board_stm32l151cd/board.c ****     SX1276IoInit( );
 1052              		.loc 1 229 0
 1053 002e 4FF0FF33 		mov	r3, #-1
 1054 0032 0193     		str	r3, [sp, #4]
 1055 0034 0523     		movs	r3, #5
 1056 0036 0093     		str	r3, [sp]
 1057 0038 0623     		movs	r3, #6
 1058 003a 0722     		movs	r2, #7
 1059 003c 0021     		movs	r1, #0
 1060 003e 0F48     		ldr	r0, .L69+12
 1061 0040 FFF7FEFF 		bl	SpiInit
 1062              	.LVL65:
 230:..//Source/stm/board/board_stm32l151cd/board.c **** 
 1063              		.loc 1 230 0
 1064 0044 FFF7FEFF 		bl	SX1276IoInit
 1065              	.LVL66:
 232:..//Source/stm/board/board_stm32l151cd/board.c ****     {
 1066              		.loc 1 232 0
 1067 0048 094B     		ldr	r3, .L69
 1068 004a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1069 004c 33B9     		cbnz	r3, .L63
 234:..//Source/stm/board/board_stm32l151cd/board.c ****         if( GetBoardPowerSource( ) == BATTERY_POWER )
 1070              		.loc 1 234 0
 1071 004e 0122     		movs	r2, #1
 1072 0050 074B     		ldr	r3, .L69
 1073 0052 1A70     		strb	r2, [r3]
 235:..//Source/stm/board/board_stm32l151cd/board.c ****         {
 1074              		.loc 1 235 0
 1075 0054 FFF7FEFF 		bl	GetBoardPowerSource
 1076              	.LVL67:
 1077 0058 0128     		cmp	r0, #1
 1078 005a 05D0     		beq	.L68
 1079              	.L63:
 240:..//Source/stm/board/board_stm32l151cd/board.c **** 
 1080              		.loc 1 240 0
 1081 005c 03B0     		add	sp, sp, #12
 1082              	.LCFI20:
 1083              		.cfi_remember_state
 1084              		.cfi_def_cfa_offset 4
 1085              		@ sp needed
 1086 005e 5DF804FB 		ldr	pc, [sp], #4
ARM GAS  /tmp/ccD3wtrw.s 			page 77


 1087              	.L64:
 1088              	.LCFI21:
 1089              		.cfi_restore_state
 224:..//Source/stm/board/board_stm32l151cd/board.c ****     }
 1090              		.loc 1 224 0
 1091 0062 FFF7FEFF 		bl	SystemClockReConfig
 1092              	.LVL68:
 1093 0066 DEE7     		b	.L65
 1094              	.L68:
 237:..//Source/stm/board/board_stm32l151cd/board.c ****         }
 1095              		.loc 1 237 0
 1096 0068 FFF7FEFF 		bl	CalibrateSystemWakeupTime
 1097              	.LVL69:
 240:..//Source/stm/board/board_stm32l151cd/board.c **** 
 1098              		.loc 1 240 0
 1099 006c F6E7     		b	.L63
 1100              	.L70:
 1101 006e 00BF     		.align	2
 1102              	.L69:
 1103 0070 00000000 		.word	.LANCHOR4
 1104 0074 00000000 		.word	I2c
 1105 0078 00000000 		.word	Adc
 1106 007c 54000000 		.word	SX1276+84
 1107              		.cfi_endproc
 1108              	.LFE75:
 1110              		.section	.text.BoardGetBatteryLevel,"ax",%progbits
 1111              		.align	1
 1112              		.global	BoardGetBatteryLevel
 1113              		.syntax unified
 1114              		.thumb
 1115              		.thumb_func
 1116              		.fpu softvfp
 1118              	BoardGetBatteryLevel:
 1119              	.LFB82:
 335:..//Source/stm/board/board_stm32l151cd/board.c ****     uint8_t batteryLevel = 0;
 1120              		.loc 1 335 0
 1121              		.cfi_startproc
 1122              		@ args = 0, pretend = 0, frame = 0
 1123              		@ frame_needed = 0, uses_anonymous_args = 0
 1124 0000 10B5     		push	{r4, lr}
 1125              	.LCFI22:
 1126              		.cfi_def_cfa_offset 8
 1127              		.cfi_offset 4, -8
 1128              		.cfi_offset 14, -4
 1129              	.LVL70:
 338:..//Source/stm/board/board_stm32l151cd/board.c **** 
 1130              		.loc 1 338 0
 1131 0002 FFF7FEFF 		bl	BoardBatteryMeasureVolage
 1132              	.LVL71:
 1133 0006 0446     		mov	r4, r0
 1134 0008 154B     		ldr	r3, .L80
 1135 000a 1880     		strh	r0, [r3]	@ movhi
 340:..//Source/stm/board/board_stm32l151cd/board.c ****     {
 1136              		.loc 1 340 0
 1137 000c FFF7FEFF 		bl	GetBoardPowerSource
 1138              	.LVL72:
 1139 0010 0346     		mov	r3, r0
ARM GAS  /tmp/ccD3wtrw.s 			page 78


 1140 0012 20B1     		cbz	r0, .L72
 346:..//Source/stm/board/board_stm32l151cd/board.c ****         {
 1141              		.loc 1 346 0
 1142 0014 41F23503 		movw	r3, #4149
 1143 0018 9C42     		cmp	r4, r3
 1144 001a 02D9     		bls	.L77
 348:..//Source/stm/board/board_stm32l151cd/board.c ****         }
 1145              		.loc 1 348 0
 1146 001c FE23     		movs	r3, #254
 1147              	.LVL73:
 1148              	.L72:
 366:..//Source/stm/board/board_stm32l151cd/board.c **** 
 1149              		.loc 1 366 0
 1150 001e 1846     		mov	r0, r3
 1151 0020 10BD     		pop	{r4, pc}
 1152              	.LVL74:
 1153              	.L77:
 350:..//Source/stm/board/board_stm32l151cd/board.c ****         {
 1154              		.loc 1 350 0
 1155 0022 A4F68143 		subw	r3, r4, #3201
 1156 0026 9BB2     		uxth	r3, r3
 1157 0028 B3F56D7F 		cmp	r3, #948
 1158 002c 06D9     		bls	.L78
 354:..//Source/stm/board/board_stm32l151cd/board.c ****         {
 1159              		.loc 1 354 0
 1160 002e A4F61D44 		subw	r4, r4, #3101
 1161 0032 A4B2     		uxth	r4, r4
 1162 0034 632C     		cmp	r4, #99
 1163 0036 11D9     		bls	.L79
 360:..//Source/stm/board/board_stm32l151cd/board.c ****             //GpioInit( &DcDcEnable, DC_DC_EN, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 1164              		.loc 1 360 0
 1165 0038 FF23     		movs	r3, #255
 1166 003a F0E7     		b	.L72
 1167              	.L78:
 352:..//Source/stm/board/board_stm32l151cd/board.c ****         }
 1168              		.loc 1 352 0
 1169 003c A4F54864 		sub	r4, r4, #3200
 1170 0040 C4EB8413 		rsb	r3, r4, r4, lsl #6
 1171 0044 04EB8304 		add	r4, r4, r3, lsl #2
 1172 0048 0648     		ldr	r0, .L80+4
 1173 004a 80FB0430 		smull	r3, r0, r0, r4
 1174 004e E417     		asrs	r4, r4, #31
 1175 0050 C4EB2020 		rsb	r0, r4, r0, asr #8
 1176 0054 C0B2     		uxtb	r0, r0
 1177 0056 0130     		adds	r0, r0, #1
 1178 0058 C3B2     		uxtb	r3, r0
 1179              	.LVL75:
 1180 005a E0E7     		b	.L72
 1181              	.LVL76:
 1182              	.L79:
 356:..//Source/stm/board/board_stm32l151cd/board.c ****         }
 1183              		.loc 1 356 0
 1184 005c 0123     		movs	r3, #1
 1185 005e DEE7     		b	.L72
 1186              	.L81:
 1187              		.align	2
 1188              	.L80:
ARM GAS  /tmp/ccD3wtrw.s 			page 79


 1189 0060 00000000 		.word	.LANCHOR3
 1190 0064 353AFC44 		.word	1157380661
 1191              		.cfi_endproc
 1192              	.LFE82:
 1194              		.section	.text.__io_putchar,"ax",%progbits
 1195              		.align	1
 1196              		.global	__io_putchar
 1197              		.syntax unified
 1198              		.thumb
 1199              		.thumb_func
 1200              		.fpu softvfp
 1202              	__io_putchar:
 1203              	.LFB89:
 519:..//Source/stm/board/board_stm32l151cd/board.c **** 
 520:..//Source/stm/board/board_stm32l151cd/board.c **** #ifdef __GNUC__
 521:..//Source/stm/board/board_stm32l151cd/board.c **** int __io_putchar( int c )
 522:..//Source/stm/board/board_stm32l151cd/board.c **** #else /* __GNUC__ */
 523:..//Source/stm/board/board_stm32l151cd/board.c **** int fputc( int c, FILE *stream )
 524:..//Source/stm/board/board_stm32l151cd/board.c **** #endif
 525:..//Source/stm/board/board_stm32l151cd/board.c **** {
 1204              		.loc 1 525 0
 1205              		.cfi_startproc
 1206              		@ args = 0, pretend = 0, frame = 0
 1207              		@ frame_needed = 0, uses_anonymous_args = 0
 1208              		@ link register save eliminated.
 1209              	.LVL77:
 526:..//Source/stm/board/board_stm32l151cd/board.c **** #if defined( USE_USB_CDC )
 527:..//Source/stm/board/board_stm32l151cd/board.c ****     while( UartPutChar( &UartUsb, c ) != 0 );
 528:..//Source/stm/board/board_stm32l151cd/board.c **** #endif
 529:..//Source/stm/board/board_stm32l151cd/board.c ****     return c;
 530:..//Source/stm/board/board_stm32l151cd/board.c **** }
 1210              		.loc 1 530 0
 1211 0000 7047     		bx	lr
 1212              		.cfi_endproc
 1213              	.LFE89:
 1215              		.comm	Uart1,56,4
 1216              		.comm	I2c,28,4
 1217              		.comm	Adc,12,4
 1218              		.comm	UsbDetect,12,4
 1219              		.comm	Led4,12,4
 1220              		.comm	Led3,12,4
 1221              		.comm	Led2,12,4
 1222              		.comm	Led1,12,4
 1223              		.section	.bss.CalibrateSystemWakeupTimeTimer,"aw",%nobits
 1224              		.align	2
 1225              		.set	.LANCHOR1,. + 0
 1228              	CalibrateSystemWakeupTimeTimer:
 1229 0000 00000000 		.space	20
 1229      00000000 
 1229      00000000 
 1229      00000000 
 1229      00000000 
 1230              		.section	.bss.IrqNestLevel,"aw",%nobits
 1231              		.set	.LANCHOR2,. + 0
 1234              	IrqNestLevel:
 1235 0000 00       		.space	1
 1236              		.section	.bss.McuInitialized,"aw",%nobits
ARM GAS  /tmp/ccD3wtrw.s 			page 80


 1237              		.set	.LANCHOR4,. + 0
 1240              	McuInitialized:
 1241 0000 00       		.space	1
 1242              		.section	.bss.SystemWakeupTimeCalibrated,"aw",%nobits
 1243              		.set	.LANCHOR0,. + 0
 1246              	SystemWakeupTimeCalibrated:
 1247 0000 00       		.space	1
 1248              		.section	.data.BatteryVoltage,"aw",%progbits
 1249              		.align	1
 1250              		.set	.LANCHOR3,. + 0
 1253              	BatteryVoltage:
 1254 0000 3610     		.short	4150
 1255              		.text
 1256              	.Letext0:
 1257              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 1258              		.file 5 "/usr/include/newlib/sys/_stdint.h"
 1259              		.file 6 "..//Source/stm/lib/CMSIS/Device/ST/STM32L1xx/Include/system_stm32l1xx.h"
 1260              		.file 7 "..//Source/stm/lib/CMSIS/Device/ST/STM32L1xx/Include/stm32l151xba.h"
 1261              		.file 8 "..//Source/stm/lib/CMSIS/Device/ST/STM32L1xx/Include/stm32l1xx.h"
 1262              		.file 9 "..//Source/stm/lib/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal_def.h"
 1263              		.file 10 "..//Source/stm/lib/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal_rcc.h"
 1264              		.file 11 "..//Source/stm/lib/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal_rcc_ex.h"
 1265              		.file 12 "..//Source/stm/lib/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal.h"
 1266              		.file 13 "..//Source/stm/hal/gpio.h"
 1267              		.file 14 "..//Source/stm/hal/adc.h"
 1268              		.file 15 "..//Source/stm/hal/spi.h"
 1269              		.file 16 "..//Source/stm/hal/i2c.h"
 1270              		.file 17 "..//Source/stm/hal/fifo.h"
 1271              		.file 18 "..//Source/stm/hal/uart.h"
 1272              		.file 19 "..//Source/stm/hal/timer.h"
 1273              		.file 20 "..//Source/external/LoRaMac-node/src/radio/radio.h"
 1274              		.file 21 "..//Source/external/LoRaMac-node/src/radio/sx1276/sx1276.h"
 1275              		.file 22 "..//Source/stm/board/sx1276-board.h"
 1276              		.file 23 "..//Source/stm/lib/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal_cortex.h"
 1277              		.file 24 "..//Source/stm/board/rtc-board.h"
 1278              		.file 25 "..//Source/stm/board/board.h"
ARM GAS  /tmp/ccD3wtrw.s 			page 81


DEFINED SYMBOLS
                            *ABS*:0000000000000000 board.c
     /tmp/ccD3wtrw.s:16     .text.OnCalibrateSystemWakeupTimeTimerEvent:0000000000000000 $t
     /tmp/ccD3wtrw.s:22     .text.OnCalibrateSystemWakeupTimeTimerEvent:0000000000000000 OnCalibrateSystemWakeupTimeTimerEvent
     /tmp/ccD3wtrw.s:38     .text.OnCalibrateSystemWakeupTimeTimerEvent:0000000000000008 $d
     /tmp/ccD3wtrw.s:43     .text.SystemClockReConfig:0000000000000000 $t
     /tmp/ccD3wtrw.s:49     .text.SystemClockReConfig:0000000000000000 SystemClockReConfig
     /tmp/ccD3wtrw.s:117    .text.SystemClockReConfig:0000000000000060 $d
     /tmp/ccD3wtrw.s:124    .text.SystemClockConfig:0000000000000000 $t
     /tmp/ccD3wtrw.s:130    .text.SystemClockConfig:0000000000000000 SystemClockConfig
     /tmp/ccD3wtrw.s:245    .text.SystemClockConfig:000000000000009c $d
     /tmp/ccD3wtrw.s:252    .text.CalibrateSystemWakeupTime:0000000000000000 $t
     /tmp/ccD3wtrw.s:258    .text.CalibrateSystemWakeupTime:0000000000000000 CalibrateSystemWakeupTime
     /tmp/ccD3wtrw.s:307    .text.CalibrateSystemWakeupTime:0000000000000034 $d
     /tmp/ccD3wtrw.s:314    .text.BoardDisableIrq:0000000000000000 $t
     /tmp/ccD3wtrw.s:321    .text.BoardDisableIrq:0000000000000000 BoardDisableIrq
     /tmp/ccD3wtrw.s:349    .text.BoardDisableIrq:000000000000000c $d
     /tmp/ccD3wtrw.s:354    .text.BoardEnableIrq:0000000000000000 $t
     /tmp/ccD3wtrw.s:361    .text.BoardEnableIrq:0000000000000000 BoardEnableIrq
     /tmp/ccD3wtrw.s:390    .text.BoardEnableIrq:0000000000000010 $d
     /tmp/ccD3wtrw.s:397    .text.BoardResetMcu:0000000000000000 $t
     /tmp/ccD3wtrw.s:404    .text.BoardResetMcu:0000000000000000 BoardResetMcu
     /tmp/ccD3wtrw.s:464    .text.BoardResetMcu:0000000000000020 $d
     /tmp/ccD3wtrw.s:472    .text.BoardDeInitMcu:0000000000000000 $t
     /tmp/ccD3wtrw.s:479    .text.BoardDeInitMcu:0000000000000000 BoardDeInitMcu
     /tmp/ccD3wtrw.s:559    .text.BoardDeInitMcu:000000000000006c $d
                            *COM*:000000000000000c Adc
                            *COM*:000000000000000c UsbDetect
     /tmp/ccD3wtrw.s:566    .text.BoardGetRandomSeed:0000000000000000 $t
     /tmp/ccD3wtrw.s:573    .text.BoardGetRandomSeed:0000000000000000 BoardGetRandomSeed
     /tmp/ccD3wtrw.s:594    .text.BoardGetRandomSeed:0000000000000014 $d
     /tmp/ccD3wtrw.s:600    .text.BoardGetUniqueId:0000000000000000 $t
     /tmp/ccD3wtrw.s:607    .text.BoardGetUniqueId:0000000000000000 BoardGetUniqueId
     /tmp/ccD3wtrw.s:667    .text.BoardGetUniqueId:0000000000000044 $d
     /tmp/ccD3wtrw.s:679    .text.BoardBatteryMeasureVolage:0000000000000000 $t
     /tmp/ccD3wtrw.s:686    .text.BoardBatteryMeasureVolage:0000000000000000 BoardBatteryMeasureVolage
     /tmp/ccD3wtrw.s:759    .text.BoardBatteryMeasureVolage:0000000000000058 $d
     /tmp/ccD3wtrw.s:767    .text.BoardGetBatteryVoltage:0000000000000000 $t
     /tmp/ccD3wtrw.s:774    .text.BoardGetBatteryVoltage:0000000000000000 BoardGetBatteryVoltage
     /tmp/ccD3wtrw.s:788    .text.BoardGetBatteryVoltage:0000000000000008 $d
     /tmp/ccD3wtrw.s:793    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccD3wtrw.s:800    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccD3wtrw.s:822    .text.GetBoardPowerSource:0000000000000000 $t
     /tmp/ccD3wtrw.s:829    .text.GetBoardPowerSource:0000000000000000 GetBoardPowerSource
     /tmp/ccD3wtrw.s:843    .text.BoardUnusedIoInit:0000000000000000 $t
     /tmp/ccD3wtrw.s:849    .text.BoardUnusedIoInit:0000000000000000 BoardUnusedIoInit
     /tmp/ccD3wtrw.s:1003   .text.BoardInitMcu:0000000000000000 $t
     /tmp/ccD3wtrw.s:1010   .text.BoardInitMcu:0000000000000000 BoardInitMcu
     /tmp/ccD3wtrw.s:1103   .text.BoardInitMcu:0000000000000070 $d
                            *COM*:000000000000001c I2c
     /tmp/ccD3wtrw.s:1111   .text.BoardGetBatteryLevel:0000000000000000 $t
     /tmp/ccD3wtrw.s:1118   .text.BoardGetBatteryLevel:0000000000000000 BoardGetBatteryLevel
     /tmp/ccD3wtrw.s:1189   .text.BoardGetBatteryLevel:0000000000000060 $d
     /tmp/ccD3wtrw.s:1195   .text.__io_putchar:0000000000000000 $t
     /tmp/ccD3wtrw.s:1202   .text.__io_putchar:0000000000000000 __io_putchar
                            *COM*:0000000000000038 Uart1
                            *COM*:000000000000000c Led4
ARM GAS  /tmp/ccD3wtrw.s 			page 82


                            *COM*:000000000000000c Led3
                            *COM*:000000000000000c Led2
                            *COM*:000000000000000c Led1
     /tmp/ccD3wtrw.s:1224   .bss.CalibrateSystemWakeupTimeTimer:0000000000000000 $d
     /tmp/ccD3wtrw.s:1228   .bss.CalibrateSystemWakeupTimeTimer:0000000000000000 CalibrateSystemWakeupTimeTimer
     /tmp/ccD3wtrw.s:1234   .bss.IrqNestLevel:0000000000000000 IrqNestLevel
     /tmp/ccD3wtrw.s:1235   .bss.IrqNestLevel:0000000000000000 $d
     /tmp/ccD3wtrw.s:1240   .bss.McuInitialized:0000000000000000 McuInitialized
     /tmp/ccD3wtrw.s:1241   .bss.McuInitialized:0000000000000000 $d
     /tmp/ccD3wtrw.s:1246   .bss.SystemWakeupTimeCalibrated:0000000000000000 SystemWakeupTimeCalibrated
     /tmp/ccD3wtrw.s:1247   .bss.SystemWakeupTimeCalibrated:0000000000000000 $d
     /tmp/ccD3wtrw.s:1249   .data.BatteryVoltage:0000000000000000 $d
     /tmp/ccD3wtrw.s:1253   .data.BatteryVoltage:0000000000000000 BatteryVoltage
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriorityGrouping
HAL_NVIC_SetPriority
TimerInit
TimerSetValue
TimerStart
TimerLowPowerHandler
AdcDeInit
SpiDeInit
SX1276IoDeInit
GpioInit
SX1276
__aeabi_ui2f
__aeabi_fmul
__aeabi_fdiv
__aeabi_f2uiz
__aeabi_i2f
AdcReadChannel
HAL_IncTick
HAL_SYSTICK_IRQHandler
HAL_DBGMCU_DisableDBGSleepMode
HAL_DBGMCU_DisableDBGStopMode
HAL_DBGMCU_DisableDBGStandbyMode
HAL_Init
RtcInit
I2cInit
AdcInit
SpiInit
SX1276IoInit
