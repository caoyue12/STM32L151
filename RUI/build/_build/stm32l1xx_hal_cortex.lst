ARM GAS  /tmp/cciU3xpT.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32l1xx_hal_cortex.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.HAL_NVIC_SetPriorityGrouping,"ax",%progbits
  16              		.align	1
  17              		.global	HAL_NVIC_SetPriorityGrouping
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	HAL_NVIC_SetPriorityGrouping:
  24              	.LFB72:
  25              		.file 1 "..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c"
   1:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** /**
   2:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   ******************************************************************************
   3:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @file    stm32l1xx_hal_cortex.c
   4:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @author  MCD Application Team
   5:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @brief   CORTEX HAL module driver.
   6:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *
   7:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *          This file provides firmware functions to manage the following
   8:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *          functionalities of the CORTEX:
   9:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *           + Initialization and de-initialization functions
  10:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *           + Peripheral Control functions
  11:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *          
  12:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *  @verbatim    
  13:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   ==============================================================================
  14:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****                         ##### How to use this driver #####
  15:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   ==============================================================================
  16:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** 
  17:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****     [..]  
  18:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****     *** How to configure Interrupts using Cortex HAL driver ***
  19:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****     ===========================================================
  20:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****     [..]     
  21:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****     This section provide functions allowing to configure the NVIC interrupts (IRQ).
  22:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****     The Cortex-M3 exceptions are managed by CMSIS functions.
  23:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****    
  24:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****     (#) Configure the NVIC Priority Grouping using HAL_NVIC_SetPriorityGrouping() function
  25:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** 
  26:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****      (#)  Configure the priority of the selected IRQ Channels using HAL_NVIC_SetPriority() 
  27:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** 
  28:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****      (#)  Enable the selected IRQ Channels using HAL_NVIC_EnableIRQ() 
  29:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****       
  30:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** 
  31:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****      -@- When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible. 
  32:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****          The pending IRQ priority will be managed only by the sub priority.
  33:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****    
ARM GAS  /tmp/cciU3xpT.s 			page 2


  34:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****      -@- IRQ priority order (sorted by highest to lowest priority):
  35:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****         (+@) Lowest pre-emption priority
  36:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****         (+@) Lowest sub priority
  37:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****         (+@) Lowest hardware priority (IRQ number)
  38:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****  
  39:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****     [..]  
  40:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****     *** How to configure Systick using Cortex HAL driver ***
  41:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****     ========================================================
  42:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****     [..]
  43:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****     Setup SysTick Timer for 1 msec interrupts.
  44:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****            
  45:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****    (+) The HAL_SYSTICK_Config()function calls the SysTick_Config() function which
  46:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****        is a CMSIS function that:
  47:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****         (++) Configures the SysTick Reload register with value passed as function parameter.
  48:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****         (++) Configures the SysTick IRQ priority to the lowest value (0x0F).
  49:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****         (++) Resets the SysTick Counter register.
  50:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****         (++) Configures the SysTick Counter clock source to be Core Clock Source (HCLK).
  51:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****         (++) Enables the SysTick Interrupt.
  52:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****         (++) Starts the SysTick Counter.
  53:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****     
  54:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****    (+) You can change the SysTick Clock source to be HCLK_Div8 by calling the macro
  55:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****        __HAL_CORTEX_SYSTICKCLK_CONFIG(SYSTICK_CLKSOURCE_HCLK_DIV8) just after the
  56:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****        HAL_SYSTICK_Config() function call. The __HAL_CORTEX_SYSTICKCLK_CONFIG() macro is defined
  57:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****        inside the stm32l1xx_hal_cortex.h file.
  58:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** 
  59:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****    (+) You can change the SysTick IRQ priority by calling the
  60:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****        HAL_NVIC_SetPriority(SysTick_IRQn,...) function just after the HAL_SYSTICK_Config() function
  61:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****        call. The HAL_NVIC_SetPriority() call the NVIC_SetPriority() function which is a CMSIS funct
  62:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** 
  63:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****    (+) To adjust the SysTick time base, use the following formula:
  64:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****                             
  65:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****        Reload Value = SysTick Counter Clock (Hz) x  Desired Time base (s)
  66:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****        (++) Reload Value is the parameter to be passed for HAL_SYSTICK_Config() function
  67:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****        (++) Reload Value should not exceed 0xFFFFFF
  68:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****    
  69:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   @endverbatim
  70:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   ******************************************************************************
  71:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @attention
  72:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *
  73:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
  74:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * All rights reserved.</center></h2>
  75:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *
  76:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  77:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * the "License"; You may not use this file except in compliance with the
  78:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * License. You may obtain a copy of the License at:
  79:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *                        opensource.org/licenses/BSD-3-Clause
  80:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *
  81:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   ******************************************************************************
  82:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   */
  83:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** 
  84:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** /*
  85:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   Additional Tables: CORTEX_NVIC_Priority_Table
  86:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****      The table below gives the allowed values of the pre-emption priority and subpriority according
  87:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****      to the Priority Grouping configuration performed by HAL_NVIC_SetPriorityGrouping() function.
  88:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****        ============================================================================================
  89:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****          NVIC_PriorityGroup   | NVIC_IRQChannelPreemptionPriority | NVIC_IRQChannelSubPriority  |  
  90:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****        ============================================================================================
ARM GAS  /tmp/cciU3xpT.s 			page 3


  91:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****         NVIC_PRIORITYGROUP_0  |                0                  |            0-15             | 0
  92:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****                               |                                   |                             | 4
  93:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****        --------------------------------------------------------------------------------------------
  94:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****         NVIC_PRIORITYGROUP_1  |                0-1                |            0-7              | 1
  95:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****                               |                                   |                             | 3
  96:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****        --------------------------------------------------------------------------------------------
  97:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****         NVIC_PRIORITYGROUP_2  |                0-3                |            0-3              | 2
  98:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****                               |                                   |                             | 2
  99:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****        --------------------------------------------------------------------------------------------
 100:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****         NVIC_PRIORITYGROUP_3  |                0-7                |            0-1              | 3
 101:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****                               |                                   |                             | 1
 102:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****        --------------------------------------------------------------------------------------------
 103:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****         NVIC_PRIORITYGROUP_4  |                0-15               |            0                | 4
 104:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****                               |                                   |                             | 0
 105:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****        ============================================================================================
 106:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** */
 107:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** 
 108:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** /* Includes ------------------------------------------------------------------*/
 109:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** #include "stm32l1xx_hal.h"
 110:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** 
 111:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** /** @addtogroup STM32L1xx_HAL_Driver
 112:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @{
 113:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   */
 114:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** 
 115:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** /** @defgroup CORTEX CORTEX
 116:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @brief CORTEX HAL module driver
 117:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @{
 118:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   */
 119:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** 
 120:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** #ifdef HAL_CORTEX_MODULE_ENABLED
 121:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** 
 122:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** /* Private typedef -----------------------------------------------------------*/
 123:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** /* Private define ------------------------------------------------------------*/
 124:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** /* Private macro -------------------------------------------------------------*/
 125:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** /* Private variables ---------------------------------------------------------*/
 126:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** /* Private function prototypes -----------------------------------------------*/
 127:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** /* Private functions ---------------------------------------------------------*/
 128:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** 
 129:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** /** @defgroup CORTEX_Exported_Functions CORTEX Exported Functions
 130:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @{
 131:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   */
 132:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** 
 133:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** 
 134:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** /** @defgroup CORTEX_Exported_Functions_Group1 Initialization and de-initialization functions
 135:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****  *  @brief    Initialization and Configuration functions 
 136:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****  *
 137:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** @verbatim    
 138:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   ==============================================================================
 139:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****               ##### Initialization and de-initialization functions #####
 140:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   ==============================================================================
 141:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****     [..]
 142:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****       This section provide the Cortex HAL driver functions allowing to configure Interrupts
 143:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****       Systick functionalities 
 144:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** 
 145:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** @endverbatim
 146:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @{
 147:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   */
ARM GAS  /tmp/cciU3xpT.s 			page 4


 148:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** 
 149:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** 
 150:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** /**
 151:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @brief  Sets the priority grouping field (pre-emption priority and subpriority)
 152:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *         using the required unlock sequence.
 153:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @param  PriorityGroup The priority grouping bits length. 
 154:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *         This parameter can be one of the following values:
 155:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *         @arg NVIC_PRIORITYGROUP_0: 0 bits for pre-emption priority
 156:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *                                    4 bits for subpriority
 157:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *         @arg NVIC_PRIORITYGROUP_1: 1 bits for pre-emption priority
 158:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *                                    3 bits for subpriority
 159:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *         @arg NVIC_PRIORITYGROUP_2: 2 bits for pre-emption priority
 160:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *                                    2 bits for subpriority
 161:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *         @arg NVIC_PRIORITYGROUP_3: 3 bits for pre-emption priority
 162:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *                                    1 bits for subpriority
 163:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *         @arg NVIC_PRIORITYGROUP_4: 4 bits for pre-emption priority
 164:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *                                    0 bits for subpriority
 165:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
 166:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *         The pending IRQ priority will be managed only by the subpriority. 
 167:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @retval None
 168:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   */
 169:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
 170:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** {
  26              		.loc 1 170 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
  32              	.LBB52:
  33              	.LBB53:
  34              		.file 2 "..//Source/stm/lib/CMSIS/Include/core_cm3.h"
   1:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**************************************************************************//**
   2:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  * @file     core_cm3.h
   3:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  * @version  V5.0.8
   5:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  * @date     04. June 2018
   6:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  ******************************************************************************/
   7:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /*
   8:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  *
  10:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  * SPDX-License-Identifier: Apache-2.0
  11:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  *
  12:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  * not use this file except in compliance with the License.
  14:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  * You may obtain a copy of the License at
  15:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  *
  16:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  *
  18:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  * Unless required by applicable law or agreed to in writing, software
  19:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  * See the License for the specific language governing permissions and
  22:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  * limitations under the License.
  23:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
  24:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
  25:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #if   defined ( __ICCARM__ )
ARM GAS  /tmp/cciU3xpT.s 			page 5


  26:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #elif defined (__clang__)
  28:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #pragma clang system_header   /* treat file as system include file */
  29:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #endif
  30:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
  31:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #ifndef __CORE_CM3_H_GENERIC
  32:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define __CORE_CM3_H_GENERIC
  33:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
  34:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #include <stdint.h>
  35:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
  36:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #ifdef __cplusplus
  37:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  extern "C" {
  38:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #endif
  39:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
  40:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
  41:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
  44:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****      Function definitions in header files are used to allow 'inlining'.
  46:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
  47:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****      Unions are used for effective representation of core registers.
  49:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
  50:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****      Function-like macros are used to allow more efficient code.
  52:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
  53:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
  54:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
  55:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /*******************************************************************************
  56:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  *                 CMSIS definitions
  57:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  ******************************************************************************/
  58:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
  59:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \ingroup Cortex_M3
  60:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   @{
  61:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
  62:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
  63:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #include "cmsis_version.h"
  64:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
  65:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /*  CMSIS CM3 definitions */
  66:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16U) | \
  69:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****                                     __CM3_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
  71:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define __CORTEX_M                (3U)                                   /*!< Cortex-M Core */
  72:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
  73:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     This core does not support an FPU at all
  75:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** */
  76:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define __FPU_USED       0U
  77:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
  78:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #if defined ( __CC_ARM )
  79:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #if defined __TARGET_FPU_VFP
  80:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #endif
  82:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/cciU3xpT.s 			page 6


  83:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #if defined __ARM_PCS_VFP
  85:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #endif
  87:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
  88:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #elif defined ( __GNUC__ )
  89:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #endif
  92:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
  93:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #elif defined ( __ICCARM__ )
  94:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #if defined __ARMVFP__
  95:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #endif
  97:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
  98:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #elif defined ( __TI_ARM__ )
  99:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #if defined __TI_VFP_SUPPORT__
 100:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #endif
 102:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 103:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #elif defined ( __TASKING__ )
 104:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #if defined __FPU_VFP__
 105:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #endif
 107:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 108:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #elif defined ( __CSMC__ )
 109:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #if ( __CSMC__ & 0x400U)
 110:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #endif
 112:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 113:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #endif
 114:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 115:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 117:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 118:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #ifdef __cplusplus
 119:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** }
 120:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #endif
 121:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 122:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #endif /* __CORE_CM3_H_GENERIC */
 123:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 124:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #ifndef __CMSIS_GENERIC
 125:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 126:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #ifndef __CORE_CM3_H_DEPENDANT
 127:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define __CORE_CM3_H_DEPENDANT
 128:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 129:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #ifdef __cplusplus
 130:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  extern "C" {
 131:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #endif
 132:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 133:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* check device defines and use defaults */
 134:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #if defined __CHECK_DEVICE_DEFINES
 135:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #ifndef __CM3_REV
 136:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     #define __CM3_REV               0x0200U
 137:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     #warning "__CM3_REV not defined in device header file; using default!"
 138:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #endif
 139:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/cciU3xpT.s 			page 7


 140:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #ifndef __MPU_PRESENT
 141:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     #define __MPU_PRESENT             0U
 142:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 143:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #endif
 144:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 145:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #ifndef __NVIC_PRIO_BITS
 146:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     #define __NVIC_PRIO_BITS          3U
 147:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 148:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #endif
 149:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 150:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #ifndef __Vendor_SysTickConfig
 151:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     #define __Vendor_SysTickConfig    0U
 152:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 153:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #endif
 154:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #endif
 155:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 156:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* IO definitions (access restrictions to peripheral registers) */
 157:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
 158:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 159:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 160:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     <strong>IO Type Qualifiers</strong> are used
 161:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     \li to specify the access to peripheral variables.
 162:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     \li for automatic generation of peripheral register debug information.
 163:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** */
 164:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #ifdef __cplusplus
 165:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 166:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #else
 167:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 168:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #endif
 169:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 170:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 171:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 172:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* following defines should be used for structure members */
 173:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 174:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 175:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 176:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 177:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /*@} end of group Cortex_M3 */
 178:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 179:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 180:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 181:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /*******************************************************************************
 182:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  *                 Register Abstraction
 183:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   Core Register contain:
 184:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   - Core Register
 185:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   - Core NVIC Register
 186:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   - Core SCB Register
 187:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   - Core SysTick Register
 188:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   - Core Debug Register
 189:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   - Core MPU Register
 190:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  ******************************************************************************/
 191:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
 192:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 193:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 194:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** */
 195:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 196:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
ARM GAS  /tmp/cciU3xpT.s 			page 8


 197:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \ingroup    CMSIS_core_register
 198:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 199:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief      Core Register type definitions.
 200:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   @{
 201:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
 202:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 203:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
 204:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 205:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
 206:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** typedef union
 207:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
 208:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   struct
 209:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   {
 210:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved */
 211:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 212:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 213:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 214:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 215:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 216:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access */
 217:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access */
 218:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** } APSR_Type;
 219:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 220:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* APSR Register Definitions */
 221:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 222:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 223:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 224:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 225:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 226:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 227:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 228:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 229:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 230:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 231:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 232:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 233:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define APSR_Q_Pos                         27U                                            /*!< APSR
 234:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define APSR_Q_Msk                         (1UL << APSR_Q_Pos)                            /*!< APSR
 235:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 236:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 237:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
 238:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 239:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
 240:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** typedef union
 241:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
 242:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   struct
 243:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   {
 244:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 245:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 246:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access */
 247:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access */
 248:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** } IPSR_Type;
 249:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 250:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* IPSR Register Definitions */
 251:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 252:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 253:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/cciU3xpT.s 			page 9


 254:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 255:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
 256:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 257:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
 258:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** typedef union
 259:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
 260:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   struct
 261:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   {
 262:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 263:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:1;               /*!< bit:      9  Reserved */
 264:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     uint32_t ICI_IT_1:6;                 /*!< bit: 10..15  ICI/IT part 1 */
 265:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     uint32_t _reserved1:8;               /*!< bit: 16..23  Reserved */
 266:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit */
 267:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     uint32_t ICI_IT_2:2;                 /*!< bit: 25..26  ICI/IT part 2 */
 268:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 269:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 270:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 271:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 272:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 273:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access */
 274:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access */
 275:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** } xPSR_Type;
 276:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 277:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* xPSR Register Definitions */
 278:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 279:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 280:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 281:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 282:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 283:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 284:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 285:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 286:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 287:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 288:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 289:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 290:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define xPSR_Q_Pos                         27U                                            /*!< xPSR
 291:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define xPSR_Q_Msk                         (1UL << xPSR_Q_Pos)                            /*!< xPSR
 292:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 293:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define xPSR_ICI_IT_2_Pos                  25U                                            /*!< xPSR
 294:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define xPSR_ICI_IT_2_Msk                  (3UL << xPSR_ICI_IT_2_Pos)                     /*!< xPSR
 295:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 296:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 297:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 298:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 299:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define xPSR_ICI_IT_1_Pos                  10U                                            /*!< xPSR
 300:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define xPSR_ICI_IT_1_Msk                  (0x3FUL << xPSR_ICI_IT_1_Pos)                  /*!< xPSR
 301:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 302:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 303:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 304:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 305:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 306:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
 307:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief  Union type to access the Control Registers (CONTROL).
 308:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
 309:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** typedef union
 310:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
ARM GAS  /tmp/cciU3xpT.s 			page 10


 311:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   struct
 312:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   {
 313:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 314:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 315:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 316:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access */
 317:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access */
 318:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** } CONTROL_Type;
 319:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 320:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* CONTROL Register Definitions */
 321:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 322:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 323:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 324:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 325:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 326:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 327:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_CORE */
 328:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 329:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 330:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
 331:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \ingroup    CMSIS_core_register
 332:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 333:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief      Type definitions for the NVIC Registers
 334:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   @{
 335:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
 336:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 337:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
 338:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 339:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
 340:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** typedef struct
 341:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
 342:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t ISER[8U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 343:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED0[24U];
 344:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t ICER[8U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 345:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****         uint32_t RSERVED1[24U];
 346:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t ISPR[8U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 347:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED2[24U];
 348:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t ICPR[8U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 349:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED3[24U];
 350:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t IABR[8U];               /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register */
 351:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED4[56U];
 352:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint8_t  IP[240U];               /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 353:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED5[644U];
 354:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __OM  uint32_t STIR;                   /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 355:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** }  NVIC_Type;
 356:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 357:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* Software Triggered Interrupt Register Definitions */
 358:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define NVIC_STIR_INTID_Pos                 0U                                         /*!< STIR: I
 359:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL /*<< NVIC_STIR_INTID_Pos*/)        /*!< STIR: I
 360:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 361:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_NVIC */
 362:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 363:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 364:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
 365:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_core_register
 366:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 367:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief    Type definitions for the System Control Block Registers
ARM GAS  /tmp/cciU3xpT.s 			page 11


 368:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   @{
 369:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
 370:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 371:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
 372:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the System Control Block (SCB).
 373:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
 374:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** typedef struct
 375:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
 376:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 377:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 378:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 379:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 380:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 381:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 382:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint8_t  SHP[12U];               /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 383:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 384:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CFSR;                   /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 385:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t HFSR;                   /*!< Offset: 0x02C (R/W)  HardFault Status Register */
 386:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t DFSR;                   /*!< Offset: 0x030 (R/W)  Debug Fault Status Register */
 387:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t MMFAR;                  /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 388:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t BFAR;                   /*!< Offset: 0x038 (R/W)  BusFault Address Register */
 389:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t AFSR;                   /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 390:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PFR[2U];                /*!< Offset: 0x040 (R/ )  Processor Feature Register */
 391:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t DFR;                    /*!< Offset: 0x048 (R/ )  Debug Feature Register */
 392:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t ADR;                    /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register */
 393:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t MMFR[4U];               /*!< Offset: 0x050 (R/ )  Memory Model Feature Register */
 394:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t ISAR[5U];               /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 395:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED0[5U];
 396:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CPACR;                  /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 397:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** } SCB_Type;
 398:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 399:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* SCB CPUID Register Definitions */
 400:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 401:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 402:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 403:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 404:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 405:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 406:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 407:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 408:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 409:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 410:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 411:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 412:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 413:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 414:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 415:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 416:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 417:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 418:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 419:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 420:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 421:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 422:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 423:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 424:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/cciU3xpT.s 			page 12


 425:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 426:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 427:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 428:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 429:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 430:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 431:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 432:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 433:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 434:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 435:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 436:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 437:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 438:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 439:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 440:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11U                                            /*!< SCB 
 441:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 442:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 443:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 444:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 445:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 446:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* SCB Vector Table Offset Register Definitions */
 447:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #if defined (__CM3_REV) && (__CM3_REV < 0x0201U)                   /* core r2p1 */
 448:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29U                                            /*!< SCB 
 449:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (1UL << SCB_VTOR_TBLBASE_Pos)                  /*!< SCB 
 450:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 451:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 452:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 453:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #else
 454:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 455:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 456:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #endif
 457:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 458:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 459:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 460:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 461:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 462:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 463:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 464:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 465:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 466:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 467:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 468:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8U                                            /*!< SCB 
 469:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 470:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 471:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 472:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 473:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 474:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 475:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 476:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 477:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0U                                            /*!< SCB 
 478:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB 
 479:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 480:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* SCB System Control Register Definitions */
 481:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
ARM GAS  /tmp/cciU3xpT.s 			page 13


 482:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 483:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 484:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 485:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 486:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 487:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 488:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 489:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 490:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 491:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 492:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 493:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 494:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8U                                            /*!< SCB 
 495:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 496:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 497:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4U                                            /*!< SCB 
 498:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 499:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 500:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 501:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 502:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 503:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1U                                            /*!< SCB 
 504:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 505:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 506:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0U                                            /*!< SCB 
 507:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL /*<< SCB_CCR_NONBASETHRDENA_Pos*/)        /*!< SCB 
 508:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 509:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 510:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18U                                            /*!< SCB 
 511:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 512:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 513:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17U                                            /*!< SCB 
 514:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 515:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 516:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16U                                            /*!< SCB 
 517:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 518:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 519:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 520:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 521:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 522:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14U                                            /*!< SCB 
 523:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 524:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 525:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13U                                            /*!< SCB 
 526:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 527:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 528:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12U                                            /*!< SCB 
 529:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 530:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 531:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11U                                            /*!< SCB 
 532:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 533:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 534:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10U                                            /*!< SCB 
 535:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 536:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 537:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8U                                            /*!< SCB 
 538:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
ARM GAS  /tmp/cciU3xpT.s 			page 14


 539:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 540:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7U                                            /*!< SCB 
 541:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 542:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 543:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3U                                            /*!< SCB 
 544:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 545:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 546:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1U                                            /*!< SCB 
 547:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 548:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 549:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0U                                            /*!< SCB 
 550:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL /*<< SCB_SHCSR_MEMFAULTACT_Pos*/)         /*!< SCB 
 551:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 552:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* SCB Configurable Fault Status Register Definitions */
 553:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16U                                            /*!< SCB 
 554:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 555:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 556:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8U                                            /*!< SCB 
 557:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 558:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 559:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0U                                            /*!< SCB 
 560:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL /*<< SCB_CFSR_MEMFAULTSR_Pos*/)        /*!< SCB 
 561:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 562:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* MemManage Fault Status Register (part of SCB Configurable Fault Status Register) */
 563:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_MMARVALID_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 7U)               /*!< SCB 
 564:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_MMARVALID_Msk             (1UL << SCB_CFSR_MMARVALID_Pos)                /*!< SCB 
 565:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 566:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_MSTKERR_Pos               (SCB_SHCSR_MEMFAULTACT_Pos + 4U)               /*!< SCB 
 567:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_MSTKERR_Msk               (1UL << SCB_CFSR_MSTKERR_Pos)                  /*!< SCB 
 568:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 569:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_MUNSTKERR_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 3U)               /*!< SCB 
 570:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_MUNSTKERR_Msk             (1UL << SCB_CFSR_MUNSTKERR_Pos)                /*!< SCB 
 571:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 572:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_DACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 1U)               /*!< SCB 
 573:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_DACCVIOL_Msk              (1UL << SCB_CFSR_DACCVIOL_Pos)                 /*!< SCB 
 574:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 575:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_IACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 0U)               /*!< SCB 
 576:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_IACCVIOL_Msk              (1UL /*<< SCB_CFSR_IACCVIOL_Pos*/)             /*!< SCB 
 577:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 578:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* BusFault Status Register (part of SCB Configurable Fault Status Register) */
 579:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_BFARVALID_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 7U)                  /*!< SCB 
 580:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_BFARVALID_Msk            (1UL << SCB_CFSR_BFARVALID_Pos)                 /*!< SCB 
 581:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 582:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_STKERR_Pos               (SCB_CFSR_BUSFAULTSR_Pos + 4U)                  /*!< SCB 
 583:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_STKERR_Msk               (1UL << SCB_CFSR_STKERR_Pos)                    /*!< SCB 
 584:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 585:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_UNSTKERR_Pos             (SCB_CFSR_BUSFAULTSR_Pos + 3U)                  /*!< SCB 
 586:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_UNSTKERR_Msk             (1UL << SCB_CFSR_UNSTKERR_Pos)                  /*!< SCB 
 587:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 588:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_IMPRECISERR_Pos          (SCB_CFSR_BUSFAULTSR_Pos + 2U)                  /*!< SCB 
 589:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_IMPRECISERR_Msk          (1UL << SCB_CFSR_IMPRECISERR_Pos)               /*!< SCB 
 590:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 591:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_PRECISERR_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 1U)                  /*!< SCB 
 592:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_PRECISERR_Msk            (1UL << SCB_CFSR_PRECISERR_Pos)                 /*!< SCB 
 593:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 594:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_IBUSERR_Pos              (SCB_CFSR_BUSFAULTSR_Pos + 0U)                  /*!< SCB 
 595:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_IBUSERR_Msk              (1UL << SCB_CFSR_IBUSERR_Pos)                   /*!< SCB 
ARM GAS  /tmp/cciU3xpT.s 			page 15


 596:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 597:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* UsageFault Status Register (part of SCB Configurable Fault Status Register) */
 598:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_DIVBYZERO_Pos            (SCB_CFSR_USGFAULTSR_Pos + 9U)                  /*!< SCB 
 599:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_DIVBYZERO_Msk            (1UL << SCB_CFSR_DIVBYZERO_Pos)                 /*!< SCB 
 600:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 601:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_UNALIGNED_Pos            (SCB_CFSR_USGFAULTSR_Pos + 8U)                  /*!< SCB 
 602:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_UNALIGNED_Msk            (1UL << SCB_CFSR_UNALIGNED_Pos)                 /*!< SCB 
 603:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 604:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_NOCP_Pos                 (SCB_CFSR_USGFAULTSR_Pos + 3U)                  /*!< SCB 
 605:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_NOCP_Msk                 (1UL << SCB_CFSR_NOCP_Pos)                      /*!< SCB 
 606:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 607:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_INVPC_Pos                (SCB_CFSR_USGFAULTSR_Pos + 2U)                  /*!< SCB 
 608:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_INVPC_Msk                (1UL << SCB_CFSR_INVPC_Pos)                     /*!< SCB 
 609:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 610:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_INVSTATE_Pos             (SCB_CFSR_USGFAULTSR_Pos + 1U)                  /*!< SCB 
 611:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_INVSTATE_Msk             (1UL << SCB_CFSR_INVSTATE_Pos)                  /*!< SCB 
 612:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 613:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_UNDEFINSTR_Pos           (SCB_CFSR_USGFAULTSR_Pos + 0U)                  /*!< SCB 
 614:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_UNDEFINSTR_Msk           (1UL << SCB_CFSR_UNDEFINSTR_Pos)                /*!< SCB 
 615:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 616:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* SCB Hard Fault Status Register Definitions */
 617:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31U                                            /*!< SCB 
 618:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 619:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 620:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30U                                            /*!< SCB 
 621:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 622:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 623:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1U                                            /*!< SCB 
 624:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 625:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 626:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 627:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4U                                            /*!< SCB 
 628:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 629:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 630:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3U                                            /*!< SCB 
 631:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 632:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 633:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2U                                            /*!< SCB 
 634:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 635:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 636:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1U                                            /*!< SCB 
 637:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 638:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 639:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0U                                            /*!< SCB 
 640:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1UL /*<< SCB_DFSR_HALTED_Pos*/)               /*!< SCB 
 641:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 642:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_SCB */
 643:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 644:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 645:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
 646:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_core_register
 647:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 648:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief    Type definitions for the System Control and ID Register not in the SCB
 649:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   @{
 650:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
 651:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 652:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
ARM GAS  /tmp/cciU3xpT.s 			page 16


 653:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the System Control and ID Register not in the SCB.
 654:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
 655:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** typedef struct
 656:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
 657:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED0[1U];
 658:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t ICTR;                   /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 659:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #if defined (__CM3_REV) && (__CM3_REV >= 0x200U)
 660:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t ACTLR;                  /*!< Offset: 0x008 (R/W)  Auxiliary Control Register */
 661:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #else
 662:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED1[1U];
 663:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #endif
 664:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** } SCnSCB_Type;
 665:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 666:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 667:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0U                                         /*!< ICTR: I
 668:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: I
 669:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 670:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* Auxiliary Control Register Definitions */
 671:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 672:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2U                                         /*!< ACTLR: 
 673:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 674:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 675:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1U                                         /*!< ACTLR: 
 676:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 677:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 678:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0U                                         /*!< ACTLR: 
 679:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL /*<< SCnSCB_ACTLR_DISMCYCINT_Pos*/)    /*!< ACTLR: 
 680:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 681:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_SCnotSCB */
 682:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 683:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 684:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
 685:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_core_register
 686:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 687:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief    Type definitions for the System Timer Registers.
 688:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   @{
 689:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
 690:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 691:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
 692:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the System Timer (SysTick).
 693:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
 694:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** typedef struct
 695:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
 696:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 697:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 698:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 699:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 700:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** } SysTick_Type;
 701:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 702:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 703:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 704:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 705:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 706:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 707:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 708:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 709:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
ARM GAS  /tmp/cciU3xpT.s 			page 17


 710:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 711:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 712:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 713:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 714:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 715:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* SysTick Reload Register Definitions */
 716:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 717:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 718:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 719:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* SysTick Current Register Definitions */
 720:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 721:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 722:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 723:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* SysTick Calibration Register Definitions */
 724:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 725:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 726:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 727:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 728:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 729:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 730:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 731:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 732:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 733:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_SysTick */
 734:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 735:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 736:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
 737:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_core_register
 738:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 739:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief    Type definitions for the Instrumentation Trace Macrocell (ITM)
 740:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   @{
 741:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
 742:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 743:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
 744:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 745:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
 746:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** typedef struct
 747:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
 748:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __OM  union
 749:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   {
 750:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     __OM  uint8_t    u8;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit */
 751:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
 752:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     __OM  uint32_t   u32;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit */
 753:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   }  PORT [32U];                         /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers */
 754:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED0[864U];
 755:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t TER;                    /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register */
 756:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED1[15U];
 757:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t TPR;                    /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register */
 758:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED2[15U];
 759:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t TCR;                    /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register */
 760:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED3[29U];
 761:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __OM  uint32_t IWR;                    /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register *
 762:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t IRR;                    /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register */
 763:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t IMCR;                   /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
 764:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED4[43U];
 765:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __OM  uint32_t LAR;                    /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register */
 766:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t LSR;                    /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register */
ARM GAS  /tmp/cciU3xpT.s 			page 18


 767:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED5[6U];
 768:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PID4;                   /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 769:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PID5;                   /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 770:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PID6;                   /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 771:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PID7;                   /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 772:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PID0;                   /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 773:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PID1;                   /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 774:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PID2;                   /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 775:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PID3;                   /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 776:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t CID0;                   /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 777:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t CID1;                   /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 778:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t CID2;                   /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 779:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t CID3;                   /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 780:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** } ITM_Type;
 781:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 782:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 783:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0U                                            /*!< ITM 
 784:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFFFFFFFFUL /*<< ITM_TPR_PRIVMASK_Pos*/)     /*!< ITM 
 785:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 786:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* ITM Trace Control Register Definitions */
 787:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23U                                            /*!< ITM 
 788:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 789:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 790:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_TCR_TraceBusID_Pos             16U                                            /*!< ITM 
 791:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 792:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 793:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_TCR_GTSFREQ_Pos                10U                                            /*!< ITM 
 794:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 795:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 796:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8U                                            /*!< ITM 
 797:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 798:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 799:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4U                                            /*!< ITM 
 800:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 801:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 802:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3U                                            /*!< ITM 
 803:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 804:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 805:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2U                                            /*!< ITM 
 806:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 807:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 808:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1U                                            /*!< ITM 
 809:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 810:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 811:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0U                                            /*!< ITM 
 812:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1UL /*<< ITM_TCR_ITMENA_Pos*/)                /*!< ITM 
 813:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 814:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* ITM Integration Write Register Definitions */
 815:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0U                                            /*!< ITM 
 816:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL /*<< ITM_IWR_ATVALIDM_Pos*/)              /*!< ITM 
 817:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 818:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* ITM Integration Read Register Definitions */
 819:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0U                                            /*!< ITM 
 820:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1UL /*<< ITM_IRR_ATREADYM_Pos*/)              /*!< ITM 
 821:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 822:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 823:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0U                                            /*!< ITM 
ARM GAS  /tmp/cciU3xpT.s 			page 19


 824:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL /*<< ITM_IMCR_INTEGRATION_Pos*/)          /*!< ITM 
 825:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 826:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* ITM Lock Status Register Definitions */
 827:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2U                                            /*!< ITM 
 828:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 829:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 830:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_LSR_Access_Pos                  1U                                            /*!< ITM 
 831:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 832:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 833:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_LSR_Present_Pos                 0U                                            /*!< ITM 
 834:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_LSR_Present_Msk                (1UL /*<< ITM_LSR_Present_Pos*/)               /*!< ITM 
 835:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 836:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /*@}*/ /* end of group CMSIS_ITM */
 837:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 838:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 839:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
 840:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_core_register
 841:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 842:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief    Type definitions for the Data Watchpoint and Trace (DWT)
 843:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   @{
 844:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
 845:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 846:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
 847:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 848:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
 849:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** typedef struct
 850:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
 851:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  Control Register */
 852:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CYCCNT;                 /*!< Offset: 0x004 (R/W)  Cycle Count Register */
 853:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CPICNT;                 /*!< Offset: 0x008 (R/W)  CPI Count Register */
 854:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t EXCCNT;                 /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 855:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t SLEEPCNT;               /*!< Offset: 0x010 (R/W)  Sleep Count Register */
 856:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t LSUCNT;                 /*!< Offset: 0x014 (R/W)  LSU Count Register */
 857:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t FOLDCNT;                /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 858:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t PCSR;                   /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 859:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t COMP0;                  /*!< Offset: 0x020 (R/W)  Comparator Register 0 */
 860:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t MASK0;                  /*!< Offset: 0x024 (R/W)  Mask Register 0 */
 861:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t FUNCTION0;              /*!< Offset: 0x028 (R/W)  Function Register 0 */
 862:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED0[1U];
 863:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t COMP1;                  /*!< Offset: 0x030 (R/W)  Comparator Register 1 */
 864:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t MASK1;                  /*!< Offset: 0x034 (R/W)  Mask Register 1 */
 865:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t FUNCTION1;              /*!< Offset: 0x038 (R/W)  Function Register 1 */
 866:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED1[1U];
 867:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t COMP2;                  /*!< Offset: 0x040 (R/W)  Comparator Register 2 */
 868:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t MASK2;                  /*!< Offset: 0x044 (R/W)  Mask Register 2 */
 869:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t FUNCTION2;              /*!< Offset: 0x048 (R/W)  Function Register 2 */
 870:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED2[1U];
 871:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t COMP3;                  /*!< Offset: 0x050 (R/W)  Comparator Register 3 */
 872:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t MASK3;                  /*!< Offset: 0x054 (R/W)  Mask Register 3 */
 873:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t FUNCTION3;              /*!< Offset: 0x058 (R/W)  Function Register 3 */
 874:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** } DWT_Type;
 875:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 876:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* DWT Control Register Definitions */
 877:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NUMCOMP_Pos               28U                                         /*!< DWT CTR
 878:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 879:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 880:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Pos              27U                                         /*!< DWT CTR
ARM GAS  /tmp/cciU3xpT.s 			page 20


 881:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 882:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 883:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26U                                         /*!< DWT CTR
 884:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 885:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 886:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Pos              25U                                         /*!< DWT CTR
 887:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 888:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 889:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Pos              24U                                         /*!< DWT CTR
 890:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 891:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 892:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Pos             22U                                         /*!< DWT CTR
 893:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 894:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 895:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21U                                         /*!< DWT CTR
 896:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 897:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 898:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Pos             20U                                         /*!< DWT CTR
 899:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 900:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 901:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19U                                         /*!< DWT CTR
 902:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 903:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 904:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Pos             18U                                         /*!< DWT CTR
 905:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 906:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 907:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Pos             17U                                         /*!< DWT CTR
 908:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 909:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 910:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Pos             16U                                         /*!< DWT CTR
 911:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 912:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 913:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12U                                         /*!< DWT CTR
 914:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 915:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 916:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SYNCTAP_Pos               10U                                         /*!< DWT CTR
 917:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 918:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 919:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCTAP_Pos                 9U                                         /*!< DWT CTR
 920:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 921:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 922:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTINIT_Pos               5U                                         /*!< DWT CTR
 923:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 924:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 925:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTPRESET_Pos             1U                                         /*!< DWT CTR
 926:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 927:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 928:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Pos              0U                                         /*!< DWT CTR
 929:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL /*<< DWT_CTRL_CYCCNTENA_Pos*/)       /*!< DWT CTR
 930:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 931:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* DWT CPI Count Register Definitions */
 932:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CPICNT_CPICNT_Pos               0U                                         /*!< DWT CPI
 933:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL /*<< DWT_CPICNT_CPICNT_Pos*/)       /*!< DWT CPI
 934:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 935:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* DWT Exception Overhead Count Register Definitions */
 936:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Pos               0U                                         /*!< DWT EXC
 937:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL /*<< DWT_EXCCNT_EXCCNT_Pos*/)       /*!< DWT EXC
ARM GAS  /tmp/cciU3xpT.s 			page 21


 938:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 939:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* DWT Sleep Count Register Definitions */
 940:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0U                                         /*!< DWT SLE
 941:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL /*<< DWT_SLEEPCNT_SLEEPCNT_Pos*/)   /*!< DWT SLE
 942:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 943:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* DWT LSU Count Register Definitions */
 944:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Pos               0U                                         /*!< DWT LSU
 945:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL /*<< DWT_LSUCNT_LSUCNT_Pos*/)       /*!< DWT LSU
 946:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 947:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* DWT Folded-instruction Count Register Definitions */
 948:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0U                                         /*!< DWT FOL
 949:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL /*<< DWT_FOLDCNT_FOLDCNT_Pos*/)     /*!< DWT FOL
 950:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 951:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* DWT Comparator Mask Register Definitions */
 952:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_MASK_MASK_Pos                   0U                                         /*!< DWT MAS
 953:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL /*<< DWT_MASK_MASK_Pos*/)           /*!< DWT MAS
 954:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 955:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* DWT Comparator Function Register Definitions */
 956:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_MATCHED_Pos           24U                                         /*!< DWT FUN
 957:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
 958:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 959:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16U                                         /*!< DWT FUN
 960:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
 961:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 962:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12U                                         /*!< DWT FUN
 963:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
 964:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 965:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10U                                         /*!< DWT FUN
 966:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
 967:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 968:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9U                                         /*!< DWT FUN
 969:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
 970:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 971:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8U                                         /*!< DWT FUN
 972:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
 973:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 974:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7U                                         /*!< DWT FUN
 975:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
 976:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 977:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5U                                         /*!< DWT FUN
 978:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
 979:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 980:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Pos           0U                                         /*!< DWT FUN
 981:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL /*<< DWT_FUNCTION_FUNCTION_Pos*/)    /*!< DWT FUN
 982:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 983:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /*@}*/ /* end of group CMSIS_DWT */
 984:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 985:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 986:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
 987:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_core_register
 988:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_TPI     Trace Port Interface (TPI)
 989:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief    Type definitions for the Trace Port Interface (TPI)
 990:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   @{
 991:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
 992:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 993:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
 994:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the Trace Port Interface Register (TPI).
ARM GAS  /tmp/cciU3xpT.s 			page 22


 995:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
 996:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** typedef struct
 997:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
 998:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t SSPSR;                  /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
 999:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CSPSR;                  /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
1000:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED0[2U];
1001:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t ACPR;                   /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
1002:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED1[55U];
1003:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t SPPR;                   /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
1004:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED2[131U];
1005:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t FFSR;                   /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
1006:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t FFCR;                   /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
1007:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t FSCR;                   /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
1008:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED3[759U];
1009:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t TRIGGER;                /*!< Offset: 0xEE8 (R/ )  TRIGGER Register */
1010:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t FIFO0;                  /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
1011:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t ITATBCTR2;              /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
1012:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED4[1U];
1013:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t ITATBCTR0;              /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
1014:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t FIFO1;                  /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
1015:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t ITCTRL;                 /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
1016:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED5[39U];
1017:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CLAIMSET;               /*!< Offset: 0xFA0 (R/W)  Claim tag set */
1018:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CLAIMCLR;               /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
1019:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****         uint32_t RESERVED7[8U];
1020:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t DEVID;                  /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
1021:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t DEVTYPE;                /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
1022:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** } TPI_Type;
1023:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1024:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
1025:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_ACPR_PRESCALER_Pos              0U                                         /*!< TPI ACP
1026:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL /*<< TPI_ACPR_PRESCALER_Pos*/)    /*!< TPI ACP
1027:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1028:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* TPI Selected Pin Protocol Register Definitions */
1029:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_SPPR_TXMODE_Pos                 0U                                         /*!< TPI SPP
1030:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL /*<< TPI_SPPR_TXMODE_Pos*/)          /*!< TPI SPP
1031:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1032:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* TPI Formatter and Flush Status Register Definitions */
1033:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtNonStop_Pos              3U                                         /*!< TPI FFS
1034:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
1035:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1036:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_TCPresent_Pos              2U                                         /*!< TPI FFS
1037:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
1038:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1039:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtStopped_Pos              1U                                         /*!< TPI FFS
1040:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
1041:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1042:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FlInProg_Pos               0U                                         /*!< TPI FFS
1043:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL /*<< TPI_FFSR_FlInProg_Pos*/)        /*!< TPI FFS
1044:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1045:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* TPI Formatter and Flush Control Register Definitions */
1046:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FFCR_TrigIn_Pos                 8U                                         /*!< TPI FFC
1047:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
1048:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1049:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FFCR_EnFCont_Pos                1U                                         /*!< TPI FFC
1050:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
1051:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/cciU3xpT.s 			page 23


1052:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* TPI TRIGGER Register Definitions */
1053:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Pos             0U                                         /*!< TPI TRI
1054:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL /*<< TPI_TRIGGER_TRIGGER_Pos*/)      /*!< TPI TRI
1055:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1056:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
1057:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1058:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
1059:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1060:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1061:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
1062:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1063:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1064:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
1065:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1066:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1067:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
1068:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1069:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM2_Pos                 16U                                         /*!< TPI FIF
1070:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
1071:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1072:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM1_Pos                  8U                                         /*!< TPI FIF
1073:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
1074:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1075:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM0_Pos                  0U                                         /*!< TPI FIF
1076:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL /*<< TPI_FIFO0_ETM0_Pos*/)          /*!< TPI FIF
1077:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1078:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* TPI ITATBCTR2 Register Definitions */
1079:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY2_Pos          0U                                         /*!< TPI ITA
1080:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY2_Msk         (0x1UL /*<< TPI_ITATBCTR2_ATREADY2_Pos*/)   /*!< TPI ITA
1081:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1082:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY1_Pos          0U                                         /*!< TPI ITA
1083:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY1_Msk         (0x1UL /*<< TPI_ITATBCTR2_ATREADY1_Pos*/)   /*!< TPI ITA
1084:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1085:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
1086:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1087:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
1088:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1089:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1090:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
1091:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1092:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1093:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
1094:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1095:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1096:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
1097:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1098:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM2_Pos                 16U                                         /*!< TPI FIF
1099:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
1100:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1101:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM1_Pos                  8U                                         /*!< TPI FIF
1102:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
1103:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1104:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM0_Pos                  0U                                         /*!< TPI FIF
1105:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL /*<< TPI_FIFO1_ITM0_Pos*/)          /*!< TPI FIF
1106:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1107:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* TPI ITATBCTR0 Register Definitions */
1108:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY2_Pos          0U                                         /*!< TPI ITA
ARM GAS  /tmp/cciU3xpT.s 			page 24


1109:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY2_Msk         (0x1UL /*<< TPI_ITATBCTR0_ATREADY2_Pos*/)   /*!< TPI ITA
1110:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1111:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY1_Pos          0U                                         /*!< TPI ITA
1112:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY1_Msk         (0x1UL /*<< TPI_ITATBCTR0_ATREADY1_Pos*/)   /*!< TPI ITA
1113:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1114:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* TPI Integration Mode Control Register Definitions */
1115:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_ITCTRL_Mode_Pos                 0U                                         /*!< TPI ITC
1116:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_ITCTRL_Mode_Msk                (0x3UL /*<< TPI_ITCTRL_Mode_Pos*/)          /*!< TPI ITC
1117:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1118:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* TPI DEVID Register Definitions */
1119:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NRZVALID_Pos             11U                                         /*!< TPI DEV
1120:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1121:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1122:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MANCVALID_Pos            10U                                         /*!< TPI DEV
1123:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1124:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1125:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_PTINVALID_Pos             9U                                         /*!< TPI DEV
1126:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1127:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1128:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MinBufSz_Pos              6U                                         /*!< TPI DEV
1129:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1130:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1131:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_AsynClkIn_Pos             5U                                         /*!< TPI DEV
1132:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1133:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1134:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NrTraceInput_Pos          0U                                         /*!< TPI DEV
1135:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL /*<< TPI_DEVID_NrTraceInput_Pos*/)  /*!< TPI DEV
1136:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1137:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* TPI DEVTYPE Register Definitions */
1138:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_SubType_Pos             4U                                         /*!< TPI DEV
1139:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL /*<< TPI_DEVTYPE_SubType_Pos*/)      /*!< TPI DEV
1140:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1141:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_MajorType_Pos           0U                                         /*!< TPI DEV
1142:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1143:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1144:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /*@}*/ /* end of group CMSIS_TPI */
1145:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1146:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1147:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1148:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1149:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_core_register
1150:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1151:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
1152:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   @{
1153:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
1154:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1155:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1156:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
1157:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
1158:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** typedef struct
1159:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
1160:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
1161:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
1162:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
1163:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1164:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1165:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RBAR_A1;                /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
ARM GAS  /tmp/cciU3xpT.s 			page 25


1166:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RASR_A1;                /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1167:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RBAR_A2;                /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1168:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RASR_A2;                /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1169:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RBAR_A3;                /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1170:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t RASR_A3;                /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1171:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** } MPU_Type;
1172:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1173:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_TYPE_RALIASES                  4U
1174:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1175:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* MPU Type Register Definitions */
1176:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
1177:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1178:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1179:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
1180:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1181:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1182:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
1183:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
1184:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1185:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* MPU Control Register Definitions */
1186:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
1187:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1188:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1189:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
1190:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1191:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1192:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
1193:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
1194:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1195:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* MPU Region Number Register Definitions */
1196:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
1197:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
1198:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1199:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* MPU Region Base Address Register Definitions */
1200:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5U                                            /*!< MPU 
1201:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1202:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1203:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
1204:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1205:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1206:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
1207:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
1208:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1209:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* MPU Region Attribute and Size Register Definitions */
1210:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
1211:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1212:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1213:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
1214:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1215:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1216:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
1217:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1218:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1219:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
1220:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1221:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1222:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
ARM GAS  /tmp/cciU3xpT.s 			page 26


1223:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1224:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1225:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
1226:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1227:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1228:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
1229:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1230:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1231:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
1232:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1233:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1234:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
1235:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1236:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1237:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
1238:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
1239:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1240:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_MPU */
1241:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #endif
1242:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1243:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1244:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1245:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_core_register
1246:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1247:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief    Type definitions for the Core Debug Registers
1248:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   @{
1249:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
1250:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1251:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1252:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief  Structure type to access the Core Debug Register (CoreDebug).
1253:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
1254:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** typedef struct
1255:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
1256:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t DHCSR;                  /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1257:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __OM  uint32_t DCRSR;                  /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1258:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t DCRDR;                  /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1259:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __IOM uint32_t DEMCR;                  /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1260:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** } CoreDebug_Type;
1261:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1262:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* Debug Halting Control and Status Register Definitions */
1263:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16U                                            /*!< Core
1264:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1265:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1266:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25U                                            /*!< Core
1267:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1268:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1269:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24U                                            /*!< Core
1270:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1271:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1272:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19U                                            /*!< Core
1273:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1274:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1275:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18U                                            /*!< Core
1276:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1277:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1278:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17U                                            /*!< Core
1279:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
ARM GAS  /tmp/cciU3xpT.s 			page 27


1280:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1281:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16U                                            /*!< Core
1282:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1283:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1284:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5U                                            /*!< Core
1285:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1286:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1287:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3U                                            /*!< Core
1288:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1289:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1290:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2U                                            /*!< Core
1291:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1292:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1293:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1U                                            /*!< Core
1294:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1295:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1296:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0U                                            /*!< Core
1297:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL /*<< CoreDebug_DHCSR_C_DEBUGEN_Pos*/)     /*!< Core
1298:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1299:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* Debug Core Register Selector Register Definitions */
1300:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16U                                            /*!< Core
1301:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1302:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1303:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0U                                            /*!< Core
1304:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL /*<< CoreDebug_DCRSR_REGSEL_Pos*/)     /*!< Core
1305:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1306:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* Debug Exception and Monitor Control Register Definitions */
1307:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24U                                            /*!< Core
1308:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1309:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1310:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19U                                            /*!< Core
1311:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1312:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1313:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18U                                            /*!< Core
1314:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1315:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1316:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17U                                            /*!< Core
1317:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1318:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1319:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16U                                            /*!< Core
1320:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1321:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1322:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10U                                            /*!< Core
1323:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1324:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1325:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9U                                            /*!< Core
1326:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1327:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1328:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8U                                            /*!< Core
1329:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1330:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1331:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7U                                            /*!< Core
1332:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1333:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1334:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6U                                            /*!< Core
1335:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1336:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/cciU3xpT.s 			page 28


1337:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5U                                            /*!< Core
1338:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1339:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1340:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4U                                            /*!< Core
1341:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1342:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1343:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0U                                            /*!< Core
1344:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< Core
1345:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1346:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_CoreDebug */
1347:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1348:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1349:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1350:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \ingroup    CMSIS_core_register
1351:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
1352:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
1353:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   @{
1354:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
1355:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1356:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1357:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
1358:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \param[in] field  Name of the register bit field.
1359:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
1360:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \return           Masked and shifted value.
1361:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** */
1362:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
1363:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1364:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1365:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief     Mask and shift a register value to extract a bit filed value.
1366:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \param[in] field  Name of the register bit field.
1367:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
1368:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \return           Masked and shifted bit field value.
1369:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** */
1370:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
1371:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1372:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_core_bitfield */
1373:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1374:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1375:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1376:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \ingroup    CMSIS_core_register
1377:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \defgroup   CMSIS_core_base     Core Definitions
1378:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief      Definitions for base addresses, unions, and structures.
1379:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   @{
1380:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
1381:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1382:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* Memory mapping of Core Hardware */
1383:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1384:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address */
1385:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address */
1386:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address */
1387:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1388:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
1389:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
1390:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1391:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1392:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1393:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
ARM GAS  /tmp/cciU3xpT.s 			page 29


1394:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1395:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1396:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1397:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1398:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1399:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1400:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1401:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1402:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
1403:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
1404:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #endif
1405:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1406:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /*@} */
1407:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1408:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1409:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1410:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /*******************************************************************************
1411:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  *                Hardware Abstraction Layer
1412:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   Core Function Interface contains:
1413:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   - Core NVIC Functions
1414:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   - Core SysTick Functions
1415:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   - Core Debug Functions
1416:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   - Core Register Access Functions
1417:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  ******************************************************************************/
1418:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1419:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1420:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** */
1421:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1422:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1423:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1424:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
1425:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1426:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_Core_FunctionInterface
1427:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1428:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
1429:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   @{
1430:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
1431:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1432:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #ifdef CMSIS_NVIC_VIRTUAL
1433:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
1434:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
1435:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #endif
1436:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
1437:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #else
1438:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
1439:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
1440:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
1441:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
1442:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
1443:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
1444:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
1445:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
1446:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #define NVIC_GetActive              __NVIC_GetActive
1447:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
1448:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
1449:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
1450:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #endif /* CMSIS_NVIC_VIRTUAL */
ARM GAS  /tmp/cciU3xpT.s 			page 30


1451:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1452:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #ifdef CMSIS_VECTAB_VIRTUAL
1453:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
1454:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****    #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
1455:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #endif
1456:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
1457:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #else
1458:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #define NVIC_SetVector              __NVIC_SetVector
1459:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   #define NVIC_GetVector              __NVIC_GetVector
1460:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
1461:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1462:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define NVIC_USER_IRQ_OFFSET          16
1463:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1464:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1465:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
1466:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
1467:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
1468:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
1469:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1470:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1471:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1472:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief   Set Priority Grouping
1473:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \details Sets the priority grouping field using the required unlock sequence.
1474:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****            The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1475:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****            Only values from 0..7 are used.
1476:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****            In case of a conflict between priority grouping and available
1477:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1478:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \param [in]      PriorityGroup  Priority grouping field.
1479:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
1480:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** __STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1481:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
1482:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   uint32_t reg_value;
1483:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 a
1484:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1485:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
  35              		.loc 2 1485 0
  36 0000 074A     		ldr	r2, .L2
  37 0002 D368     		ldr	r3, [r2, #12]
  38              	.LVL1:
1486:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to chan
  39              		.loc 2 1486 0
  40 0004 23F4E063 		bic	r3, r3, #1792
  41              	.LVL2:
  42 0008 1B04     		lsls	r3, r3, #16
  43 000a 1B0C     		lsrs	r3, r3, #16
  44              	.LVL3:
1487:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   reg_value  =  (reg_value                                   |
1488:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1489:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****                 (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key a
  45              		.loc 2 1489 0
  46 000c 0002     		lsls	r0, r0, #8
  47              	.LVL4:
  48 000e 00F4E060 		and	r0, r0, #1792
1488:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****                 (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key a
  49              		.loc 2 1488 0
  50 0012 1843     		orrs	r0, r0, r3
1487:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   reg_value  =  (reg_value                                   |
ARM GAS  /tmp/cciU3xpT.s 			page 31


  51              		.loc 2 1487 0
  52 0014 40F0BF60 		orr	r0, r0, #100139008
  53 0018 40F40030 		orr	r0, r0, #131072
  54              	.LVL5:
1490:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   SCB->AIRCR =  reg_value;
  55              		.loc 2 1490 0
  56 001c D060     		str	r0, [r2, #12]
  57              	.LVL6:
  58 001e 7047     		bx	lr
  59              	.L3:
  60              		.align	2
  61              	.L2:
  62 0020 00ED00E0 		.word	-536810240
  63              	.LBE53:
  64              	.LBE52:
  65              		.cfi_endproc
  66              	.LFE72:
  68              		.section	.text.HAL_NVIC_SetPriority,"ax",%progbits
  69              		.align	1
  70              		.global	HAL_NVIC_SetPriority
  71              		.syntax unified
  72              		.thumb
  73              		.thumb_func
  74              		.fpu softvfp
  76              	HAL_NVIC_SetPriority:
  77              	.LFB73:
 171:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   /* Check the parameters */
 172:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 173:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   
 174:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
 175:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   NVIC_SetPriorityGrouping(PriorityGroup);
 176:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** }
 177:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** 
 178:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** /**
 179:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @brief  Sets the priority of an interrupt.
 180:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @param  IRQn External interrupt number
 181:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 182:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 183:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @param  PreemptPriority The pre-emption priority for the IRQn channel.
 184:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *         This parameter can be a value between 0 and 15
 185:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *         A lower priority value indicates a higher priority 
 186:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @param  SubPriority the subpriority level for the IRQ channel.
 187:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *         This parameter can be a value between 0 and 15
 188:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *         A lower priority value indicates a higher priority.          
 189:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @retval None
 190:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   */
 191:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
 192:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** {
  78              		.loc 1 192 0
  79              		.cfi_startproc
  80              		@ args = 0, pretend = 0, frame = 0
  81              		@ frame_needed = 0, uses_anonymous_args = 0
  82              		@ link register save eliminated.
  83              	.LVL7:
  84 0000 30B4     		push	{r4, r5}
  85              	.LCFI0:
  86              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cciU3xpT.s 			page 32


  87              		.cfi_offset 4, -8
  88              		.cfi_offset 5, -4
  89              	.LVL8:
  90              	.LBB54:
  91              	.LBB55:
1491:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** }
1492:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1493:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1494:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1495:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief   Get Priority Grouping
1496:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \details Reads the priority grouping field from the NVIC Interrupt Controller.
1497:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1498:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
1499:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
1500:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
1501:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
  92              		.loc 2 1501 0
  93 0002 164B     		ldr	r3, .L10
  94 0004 DB68     		ldr	r3, [r3, #12]
  95 0006 C3F30223 		ubfx	r3, r3, #8, #3
  96              	.LVL9:
  97              	.LBE55:
  98              	.LBE54:
  99              	.LBB56:
 100              	.LBB57:
1502:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** }
1503:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1504:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1505:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1506:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief   Enable Interrupt
1507:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
1508:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \param [in]      IRQn  Device specific interrupt number.
1509:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \note    IRQn must not be negative.
1510:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
1511:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
1512:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
1513:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   if ((int32_t)(IRQn) >= 0)
1514:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   {
1515:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1516:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   }
1517:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** }
1518:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1519:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1520:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1521:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief   Get Interrupt Enable status
1522:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
1523:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \param [in]      IRQn  Device specific interrupt number.
1524:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \return             0  Interrupt is not enabled.
1525:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \return             1  Interrupt is enabled.
1526:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \note    IRQn must not be negative.
1527:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
1528:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
1529:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
1530:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   if ((int32_t)(IRQn) >= 0)
1531:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   {
1532:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     return((uint32_t)(((NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL)
1533:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   }
ARM GAS  /tmp/cciU3xpT.s 			page 33


1534:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   else
1535:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   {
1536:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     return(0U);
1537:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   }
1538:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** }
1539:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1540:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1541:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1542:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief   Disable Interrupt
1543:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
1544:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \param [in]      IRQn  Device specific interrupt number.
1545:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \note    IRQn must not be negative.
1546:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
1547:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
1548:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
1549:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   if ((int32_t)(IRQn) >= 0)
1550:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   {
1551:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1552:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     __DSB();
1553:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     __ISB();
1554:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   }
1555:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** }
1556:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1557:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1558:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1559:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief   Get Pending Interrupt
1560:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
1561:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \param [in]      IRQn  Device specific interrupt number.
1562:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \return             0  Interrupt status is not pending.
1563:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \return             1  Interrupt status is pending.
1564:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \note    IRQn must not be negative.
1565:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
1566:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
1567:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
1568:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   if ((int32_t)(IRQn) >= 0)
1569:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   {
1570:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL)
1571:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   }
1572:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   else
1573:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   {
1574:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     return(0U);
1575:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   }
1576:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** }
1577:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1578:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1579:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1580:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief   Set Pending Interrupt
1581:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
1582:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \param [in]      IRQn  Device specific interrupt number.
1583:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \note    IRQn must not be negative.
1584:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
1585:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
1586:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
1587:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   if ((int32_t)(IRQn) >= 0)
1588:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   {
1589:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1590:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   }
ARM GAS  /tmp/cciU3xpT.s 			page 34


1591:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** }
1592:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1593:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1594:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1595:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief   Clear Pending Interrupt
1596:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
1597:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \param [in]      IRQn  Device specific interrupt number.
1598:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \note    IRQn must not be negative.
1599:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
1600:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1601:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
1602:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   if ((int32_t)(IRQn) >= 0)
1603:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   {
1604:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1605:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   }
1606:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** }
1607:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1608:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1609:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1610:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief   Get Active Interrupt
1611:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \details Reads the active register in the NVIC and returns the active bit for the device specific
1612:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \param [in]      IRQn  Device specific interrupt number.
1613:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \return             0  Interrupt status is not active.
1614:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \return             1  Interrupt status is active.
1615:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \note    IRQn must not be negative.
1616:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
1617:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
1618:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
1619:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   if ((int32_t)(IRQn) >= 0)
1620:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   {
1621:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL)
1622:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   }
1623:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   else
1624:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   {
1625:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     return(0U);
1626:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   }
1627:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** }
1628:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1629:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1630:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1631:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief   Set Interrupt Priority
1632:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
1633:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****            The interrupt number can be positive to specify a device specific interrupt,
1634:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****            or negative to specify a processor exception.
1635:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \param [in]      IRQn  Interrupt number.
1636:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \param [in]  priority  Priority to set.
1637:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \note    The priority cannot be set for every processor exception.
1638:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
1639:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1640:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
1641:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   if ((int32_t)(IRQn) >= 0)
1642:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   {
1643:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (u
1644:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   }
1645:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   else
1646:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   {
1647:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (u
ARM GAS  /tmp/cciU3xpT.s 			page 35


1648:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   }
1649:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** }
1650:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1651:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1652:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1653:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief   Get Interrupt Priority
1654:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \details Reads the priority of a device specific interrupt or a processor exception.
1655:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****            The interrupt number can be positive to specify a device specific interrupt,
1656:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****            or negative to specify a processor exception.
1657:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \param [in]   IRQn  Interrupt number.
1658:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \return             Interrupt Priority.
1659:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****                       Value is aligned automatically to the implemented priority bits of the microc
1660:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
1661:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
1662:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
1663:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1664:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   if ((int32_t)(IRQn) >= 0)
1665:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   {
1666:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
1667:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   }
1668:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   else
1669:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   {
1670:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     return(((uint32_t)SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
1671:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   }
1672:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** }
1673:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1674:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1675:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1676:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief   Encode Priority
1677:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \details Encodes the priority for an interrupt with the given priority group,
1678:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****            preemptive priority value, and subpriority value.
1679:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****            In case of a conflict between priority grouping and available
1680:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1681:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \param [in]     PriorityGroup  Used priority group.
1682:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
1683:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \param [in]       SubPriority  Subpriority value (starting from 0).
1684:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \return                        Encoded priority. Value can be used in the function \ref NVIC_SetP
1685:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
1686:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
1687:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
1688:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
1689:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   uint32_t PreemptPriorityBits;
1690:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   uint32_t SubPriorityBits;
1691:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1692:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
 101              		.loc 2 1692 0
 102 000a C3F10704 		rsb	r4, r3, #7
 103 000e 042C     		cmp	r4, #4
 104 0010 28BF     		it	cs
 105 0012 0424     		movcs	r4, #4
 106              	.LVL10:
1693:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
 107              		.loc 2 1693 0
 108 0014 1D1D     		adds	r5, r3, #4
 109 0016 062D     		cmp	r5, #6
 110 0018 17D9     		bls	.L8
 111 001a 033B     		subs	r3, r3, #3
ARM GAS  /tmp/cciU3xpT.s 			page 36


 112              	.LVL11:
 113              	.L5:
1694:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1695:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   return (
1696:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****            ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits
 114              		.loc 2 1696 0
 115 001c 0125     		movs	r5, #1
 116              	.LVL12:
 117 001e 05FA04F4 		lsl	r4, r5, r4
 118              	.LVL13:
 119 0022 013C     		subs	r4, r4, #1
 120 0024 2140     		ands	r1, r1, r4
 121              	.LVL14:
 122 0026 9940     		lsls	r1, r1, r3
1697:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****            ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 123              		.loc 2 1697 0
 124 0028 05FA03F3 		lsl	r3, r5, r3
 125              	.LVL15:
 126 002c 013B     		subs	r3, r3, #1
 127 002e 1340     		ands	r3, r3, r2
1696:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****            ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 128              		.loc 2 1696 0
 129 0030 1943     		orrs	r1, r1, r3
 130              	.LVL16:
 131              	.LBE57:
 132              	.LBE56:
 133              	.LBB59:
 134              	.LBB60:
1641:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   {
 135              		.loc 2 1641 0
 136 0032 0028     		cmp	r0, #0
 137 0034 0BDB     		blt	.L6
1643:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   }
 138              		.loc 2 1643 0
 139 0036 0901     		lsls	r1, r1, #4
 140 0038 C9B2     		uxtb	r1, r1
 141 003a 00F16040 		add	r0, r0, #-536870912
 142              	.LVL17:
 143 003e 00F56140 		add	r0, r0, #57600
 144 0042 80F80013 		strb	r1, [r0, #768]
 145              	.LVL18:
 146              	.L4:
 147              	.LBE60:
 148              	.LBE59:
 193:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   uint32_t prioritygroup = 0x00;
 194:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   
 195:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   /* Check the parameters */
 196:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 197:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 198:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   
 199:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   prioritygroup = NVIC_GetPriorityGrouping();
 200:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   
 201:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 202:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** }
 149              		.loc 1 202 0
 150 0046 30BC     		pop	{r4, r5}
 151              	.LCFI1:
ARM GAS  /tmp/cciU3xpT.s 			page 37


 152              		.cfi_remember_state
 153              		.cfi_restore 5
 154              		.cfi_restore 4
 155              		.cfi_def_cfa_offset 0
 156 0048 7047     		bx	lr
 157              	.LVL19:
 158              	.L8:
 159              	.LCFI2:
 160              		.cfi_restore_state
 161              	.LBB62:
 162              	.LBB58:
1693:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 163              		.loc 2 1693 0
 164 004a 0023     		movs	r3, #0
 165              	.LVL20:
 166 004c E6E7     		b	.L5
 167              	.LVL21:
 168              	.L6:
 169              	.LBE58:
 170              	.LBE62:
 171              	.LBB63:
 172              	.LBB61:
1647:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   }
 173              		.loc 2 1647 0
 174 004e 00F00F00 		and	r0, r0, #15
 175              	.LVL22:
 176 0052 0901     		lsls	r1, r1, #4
 177 0054 C9B2     		uxtb	r1, r1
 178 0056 024B     		ldr	r3, .L10+4
 179 0058 1954     		strb	r1, [r3, r0]
 180              	.LVL23:
 181              	.LBE61:
 182              	.LBE63:
 183              		.loc 1 202 0
 184 005a F4E7     		b	.L4
 185              	.L11:
 186              		.align	2
 187              	.L10:
 188 005c 00ED00E0 		.word	-536810240
 189 0060 14ED00E0 		.word	-536810220
 190              		.cfi_endproc
 191              	.LFE73:
 193              		.section	.text.HAL_NVIC_EnableIRQ,"ax",%progbits
 194              		.align	1
 195              		.global	HAL_NVIC_EnableIRQ
 196              		.syntax unified
 197              		.thumb
 198              		.thumb_func
 199              		.fpu softvfp
 201              	HAL_NVIC_EnableIRQ:
 202              	.LFB74:
 203:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** 
 204:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** /**
 205:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @brief  Enables a device specific interrupt in the NVIC interrupt controller.
 206:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @note   To configure interrupts priority correctly, the NVIC_PriorityGroupConfig()
 207:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *         function should be called before. 
 208:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @param  IRQn External interrupt number
ARM GAS  /tmp/cciU3xpT.s 			page 38


 209:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 210:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 211:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @retval None
 212:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   */
 213:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
 214:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** {
 203              		.loc 1 214 0
 204              		.cfi_startproc
 205              		@ args = 0, pretend = 0, frame = 0
 206              		@ frame_needed = 0, uses_anonymous_args = 0
 207              		@ link register save eliminated.
 208              	.LVL24:
 209              	.LBB64:
 210              	.LBB65:
1513:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   {
 211              		.loc 2 1513 0
 212 0000 0028     		cmp	r0, #0
 213              	.LVL25:
 214 0002 08DB     		blt	.L12
1515:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   }
 215              		.loc 2 1515 0
 216 0004 4209     		lsrs	r2, r0, #5
 217 0006 00F01F00 		and	r0, r0, #31
 218 000a 0123     		movs	r3, #1
 219 000c 03FA00F0 		lsl	r0, r3, r0
 220 0010 014B     		ldr	r3, .L14
 221 0012 43F82200 		str	r0, [r3, r2, lsl #2]
 222              	.LVL26:
 223              	.L12:
 224 0016 7047     		bx	lr
 225              	.L15:
 226              		.align	2
 227              	.L14:
 228 0018 00E100E0 		.word	-536813312
 229              	.LBE65:
 230              	.LBE64:
 231              		.cfi_endproc
 232              	.LFE74:
 234              		.section	.text.HAL_NVIC_DisableIRQ,"ax",%progbits
 235              		.align	1
 236              		.global	HAL_NVIC_DisableIRQ
 237              		.syntax unified
 238              		.thumb
 239              		.thumb_func
 240              		.fpu softvfp
 242              	HAL_NVIC_DisableIRQ:
 243              	.LFB75:
 215:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   /* Check the parameters */
 216:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 217:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   
 218:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   /* Enable interrupt */
 219:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   NVIC_EnableIRQ(IRQn);
 220:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** }
 221:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** 
 222:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** /**
 223:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @brief  Disables a device specific interrupt in the NVIC interrupt controller.
 224:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @param  IRQn External interrupt number
ARM GAS  /tmp/cciU3xpT.s 			page 39


 225:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 226:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 227:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @retval None
 228:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   */
 229:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
 230:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** {
 244              		.loc 1 230 0
 245              		.cfi_startproc
 246              		@ args = 0, pretend = 0, frame = 0
 247              		@ frame_needed = 0, uses_anonymous_args = 0
 248              		@ link register save eliminated.
 249              	.LVL27:
 250              	.LBB66:
 251              	.LBB67:
1549:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   {
 252              		.loc 2 1549 0
 253 0000 0028     		cmp	r0, #0
 254              	.LVL28:
 255 0002 0DDB     		blt	.L16
1551:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     __DSB();
 256              		.loc 2 1551 0
 257 0004 4309     		lsrs	r3, r0, #5
 258 0006 00F01F00 		and	r0, r0, #31
 259 000a 0122     		movs	r2, #1
 260 000c 02FA00F0 		lsl	r0, r2, r0
 261 0010 2033     		adds	r3, r3, #32
 262 0012 044A     		ldr	r2, .L18
 263 0014 42F82300 		str	r0, [r2, r3, lsl #2]
 264              	.LBB68:
 265              	.LBB69:
 266              		.file 3 "..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h"
   1:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /*
   8:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  *
  10:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  *
  12:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  *
  16:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  *
  18:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
  24:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
  25:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
ARM GAS  /tmp/cciU3xpT.s 			page 40


  27:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
  28:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
  34:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
  38:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
  39:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
  43:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
  46:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
  49:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
  55:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
  58:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
  61:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
  64:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
  67:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
  70:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
  78:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
ARM GAS  /tmp/cciU3xpT.s 			page 41


  84:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
  86:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
  94:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 102:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 110:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 113:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 116:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 117:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 118:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   @{
 122:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 123:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 124:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 125:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 129:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 131:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 133:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 134:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 135:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 136:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 140:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
ARM GAS  /tmp/cciU3xpT.s 			page 42


 141:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 142:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 144:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 145:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 146:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 147:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 150:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 151:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 153:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 154:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 155:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 157:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 158:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 159:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 160:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 162:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 166:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 168:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 169:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 170:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 172:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 173:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 174:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 175:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 176:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 177:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 181:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 183:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 185:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 186:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 187:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 189:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 193:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 195:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 197:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/cciU3xpT.s 			page 43


 198:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 199:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 200:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 201:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 205:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 207:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 208:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 209:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 211:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 212:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 213:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 214:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 215:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 219:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 221:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 222:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 223:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 225:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 226:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 227:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 228:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 229:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 233:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 235:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 237:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 240:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 241:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 242:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 243:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 247:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 249:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 250:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 251:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 253:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 254:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cciU3xpT.s 			page 44


 255:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 256:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 258:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 262:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 264:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 265:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 266:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 268:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 269:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 270:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 271:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 272:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 273:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 277:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 279:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 281:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 282:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 283:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 285:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 289:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 291:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 293:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 294:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 295:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 296:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 297:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 301:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 303:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 304:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 305:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 307:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 308:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 309:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 310:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/cciU3xpT.s 			page 45


 312:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 316:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 318:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 319:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 320:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 322:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 323:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 324:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 325:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 326:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 327:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 331:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 333:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 335:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 336:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 337:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 339:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 343:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 345:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 347:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 348:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 349:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 350:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 352:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 355:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 356:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 358:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 359:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 360:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 362:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 363:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 364:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 365:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 366:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
ARM GAS  /tmp/cciU3xpT.s 			page 46


 369:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 370:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 372:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 374:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 375:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 376:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 377:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 378:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 382:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 384:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 385:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 386:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 388:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 389:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 390:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 391:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 393:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 397:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 399:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 400:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 401:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 403:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 404:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 405:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 406:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 407:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 408:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 412:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 414:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 416:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 417:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 418:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 420:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 424:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/cciU3xpT.s 			page 47


 426:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 428:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 429:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 430:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 431:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 435:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 439:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 441:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 443:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 444:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 445:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 446:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 450:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 452:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 454:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 455:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 456:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 457:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 461:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 463:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 464:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 465:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 467:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 468:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 469:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 470:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 472:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 475:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 476:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 478:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 479:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 480:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 482:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/cciU3xpT.s 			page 48


 483:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 484:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 485:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 486:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 487:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 491:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 493:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 495:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 496:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 497:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 499:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 503:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 505:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 507:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 508:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 509:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 510:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 511:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 516:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 518:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 520:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 521:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 522:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 523:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 524:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 526:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 527:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 529:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 530:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 531:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 533:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 534:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 535:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 536:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 538:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
ARM GAS  /tmp/cciU3xpT.s 			page 49


 540:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 541:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 542:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 544:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 545:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 546:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 548:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 549:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 550:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 551:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 552:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 553:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 554:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 557:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 559:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 560:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 561:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 562:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 563:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 564:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 565:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 567:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 568:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 569:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 571:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 573:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 574:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 575:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 576:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 577:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 579:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 580:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 583:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 584:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 585:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 586:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 587:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   mode.
 588:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   
 589:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 590:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 591:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 592:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 593:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 594:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 595:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 596:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
ARM GAS  /tmp/cciU3xpT.s 			page 50


 597:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 598:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 599:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 600:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 601:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return result;
 602:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 603:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 604:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 605:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 606:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 607:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 608:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 609:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 610:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 611:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 612:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 613:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 614:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 615:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 616:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 617:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 618:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 619:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 620:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 621:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 622:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return result;
 623:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 624:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 625:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 626:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 627:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 628:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 629:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 630:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 631:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 632:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   mode.
 633:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   
 634:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 635:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 636:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 637:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 638:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 639:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 640:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 641:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 642:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 643:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 644:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 645:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 646:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 647:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 648:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 649:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 650:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 651:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 652:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
ARM GAS  /tmp/cciU3xpT.s 			page 51


 654:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 655:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 656:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 657:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 658:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 659:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 660:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 661:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 662:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 663:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 664:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 665:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 666:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 667:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 668:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 669:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 670:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 671:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 672:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 673:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 674:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   mode.
 675:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 676:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 677:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 678:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 679:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 680:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 681:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 682:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 683:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 684:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 685:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 686:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 687:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 688:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return result;
 689:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 690:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 691:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 692:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 693:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 694:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 695:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 696:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 697:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 698:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 699:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 700:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 701:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 702:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 703:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 704:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 705:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 706:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 707:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 708:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 709:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 710:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return result;
ARM GAS  /tmp/cciU3xpT.s 			page 52


 711:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 712:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 713:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 714:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 715:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 716:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 717:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 718:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 719:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 720:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   mode.
 721:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 722:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 723:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 724:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 725:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 726:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 727:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 728:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 729:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 730:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 731:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 732:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 733:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 734:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 735:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 736:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 737:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 738:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 739:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 740:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 741:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 742:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 743:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 744:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 745:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 746:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 747:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 748:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 749:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 750:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 751:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 752:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 753:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 754:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 755:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 756:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 757:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 758:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 759:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 760:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 761:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 762:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 763:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 764:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 765:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 766:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 767:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/cciU3xpT.s 			page 53


 768:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 769:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 770:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 771:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 772:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 773:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 774:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 775:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 776:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 777:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 778:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 779:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 780:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 781:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 782:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 783:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 784:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 785:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 786:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 787:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 788:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 789:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 790:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 791:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 792:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 793:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 794:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 795:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 796:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 797:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 798:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 799:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 800:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 801:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 802:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 803:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 804:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 805:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 806:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 807:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 808:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 809:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 810:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 811:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 812:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 813:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 814:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 815:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 816:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   @{
 817:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** */
 818:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 819:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 820:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 821:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 822:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 823:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 824:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
ARM GAS  /tmp/cciU3xpT.s 			page 54


 825:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 826:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 827:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 828:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 829:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 830:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 831:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 832:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 833:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 834:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 835:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 836:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 837:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 838:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 839:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 840:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 841:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 842:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 843:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 844:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 845:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 846:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 847:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 848:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 849:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 850:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 851:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 852:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 853:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 854:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 855:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 856:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 857:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 858:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 859:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 860:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 861:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 862:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 863:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 864:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 865:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 866:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 867:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 868:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 869:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 870:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 871:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 872:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 873:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 874:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 875:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 876:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 877:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 878:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 879:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 267              		.loc 3 879 0
 268              		.syntax unified
ARM GAS  /tmp/cciU3xpT.s 			page 55


 269              	@ 879 "..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h" 1
 270 0018 BFF34F8F 		dsb 0xF
 271              	@ 0 "" 2
 272              		.thumb
 273              		.syntax unified
 274              	.LBE69:
 275              	.LBE68:
 276              	.LBB70:
 277              	.LBB71:
 868:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 278              		.loc 3 868 0
 279              		.syntax unified
 280              	@ 868 "..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h" 1
 281 001c BFF36F8F 		isb 0xF
 282              	@ 0 "" 2
 283              	.LVL29:
 284              		.thumb
 285              		.syntax unified
 286              	.L16:
 287 0020 7047     		bx	lr
 288              	.L19:
 289 0022 00BF     		.align	2
 290              	.L18:
 291 0024 00E100E0 		.word	-536813312
 292              	.LBE71:
 293              	.LBE70:
 294              	.LBE67:
 295              	.LBE66:
 296              		.cfi_endproc
 297              	.LFE75:
 299              		.section	.text.HAL_NVIC_SystemReset,"ax",%progbits
 300              		.align	1
 301              		.global	HAL_NVIC_SystemReset
 302              		.syntax unified
 303              		.thumb
 304              		.thumb_func
 305              		.fpu softvfp
 307              	HAL_NVIC_SystemReset:
 308              	.LFB76:
 231:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   /* Check the parameters */
 232:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 233:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   
 234:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   /* Disable interrupt */
 235:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   NVIC_DisableIRQ(IRQn);
 236:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** }
 237:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** 
 238:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** /**
 239:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @brief  Initiates a system reset request to reset the MCU.
 240:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @retval None
 241:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   */
 242:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** void HAL_NVIC_SystemReset(void)
 243:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** {
 309              		.loc 1 243 0
 310              		.cfi_startproc
 311              		@ Volatile: function does not return.
 312              		@ args = 0, pretend = 0, frame = 0
 313              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cciU3xpT.s 			page 56


 314              		@ link register save eliminated.
 315              	.LBB78:
 316              	.LBB79:
 317              	.LBB80:
 318              	.LBB81:
 319              		.loc 3 879 0
 320              		.syntax unified
 321              	@ 879 "..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h" 1
 322 0000 BFF34F8F 		dsb 0xF
 323              	@ 0 "" 2
 324              		.thumb
 325              		.syntax unified
 326              	.LBE81:
 327              	.LBE80:
1698:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****          );
1699:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** }
1700:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1701:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1702:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1703:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief   Decode Priority
1704:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \details Decodes an interrupt priority value with a given priority group to
1705:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****            preemptive priority value and subpriority value.
1706:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****            In case of a conflict between priority grouping and available
1707:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****            priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
1708:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \param [in]         Priority   Priority value, which can be retrieved with the function \ref NVIC
1709:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \param [in]     PriorityGroup  Used priority group.
1710:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
1711:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \param [out]     pSubPriority  Subpriority value (starting from 0).
1712:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
1713:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* cons
1714:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
1715:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
1716:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   uint32_t PreemptPriorityBits;
1717:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   uint32_t SubPriorityBits;
1718:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1719:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
1720:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
1721:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1722:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1
1723:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1
1724:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** }
1725:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1726:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1727:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1728:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief   Set Interrupt Vector
1729:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \details Sets an interrupt vector in SRAM based interrupt vector table.
1730:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****            The interrupt number can be positive to specify a device specific interrupt,
1731:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****            or negative to specify a processor exception.
1732:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****            VTOR must been relocated to SRAM before.
1733:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \param [in]   IRQn      Interrupt number
1734:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \param [in]   vector    Address of interrupt handler function
1735:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
1736:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** __STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
1737:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
1738:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   uint32_t *vectors = (uint32_t *)SCB->VTOR;
1739:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET] = vector;
1740:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** }
ARM GAS  /tmp/cciU3xpT.s 			page 57


1741:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1742:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1743:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1744:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief   Get Interrupt Vector
1745:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \details Reads an interrupt vector from interrupt vector table.
1746:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****            The interrupt number can be positive to specify a device specific interrupt,
1747:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****            or negative to specify a processor exception.
1748:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \param [in]   IRQn      Interrupt number.
1749:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \return                 Address of interrupt handler function
1750:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
1751:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t __NVIC_GetVector(IRQn_Type IRQn)
1752:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
1753:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   uint32_t *vectors = (uint32_t *)SCB->VTOR;
1754:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   return vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET];
1755:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** }
1756:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1757:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1758:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1759:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief   System Reset
1760:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \details Initiates a system reset request to reset the MCU.
1761:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
1762:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** __NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
1763:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
1764:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __DSB();                                                          /* Ensure all outstanding memor
1765:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****                                                                        buffered write are completed
1766:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
1767:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****                            (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 328              		.loc 2 1767 0
 329 0004 0549     		ldr	r1, .L22
 330 0006 CA68     		ldr	r2, [r1, #12]
 331 0008 02F4E062 		and	r2, r2, #1792
1766:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****                            (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 332              		.loc 2 1766 0
 333 000c 044B     		ldr	r3, .L22+4
 334 000e 1343     		orrs	r3, r3, r2
 335 0010 CB60     		str	r3, [r1, #12]
 336              	.LBB82:
 337              	.LBB83:
 338              		.loc 3 879 0
 339              		.syntax unified
 340              	@ 879 "..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h" 1
 341 0012 BFF34F8F 		dsb 0xF
 342              	@ 0 "" 2
 343              		.thumb
 344              		.syntax unified
 345              	.L21:
 346              	.LBE83:
 347              	.LBE82:
1768:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****                             SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchange
1769:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   __DSB();                                                          /* Ensure completion of memory 
1770:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1771:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   for(;;)                                                           /* wait until reset */
1772:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   {
1773:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     __NOP();
 348              		.loc 2 1773 0
 349              		.syntax unified
 350              	@ 1773 "..//Source/stm/lib/CMSIS/Include/core_cm3.h" 1
ARM GAS  /tmp/cciU3xpT.s 			page 58


 351 0016 00BF     		nop
 352              	@ 0 "" 2
 353              		.thumb
 354              		.syntax unified
 355 0018 FDE7     		b	.L21
 356              	.L23:
 357 001a 00BF     		.align	2
 358              	.L22:
 359 001c 00ED00E0 		.word	-536810240
 360 0020 0400FA05 		.word	100270084
 361              	.LBE79:
 362              	.LBE78:
 363              		.cfi_endproc
 364              	.LFE76:
 366              		.section	.text.HAL_SYSTICK_Config,"ax",%progbits
 367              		.align	1
 368              		.global	HAL_SYSTICK_Config
 369              		.syntax unified
 370              		.thumb
 371              		.thumb_func
 372              		.fpu softvfp
 374              	HAL_SYSTICK_Config:
 375              	.LFB77:
 244:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   /* System Reset */
 245:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   NVIC_SystemReset();
 246:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** }
 247:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** 
 248:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** /**
 249:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @brief  Initializes the System Timer and its interrupt, and starts the System Tick Timer.
 250:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *         Counter is in free running mode to generate periodic interrupts.
 251:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
 252:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @retval status:  - 0  Function succeeded.
 253:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *                  - 1  Function failed.
 254:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   */
 255:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
 256:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** {
 376              		.loc 1 256 0
 377              		.cfi_startproc
 378              		@ args = 0, pretend = 0, frame = 0
 379              		@ frame_needed = 0, uses_anonymous_args = 0
 380              		@ link register save eliminated.
 381              	.LVL30:
 382              	.LBB84:
 383              	.LBB85:
1774:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   }
1775:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** }
1776:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1777:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /*@} end of CMSIS_Core_NVICFunctions */
1778:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1779:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* ##########################  MPU functions  #################################### */
1780:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1781:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1782:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1783:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #include "mpu_armv7.h"
1784:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1785:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #endif
1786:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/cciU3xpT.s 			page 59


1787:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* ##########################  FPU functions  #################################### */
1788:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1789:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_Core_FunctionInterface
1790:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_Core_FpuFunctions FPU Functions
1791:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief    Function that provides FPU type.
1792:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   @{
1793:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
1794:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1795:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1796:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief   get FPU type
1797:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \details returns the FPU type
1798:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \returns
1799:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****    - \b  0: No FPU
1800:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****    - \b  1: Single precision FPU
1801:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****    - \b  2: Double + Single precision FPU
1802:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
1803:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t SCB_GetFPUType(void)
1804:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
1805:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     return 0U;           /* No FPU */
1806:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** }
1807:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1808:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1809:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /*@} end of CMSIS_Core_FpuFunctions */
1810:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1811:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1812:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1813:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /* ##################################    SysTick function  ########################################
1814:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1815:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \ingroup  CMSIS_Core_FunctionInterface
1816:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \defgroup CMSIS_Core_SysTickFunctions SysTick Functions
1817:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief    Functions that configure the System.
1818:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   @{
1819:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
1820:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1821:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** #if defined (__Vendor_SysTickConfig) && (__Vendor_SysTickConfig == 0U)
1822:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1823:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** /**
1824:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \brief   System Tick Configuration
1825:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \details Initializes the System Timer and its interrupt, and starts the System Tick Timer.
1826:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****            Counter is in free running mode to generate periodic interrupts.
1827:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \param [in]  ticks  Number of ticks between two interrupts.
1828:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \return          0  Function succeeded.
1829:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \return          1  Function failed.
1830:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
1831:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****            function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.
1832:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****            must contain a vendor-specific implementation of this function.
1833:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****  */
1834:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
1835:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** {
1836:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 384              		.loc 2 1836 0
 385 0000 0138     		subs	r0, r0, #1
 386              	.LVL31:
 387 0002 B0F1807F 		cmp	r0, #16777216
 388 0006 0AD2     		bcs	.L26
1837:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   {
1838:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****     return (1UL);                                                   /* Reload value impossible */
ARM GAS  /tmp/cciU3xpT.s 			page 60


1839:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   }
1840:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
1841:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 389              		.loc 2 1841 0
 390 0008 064B     		ldr	r3, .L27
 391 000a 5860     		str	r0, [r3, #4]
 392              	.LVL32:
 393              	.LBB86:
 394              	.LBB87:
1647:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   }
 395              		.loc 2 1647 0
 396 000c F021     		movs	r1, #240
 397 000e 064A     		ldr	r2, .L27+4
 398 0010 82F82310 		strb	r1, [r2, #35]
 399              	.LVL33:
 400              	.LBE87:
 401              	.LBE86:
1842:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Int
1843:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Val
 402              		.loc 2 1843 0
 403 0014 0020     		movs	r0, #0
 404              	.LVL34:
 405 0016 9860     		str	r0, [r3, #8]
1844:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 406              		.loc 2 1844 0
 407 0018 0722     		movs	r2, #7
 408 001a 1A60     		str	r2, [r3]
 409 001c 7047     		bx	lr
 410              	.L26:
1838:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   }
 411              		.loc 2 1838 0
 412 001e 0120     		movs	r0, #1
 413              	.LVL35:
 414              	.LBE85:
 415              	.LBE84:
 257:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****    return SysTick_Config(TicksNumb);
 258:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** }
 416              		.loc 1 258 0
 417 0020 7047     		bx	lr
 418              	.L28:
 419 0022 00BF     		.align	2
 420              	.L27:
 421 0024 10E000E0 		.word	-536813552
 422 0028 00ED00E0 		.word	-536810240
 423              		.cfi_endproc
 424              	.LFE77:
 426              		.section	.text.HAL_MPU_Enable,"ax",%progbits
 427              		.align	1
 428              		.global	HAL_MPU_Enable
 429              		.syntax unified
 430              		.thumb
 431              		.thumb_func
 432              		.fpu softvfp
 434              	HAL_MPU_Enable:
 435              	.LFB78:
 259:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** /**
 260:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @}
ARM GAS  /tmp/cciU3xpT.s 			page 61


 261:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   */
 262:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** 
 263:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** /** @defgroup CORTEX_Exported_Functions_Group2 Peripheral Control functions
 264:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****  *  @brief    Cortex control functions 
 265:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****  *
 266:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** @verbatim   
 267:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   ==============================================================================
 268:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****                       ##### Peripheral Control functions #####
 269:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   ==============================================================================
 270:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****     [..]
 271:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****       This subsection provides a set of functions allowing to control the CORTEX
 272:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****       (NVIC, SYSTICK, MPU) functionalities. 
 273:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****  
 274:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****       
 275:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** @endverbatim
 276:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @{
 277:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   */
 278:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** 
 279:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** #if (__MPU_PRESENT == 1)
 280:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** /**
 281:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @brief  Enable the MPU.
 282:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @param  MPU_Control Specifies the control mode of the MPU during hard fault, 
 283:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *          NMI, FAULTMASK and privileged accessto the default memory 
 284:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *          This parameter can be one of the following values:
 285:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *            @arg MPU_HFNMI_PRIVDEF_NONE
 286:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *            @arg MPU_HARDFAULT_NMI
 287:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *            @arg MPU_PRIVILEGED_DEFAULT
 288:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *            @arg MPU_HFNMI_PRIVDEF
 289:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @retval None
 290:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   */
 291:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** void HAL_MPU_Enable(uint32_t MPU_Control)
 292:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** {
 436              		.loc 1 292 0
 437              		.cfi_startproc
 438              		@ args = 0, pretend = 0, frame = 0
 439              		@ frame_needed = 0, uses_anonymous_args = 0
 440              		@ link register save eliminated.
 441              	.LVL36:
 293:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   /* Enable the MPU */
 294:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   MPU->CTRL = (MPU_Control | MPU_CTRL_ENABLE_Msk);
 442              		.loc 1 294 0
 443 0000 40F00100 		orr	r0, r0, #1
 444              	.LVL37:
 445 0004 034B     		ldr	r3, .L30
 446 0006 5860     		str	r0, [r3, #4]
 447              	.LBB88:
 448              	.LBB89:
 449              		.loc 3 879 0
 450              		.syntax unified
 451              	@ 879 "..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h" 1
 452 0008 BFF34F8F 		dsb 0xF
 453              	@ 0 "" 2
 454              		.thumb
 455              		.syntax unified
 456              	.LBE89:
 457              	.LBE88:
 458              	.LBB90:
ARM GAS  /tmp/cciU3xpT.s 			page 62


 459              	.LBB91:
 868:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 460              		.loc 3 868 0
 461              		.syntax unified
 462              	@ 868 "..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h" 1
 463 000c BFF36F8F 		isb 0xF
 464              	@ 0 "" 2
 465              		.thumb
 466              		.syntax unified
 467 0010 7047     		bx	lr
 468              	.L31:
 469 0012 00BF     		.align	2
 470              	.L30:
 471 0014 90ED00E0 		.word	-536810096
 472              	.LBE91:
 473              	.LBE90:
 474              		.cfi_endproc
 475              	.LFE78:
 477              		.section	.text.HAL_MPU_Disable,"ax",%progbits
 478              		.align	1
 479              		.global	HAL_MPU_Disable
 480              		.syntax unified
 481              		.thumb
 482              		.thumb_func
 483              		.fpu softvfp
 485              	HAL_MPU_Disable:
 486              	.LFB79:
 295:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** 
 296:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   /* Ensure MPU setting take effects */
 297:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   __DSB();
 298:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   __ISB();
 299:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** }
 300:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** 
 301:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** /**
 302:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @brief  Disable the MPU.
 303:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @retval None
 304:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   */
 305:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** void HAL_MPU_Disable(void)
 306:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** {
 487              		.loc 1 306 0
 488              		.cfi_startproc
 489              		@ args = 0, pretend = 0, frame = 0
 490              		@ frame_needed = 0, uses_anonymous_args = 0
 491              		@ link register save eliminated.
 492              	.LBB92:
 493              	.LBB93:
 880:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 881:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 882:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 883:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 884:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 885:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 886:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 887:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 888:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 889:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 890:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
ARM GAS  /tmp/cciU3xpT.s 			page 63


 494              		.loc 3 890 0
 495              		.syntax unified
 496              	@ 890 "..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h" 1
 497 0000 BFF35F8F 		dmb 0xF
 498              	@ 0 "" 2
 499              		.thumb
 500              		.syntax unified
 501              	.LBE93:
 502              	.LBE92:
 307:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   /* Make sure outstanding transfers are done */
 308:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   __DMB();
 309:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** 
 310:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   /* Disable the MPU and clear the control register*/
 311:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   MPU->CTRL  = 0;
 503              		.loc 1 311 0
 504 0004 0022     		movs	r2, #0
 505 0006 014B     		ldr	r3, .L33
 506 0008 5A60     		str	r2, [r3, #4]
 507 000a 7047     		bx	lr
 508              	.L34:
 509              		.align	2
 510              	.L33:
 511 000c 90ED00E0 		.word	-536810096
 512              		.cfi_endproc
 513              	.LFE79:
 515              		.section	.text.HAL_MPU_ConfigRegion,"ax",%progbits
 516              		.align	1
 517              		.global	HAL_MPU_ConfigRegion
 518              		.syntax unified
 519              		.thumb
 520              		.thumb_func
 521              		.fpu softvfp
 523              	HAL_MPU_ConfigRegion:
 524              	.LFB80:
 312:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** }
 313:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** 
 314:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** /**
 315:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @brief  Initializes and configures the Region and the memory to be protected.
 316:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
 317:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *                the initialization and configuration information.
 318:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @retval None
 319:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   */
 320:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
 321:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** {
 525              		.loc 1 321 0
 526              		.cfi_startproc
 527              		@ args = 0, pretend = 0, frame = 0
 528              		@ frame_needed = 0, uses_anonymous_args = 0
 529              		@ link register save eliminated.
 530              	.LVL38:
 322:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   /* Check the parameters */
 323:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
 324:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));
 325:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** 
 326:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   /* Set the Region number */
 327:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   MPU->RNR = MPU_Init->Number;
 531              		.loc 1 327 0
ARM GAS  /tmp/cciU3xpT.s 			page 64


 532 0000 4278     		ldrb	r2, [r0, #1]	@ zero_extendqisi2
 533 0002 134B     		ldr	r3, .L39
 534 0004 9A60     		str	r2, [r3, #8]
 328:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** 
 329:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   if ((MPU_Init->Enable) != RESET)
 535              		.loc 1 329 0
 536 0006 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 537 0008 23B9     		cbnz	r3, .L38
 330:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   {
 331:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****     /* Check the parameters */
 332:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****     assert_param(IS_MPU_INSTRUCTION_ACCESS(MPU_Init->DisableExec));
 333:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****     assert_param(IS_MPU_REGION_PERMISSION_ATTRIBUTE(MPU_Init->AccessPermission));
 334:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****     assert_param(IS_MPU_TEX_LEVEL(MPU_Init->TypeExtField));
 335:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****     assert_param(IS_MPU_ACCESS_SHAREABLE(MPU_Init->IsShareable));
 336:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****     assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
 337:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****     assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
 338:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****     assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
 339:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****     assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
 340:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****     
 341:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****     MPU->RBAR = MPU_Init->BaseAddress;
 342:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****     MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 343:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 344:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 345:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 346:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 347:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 348:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 349:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 350:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 351:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   }
 352:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   else
 353:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   {
 354:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****     MPU->RBAR = 0x00;
 538              		.loc 1 354 0
 539 000a 114B     		ldr	r3, .L39
 540 000c 0022     		movs	r2, #0
 541 000e DA60     		str	r2, [r3, #12]
 355:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****     MPU->RASR = 0x00;
 542              		.loc 1 355 0
 543 0010 1A61     		str	r2, [r3, #16]
 544 0012 7047     		bx	lr
 545              	.L38:
 341:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****     MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 546              		.loc 1 341 0
 547 0014 4368     		ldr	r3, [r0, #4]
 548 0016 0E4A     		ldr	r2, .L39
 549 0018 D360     		str	r3, [r2, #12]
 342:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 550              		.loc 1 342 0
 551 001a 017B     		ldrb	r1, [r0, #12]	@ zero_extendqisi2
 343:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 552              		.loc 1 343 0
 553 001c C37A     		ldrb	r3, [r0, #11]	@ zero_extendqisi2
 554 001e 1B06     		lsls	r3, r3, #24
 342:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 555              		.loc 1 342 0
 556 0020 43EA0173 		orr	r3, r3, r1, lsl #28
ARM GAS  /tmp/cciU3xpT.s 			page 65


 344:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 557              		.loc 1 344 0
 558 0024 817A     		ldrb	r1, [r0, #10]	@ zero_extendqisi2
 343:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 559              		.loc 1 343 0
 560 0026 43EAC143 		orr	r3, r3, r1, lsl #19
 345:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 561              		.loc 1 345 0
 562 002a 417B     		ldrb	r1, [r0, #13]	@ zero_extendqisi2
 344:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 563              		.loc 1 344 0
 564 002c 43EA8143 		orr	r3, r3, r1, lsl #18
 346:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 565              		.loc 1 346 0
 566 0030 817B     		ldrb	r1, [r0, #14]	@ zero_extendqisi2
 345:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 567              		.loc 1 345 0
 568 0032 43EA4143 		orr	r3, r3, r1, lsl #17
 347:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 569              		.loc 1 347 0
 570 0036 C17B     		ldrb	r1, [r0, #15]	@ zero_extendqisi2
 346:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 571              		.loc 1 346 0
 572 0038 43EA0143 		orr	r3, r3, r1, lsl #16
 348:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 573              		.loc 1 348 0
 574 003c 417A     		ldrb	r1, [r0, #9]	@ zero_extendqisi2
 347:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 575              		.loc 1 347 0
 576 003e 43EA0123 		orr	r3, r3, r1, lsl #8
 349:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 577              		.loc 1 349 0
 578 0042 017A     		ldrb	r1, [r0, #8]	@ zero_extendqisi2
 348:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 579              		.loc 1 348 0
 580 0044 43EA4103 		orr	r3, r3, r1, lsl #1
 350:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   }
 581              		.loc 1 350 0
 582 0048 0178     		ldrb	r1, [r0]	@ zero_extendqisi2
 349:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 583              		.loc 1 349 0
 584 004a 0B43     		orrs	r3, r3, r1
 342:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 585              		.loc 1 342 0
 586 004c 1361     		str	r3, [r2, #16]
 587 004e 7047     		bx	lr
 588              	.L40:
 589              		.align	2
 590              	.L39:
 591 0050 90ED00E0 		.word	-536810096
 592              		.cfi_endproc
 593              	.LFE80:
 595              		.section	.text.HAL_NVIC_GetPriorityGrouping,"ax",%progbits
 596              		.align	1
 597              		.global	HAL_NVIC_GetPriorityGrouping
 598              		.syntax unified
 599              		.thumb
ARM GAS  /tmp/cciU3xpT.s 			page 66


 600              		.thumb_func
 601              		.fpu softvfp
 603              	HAL_NVIC_GetPriorityGrouping:
 604              	.LFB81:
 356:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   }
 357:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** }
 358:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** #endif /* __MPU_PRESENT */
 359:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** 
 360:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** /**
 361:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @brief  Gets the priority grouping field from the NVIC Interrupt Controller.
 362:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
 363:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   */
 364:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** uint32_t HAL_NVIC_GetPriorityGrouping(void)
 365:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** {
 605              		.loc 1 365 0
 606              		.cfi_startproc
 607              		@ args = 0, pretend = 0, frame = 0
 608              		@ frame_needed = 0, uses_anonymous_args = 0
 609              		@ link register save eliminated.
 610              	.LBB94:
 611              	.LBB95:
1501:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** }
 612              		.loc 2 1501 0
 613 0000 024B     		ldr	r3, .L42
 614 0002 D868     		ldr	r0, [r3, #12]
 615              	.LBE95:
 616              	.LBE94:
 366:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   /* Get the PRIGROUP[10:8] field value */
 367:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   return NVIC_GetPriorityGrouping();
 368:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** }
 617              		.loc 1 368 0
 618 0004 C0F30220 		ubfx	r0, r0, #8, #3
 619 0008 7047     		bx	lr
 620              	.L43:
 621 000a 00BF     		.align	2
 622              	.L42:
 623 000c 00ED00E0 		.word	-536810240
 624              		.cfi_endproc
 625              	.LFE81:
 627              		.section	.text.HAL_NVIC_GetPriority,"ax",%progbits
 628              		.align	1
 629              		.global	HAL_NVIC_GetPriority
 630              		.syntax unified
 631              		.thumb
 632              		.thumb_func
 633              		.fpu softvfp
 635              	HAL_NVIC_GetPriority:
 636              	.LFB82:
 369:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** 
 370:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** /**
 371:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @brief  Gets the priority of an interrupt.
 372:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @param  IRQn External interrupt number
 373:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 374:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 375:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @param  PriorityGroup the priority grouping bits length.
 376:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *         This parameter can be one of the following values:
 377:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *           @arg NVIC_PRIORITYGROUP_0: 0 bits for pre-emption priority
ARM GAS  /tmp/cciU3xpT.s 			page 67


 378:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *                                      4 bits for subpriority
 379:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *           @arg NVIC_PRIORITYGROUP_1: 1 bits for pre-emption priority
 380:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *                                      3 bits for subpriority
 381:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *           @arg NVIC_PRIORITYGROUP_2: 2 bits for pre-emption priority
 382:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *                                      2 bits for subpriority
 383:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *           @arg NVIC_PRIORITYGROUP_3: 3 bits for pre-emption priority
 384:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *                                      1 bits for subpriority
 385:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *           @arg NVIC_PRIORITYGROUP_4: 4 bits for pre-emption priority
 386:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *                                      0 bits for subpriority
 387:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @param  pPreemptPriority Pointer on the Preemptive priority value (starting from 0).
 388:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @param  pSubPriority Pointer on the Subpriority value (starting from 0).
 389:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @retval None
 390:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   */
 391:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t* pPreemptPriority, uint3
 392:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** {
 637              		.loc 1 392 0
 638              		.cfi_startproc
 639              		@ args = 0, pretend = 0, frame = 0
 640              		@ frame_needed = 0, uses_anonymous_args = 0
 641              		@ link register save eliminated.
 642              	.LVL39:
 643 0000 70B4     		push	{r4, r5, r6}
 644              	.LCFI3:
 645              		.cfi_def_cfa_offset 12
 646              		.cfi_offset 4, -12
 647              		.cfi_offset 5, -8
 648              		.cfi_offset 6, -4
 649              	.LVL40:
 650              	.LBB96:
 651              	.LBB97:
1664:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   {
 652              		.loc 2 1664 0
 653 0002 0028     		cmp	r0, #0
 654              	.LVL41:
 655 0004 1FDB     		blt	.L45
1666:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   }
 656              		.loc 2 1666 0
 657 0006 00F16040 		add	r0, r0, #-536870912
 658 000a 00F56140 		add	r0, r0, #57600
 659 000e 90F80003 		ldrb	r0, [r0, #768]	@ zero_extendqisi2
 660 0012 0509     		lsrs	r5, r0, #4
 661              	.L46:
 662              	.LVL42:
 663              	.LBE97:
 664              	.LBE96:
 665              	.LBB99:
 666              	.LBB100:
1715:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   uint32_t PreemptPriorityBits;
 667              		.loc 2 1715 0
 668 0014 01F00701 		and	r1, r1, #7
 669              	.LVL43:
1719:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
 670              		.loc 2 1719 0
 671 0018 C1F10704 		rsb	r4, r1, #7
 672 001c 042C     		cmp	r4, #4
 673 001e 28BF     		it	cs
 674 0020 0424     		movcs	r4, #4
ARM GAS  /tmp/cciU3xpT.s 			page 68


 675              	.LVL44:
1720:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 676              		.loc 2 1720 0
 677 0022 081D     		adds	r0, r1, #4
 678 0024 0628     		cmp	r0, #6
 679 0026 14D9     		bls	.L48
 680 0028 0339     		subs	r1, r1, #3
 681              	.LVL45:
 682              	.L47:
1722:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1
 683              		.loc 2 1722 0
 684 002a 25FA01F6 		lsr	r6, r5, r1
 685 002e 0120     		movs	r0, #1
 686              	.LVL46:
 687 0030 00FA04F4 		lsl	r4, r0, r4
 688              	.LVL47:
 689 0034 013C     		subs	r4, r4, #1
 690 0036 3440     		ands	r4, r4, r6
 691 0038 1460     		str	r4, [r2]
1723:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** }
 692              		.loc 2 1723 0
 693 003a 8840     		lsls	r0, r0, r1
 694 003c 0138     		subs	r0, r0, #1
 695 003e 2840     		ands	r0, r0, r5
 696 0040 1860     		str	r0, [r3]
 697              	.LVL48:
 698              	.LBE100:
 699              	.LBE99:
 393:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   /* Check the parameters */
 394:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 395:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****  /* Get priority for Cortex-M system or device specific interrupts */
 396:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
 397:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** }
 700              		.loc 1 397 0
 701 0042 70BC     		pop	{r4, r5, r6}
 702              	.LCFI4:
 703              		.cfi_remember_state
 704              		.cfi_restore 6
 705              		.cfi_restore 5
 706              		.cfi_restore 4
 707              		.cfi_def_cfa_offset 0
 708 0044 7047     		bx	lr
 709              	.LVL49:
 710              	.L45:
 711              	.LCFI5:
 712              		.cfi_restore_state
 713              	.LBB102:
 714              	.LBB98:
1670:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   }
 715              		.loc 2 1670 0
 716 0046 00F00F00 		and	r0, r0, #15
 717 004a 034C     		ldr	r4, .L50
 718 004c 205C     		ldrb	r0, [r4, r0]	@ zero_extendqisi2
 719 004e 0509     		lsrs	r5, r0, #4
 720 0050 E0E7     		b	.L46
 721              	.LVL50:
 722              	.L48:
ARM GAS  /tmp/cciU3xpT.s 			page 69


 723              	.LBE98:
 724              	.LBE102:
 725              	.LBB103:
 726              	.LBB101:
1720:..//Source/stm/lib/CMSIS/Include/core_cm3.h **** 
 727              		.loc 2 1720 0
 728 0052 0021     		movs	r1, #0
 729              	.LVL51:
 730 0054 E9E7     		b	.L47
 731              	.L51:
 732 0056 00BF     		.align	2
 733              	.L50:
 734 0058 14ED00E0 		.word	-536810220
 735              	.LBE101:
 736              	.LBE103:
 737              		.cfi_endproc
 738              	.LFE82:
 740              		.section	.text.HAL_NVIC_SetPendingIRQ,"ax",%progbits
 741              		.align	1
 742              		.global	HAL_NVIC_SetPendingIRQ
 743              		.syntax unified
 744              		.thumb
 745              		.thumb_func
 746              		.fpu softvfp
 748              	HAL_NVIC_SetPendingIRQ:
 749              	.LFB83:
 398:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** 
 399:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** /**
 400:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @brief  Sets Pending bit of an external interrupt.
 401:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @param  IRQn External interrupt number
 402:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 403:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 404:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @retval None
 405:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   */
 406:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
 407:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** { 
 750              		.loc 1 407 0
 751              		.cfi_startproc
 752              		@ args = 0, pretend = 0, frame = 0
 753              		@ frame_needed = 0, uses_anonymous_args = 0
 754              		@ link register save eliminated.
 755              	.LVL52:
 756              	.LBB104:
 757              	.LBB105:
1587:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   {
 758              		.loc 2 1587 0
 759 0000 0028     		cmp	r0, #0
 760              	.LVL53:
 761 0002 09DB     		blt	.L52
1589:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   }
 762              		.loc 2 1589 0
 763 0004 4309     		lsrs	r3, r0, #5
 764 0006 00F01F00 		and	r0, r0, #31
 765 000a 0122     		movs	r2, #1
 766 000c 02FA00F0 		lsl	r0, r2, r0
 767 0010 4033     		adds	r3, r3, #64
 768 0012 024A     		ldr	r2, .L54
ARM GAS  /tmp/cciU3xpT.s 			page 70


 769 0014 42F82300 		str	r0, [r2, r3, lsl #2]
 770              	.LVL54:
 771              	.L52:
 772 0018 7047     		bx	lr
 773              	.L55:
 774 001a 00BF     		.align	2
 775              	.L54:
 776 001c 00E100E0 		.word	-536813312
 777              	.LBE105:
 778              	.LBE104:
 779              		.cfi_endproc
 780              	.LFE83:
 782              		.section	.text.HAL_NVIC_GetPendingIRQ,"ax",%progbits
 783              		.align	1
 784              		.global	HAL_NVIC_GetPendingIRQ
 785              		.syntax unified
 786              		.thumb
 787              		.thumb_func
 788              		.fpu softvfp
 790              	HAL_NVIC_GetPendingIRQ:
 791              	.LFB84:
 408:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   /* Set interrupt pending */
 409:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   NVIC_SetPendingIRQ(IRQn);
 410:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** }
 411:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** 
 412:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** /**
 413:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @brief Gets Pending Interrupt (reads the pending register in the NVIC 
 414:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *         and returns the pending bit for the specified interrupt).
 415:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @param IRQn External interrupt number
 416:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 417:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 418:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @retval status: - 0  Interrupt status is not pending.
 419:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *                 - 1  Interrupt status is pending.
 420:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   */
 421:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
 422:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** { 
 792              		.loc 1 422 0
 793              		.cfi_startproc
 794              		@ args = 0, pretend = 0, frame = 0
 795              		@ frame_needed = 0, uses_anonymous_args = 0
 796              		@ link register save eliminated.
 797              	.LVL55:
 798              	.LBB106:
 799              	.LBB107:
1568:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   {
 800              		.loc 2 1568 0
 801 0000 031E     		subs	r3, r0, #0
 802 0002 0ADB     		blt	.L58
1570:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   }
 803              		.loc 2 1570 0
 804 0004 5A09     		lsrs	r2, r3, #5
 805 0006 4032     		adds	r2, r2, #64
 806 0008 0549     		ldr	r1, .L59
 807 000a 51F82200 		ldr	r0, [r1, r2, lsl #2]
 808              	.LVL56:
 809 000e 03F01F03 		and	r3, r3, #31
 810 0012 D840     		lsrs	r0, r0, r3
ARM GAS  /tmp/cciU3xpT.s 			page 71


 811 0014 00F00100 		and	r0, r0, #1
 812 0018 7047     		bx	lr
 813              	.LVL57:
 814              	.L58:
1574:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   }
 815              		.loc 2 1574 0
 816 001a 0020     		movs	r0, #0
 817              	.LVL58:
 818              	.LBE107:
 819              	.LBE106:
 423:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   /* Return 1 if pending else 0 */
 424:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   return NVIC_GetPendingIRQ(IRQn);
 425:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** }
 820              		.loc 1 425 0
 821 001c 7047     		bx	lr
 822              	.L60:
 823 001e 00BF     		.align	2
 824              	.L59:
 825 0020 00E100E0 		.word	-536813312
 826              		.cfi_endproc
 827              	.LFE84:
 829              		.section	.text.HAL_NVIC_ClearPendingIRQ,"ax",%progbits
 830              		.align	1
 831              		.global	HAL_NVIC_ClearPendingIRQ
 832              		.syntax unified
 833              		.thumb
 834              		.thumb_func
 835              		.fpu softvfp
 837              	HAL_NVIC_ClearPendingIRQ:
 838              	.LFB85:
 426:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** 
 427:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** /**
 428:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @brief Clears the pending bit of an external interrupt.
 429:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @param IRQn External interrupt number
 430:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 431:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 432:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @retval None
 433:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   */
 434:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 435:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** { 
 839              		.loc 1 435 0
 840              		.cfi_startproc
 841              		@ args = 0, pretend = 0, frame = 0
 842              		@ frame_needed = 0, uses_anonymous_args = 0
 843              		@ link register save eliminated.
 844              	.LVL59:
 845              	.LBB108:
 846              	.LBB109:
1602:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   {
 847              		.loc 2 1602 0
 848 0000 0028     		cmp	r0, #0
 849              	.LVL60:
 850 0002 09DB     		blt	.L61
1604:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   }
 851              		.loc 2 1604 0
 852 0004 4309     		lsrs	r3, r0, #5
 853 0006 00F01F00 		and	r0, r0, #31
ARM GAS  /tmp/cciU3xpT.s 			page 72


 854 000a 0122     		movs	r2, #1
 855 000c 02FA00F0 		lsl	r0, r2, r0
 856 0010 6033     		adds	r3, r3, #96
 857 0012 024A     		ldr	r2, .L63
 858 0014 42F82300 		str	r0, [r2, r3, lsl #2]
 859              	.LVL61:
 860              	.L61:
 861 0018 7047     		bx	lr
 862              	.L64:
 863 001a 00BF     		.align	2
 864              	.L63:
 865 001c 00E100E0 		.word	-536813312
 866              	.LBE109:
 867              	.LBE108:
 868              		.cfi_endproc
 869              	.LFE85:
 871              		.section	.text.HAL_NVIC_GetActive,"ax",%progbits
 872              		.align	1
 873              		.global	HAL_NVIC_GetActive
 874              		.syntax unified
 875              		.thumb
 876              		.thumb_func
 877              		.fpu softvfp
 879              	HAL_NVIC_GetActive:
 880              	.LFB86:
 436:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   /* Clear pending interrupt */
 437:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   NVIC_ClearPendingIRQ(IRQn);
 438:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** }
 439:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** 
 440:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** /**
 441:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @brief Gets active interrupt ( reads the active register in NVIC and returns the active bit).
 442:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @param IRQn External interrupt number
 443:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 444:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 445:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @retval status: - 0  Interrupt status is not pending.
 446:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *                 - 1  Interrupt status is pending.
 447:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   */
 448:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
 449:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** { 
 881              		.loc 1 449 0
 882              		.cfi_startproc
 883              		@ args = 0, pretend = 0, frame = 0
 884              		@ frame_needed = 0, uses_anonymous_args = 0
 885              		@ link register save eliminated.
 886              	.LVL62:
 887              	.LBB110:
 888              	.LBB111:
1619:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   {
 889              		.loc 2 1619 0
 890 0000 031E     		subs	r3, r0, #0
 891 0002 0ADB     		blt	.L67
1621:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   }
 892              		.loc 2 1621 0
 893 0004 5A09     		lsrs	r2, r3, #5
 894 0006 8032     		adds	r2, r2, #128
 895 0008 0549     		ldr	r1, .L68
 896 000a 51F82200 		ldr	r0, [r1, r2, lsl #2]
ARM GAS  /tmp/cciU3xpT.s 			page 73


 897              	.LVL63:
 898 000e 03F01F03 		and	r3, r3, #31
 899 0012 D840     		lsrs	r0, r0, r3
 900 0014 00F00100 		and	r0, r0, #1
 901 0018 7047     		bx	lr
 902              	.LVL64:
 903              	.L67:
1625:..//Source/stm/lib/CMSIS/Include/core_cm3.h ****   }
 904              		.loc 2 1625 0
 905 001a 0020     		movs	r0, #0
 906              	.LVL65:
 907              	.LBE111:
 908              	.LBE110:
 450:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   /* Return 1 if active else 0 */
 451:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   return NVIC_GetActive(IRQn);
 452:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** }
 909              		.loc 1 452 0
 910 001c 7047     		bx	lr
 911              	.L69:
 912 001e 00BF     		.align	2
 913              	.L68:
 914 0020 00E100E0 		.word	-536813312
 915              		.cfi_endproc
 916              	.LFE86:
 918              		.section	.text.HAL_SYSTICK_CLKSourceConfig,"ax",%progbits
 919              		.align	1
 920              		.global	HAL_SYSTICK_CLKSourceConfig
 921              		.syntax unified
 922              		.thumb
 923              		.thumb_func
 924              		.fpu softvfp
 926              	HAL_SYSTICK_CLKSourceConfig:
 927              	.LFB87:
 453:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** 
 454:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** /**
 455:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @brief  Configures the SysTick clock source.
 456:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @param  CLKSource specifies the SysTick clock source.
 457:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *         This parameter can be one of the following values:
 458:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock 
 459:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
 460:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @retval None
 461:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   */
 462:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
 463:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** {
 928              		.loc 1 463 0
 929              		.cfi_startproc
 930              		@ args = 0, pretend = 0, frame = 0
 931              		@ frame_needed = 0, uses_anonymous_args = 0
 932              		@ link register save eliminated.
 933              	.LVL66:
 464:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   /* Check the parameters */
 465:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 466:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 934              		.loc 1 466 0
 935 0000 0428     		cmp	r0, #4
 936 0002 05D0     		beq	.L73
 467:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   {
ARM GAS  /tmp/cciU3xpT.s 			page 74


 468:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****     SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 469:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   }
 470:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   else
 471:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   {
 472:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****     SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 937              		.loc 1 472 0
 938 0004 054A     		ldr	r2, .L74
 939 0006 1368     		ldr	r3, [r2]
 940 0008 23F00403 		bic	r3, r3, #4
 941 000c 1360     		str	r3, [r2]
 942 000e 7047     		bx	lr
 943              	.L73:
 468:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   }
 944              		.loc 1 468 0
 945 0010 024A     		ldr	r2, .L74
 946 0012 1368     		ldr	r3, [r2]
 947 0014 43F00403 		orr	r3, r3, #4
 948 0018 1360     		str	r3, [r2]
 949 001a 7047     		bx	lr
 950              	.L75:
 951              		.align	2
 952              	.L74:
 953 001c 10E000E0 		.word	-536813552
 954              		.cfi_endproc
 955              	.LFE87:
 957              		.section	.text.HAL_SYSTICK_Callback,"ax",%progbits
 958              		.align	1
 959              		.weak	HAL_SYSTICK_Callback
 960              		.syntax unified
 961              		.thumb
 962              		.thumb_func
 963              		.fpu softvfp
 965              	HAL_SYSTICK_Callback:
 966              	.LFB89:
 473:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   }
 474:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** }
 475:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** 
 476:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** /**
 477:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @brief  This function handles SYSTICK interrupt request.
 478:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @retval None
 479:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   */
 480:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** void HAL_SYSTICK_IRQHandler(void)
 481:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** {
 482:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   HAL_SYSTICK_Callback();
 483:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** }
 484:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** 
 485:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** /**
 486:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @brief  SYSTICK callback.
 487:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   * @retval None
 488:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   */
 489:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** __weak void HAL_SYSTICK_Callback(void)
 490:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** {
 967              		.loc 1 490 0
 968              		.cfi_startproc
 969              		@ args = 0, pretend = 0, frame = 0
 970              		@ frame_needed = 0, uses_anonymous_args = 0
 971              		@ link register save eliminated.
ARM GAS  /tmp/cciU3xpT.s 			page 75


 972 0000 7047     		bx	lr
 973              		.cfi_endproc
 974              	.LFE89:
 976              		.section	.text.HAL_SYSTICK_IRQHandler,"ax",%progbits
 977              		.align	1
 978              		.global	HAL_SYSTICK_IRQHandler
 979              		.syntax unified
 980              		.thumb
 981              		.thumb_func
 982              		.fpu softvfp
 984              	HAL_SYSTICK_IRQHandler:
 985              	.LFB88:
 481:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   HAL_SYSTICK_Callback();
 986              		.loc 1 481 0
 987              		.cfi_startproc
 988              		@ args = 0, pretend = 0, frame = 0
 989              		@ frame_needed = 0, uses_anonymous_args = 0
 481:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c ****   HAL_SYSTICK_Callback();
 990              		.loc 1 481 0
 991 0000 08B5     		push	{r3, lr}
 992              	.LCFI6:
 993              		.cfi_def_cfa_offset 8
 994              		.cfi_offset 3, -8
 995              		.cfi_offset 14, -4
 482:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_cortex.c **** }
 996              		.loc 1 482 0
 997 0002 FFF7FEFF 		bl	HAL_SYSTICK_Callback
 998              	.LVL67:
 999 0006 08BD     		pop	{r3, pc}
 1000              		.cfi_endproc
 1001              	.LFE88:
 1003              		.text
 1004              	.Letext0:
 1005              		.file 4 "..//Source/stm/lib/CMSIS/Device/ST/STM32L1xx/Include/stm32l151xba.h"
 1006              		.file 5 "/usr/include/newlib/machine/_default_types.h"
 1007              		.file 6 "/usr/include/newlib/sys/_stdint.h"
 1008              		.file 7 "..//Source/stm/lib/CMSIS/Device/ST/STM32L1xx/Include/system_stm32l1xx.h"
 1009              		.file 8 "..//Source/stm/lib/CMSIS/Device/ST/STM32L1xx/Include/stm32l1xx.h"
 1010              		.file 9 "..//Source/stm/lib/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal_cortex.h"
 1011              		.file 10 "..//Source/stm/lib/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal.h"
ARM GAS  /tmp/cciU3xpT.s 			page 76


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32l1xx_hal_cortex.c
     /tmp/cciU3xpT.s:16     .text.HAL_NVIC_SetPriorityGrouping:0000000000000000 $t
     /tmp/cciU3xpT.s:23     .text.HAL_NVIC_SetPriorityGrouping:0000000000000000 HAL_NVIC_SetPriorityGrouping
     /tmp/cciU3xpT.s:62     .text.HAL_NVIC_SetPriorityGrouping:0000000000000020 $d
     /tmp/cciU3xpT.s:69     .text.HAL_NVIC_SetPriority:0000000000000000 $t
     /tmp/cciU3xpT.s:76     .text.HAL_NVIC_SetPriority:0000000000000000 HAL_NVIC_SetPriority
     /tmp/cciU3xpT.s:188    .text.HAL_NVIC_SetPriority:000000000000005c $d
     /tmp/cciU3xpT.s:194    .text.HAL_NVIC_EnableIRQ:0000000000000000 $t
     /tmp/cciU3xpT.s:201    .text.HAL_NVIC_EnableIRQ:0000000000000000 HAL_NVIC_EnableIRQ
     /tmp/cciU3xpT.s:228    .text.HAL_NVIC_EnableIRQ:0000000000000018 $d
     /tmp/cciU3xpT.s:235    .text.HAL_NVIC_DisableIRQ:0000000000000000 $t
     /tmp/cciU3xpT.s:242    .text.HAL_NVIC_DisableIRQ:0000000000000000 HAL_NVIC_DisableIRQ
     /tmp/cciU3xpT.s:291    .text.HAL_NVIC_DisableIRQ:0000000000000024 $d
     /tmp/cciU3xpT.s:300    .text.HAL_NVIC_SystemReset:0000000000000000 $t
     /tmp/cciU3xpT.s:307    .text.HAL_NVIC_SystemReset:0000000000000000 HAL_NVIC_SystemReset
     /tmp/cciU3xpT.s:359    .text.HAL_NVIC_SystemReset:000000000000001c $d
     /tmp/cciU3xpT.s:367    .text.HAL_SYSTICK_Config:0000000000000000 $t
     /tmp/cciU3xpT.s:374    .text.HAL_SYSTICK_Config:0000000000000000 HAL_SYSTICK_Config
     /tmp/cciU3xpT.s:421    .text.HAL_SYSTICK_Config:0000000000000024 $d
     /tmp/cciU3xpT.s:427    .text.HAL_MPU_Enable:0000000000000000 $t
     /tmp/cciU3xpT.s:434    .text.HAL_MPU_Enable:0000000000000000 HAL_MPU_Enable
     /tmp/cciU3xpT.s:471    .text.HAL_MPU_Enable:0000000000000014 $d
     /tmp/cciU3xpT.s:478    .text.HAL_MPU_Disable:0000000000000000 $t
     /tmp/cciU3xpT.s:485    .text.HAL_MPU_Disable:0000000000000000 HAL_MPU_Disable
     /tmp/cciU3xpT.s:511    .text.HAL_MPU_Disable:000000000000000c $d
     /tmp/cciU3xpT.s:516    .text.HAL_MPU_ConfigRegion:0000000000000000 $t
     /tmp/cciU3xpT.s:523    .text.HAL_MPU_ConfigRegion:0000000000000000 HAL_MPU_ConfigRegion
     /tmp/cciU3xpT.s:591    .text.HAL_MPU_ConfigRegion:0000000000000050 $d
     /tmp/cciU3xpT.s:596    .text.HAL_NVIC_GetPriorityGrouping:0000000000000000 $t
     /tmp/cciU3xpT.s:603    .text.HAL_NVIC_GetPriorityGrouping:0000000000000000 HAL_NVIC_GetPriorityGrouping
     /tmp/cciU3xpT.s:623    .text.HAL_NVIC_GetPriorityGrouping:000000000000000c $d
     /tmp/cciU3xpT.s:628    .text.HAL_NVIC_GetPriority:0000000000000000 $t
     /tmp/cciU3xpT.s:635    .text.HAL_NVIC_GetPriority:0000000000000000 HAL_NVIC_GetPriority
     /tmp/cciU3xpT.s:734    .text.HAL_NVIC_GetPriority:0000000000000058 $d
     /tmp/cciU3xpT.s:741    .text.HAL_NVIC_SetPendingIRQ:0000000000000000 $t
     /tmp/cciU3xpT.s:748    .text.HAL_NVIC_SetPendingIRQ:0000000000000000 HAL_NVIC_SetPendingIRQ
     /tmp/cciU3xpT.s:776    .text.HAL_NVIC_SetPendingIRQ:000000000000001c $d
     /tmp/cciU3xpT.s:783    .text.HAL_NVIC_GetPendingIRQ:0000000000000000 $t
     /tmp/cciU3xpT.s:790    .text.HAL_NVIC_GetPendingIRQ:0000000000000000 HAL_NVIC_GetPendingIRQ
     /tmp/cciU3xpT.s:825    .text.HAL_NVIC_GetPendingIRQ:0000000000000020 $d
     /tmp/cciU3xpT.s:830    .text.HAL_NVIC_ClearPendingIRQ:0000000000000000 $t
     /tmp/cciU3xpT.s:837    .text.HAL_NVIC_ClearPendingIRQ:0000000000000000 HAL_NVIC_ClearPendingIRQ
     /tmp/cciU3xpT.s:865    .text.HAL_NVIC_ClearPendingIRQ:000000000000001c $d
     /tmp/cciU3xpT.s:872    .text.HAL_NVIC_GetActive:0000000000000000 $t
     /tmp/cciU3xpT.s:879    .text.HAL_NVIC_GetActive:0000000000000000 HAL_NVIC_GetActive
     /tmp/cciU3xpT.s:914    .text.HAL_NVIC_GetActive:0000000000000020 $d
     /tmp/cciU3xpT.s:919    .text.HAL_SYSTICK_CLKSourceConfig:0000000000000000 $t
     /tmp/cciU3xpT.s:926    .text.HAL_SYSTICK_CLKSourceConfig:0000000000000000 HAL_SYSTICK_CLKSourceConfig
     /tmp/cciU3xpT.s:953    .text.HAL_SYSTICK_CLKSourceConfig:000000000000001c $d
     /tmp/cciU3xpT.s:958    .text.HAL_SYSTICK_Callback:0000000000000000 $t
     /tmp/cciU3xpT.s:965    .text.HAL_SYSTICK_Callback:0000000000000000 HAL_SYSTICK_Callback
     /tmp/cciU3xpT.s:977    .text.HAL_SYSTICK_IRQHandler:0000000000000000 $t
     /tmp/cciU3xpT.s:984    .text.HAL_SYSTICK_IRQHandler:0000000000000000 HAL_SYSTICK_IRQHandler
                     .debug_frame:0000000000000010 $d

NO UNDEFINED SYMBOLS
ARM GAS  /tmp/cciU3xpT.s 			page 77


