ARM GAS  /tmp/cc6rDylt.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32l1xx_hal_flash_ex.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.FLASH_OB_GetUser,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	FLASH_OB_GetUser:
  23              	.LFB88:
  24              		.file 1 "..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c"
   1:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
   2:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   ******************************************************************************
   3:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @file    stm32l1xx_hal_flash_ex.c
   4:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @author  MCD Application Team
   5:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief   Extended FLASH HAL module driver.
   6:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *    
   7:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *          This file provides firmware functions to manage the following 
   8:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *          functionalities of the internal FLASH memory:
   9:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *            + FLASH Interface configuration
  10:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *            + FLASH Memory Erasing
  11:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *            + DATA EEPROM Programming/Erasing
  12:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *            + Option Bytes Programming
  13:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *            + Interrupts management
  14:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *    
  15:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   @verbatim
  16:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   ==============================================================================
  17:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****                ##### Flash peripheral Extended features  #####
  18:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   ==============================================================================
  19:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****            
  20:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   [..] Comparing to other products, the FLASH interface for STM32L1xx
  21:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****        devices contains the following additional features        
  22:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****        (+) Erase functions
  23:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****        (+) DATA_EEPROM memory management
  24:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****        (+) BOOT option bit configuration       
  25:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****        (+) PCROP protection for all sectors
  26:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****    
  27:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****                       ##### How to use this driver #####
  28:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   ==============================================================================
  29:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   [..] This driver provides functions to configure and program the FLASH memory 
  30:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****        of all STM32L1xx. It includes:
  31:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****        (+) Full DATA_EEPROM erase and program management
  32:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****        (+) Boot activation
  33:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****        (+) PCROP protection configuration and control for all pages
  34:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
ARM GAS  /tmp/cc6rDylt.s 			page 2


  35:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   @endverbatim
  36:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   ******************************************************************************
  37:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @attention
  38:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *
  39:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
  40:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * All rights reserved.</center></h2>
  41:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *
  42:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  43:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * the "License"; You may not use this file except in compliance with the
  44:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * License. You may obtain a copy of the License at:
  45:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *                        opensource.org/licenses/BSD-3-Clause
  46:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *
  47:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   ******************************************************************************
  48:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */ 
  49:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
  50:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /* Includes ------------------------------------------------------------------*/
  51:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #include "stm32l1xx_hal.h"
  52:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
  53:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /** @addtogroup STM32L1xx_HAL_Driver
  54:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @{
  55:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
  56:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #ifdef HAL_FLASH_MODULE_ENABLED
  57:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
  58:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /** @addtogroup FLASH
  59:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @{
  60:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
  61:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /** @addtogroup FLASH_Private_Variables
  62:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  * @{
  63:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  */
  64:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /* Variables used for Erase pages under interruption*/
  65:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** extern FLASH_ProcessTypeDef pFlash;
  66:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
  67:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @}
  68:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
  69:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
  70:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
  71:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @}
  72:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
  73:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
  74:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /** @defgroup FLASHEx FLASHEx
  75:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief FLASH HAL Extension module driver
  76:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @{
  77:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
  78:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
  79:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /* Private typedef -----------------------------------------------------------*/
  80:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /* Private define ------------------------------------------------------------*/
  81:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /** @defgroup FLASHEx_Private_Constants FLASHEx Private Constants
  82:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  * @{
  83:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  */
  84:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
  85:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @}
  86:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
  87:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
  88:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /* Private macro -------------------------------------------------------------*/
  89:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /** @defgroup FLASHEx_Private_Macros FLASHEx Private Macros
  90:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @{
  91:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
ARM GAS  /tmp/cc6rDylt.s 			page 3


  92:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
  93:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @}
  94:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */ 
  95:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
  96:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /* Private variables ---------------------------------------------------------*/
  97:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /* Private function prototypes -----------------------------------------------*/
  98:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /** @defgroup FLASHEx_Private_Functions FLASHEx Private Functions
  99:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  * @{
 100:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  */
 101:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** void                      FLASH_PageErase(uint32_t PageAddress);
 102:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_OB_WRPConfig(FLASH_OBProgramInitTypeDef *pOBInit, FunctionalState N
 103:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static void               FLASH_OB_WRPConfigWRP1OrPCROP1(uint32_t WRP1OrPCROP1, FunctionalState New
 104:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(STM32L100xC) || defined(STM32L151xC) || defined(STM32L152xC) || defined(STM32L162xC)   
 105:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  || defined(STM32L151xCA) || defined(STM32L151xD) || defined(STM32L151xDX) || defined(STM32L152xCA)
 106:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  || defined(STM32L152xD) || defined(STM32L152xDX) || defined(STM32L162xCA) || defined(STM32L162xD) 
 107:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  || defined(STM32L162xDX) || defined(STM32L151xE) || defined(STM32L152xE) || defined(STM32L162xE)
 108:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static void               FLASH_OB_WRPConfigWRP2OrPCROP2(uint32_t WRP2OrPCROP2, FunctionalState New
 109:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L100xC || STM32L151xC || STM32L152xC || (...) || STM32L151xE || STM32L152xE || STM32
 110:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(STM32L151xD) || defined(STM32L151xDX) || defined(STM32L152xD) || defined(STM32L152xDX) 
 111:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  || defined(STM32L162xD) || defined(STM32L162xDX) || defined(STM32L151xE) || defined(STM32L152xE)  
 112:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  || defined(STM32L162xE)
 113:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static void               FLASH_OB_WRPConfigWRP3(uint32_t WRP3, FunctionalState NewState);
 114:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L151xD || STM32L152xD || STM32L162xD || STM32L151xE || STM32L152xE || STM32L162xE */
 115:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(STM32L151xE) || defined(STM32L152xE) || defined(STM32L162xE) || defined(STM32L151xDX) \
 116:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  || defined(STM32L152xDX) || defined(STM32L162xDX)
 117:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static void               FLASH_OB_WRPConfigWRP4(uint32_t WRP4, FunctionalState NewState);
 118:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L151xE || STM32L152xE || STM32L151xDX || ... */
 119:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(FLASH_OBR_SPRMOD)
 120:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_OB_PCROPConfig(FLASH_AdvOBProgramInitTypeDef *pAdvOBInit, Functiona
 121:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* FLASH_OBR_SPRMOD */
 122:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(FLASH_OBR_nRST_BFB2)
 123:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_OB_BootConfig(uint8_t OB_BOOT);
 124:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* FLASH_OBR_nRST_BFB2 */
 125:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_OB_RDPConfig(uint8_t OB_RDP);
 126:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY);
 127:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_OB_BORConfig(uint8_t OB_BOR);
 128:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static uint8_t            FLASH_OB_GetRDP(void);
 129:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static uint8_t            FLASH_OB_GetUser(void);
 130:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static uint8_t            FLASH_OB_GetBOR(void);
 131:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_DATAEEPROM_FastProgramByte(uint32_t Address, uint8_t Data);
 132:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_DATAEEPROM_FastProgramHalfWord(uint32_t Address, uint16_t Data);
 133:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_DATAEEPROM_FastProgramWord(uint32_t Address, uint32_t Data);
 134:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_DATAEEPROM_ProgramWord(uint32_t Address, uint32_t Data);
 135:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_DATAEEPROM_ProgramHalfWord(uint32_t Address, uint16_t Data);
 136:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_DATAEEPROM_ProgramByte(uint32_t Address, uint8_t Data);
 137:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
 138:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @}
 139:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
 140:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 141:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /* Exported functions ---------------------------------------------------------*/
 142:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /** @defgroup FLASHEx_Exported_Functions FLASHEx Exported Functions
 143:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @{
 144:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
 145:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 146:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /** @defgroup FLASHEx_Exported_Functions_Group1 FLASHEx Memory Erasing functions
 147:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  *  @brief   FLASH Memory Erasing functions
 148:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  *
ARM GAS  /tmp/cc6rDylt.s 			page 4


 149:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** @verbatim   
 150:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   ==============================================================================
 151:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****                 ##### FLASH Erasing Programming functions ##### 
 152:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   ==============================================================================
 153:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 154:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     [..] The FLASH Memory Erasing functions, includes the following functions:
 155:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     (+) @ref HAL_FLASHEx_Erase: return only when erase has been done
 156:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     (+) @ref HAL_FLASHEx_Erase_IT: end of erase is done when @ref HAL_FLASH_EndOfOperationCallback 
 157:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         is called with parameter 0xFFFFFFFF
 158:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 159:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     [..] Any operation of erase should follow these steps:
 160:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     (#) Call the @ref HAL_FLASH_Unlock() function to enable the flash control register and 
 161:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         program memory access.
 162:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     (#) Call the desired function to erase page.
 163:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     (#) Call the @ref HAL_FLASH_Lock() to disable the flash program memory access 
 164:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****        (recommended to protect the FLASH memory against possible unwanted operation).
 165:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 166:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** @endverbatim
 167:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @{
 168:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
 169:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 170:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
 171:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Erase the specified FLASH memory Pages 
 172:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @note   To correctly run this function, the @ref HAL_FLASH_Unlock() function
 173:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         must be called before.
 174:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         Call the @ref HAL_FLASH_Lock() to disable the flash memory access 
 175:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         (recommended to protect the FLASH memory against possible unwanted operation)
 176:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @note   For STM32L151xDX/STM32L152xDX/STM32L162xDX, as memory is not continuous between
 177:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         2 banks, user should perform pages erase by bank only.
 178:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param[in]  pEraseInit pointer to an FLASH_EraseInitTypeDef structure that
 179:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         contains the configuration information for the erasing.
 180:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * 
 181:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param[out]  PageError pointer to variable  that
 182:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         contains the configuration information on faulty page in case of error
 183:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         (0xFFFFFFFF means that all the pages have been correctly erased)
 184:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * 
 185:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval HAL_StatusTypeDef HAL Status
 186:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
 187:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
 188:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
 189:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 190:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint32_t address = 0U;
 191:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 192:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Process Locked */
 193:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   __HAL_LOCK(&pFlash);
 194:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 195:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
 196:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 197:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 198:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if (status == HAL_OK)
 199:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 200:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /*Initialization of PageError variable*/
 201:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     *PageError = 0xFFFFFFFFU;
 202:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 203:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Check the parameters */
 204:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     assert_param(IS_NBPAGES(pEraseInit->NbPages));
 205:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
ARM GAS  /tmp/cc6rDylt.s 			page 5


 206:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
 207:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     assert_param(IS_FLASH_PROGRAM_ADDRESS((pEraseInit->PageAddress & ~(FLASH_PAGE_SIZE - 1U)) + pEr
 208:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 209:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(STM32L151xDX) || defined(STM32L152xDX) || defined(STM32L162xDX)
 210:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Check on which bank belongs the 1st address to erase */
 211:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     if (pEraseInit->PageAddress < FLASH_BANK2_BASE)
 212:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 213:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* BANK1 */
 214:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Check that last page to erase still belongs to BANK1 */
 215:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       if (((pEraseInit->PageAddress & ~(FLASH_PAGE_SIZE - 1U)) + pEraseInit->NbPages * FLASH_PAGE_S
 216:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       {
 217:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         /*  Last page does not belong to BANK1, erase procedure cannot be performed because memory 
 218:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****             continuous */
 219:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         /* Process Unlocked */
 220:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         __HAL_UNLOCK(&pFlash);
 221:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         return HAL_ERROR;
 222:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       }
 223:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 224:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     else
 225:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 226:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* BANK2 */
 227:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Check that last page to erase still belongs to BANK2 */
 228:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       if (((pEraseInit->PageAddress & ~(FLASH_PAGE_SIZE - 1U)) + pEraseInit->NbPages * FLASH_PAGE_S
 229:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       {
 230:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         /*  Last page does not belong to BANK2, erase procedure cannot be performed because memory 
 231:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****             continuous */
 232:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         /* Process Unlocked */
 233:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         __HAL_UNLOCK(&pFlash);
 234:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         return HAL_ERROR;
 235:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       }
 236:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 237:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L151xDX || STM32L152xDX || STM32L162xDX */
 238:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 239:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Erase page by page to be done*/
 240:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     for(address = pEraseInit->PageAddress; 
 241:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 242:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         address += FLASH_PAGE_SIZE)
 243:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 244:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       FLASH_PageErase(address);
 245:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 246:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Wait for last operation to be completed */
 247:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 248:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 249:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* If the erase operation is completed, disable the ERASE Bit */
 250:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 251:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 252:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 253:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       if (status != HAL_OK) 
 254:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       {
 255:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         /* In case of error, stop erase procedure and return the faulty address */
 256:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         *PageError = address;
 257:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         break;
 258:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       }
 259:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 260:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 261:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 262:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Process Unlocked */
ARM GAS  /tmp/cc6rDylt.s 			page 6


 263:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   __HAL_UNLOCK(&pFlash);
 264:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 265:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   return status;
 266:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
 267:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 268:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
 269:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Perform a page erase of the specified FLASH memory pages  with interrupt enabled
 270:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @note   To correctly run this function, the @ref HAL_FLASH_Unlock() function
 271:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         must be called before.
 272:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         Call the @ref HAL_FLASH_Lock() to disable the flash memory access 
 273:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         (recommended to protect the FLASH memory against possible unwanted operation)
 274:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *          End of erase is done when @ref HAL_FLASH_EndOfOperationCallback is called with paramet
 275:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *          0xFFFFFFFF
 276:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @note   For STM32L151xDX/STM32L152xDX/STM32L162xDX, as memory is not continuous between
 277:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         2 banks, user should perform pages erase by bank only.
 278:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  pEraseInit pointer to an FLASH_EraseInitTypeDef structure that
 279:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         contains the configuration information for the erasing.
 280:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * 
 281:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval HAL_StatusTypeDef HAL Status
 282:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
 283:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
 284:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
 285:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 286:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 287:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* If procedure already ongoing, reject the next one */
 288:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if (pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 289:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 290:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     return HAL_ERROR;
 291:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 292:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 293:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Check the parameters */
 294:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_NBPAGES(pEraseInit->NbPages));
 295:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 296:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
 297:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_FLASH_PROGRAM_ADDRESS((pEraseInit->PageAddress & ~(FLASH_PAGE_SIZE - 1U)) + pEras
 298:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 299:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Process Locked */
 300:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   __HAL_LOCK(&pFlash);
 301:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 302:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(STM32L151xDX) || defined(STM32L152xDX) || defined(STM32L162xDX)
 303:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Check on which bank belongs the 1st address to erase */
 304:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     if (pEraseInit->PageAddress < FLASH_BANK2_BASE)
 305:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 306:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* BANK1 */
 307:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Check that last page to erase still belongs to BANK1 */
 308:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       if (((pEraseInit->PageAddress & ~(FLASH_PAGE_SIZE - 1U)) + pEraseInit->NbPages * FLASH_PAGE_S
 309:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       {
 310:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         /*  Last page does not belong to BANK1, erase procedure cannot be performed because memory 
 311:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****             continuous */
 312:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         /* Process Unlocked */
 313:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         __HAL_UNLOCK(&pFlash);
 314:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         return HAL_ERROR;
 315:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       }
 316:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 317:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     else
 318:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 319:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* BANK2 */
ARM GAS  /tmp/cc6rDylt.s 			page 7


 320:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Check that last page to erase still belongs to BANK2 */
 321:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       if (((pEraseInit->PageAddress & ~(FLASH_PAGE_SIZE - 1U)) + pEraseInit->NbPages * FLASH_PAGE_S
 322:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       {
 323:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         /*  Last page does not belong to BANK2, erase procedure cannot be performed because memory 
 324:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****             continuous */
 325:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         /* Process Unlocked */
 326:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         __HAL_UNLOCK(&pFlash);
 327:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         return HAL_ERROR;
 328:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       }
 329:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 330:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L151xDX || STM32L152xDX || STM32L162xDX */
 331:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 332:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
 333:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 334:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 335:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if (status == HAL_OK)
 336:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 337:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Enable End of FLASH Operation and Error source interrupts */
 338:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 339:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
 340:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     pFlash.ProcedureOnGoing = FLASH_PROC_PAGEERASE;
 341:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     pFlash.NbPagesToErase = pEraseInit->NbPages;
 342:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     pFlash.Page = pEraseInit->PageAddress;
 343:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 344:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /*Erase 1st page and wait for IT*/
 345:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     FLASH_PageErase(pEraseInit->PageAddress);
 346:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 347:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   else
 348:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 349:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Process Unlocked */
 350:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     __HAL_UNLOCK(&pFlash);
 351:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 352:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 353:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   return status;
 354:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
 355:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 356:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
 357:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @}
 358:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
 359:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 360:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /** @defgroup FLASHEx_Exported_Functions_Group2 Option Bytes Programming functions
 361:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  *  @brief   Option Bytes Programming functions
 362:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  *
 363:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** @verbatim   
 364:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   ==============================================================================
 365:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****                 ##### Option Bytes Programming functions ##### 
 366:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   ==============================================================================  
 367:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 368:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     [..] Any operation of erase or program should follow these steps:
 369:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     (#) Call the @ref HAL_FLASH_OB_Unlock() function to enable the Flash option control 
 370:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         register access.
 371:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     (#) Call following function to program the desired option bytes.
 372:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         (++) @ref HAL_FLASHEx_OBProgram:
 373:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****          - To Enable/Disable the desired sector write protection.
 374:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****          - To set the desired read Protection Level.
 375:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****          - To configure the user option Bytes: IWDG, STOP and the Standby.
 376:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****          - To Set the BOR level.
ARM GAS  /tmp/cc6rDylt.s 			page 8


 377:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     (#) Once all needed option bytes to be programmed are correctly written, call the
 378:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         @ref HAL_FLASH_OB_Launch(void) function to launch the Option Bytes programming process.
 379:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     (#) Call the @ref HAL_FLASH_OB_Lock() to disable the Flash option control register access (reco
 380:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         to protect the option Bytes against possible unwanted operations).
 381:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 382:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     [..] Proprietary code Read Out Protection (PcROP):
 383:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     (#) The PcROP sector is selected by using the same option bytes as the Write
 384:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         protection (nWRPi bits). As a result, these 2 options are exclusive each other.
 385:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     (#) In order to activate the PcROP (change the function of the nWRPi option bits), 
 386:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         the SPRMOD option bit must be activated.
 387:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     (#) The active value of nWRPi bits is inverted when PCROP mode is active, this
 388:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         means: if SPRMOD = 1 and nWRPi = 1 (default value), then the user sector "i"
 389:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         is read/write protected.
 390:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     (#) To activate PCROP mode for Flash sector(s), you need to call the following function:
 391:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         (++) @ref HAL_FLASHEx_AdvOBProgram in selecting sectors to be read/write protected
 392:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         (++) @ref HAL_FLASHEx_OB_SelectPCROP to enable the read/write protection
 393:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     (#) PcROP is available only in STM32L151xBA, STM32L152xBA, STM32L151xC, STM32L152xC & STM32L162
 394:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 395:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** @endverbatim
 396:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @{
 397:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
 398:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 399:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
 400:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Program option bytes
 401:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  pOBInit pointer to an FLASH_OBInitStruct structure that
 402:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         contains the configuration information for the programming.
 403:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * 
 404:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval HAL_StatusTypeDef HAL Status
 405:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
 406:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
 407:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
 408:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 409:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 410:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Process Locked */
 411:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   __HAL_LOCK(&pFlash);
 412:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 413:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Check the parameters */
 414:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_OPTIONBYTE(pOBInit->OptionType));
 415:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 416:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /*Write protection configuration*/
 417:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 418:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 419:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     assert_param(IS_WRPSTATE(pOBInit->WRPState));
 420:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 421:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 422:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Enable of Write protection on the selected Sector*/
 423:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       status = FLASH_OB_WRPConfig(pOBInit, ENABLE);
 424:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 425:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     else
 426:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 427:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Disable of Write protection on the selected Sector*/
 428:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       status = FLASH_OB_WRPConfig(pOBInit, DISABLE);
 429:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 430:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     if (status != HAL_OK)
 431:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 432:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Process Unlocked */
 433:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       __HAL_UNLOCK(&pFlash);
ARM GAS  /tmp/cc6rDylt.s 			page 9


 434:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       return status;
 435:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 436:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 437:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 438:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Read protection configuration*/
 439:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 440:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 441:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     status = FLASH_OB_RDPConfig(pOBInit->RDPLevel);
 442:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     if (status != HAL_OK)
 443:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 444:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Process Unlocked */
 445:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       __HAL_UNLOCK(&pFlash);
 446:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       return status;
 447:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 448:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 449:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 450:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* USER  configuration*/
 451:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 452:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 453:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW, 
 454:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****                                  pOBInit->USERConfig & OB_STOP_NORST,
 455:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****                                  pOBInit->USERConfig & OB_STDBY_NORST);
 456:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     if (status != HAL_OK)
 457:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 458:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Process Unlocked */
 459:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       __HAL_UNLOCK(&pFlash);
 460:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       return status;
 461:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 462:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 463:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 464:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* BOR Level  configuration*/
 465:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 466:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 467:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     status = FLASH_OB_BORConfig(pOBInit->BORLevel);
 468:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     if (status != HAL_OK)
 469:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 470:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Process Unlocked */
 471:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       __HAL_UNLOCK(&pFlash);
 472:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       return status;
 473:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 474:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 475:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Process Unlocked */
 476:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   __HAL_UNLOCK(&pFlash);
 477:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 478:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   return status;
 479:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
 480:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 481:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
 482:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief   Get the Option byte configuration
 483:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  pOBInit pointer to an FLASH_OBInitStruct structure that
 484:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         contains the configuration information for the programming.
 485:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * 
 486:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval None
 487:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
 488:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
 489:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
 490:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
ARM GAS  /tmp/cc6rDylt.s 			page 10


 491:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 492:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /*Get WRP1*/
 493:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   pOBInit->WRPSector0To31 = (uint32_t)(FLASH->WRPR1);
 494:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 495:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(STM32L100xC) || defined(STM32L151xC) || defined(STM32L152xC) || defined(STM32L162xC)   
 496:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  || defined(STM32L151xCA) || defined(STM32L151xD) || defined(STM32L151xDX) || defined(STM32L152xCA)
 497:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  || defined(STM32L152xD) || defined(STM32L152xDX) || defined(STM32L162xCA) || defined(STM32L162xD) 
 498:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  || defined(STM32L162xDX) || defined(STM32L151xE) || defined(STM32L152xE) || defined(STM32L162xE)
 499:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
 500:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /*Get WRP2*/
 501:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   pOBInit->WRPSector32To63 = (uint32_t)(FLASH->WRPR2);
 502:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 503:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L100xC || STM32L151xC || STM32L152xC || (...) || STM32L151xE || STM32L152xE || STM32
 504:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 505:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(STM32L151xD) || defined(STM32L151xDX) || defined(STM32L152xD) || defined(STM32L152xDX) 
 506:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  || defined(STM32L162xD) || defined(STM32L162xDX) || defined(STM32L151xE) || defined(STM32L152xE)  
 507:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  || defined(STM32L162xE)
 508:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
 509:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /*Get WRP3*/
 510:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   pOBInit->WRPSector64To95 = (uint32_t)(FLASH->WRPR3);
 511:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 512:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L151xD || STM32L152xD || STM32L162xD || STM32L151xE || STM32L152xE || STM32L162xE */
 513:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 514:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(STM32L151xE) || defined(STM32L152xE) || defined(STM32L162xE) || defined(STM32L151xDX) \
 515:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  || defined(STM32L152xDX) || defined(STM32L162xDX)
 516:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 517:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /*Get WRP4*/
 518:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   pOBInit->WRPSector96To127 = (uint32_t)(FLASH->WRPR4);
 519:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 520:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L151xE || STM32L152xE || STM32L162xE || STM32L151xDX || ... */
 521:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 522:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /*Get RDP Level*/
 523:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   pOBInit->RDPLevel   = FLASH_OB_GetRDP();
 524:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 525:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /*Get USER*/
 526:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   pOBInit->USERConfig = FLASH_OB_GetUser();
 527:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 528:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /*Get BOR Level*/
 529:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   pOBInit->BORLevel   = FLASH_OB_GetBOR();
 530:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
 531:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 532:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(FLASH_OBR_SPRMOD) || defined(FLASH_OBR_nRST_BFB2)
 533:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
 534:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
 535:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Program option bytes
 536:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @note   This function can be used only for Cat2 & Cat3 devices for PCROP and Cat4 & Cat5 for BF
 537:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  pAdvOBInit pointer to an FLASH_AdvOBProgramInitTypeDef structure that
 538:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         contains the configuration information for the programming.
 539:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * 
 540:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval HAL_StatusTypeDef HAL Status
 541:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
 542:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** HAL_StatusTypeDef HAL_FLASHEx_AdvOBProgram (FLASH_AdvOBProgramInitTypeDef *pAdvOBInit)
 543:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
 544:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 545:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 546:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Check the parameters */
 547:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_OBEX(pAdvOBInit->OptionType));
ARM GAS  /tmp/cc6rDylt.s 			page 11


 548:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 549:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(FLASH_OBR_SPRMOD)
 550:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
 551:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Program PCROP option byte*/
 552:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if ((pAdvOBInit->OptionType & OPTIONBYTE_PCROP) == OPTIONBYTE_PCROP)
 553:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 554:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Check the parameters */
 555:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     assert_param(IS_PCROPSTATE(pAdvOBInit->PCROPState));
 556:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     if (pAdvOBInit->PCROPState == OB_PCROP_STATE_ENABLE)
 557:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 558:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /*Enable of Write protection on the selected Sector*/
 559:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       status = FLASH_OB_PCROPConfig(pAdvOBInit, ENABLE);
 560:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       if (status != HAL_OK)
 561:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       {
 562:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         return status;
 563:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       }
 564:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 565:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     else
 566:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 567:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Disable of Write protection on the selected Sector*/ 
 568:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       status = FLASH_OB_PCROPConfig(pAdvOBInit, DISABLE);
 569:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       if (status != HAL_OK)
 570:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       {
 571:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         return status;
 572:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       }
 573:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 574:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 575:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 576:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* FLASH_OBR_SPRMOD */
 577:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 578:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(FLASH_OBR_nRST_BFB2)
 579:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
 580:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Program BOOT config option byte */
 581:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if ((pAdvOBInit->OptionType & OPTIONBYTE_BOOTCONFIG) == OPTIONBYTE_BOOTCONFIG)
 582:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 583:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     status = FLASH_OB_BootConfig(pAdvOBInit->BootConfig);
 584:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 585:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 586:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* FLASH_OBR_nRST_BFB2 */
 587:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 588:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   return status;
 589:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
 590:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 591:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
 592:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Get the OBEX byte configuration
 593:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @note   This function can be used only for Cat2  & Cat3 devices for PCROP and Cat4 & Cat5 for B
 594:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  pAdvOBInit pointer to an FLASH_AdvOBProgramInitTypeDef structure that
 595:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         contains the configuration information for the programming.
 596:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * 
 597:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval None
 598:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
 599:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** void HAL_FLASHEx_AdvOBGetConfig(FLASH_AdvOBProgramInitTypeDef *pAdvOBInit)
 600:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
 601:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   pAdvOBInit->OptionType = 0U;
 602:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 603:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(FLASH_OBR_SPRMOD)
 604:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       
ARM GAS  /tmp/cc6rDylt.s 			page 12


 605:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   pAdvOBInit->OptionType |= OPTIONBYTE_PCROP;
 606:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 607:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /*Get PCROP state */
 608:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   pAdvOBInit->PCROPState = (FLASH->OBR & FLASH_OBR_SPRMOD) >> POSITION_VAL(FLASH_OBR_SPRMOD);
 609:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 610:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /*Get PCROP protected sector from 0 to 31 */
 611:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   pAdvOBInit->PCROPSector0To31 = FLASH->WRPR1;
 612:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 613:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(STM32L100xC) || defined(STM32L151xC) || defined(STM32L152xC) || defined(STM32L162xC)
 614:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 615:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /*Get PCROP protected sector from 32 to 63 */
 616:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   pAdvOBInit->PCROPSector32To63 = FLASH->WRPR2;
 617:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 618:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC */
 619:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* FLASH_OBR_SPRMOD */
 620:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 621:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(FLASH_OBR_nRST_BFB2)
 622:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       
 623:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   pAdvOBInit->OptionType |= OPTIONBYTE_BOOTCONFIG;
 624:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 625:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Get Boot config OB */
 626:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   pAdvOBInit->BootConfig = (FLASH->OBR & FLASH_OBR_nRST_BFB2) >> 16U;
 627:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 628:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* FLASH_OBR_nRST_BFB2 */
 629:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
 630:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 631:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* FLASH_OBR_SPRMOD || FLASH_OBR_nRST_BFB2 */
 632:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 633:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(FLASH_OBR_SPRMOD)
 634:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 635:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
 636:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Select the Protection Mode (SPRMOD).
 637:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @note   This function can be used only for STM32L151xBA, STM32L152xBA, STM32L151xC, STM32L152xC
 638:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @note   Once SPRMOD bit is active, unprotection of a protected sector is not possible 
 639:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @note   Read a protected sector will set RDERR Flag and write a protected sector will set WRPER
 640:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval HAL status
 641:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
 642:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** HAL_StatusTypeDef HAL_FLASHEx_OB_SelectPCROP(void)
 643:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
 644:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 645:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint16_t tmp1 = 0U;
 646:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint32_t tmp2 = 0U;
 647:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint8_t optiontmp = 0U;
 648:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint16_t optiontmp2 = 0U;
 649:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 650:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 651:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 652:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Mask RDP Byte */
 653:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   optiontmp =  (uint8_t)(*(__IO uint8_t *)(OB_BASE)); 
 654:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 655:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Update Option Byte */
 656:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   optiontmp2 = (uint16_t)(OB_PCROP_SELECTED | optiontmp); 
 657:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 658:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* calculate the option byte to write */
 659:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   tmp1 = (uint16_t)(~(optiontmp2 ));
 660:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   tmp2 = (uint32_t)(((uint32_t)((uint32_t)(tmp1) << 16U)) | ((uint32_t)optiontmp2));
 661:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
ARM GAS  /tmp/cc6rDylt.s 			page 13


 662:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if(status == HAL_OK)
 663:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {         
 664:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Clean the error context */
 665:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 666:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 667:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* program PCRop */
 668:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     OB->RDP = tmp2;
 669:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
 670:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Wait for last operation to be completed */
 671:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 672:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 673:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 674:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Return the Read protection operation Status */
 675:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   return status;            
 676:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
 677:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 678:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
 679:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Deselect the Protection Mode (SPRMOD).
 680:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @note   This function can be used only for STM32L151xBA, STM32L152xBA, STM32L151xC, STM32L152xC
 681:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @note   Once SPRMOD bit is active, unprotection of a protected sector is not possible 
 682:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @note   Read a protected sector will set RDERR Flag and write a protected sector will set WRPER
 683:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval HAL status
 684:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
 685:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** HAL_StatusTypeDef HAL_FLASHEx_OB_DeSelectPCROP(void)
 686:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
 687:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 688:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint16_t tmp1 = 0U;
 689:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint32_t tmp2 = 0U;
 690:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint8_t optiontmp = 0U;
 691:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint16_t optiontmp2 = 0U;
 692:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 693:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 694:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 695:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Mask RDP Byte */
 696:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   optiontmp =  (uint8_t)(*(__IO uint8_t *)(OB_BASE)); 
 697:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 698:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Update Option Byte */
 699:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   optiontmp2 = (uint16_t)(OB_PCROP_DESELECTED | optiontmp); 
 700:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 701:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* calculate the option byte to write */
 702:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   tmp1 = (uint16_t)(~(optiontmp2 ));
 703:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   tmp2 = (uint32_t)(((uint32_t)((uint32_t)(tmp1) << 16U)) | ((uint32_t)optiontmp2));
 704:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 705:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if(status == HAL_OK)
 706:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {         
 707:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Clean the error context */
 708:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 709:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 710:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* program PCRop */
 711:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     OB->RDP = tmp2;
 712:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
 713:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Wait for last operation to be completed */
 714:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 715:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 716:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 717:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Return the Read protection operation Status */
 718:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   return status;            
ARM GAS  /tmp/cc6rDylt.s 			page 14


 719:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
 720:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 721:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* FLASH_OBR_SPRMOD */
 722:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 723:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
 724:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @}
 725:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
 726:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 727:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /** @defgroup FLASHEx_Exported_Functions_Group3 DATA EEPROM Programming functions
 728:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  *  @brief   DATA EEPROM Programming functions
 729:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  *
 730:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** @verbatim   
 731:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  ===============================================================================
 732:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****                      ##### DATA EEPROM Programming functions ##### 
 733:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  ===============================================================================  
 734:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  
 735:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     [..] Any operation of erase or program should follow these steps:
 736:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     (#) Call the @ref HAL_FLASHEx_DATAEEPROM_Unlock() function to enable the data EEPROM access
 737:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         and Flash program erase control register access.
 738:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     (#) Call the desired function to erase or program data.
 739:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     (#) Call the @ref HAL_FLASHEx_DATAEEPROM_Lock() to disable the data EEPROM access
 740:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         and Flash program erase control register access(recommended
 741:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         to protect the DATA_EEPROM against possible unwanted operation).
 742:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 743:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** @endverbatim
 744:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @{
 745:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
 746:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 747:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
 748:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Unlocks the data memory and FLASH_PECR register access.
 749:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval HAL_StatusTypeDef HAL Status
 750:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
 751:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
 752:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
 753:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 754:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {  
 755:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Unlocking the Data memory and FLASH_PECR register access*/
 756:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     FLASH->PEKEYR = FLASH_PEKEY1;
 757:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     FLASH->PEKEYR = FLASH_PEKEY2;
 758:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 759:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   else
 760:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 761:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     return HAL_ERROR;
 762:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 763:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   return HAL_OK;  
 764:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
 765:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 766:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
 767:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Locks the Data memory and FLASH_PECR register access.
 768:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval HAL_StatusTypeDef HAL Status
 769:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
 770:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
 771:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
 772:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
 773:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 774:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 775:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   return HAL_OK;
ARM GAS  /tmp/cc6rDylt.s 			page 15


 776:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
 777:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 778:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
 779:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Erase a word in data memory.
 780:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  Address specifies the address to be erased.
 781:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  TypeErase  Indicate the way to erase at a specified address.
 782:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         This parameter can be a value of @ref FLASH_Type_Program
 783:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @note   To correctly run this function, the @ref HAL_FLASHEx_DATAEEPROM_Unlock() function
 784:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         must be called before.
 785:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         Call the @ref HAL_FLASHEx_DATAEEPROM_Lock() to the data EEPROM access
 786:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         and Flash program erase control register access(recommended to protect 
 787:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         the DATA_EEPROM against possible unwanted operation).
 788:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval HAL_StatusTypeDef HAL Status
 789:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
 790:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t TypeErase, uint32_t Address)
 791:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
 792:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 793:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 794:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Check the parameters */
 795:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_TYPEPROGRAMDATA(TypeErase));
 796:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_FLASH_DATA_ADDRESS(Address));
 797:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 798:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
 799:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 801:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if(status == HAL_OK)
 802:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 803:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Clean the error context */
 804:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 805:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 806:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     if(TypeErase == FLASH_TYPEERASEDATA_WORD)
 807:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 808:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Write 00000000h to valid address in the data memory */
 809:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       *(__IO uint32_t *) Address = 0x00000000U;
 810:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 811:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 812:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     if(TypeErase == FLASH_TYPEERASEDATA_HALFWORD)
 813:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 814:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Write 0000h to valid address in the data memory */
 815:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       *(__IO uint16_t *) Address = (uint16_t)0x0000;
 816:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 817:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 818:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     if(TypeErase == FLASH_TYPEERASEDATA_BYTE)
 819:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 820:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Write 00h to valid address in the data memory */
 821:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       *(__IO uint8_t *) Address = (uint8_t)0x00;
 822:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 823:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 824:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 825:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 826:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****    
 827:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Return the erase status */
 828:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   return status;
 829:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }  
 830:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 831:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
 832:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Program word at a specified address
ARM GAS  /tmp/cc6rDylt.s 			page 16


 833:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @note   To correctly run this function, the @ref HAL_FLASHEx_DATAEEPROM_Unlock() function
 834:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         must be called before.
 835:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         Call the @ref HAL_FLASHEx_DATAEEPROM_Unlock() to he data EEPROM access
 836:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         and Flash program erase control register access(recommended to protect 
 837:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         the DATA_EEPROM against possible unwanted operation).
 838:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @note   The function @ref HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram() can be called before 
 839:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         this function to configure the Fixed Time Programming.
 840:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  TypeProgram  Indicate the way to program at a specified address.
 841:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         This parameter can be a value of @ref FLASHEx_Type_Program_Data
 842:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  Address  specifie the address to be programmed.
 843:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  Data     specifie the data to be programmed
 844:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * 
 845:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval HAL_StatusTypeDef HAL Status
 846:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
 847:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 848:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t
 849:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
 850:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 851:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 852:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Process Locked */
 853:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   __HAL_LOCK(&pFlash);
 854:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 855:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Check the parameters */
 856:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
 857:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 858:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
 859:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 860:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 861:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if(status == HAL_OK)
 862:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 863:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Clean the error context */
 864:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 865:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 866:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 867:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 868:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Program word (32-bit) at a specified address.*/
 869:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       status = FLASH_DATAEEPROM_ProgramWord(Address, (uint32_t) Data);
 870:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 871:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 872:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 873:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Program halfword (16-bit) at a specified address.*/
 874:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       status = FLASH_DATAEEPROM_ProgramHalfWord(Address, (uint16_t) Data);
 875:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 876:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 877:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 878:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Program byte (8-bit) at a specified address.*/
 879:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       status = FLASH_DATAEEPROM_ProgramByte(Address, (uint8_t) Data);
 880:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 881:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTBYTE)
 882:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 883:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /*Program word (8-bit) at a specified address.*/
 884:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       status = FLASH_DATAEEPROM_FastProgramByte(Address, (uint8_t) Data);
 885:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 886:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTHALFWORD)
 887:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 888:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Program halfword (16-bit) at a specified address.*/
 889:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       status = FLASH_DATAEEPROM_FastProgramHalfWord(Address, (uint16_t) Data);
ARM GAS  /tmp/cc6rDylt.s 			page 17


 890:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }    
 891:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTWORD)
 892:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 893:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Program word (32-bit) at a specified address.*/
 894:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       status = FLASH_DATAEEPROM_FastProgramWord(Address, (uint32_t) Data);
 895:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 896:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     else
 897:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 898:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       status = HAL_ERROR;
 899:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 900:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 901:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 902:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 903:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Process Unlocked */
 904:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   __HAL_UNLOCK(&pFlash);
 905:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 906:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   return status;
 907:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
 908:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 909:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
 910:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Enable DATA EEPROM fixed Time programming (2*Tprog).
 911:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval None
 912:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
 913:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** void HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram(void)
 914:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
 915:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   SET_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 916:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
 917:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 918:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
 919:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Disables DATA EEPROM fixed Time programming (2*Tprog).
 920:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval None
 921:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
 922:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** void HAL_FLASHEx_DATAEEPROM_DisableFixedTimeProgram(void)
 923:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
 924:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 925:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
 926:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 927:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
 928:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @}
 929:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
 930:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 931:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
 932:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @}
 933:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
 934:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 935:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /** @addtogroup FLASHEx_Private_Functions
 936:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  * @{
 937:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  */
 938:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 939:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /*
 940:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** ==============================================================================
 941:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****               OPTIONS BYTES
 942:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** ==============================================================================
 943:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** */
 944:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
 945:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Enables or disables the read out protection.
 946:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @note   To correctly run this function, the @ref HAL_FLASH_OB_Unlock() function
ARM GAS  /tmp/cc6rDylt.s 			page 18


 947:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         must be called before.
 948:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  OB_RDP specifies the read protection level. 
 949:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *   This parameter can be:
 950:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *     @arg @ref OB_RDP_LEVEL_0 No protection
 951:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *     @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
 952:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *     @arg @ref OB_RDP_LEVEL_2 Chip protection
 953:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * 
 954:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *  !!!Warning!!! When enabling OB_RDP_LEVEL_2 it's no more possible to go back to level 1 or 0
 955:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *   
 956:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval HAL status
 957:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
 958:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_RDPConfig(uint8_t OB_RDP)
 959:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
 960:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 961:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint32_t tmp1 = 0U, tmp2 = 0U, tmp3 = 0U;
 962:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 963:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Check the parameters */
 964:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_OB_RDP(OB_RDP));
 965:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 966:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   tmp1 = (uint32_t)(OB->RDP & FLASH_OBR_RDPRT);
 967:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 968:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* According to errata sheet, DocID022054 Rev 5, par2.1.5
 969:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   Before setting Level0 in the RDP register, check that the current level is not equal to Level0.
 970:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   If the current level is not equal to Level0, Level0 can be activated.
 971:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   If the current level is Level0 then the RDP register must not be written again with Level0. */
 972:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 973:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if ((tmp1 == OB_RDP_LEVEL_0) && (OB_RDP == OB_RDP_LEVEL_0))
 974:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 975:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /*current level is Level0 then the RDP register must not be written again with Level0. */
 976:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     status = HAL_ERROR;
 977:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 978:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   else 
 979:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 980:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(FLASH_OBR_SPRMOD)
 981:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Mask SPRMOD bit */
 982:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     tmp3 = (uint32_t)(OB->RDP & FLASH_OBR_SPRMOD);
 983:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif
 984:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 985:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* calculate the option byte to write */
 986:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     tmp1 = (~((uint32_t)(OB_RDP | tmp3)));
 987:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     tmp2 = (uint32_t)(((uint32_t)((uint32_t)(tmp1) << 16U)) | ((uint32_t)(OB_RDP | tmp3)));
 988:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 989:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Wait for last operation to be completed */
 990:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 991:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 992:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     if(status == HAL_OK)
 993:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 994:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Clean the error context */
 995:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 996:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 997:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* program read protection level */
 998:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       OB->RDP = tmp2;
 999:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1000:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Wait for last operation to be completed */
1001:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1002:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
1003:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
ARM GAS  /tmp/cc6rDylt.s 			page 19


1004:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1005:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Return the Read protection operation Status */
1006:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   return status;
1007:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
1008:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1009:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
1010:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Programs the FLASH brownout reset threshold level Option Byte.
1011:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  OB_BOR Selects the brownout reset threshold level.
1012:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *   This parameter can be one of the following values:
1013:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *     @arg @ref OB_BOR_OFF BOR is disabled at power down, the reset is asserted when the VDD 
1014:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *                      power supply reaches the PDR(Power Down Reset) threshold (1.5V)
1015:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *     @arg @ref OB_BOR_LEVEL1 BOR Reset threshold levels for 1.7V - 1.8V VDD power supply
1016:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *     @arg @ref OB_BOR_LEVEL2 BOR Reset threshold levels for 1.9V - 2.0V VDD power supply
1017:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *     @arg @ref OB_BOR_LEVEL3 BOR Reset threshold levels for 2.3V - 2.4V VDD power supply
1018:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *     @arg @ref OB_BOR_LEVEL4 BOR Reset threshold levels for 2.55V - 2.65V VDD power supply
1019:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *     @arg @ref OB_BOR_LEVEL5 BOR Reset threshold levels for 2.8V - 2.9V VDD power supply
1020:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval HAL status
1021:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
1022:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_BORConfig(uint8_t OB_BOR)
1023:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
1024:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
1025:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint32_t tmp = 0U, tmp1 = 0U;
1026:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1027:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Check the parameters */
1028:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_OB_BOR_LEVEL(OB_BOR));
1029:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1030:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Get the User Option byte register */
1031:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   tmp1 = OB->USER & ((~FLASH_OBR_BOR_LEV) >> 16U);
1032:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1033:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Calculate the option byte to write - [0xFFU | nUSER | 0x00U | USER]*/
1034:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   tmp = (uint32_t)~((OB_BOR | tmp1)) << 16U;
1035:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   tmp |= (OB_BOR | tmp1);
1036:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
1037:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
1038:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1039:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1040:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if(status == HAL_OK)
1041:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {  
1042:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Clean the error context */
1043:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
1044:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1045:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Write the BOR Option Byte */            
1046:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     OB->USER = tmp;
1047:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1048:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Wait for last operation to be completed */
1049:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1050:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
1051:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1052:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Return the Option Byte BOR Programming Status */
1053:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   return status;
1054:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
1055:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1056:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
1057:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Returns the FLASH User Option Bytes values.
1058:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval The FLASH User Option Bytes.
1059:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
1060:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static uint8_t FLASH_OB_GetUser(void)
ARM GAS  /tmp/cc6rDylt.s 			page 20


1061:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
  25              		.loc 1 1061 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
1062:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Return the User Option Byte */
1063:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   return (uint8_t)((FLASH->OBR & (FLASH_OBR_IWDG_SW | FLASH_OBR_nRST_STOP | FLASH_OBR_nRST_STDBY)) 
  30              		.loc 1 1063 0
  31 0000 024B     		ldr	r3, .L2
  32 0002 D869     		ldr	r0, [r3, #28]
  33 0004 000C     		lsrs	r0, r0, #16
1064:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
  34              		.loc 1 1064 0
  35 0006 00F07000 		and	r0, r0, #112
  36 000a 7047     		bx	lr
  37              	.L3:
  38              		.align	2
  39              	.L2:
  40 000c 003C0240 		.word	1073888256
  41              		.cfi_endproc
  42              	.LFE88:
  44              		.section	.text.FLASH_OB_GetRDP,"ax",%progbits
  45              		.align	1
  46              		.syntax unified
  47              		.thumb
  48              		.thumb_func
  49              		.fpu softvfp
  51              	FLASH_OB_GetRDP:
  52              	.LFB89:
1065:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1066:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
1067:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Returns the FLASH Read Protection level.
1068:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval FLASH RDP level
1069:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         This parameter can be one of the following values:
1070:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *            @arg @ref OB_RDP_LEVEL_0 No protection
1071:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
1072:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *            @arg @ref OB_RDP_LEVEL_2 Full chip protection
1073:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
1074:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static uint8_t FLASH_OB_GetRDP(void)
1075:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
  53              		.loc 1 1075 0
  54              		.cfi_startproc
  55              		@ args = 0, pretend = 0, frame = 0
  56              		@ frame_needed = 0, uses_anonymous_args = 0
  57              		@ link register save eliminated.
1076:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint8_t rdp_level = (uint8_t)(FLASH->OBR & FLASH_OBR_RDPRT);
  58              		.loc 1 1076 0
  59 0000 044B     		ldr	r3, .L7
  60 0002 D869     		ldr	r0, [r3, #28]
  61 0004 C0B2     		uxtb	r0, r0
  62              	.LVL0:
1077:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1078:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
  63              		.loc 1 1078 0
  64 0006 AA28     		cmp	r0, #170
  65 0008 02D0     		beq	.L5
ARM GAS  /tmp/cc6rDylt.s 			page 21


  66              		.loc 1 1078 0 is_stmt 0 discriminator 1
  67 000a CC28     		cmp	r0, #204
  68 000c 00D0     		beq	.L5
1079:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
1080:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     return (OB_RDP_LEVEL_1);
  69              		.loc 1 1080 0 is_stmt 1
  70 000e BB20     		movs	r0, #187
  71              	.LVL1:
  72              	.L5:
1081:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
1082:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   else
1083:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
1084:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     return (rdp_level);
1085:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
1086:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
  73              		.loc 1 1086 0
  74 0010 7047     		bx	lr
  75              	.L8:
  76 0012 00BF     		.align	2
  77              	.L7:
  78 0014 003C0240 		.word	1073888256
  79              		.cfi_endproc
  80              	.LFE89:
  82              		.section	.text.FLASH_OB_GetBOR,"ax",%progbits
  83              		.align	1
  84              		.syntax unified
  85              		.thumb
  86              		.thumb_func
  87              		.fpu softvfp
  89              	FLASH_OB_GetBOR:
  90              	.LFB90:
1087:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1088:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
1089:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Returns the FLASH BOR level.
1090:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval The BOR level Option Bytes.
1091:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
1092:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static uint8_t FLASH_OB_GetBOR(void)
1093:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
  91              		.loc 1 1093 0
  92              		.cfi_startproc
  93              		@ args = 0, pretend = 0, frame = 0
  94              		@ frame_needed = 0, uses_anonymous_args = 0
  95              		@ link register save eliminated.
1094:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Return the BOR level */
1095:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   return (uint8_t)((FLASH->OBR & (uint32_t)FLASH_OBR_BOR_LEV) >> 16U);
  96              		.loc 1 1095 0
  97 0000 024B     		ldr	r3, .L10
  98 0002 D869     		ldr	r0, [r3, #28]
1096:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
  99              		.loc 1 1096 0
 100 0004 C0F30340 		ubfx	r0, r0, #16, #4
 101 0008 7047     		bx	lr
 102              	.L11:
 103 000a 00BF     		.align	2
 104              	.L10:
 105 000c 003C0240 		.word	1073888256
 106              		.cfi_endproc
ARM GAS  /tmp/cc6rDylt.s 			page 22


 107              	.LFE90:
 109              		.section	.text.FLASH_OB_WRPConfigWRP1OrPCROP1,"ax",%progbits
 110              		.align	1
 111              		.syntax unified
 112              		.thumb
 113              		.thumb_func
 114              		.fpu softvfp
 116              	FLASH_OB_WRPConfigWRP1OrPCROP1:
 117              	.LFB93:
1097:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1098:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
1099:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Write protects the desired pages of the first 64KB of the Flash.
1100:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  pOBInit pointer to an FLASH_OBInitStruct structure that
1101:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         contains WRP parameters.
1102:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  NewState new state of the specified FLASH Pages Wtite protection.
1103:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *   This parameter can be: ENABLE or DISABLE.
1104:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval HAL_StatusTypeDef
1105:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
1106:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_WRPConfig(FLASH_OBProgramInitTypeDef *pOBInit, FunctionalState Ne
1107:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
1108:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
1109:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1110:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
1111:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1112:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  
1113:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if(status == HAL_OK)
1114:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
1115:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Clean the error context */
1116:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
1117:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1118:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* WRP for sector between 0 to 31 */
1119:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     if (pOBInit->WRPSector0To31 != 0U)
1120:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
1121:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       FLASH_OB_WRPConfigWRP1OrPCROP1(pOBInit->WRPSector0To31, NewState);
1122:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
1123:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
1124:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(STM32L100xC) || defined(STM32L151xC) || defined(STM32L152xC) || defined(STM32L162xC)   
1125:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  || defined(STM32L151xCA) || defined(STM32L151xD) || defined(STM32L151xDX) || defined(STM32L152xCA)
1126:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  || defined(STM32L152xD) || defined(STM32L152xDX) || defined(STM32L162xCA) || defined(STM32L162xD) 
1127:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  || defined(STM32L162xDX) || defined(STM32L151xE) || defined(STM32L152xE) || defined(STM32L162xE)
1128:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       
1129:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Pages for Cat3, Cat4 & Cat5 devices*/
1130:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* WRP for sector between 32 to 63 */
1131:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     if (pOBInit->WRPSector32To63 != 0U)
1132:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
1133:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       FLASH_OB_WRPConfigWRP2OrPCROP2(pOBInit->WRPSector32To63, NewState);
1134:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
1135:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
1136:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L100xC || STM32L151xC || STM32L152xC || (...) || STM32L151xE || STM32L152xE || STM32
1137:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1138:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(STM32L151xD) || defined(STM32L151xDX) || defined(STM32L152xD) || defined(STM32L152xDX) 
1139:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  || defined(STM32L162xD) || defined(STM32L162xDX) || defined(STM32L151xE) || defined(STM32L152xE)  
1140:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  || defined(STM32L162xE)
1141:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       
1142:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Pages for devices with FLASH >= 256KB*/
1143:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* WRP for sector between 64 to 95 */
1144:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     if (pOBInit->WRPSector64To95 != 0U)
ARM GAS  /tmp/cc6rDylt.s 			page 23


1145:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
1146:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       FLASH_OB_WRPConfigWRP3(pOBInit->WRPSector64To95, NewState);
1147:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
1148:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
1149:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L151xD || STM32L152xD || STM32L162xD || STM32L151xE || STM32L152xE || STM32L162xE */
1150:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1151:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(STM32L151xE) || defined(STM32L152xE) || defined(STM32L162xE) || defined(STM32L151xDX) \
1152:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  || defined(STM32L152xDX) || defined(STM32L162xDX)
1153:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1154:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Pages for Cat5 devices*/
1155:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* WRP for sector between 96 to 127 */
1156:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     if (pOBInit->WRPSector96To127 != 0U)
1157:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
1158:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       FLASH_OB_WRPConfigWRP4(pOBInit->WRPSector96To127, NewState);
1159:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
1160:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
1161:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L151xE || STM32L152xE || STM32L162xE || STM32L151xDX || ... */
1162:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1163:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Wait for last operation to be completed */
1164:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1165:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
1166:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1167:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Return the write protection operation Status */
1168:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   return status;      
1169:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
1170:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1171:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(STM32L151xBA) || defined(STM32L152xBA) || defined(STM32L151xC) || defined(STM32L152xC) 
1172:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  || defined(STM32L162xC)
1173:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
1174:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Enables the read/write protection (PCROP) of the desired 
1175:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         sectors.
1176:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @note   This function can be used only for Cat2 & Cat3 devices
1177:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  pAdvOBInit pointer to an FLASH_AdvOBProgramInitTypeDef structure that
1178:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         contains PCROP parameters.
1179:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  NewState new state of the specified FLASH Pages read/Write protection.
1180:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *   This parameter can be: ENABLE or DISABLE.
1181:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval HAL status
1182:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
1183:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_PCROPConfig(FLASH_AdvOBProgramInitTypeDef *pAdvOBInit, Functional
1184:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
1185:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
1186:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   FunctionalState pcropstate = DISABLE;
1187:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1188:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
1189:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1190:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1191:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Invert state to use same function of WRP */
1192:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if (NewState == DISABLE)
1193:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
1194:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     pcropstate = ENABLE;
1195:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
1196:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         
1197:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if(status == HAL_OK)
1198:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
1199:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Clean the error context */
1200:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
1201:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
ARM GAS  /tmp/cc6rDylt.s 			page 24


1202:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Pages for Cat2 devices*/
1203:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* PCROP for sector between 0 to 31 */
1204:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     if (pAdvOBInit->PCROPSector0To31 != 0U)
1205:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
1206:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       FLASH_OB_WRPConfigWRP1OrPCROP1(pAdvOBInit->PCROPSector0To31, pcropstate);
1207:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
1208:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
1209:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(STM32L100xC) || defined(STM32L151xC) || defined(STM32L152xC) || defined(STM32L162xC)
1210:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1211:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Pages for Cat3 devices*/
1212:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* WRP for sector between 32 to 63 */
1213:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     if (pAdvOBInit->PCROPSector32To63 != 0U)
1214:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
1215:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       FLASH_OB_WRPConfigWRP2OrPCROP2(pAdvOBInit->PCROPSector32To63, pcropstate);
1216:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
1217:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
1218:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC  */
1219:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
1220:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Wait for last operation to be completed */
1221:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1222:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
1223:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1224:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Return the write protection operation Status */
1225:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   return status;      
1226:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
1227:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L151xBA || STM32L152xBA || STM32L151xC || STM32L152xC || STM32L162xC */
1228:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1229:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
1230:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Write protects the desired pages of the first 128KB of the Flash.
1231:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  WRP1OrPCROP1 specifies the address of the pages to be write protected.
1232:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *   This parameter can be a combination of @ref FLASHEx_Option_Bytes_Write_Protection1
1233:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  NewState new state of the specified FLASH Pages Write protection.
1234:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *   This parameter can be: ENABLE or DISABLE.
1235:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval None
1236:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
1237:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static void FLASH_OB_WRPConfigWRP1OrPCROP1(uint32_t WRP1OrPCROP1, FunctionalState NewState)
1238:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
 118              		.loc 1 1238 0
 119              		.cfi_startproc
 120              		@ args = 0, pretend = 0, frame = 0
 121              		@ frame_needed = 0, uses_anonymous_args = 0
 122              		@ link register save eliminated.
 123              	.LVL2:
1239:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint32_t wrp01data = 0U, wrp23data = 0U;
1240:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1241:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint32_t tmp1 = 0U, tmp2 = 0U;
1242:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1243:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Check the parameters */
1244:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_OB_WRP(WRP1OrPCROP1));
1245:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1246:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1247:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if (NewState != DISABLE)
 124              		.loc 1 1247 0
 125 0000 89B9     		cbnz	r1, .L15
1248:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
1249:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     wrp01data = (uint16_t)(((WRP1OrPCROP1 & WRP_MASK_LOW) | OB->WRP01));
1250:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     wrp23data = (uint16_t)((((WRP1OrPCROP1 & WRP_MASK_HIGH)>>16U | OB->WRP23))); 
ARM GAS  /tmp/cc6rDylt.s 			page 25


1251:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     tmp1 = (uint32_t)(~(wrp01data) << 16U)|(wrp01data);
1252:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     OB->WRP01 = tmp1;
1253:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1254:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     tmp2 = (uint32_t)(~(wrp23data) << 16U)|(wrp23data);
1255:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     OB->WRP23 = tmp2;      
1256:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
1257:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   else
1258:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
1259:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     wrp01data = (uint16_t)(~WRP1OrPCROP1 & (WRP_MASK_LOW & OB->WRP01));
 126              		.loc 1 1259 0
 127 0002 1149     		ldr	r1, .L16
 128              	.LVL3:
 129 0004 8B68     		ldr	r3, [r1, #8]
 130 0006 23EA0003 		bic	r3, r3, r0
 131 000a 9BB2     		uxth	r3, r3
 132              	.LVL4:
1260:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     wrp23data = (uint16_t)((((~WRP1OrPCROP1 & WRP_MASK_HIGH)>>16U & OB->WRP23))); 
 133              		.loc 1 1260 0
 134 000c C243     		mvns	r2, r0
 135 000e C868     		ldr	r0, [r1, #12]
 136              	.LVL5:
 137 0010 00EA1240 		and	r0, r0, r2, lsr #16
 138              	.LVL6:
1261:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1262:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     tmp1 = (uint32_t)((~wrp01data) << 16U)|(wrp01data);
 139              		.loc 1 1262 0
 140 0014 DA43     		mvns	r2, r3
 141              	.LVL7:
 142 0016 43EA0243 		orr	r3, r3, r2, lsl #16
 143              	.LVL8:
1263:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     OB->WRP01 = tmp1;
 144              		.loc 1 1263 0
 145 001a 8B60     		str	r3, [r1, #8]
1264:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
1265:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     tmp2 = (uint32_t)((~wrp23data) << 16U)|(wrp23data);
 146              		.loc 1 1265 0
 147 001c C343     		mvns	r3, r0
 148              	.LVL9:
 149 001e 40EA0340 		orr	r0, r0, r3, lsl #16
 150              	.LVL10:
1266:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     OB->WRP23 = tmp2;
 151              		.loc 1 1266 0
 152 0022 C860     		str	r0, [r1, #12]
 153              	.LVL11:
 154 0024 7047     		bx	lr
 155              	.LVL12:
 156              	.L15:
1249:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     wrp23data = (uint16_t)((((WRP1OrPCROP1 & WRP_MASK_HIGH)>>16U | OB->WRP23))); 
 157              		.loc 1 1249 0
 158 0026 0849     		ldr	r1, .L16
 159              	.LVL13:
 160 0028 8A68     		ldr	r2, [r1, #8]
 161 002a 0243     		orrs	r2, r2, r0
 162 002c 92B2     		uxth	r2, r2
 163              	.LVL14:
1250:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     tmp1 = (uint32_t)(~(wrp01data) << 16U)|(wrp01data);
 164              		.loc 1 1250 0
ARM GAS  /tmp/cc6rDylt.s 			page 26


 165 002e CB68     		ldr	r3, [r1, #12]
 166 0030 43EA1040 		orr	r0, r3, r0, lsr #16
 167              	.LVL15:
 168 0034 80B2     		uxth	r0, r0
 169              	.LVL16:
1251:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     OB->WRP01 = tmp1;
 170              		.loc 1 1251 0
 171 0036 D343     		mvns	r3, r2
 172 0038 42EA0342 		orr	r2, r2, r3, lsl #16
 173              	.LVL17:
1252:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 174              		.loc 1 1252 0
 175 003c 8A60     		str	r2, [r1, #8]
1254:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     OB->WRP23 = tmp2;      
 176              		.loc 1 1254 0
 177 003e C343     		mvns	r3, r0
 178              	.LVL18:
 179 0040 40EA0340 		orr	r0, r0, r3, lsl #16
 180              	.LVL19:
1255:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 181              		.loc 1 1255 0
 182 0044 C860     		str	r0, [r1, #12]
 183 0046 7047     		bx	lr
 184              	.L17:
 185              		.align	2
 186              	.L16:
 187 0048 0000F81F 		.word	536346624
 188              		.cfi_endproc
 189              	.LFE93:
 191              		.section	.text.FLASH_OB_WRPConfig,"ax",%progbits
 192              		.align	1
 193              		.syntax unified
 194              		.thumb
 195              		.thumb_func
 196              		.fpu softvfp
 198              	FLASH_OB_WRPConfig:
 199              	.LFB91:
1107:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 200              		.loc 1 1107 0
 201              		.cfi_startproc
 202              		@ args = 0, pretend = 0, frame = 0
 203              		@ frame_needed = 0, uses_anonymous_args = 0
 204              	.LVL20:
 205 0000 38B5     		push	{r3, r4, r5, lr}
 206              	.LCFI0:
 207              		.cfi_def_cfa_offset 16
 208              		.cfi_offset 3, -16
 209              		.cfi_offset 4, -12
 210              		.cfi_offset 5, -8
 211              		.cfi_offset 14, -4
 212 0002 0446     		mov	r4, r0
 213 0004 0D46     		mov	r5, r1
 214              	.LVL21:
1111:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  
 215              		.loc 1 1111 0
 216 0006 4CF25030 		movw	r0, #50000
 217              	.LVL22:
ARM GAS  /tmp/cc6rDylt.s 			page 27


 218 000a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 219              	.LVL23:
1113:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 220              		.loc 1 1113 0
 221 000e 0346     		mov	r3, r0
 222 0010 48B9     		cbnz	r0, .L19
1116:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 223              		.loc 1 1116 0
 224 0012 0022     		movs	r2, #0
 225 0014 074B     		ldr	r3, .L23
 226 0016 5A61     		str	r2, [r3, #20]
1119:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 227              		.loc 1 1119 0
 228 0018 A068     		ldr	r0, [r4, #8]
 229              	.LVL24:
 230 001a 30B9     		cbnz	r0, .L22
 231              	.L20:
1164:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 232              		.loc 1 1164 0
 233 001c 4CF25030 		movw	r0, #50000
 234 0020 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 235              	.LVL25:
 236 0024 0346     		mov	r3, r0
 237              	.LVL26:
 238              	.L19:
1169:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 239              		.loc 1 1169 0
 240 0026 1846     		mov	r0, r3
 241 0028 38BD     		pop	{r3, r4, r5, pc}
 242              	.LVL27:
 243              	.L22:
1121:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 244              		.loc 1 1121 0
 245 002a 2946     		mov	r1, r5
 246 002c FFF7FEFF 		bl	FLASH_OB_WRPConfigWRP1OrPCROP1
 247              	.LVL28:
 248 0030 F4E7     		b	.L20
 249              	.L24:
 250 0032 00BF     		.align	2
 251              	.L23:
 252 0034 00000000 		.word	pFlash
 253              		.cfi_endproc
 254              	.LFE91:
 256              		.section	.text.FLASH_OB_RDPConfig,"ax",%progbits
 257              		.align	1
 258              		.syntax unified
 259              		.thumb
 260              		.thumb_func
 261              		.fpu softvfp
 263              	FLASH_OB_RDPConfig:
 264              	.LFB86:
 959:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 265              		.loc 1 959 0
 266              		.cfi_startproc
 267              		@ args = 0, pretend = 0, frame = 0
 268              		@ frame_needed = 0, uses_anonymous_args = 0
 269              	.LVL29:
ARM GAS  /tmp/cc6rDylt.s 			page 28


 966:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 270              		.loc 1 966 0
 271 0000 124B     		ldr	r3, .L34
 272 0002 1B68     		ldr	r3, [r3]
 273 0004 DBB2     		uxtb	r3, r3
 274              	.LVL30:
 973:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 275              		.loc 1 973 0
 276 0006 AA2B     		cmp	r3, #170
 277 0008 10D0     		beq	.L32
 278              	.L26:
 959:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 279              		.loc 1 959 0
 280 000a 10B5     		push	{r4, lr}
 281              	.LCFI1:
 282              		.cfi_def_cfa_offset 8
 283              		.cfi_offset 4, -8
 284              		.cfi_offset 14, -4
 982:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif
 285              		.loc 1 982 0
 286 000c 0F4B     		ldr	r3, .L34
 287              	.LVL31:
 288 000e 1B68     		ldr	r3, [r3]
 289 0010 03F48073 		and	r3, r3, #256
 290              	.LVL32:
 986:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     tmp2 = (uint32_t)(((uint32_t)((uint32_t)(tmp1) << 16U)) | ((uint32_t)(OB_RDP | tmp3)));
 291              		.loc 1 986 0
 292 0014 1843     		orrs	r0, r0, r3
 293              	.LVL33:
 294 0016 C443     		mvns	r4, r0
 295              	.LVL34:
 987:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 296              		.loc 1 987 0
 297 0018 40EA0444 		orr	r4, r0, r4, lsl #16
 298              	.LVL35:
 990:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 299              		.loc 1 990 0
 300 001c 4CF25030 		movw	r0, #50000
 301              	.LVL36:
 302 0020 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 303              	.LVL37:
 992:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 304              		.loc 1 992 0
 305 0024 0346     		mov	r3, r0
 306 0026 30B1     		cbz	r0, .L33
 307              	.LVL38:
 308              	.L27:
1007:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 309              		.loc 1 1007 0
 310 0028 1846     		mov	r0, r3
 311 002a 10BD     		pop	{r4, pc}
 312              	.LVL39:
 313              	.L32:
 314              	.LCFI2:
 315              		.cfi_def_cfa_offset 0
 316              		.cfi_restore 4
 317              		.cfi_restore 14
ARM GAS  /tmp/cc6rDylt.s 			page 29


 973:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 318              		.loc 1 973 0 discriminator 1
 319 002c AA28     		cmp	r0, #170
 320 002e ECD1     		bne	.L26
 976:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 321              		.loc 1 976 0
 322 0030 0123     		movs	r3, #1
 323              	.LVL40:
1007:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 324              		.loc 1 1007 0
 325 0032 1846     		mov	r0, r3
 326              	.LVL41:
 327 0034 7047     		bx	lr
 328              	.LVL42:
 329              	.L33:
 330              	.LCFI3:
 331              		.cfi_def_cfa_offset 8
 332              		.cfi_offset 4, -8
 333              		.cfi_offset 14, -4
 995:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 334              		.loc 1 995 0
 335 0036 0022     		movs	r2, #0
 336 0038 054B     		ldr	r3, .L34+4
 337 003a 5A61     		str	r2, [r3, #20]
 998:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 338              		.loc 1 998 0
 339 003c 034B     		ldr	r3, .L34
 340 003e 1C60     		str	r4, [r3]
1001:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 341              		.loc 1 1001 0
 342 0040 4CF25030 		movw	r0, #50000
 343              	.LVL43:
 344 0044 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 345              	.LVL44:
 346 0048 0346     		mov	r3, r0
 347              	.LVL45:
 348 004a EDE7     		b	.L27
 349              	.L35:
 350              		.align	2
 351              	.L34:
 352 004c 0000F81F 		.word	536346624
 353 0050 00000000 		.word	pFlash
 354              		.cfi_endproc
 355              	.LFE86:
 357              		.section	.text.FLASH_OB_UserConfig,"ax",%progbits
 358              		.align	1
 359              		.syntax unified
 360              		.thumb
 361              		.thumb_func
 362              		.fpu softvfp
 364              	FLASH_OB_UserConfig:
 365              	.LFB94:
1267:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
1268:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
1269:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1270:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(STM32L100xC) || defined(STM32L151xC) || defined(STM32L152xC) || defined(STM32L162xC)   
1271:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  || defined(STM32L151xCA) || defined(STM32L151xD) || defined(STM32L151xDX) || defined(STM32L152xCA)
ARM GAS  /tmp/cc6rDylt.s 			page 30


1272:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  || defined(STM32L152xD) || defined(STM32L152xDX) || defined(STM32L162xCA) || defined(STM32L162xD) 
1273:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  || defined(STM32L162xDX) || defined(STM32L151xE) || defined(STM32L152xE) || defined(STM32L162xE)
1274:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
1275:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Enable Write protects the desired pages of the second 128KB of the Flash.
1276:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @note   This function can be used only for Cat3, Cat4  & Cat5 devices.
1277:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  WRP2OrPCROP2 specifies the address of the pages to be write protected.
1278:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *   This parameter can be a combination of @ref FLASHEx_Option_Bytes_Write_Protection2
1279:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  NewState new state of the specified FLASH Pages Wtite protection.
1280:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *   This parameter can be: ENABLE or DISABLE.
1281:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval None
1282:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
1283:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static void FLASH_OB_WRPConfigWRP2OrPCROP2(uint32_t WRP2OrPCROP2, FunctionalState NewState)
1284:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
1285:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint32_t wrp45data = 0U, wrp67data = 0U;
1286:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1287:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint32_t tmp1 = 0U, tmp2 = 0U;
1288:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1289:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Check the parameters */
1290:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_OB_WRP(WRP2OrPCROP2));
1291:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1292:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1293:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if (NewState != DISABLE)
1294:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
1295:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     wrp45data = (uint16_t)(((WRP2OrPCROP2 & WRP_MASK_LOW) | OB->WRP45));
1296:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     wrp67data = (uint16_t)((((WRP2OrPCROP2 & WRP_MASK_HIGH)>>16U | OB->WRP67))); 
1297:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     tmp1 = (uint32_t)(~(wrp45data) << 16U)|(wrp45data);
1298:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     OB->WRP45 = tmp1;
1299:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
1300:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     tmp2 = (uint32_t)(~(wrp67data) << 16U)|(wrp67data);
1301:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     OB->WRP67 = tmp2;
1302:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
1303:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   else
1304:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
1305:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     wrp45data = (uint16_t)(~WRP2OrPCROP2 & (WRP_MASK_LOW & OB->WRP45));
1306:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     wrp67data = (uint16_t)((((~WRP2OrPCROP2 & WRP_MASK_HIGH)>>16U & OB->WRP67))); 
1307:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
1308:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     tmp1 = (uint32_t)((~wrp45data) << 16U)|(wrp45data);
1309:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     OB->WRP45 = tmp1;
1310:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
1311:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     tmp2 = (uint32_t)((~wrp67data) << 16U)|(wrp67data);
1312:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     OB->WRP67 = tmp2;
1313:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
1314:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
1315:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L100xC || STM32L151xC || STM32L152xC || (...) || STM32L151xE || STM32L152xE || STM32
1316:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1317:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(STM32L151xD) || defined(STM32L151xDX) || defined(STM32L152xD) || defined(STM32L152xDX) 
1318:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  || defined(STM32L162xD) || defined(STM32L162xDX) || defined(STM32L151xE) || defined(STM32L152xE)  
1319:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  || defined(STM32L162xE)
1320:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
1321:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Enable Write protects the desired pages of the third 128KB of the Flash.
1322:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @note   This function can be used only for STM32L151xD, STM32L152xD, STM32L162xD  & Cat5 device
1323:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  WRP3 specifies the address of the pages to be write protected.
1324:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *   This parameter can be a combination of @ref FLASHEx_Option_Bytes_Write_Protection3
1325:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  NewState new state of the specified FLASH Pages Wtite protection.
1326:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *   This parameter can be: ENABLE or DISABLE.
1327:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval None
1328:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
ARM GAS  /tmp/cc6rDylt.s 			page 31


1329:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static void FLASH_OB_WRPConfigWRP3(uint32_t WRP3, FunctionalState NewState)
1330:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
1331:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint32_t wrp89data = 0U, wrp1011data = 0U;
1332:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1333:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint32_t tmp1 = 0U, tmp2 = 0U;
1334:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1335:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Check the parameters */
1336:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_OB_WRP(WRP3));
1337:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1338:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1339:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if (NewState != DISABLE)
1340:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
1341:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     wrp89data = (uint16_t)(((WRP3 & WRP_MASK_LOW) | OB->WRP89));
1342:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     wrp1011data = (uint16_t)((((WRP3 & WRP_MASK_HIGH)>>16U | OB->WRP1011))); 
1343:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     tmp1 = (uint32_t)(~(wrp89data) << 16U)|(wrp89data);
1344:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     OB->WRP89 = tmp1;
1345:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1346:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     tmp2 = (uint32_t)(~(wrp1011data) << 16U)|(wrp1011data);
1347:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     OB->WRP1011 = tmp2;      
1348:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
1349:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   else
1350:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
1351:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     wrp89data = (uint16_t)(~WRP3 & (WRP_MASK_LOW & OB->WRP89));
1352:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     wrp1011data = (uint16_t)((((~WRP3 & WRP_MASK_HIGH)>>16U & OB->WRP1011))); 
1353:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1354:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     tmp1 = (uint32_t)((~wrp89data) << 16U)|(wrp89data);
1355:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     OB->WRP89 = tmp1;
1356:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1357:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     tmp2 = (uint32_t)((~wrp1011data) << 16U)|(wrp1011data);
1358:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     OB->WRP1011 = tmp2;
1359:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
1360:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
1361:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L151xD || STM32L152xD || STM32L162xD || STM32L151xE || STM32L152xE || STM32L162xE */
1362:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1363:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(STM32L151xE) || defined(STM32L152xE) || defined(STM32L162xE) || defined(STM32L151xDX) \
1364:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  || defined(STM32L152xDX) || defined(STM32L162xDX)
1365:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
1366:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Enable Write protects the desired pages of the Fourth 128KB of the Flash.
1367:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @note   This function can be used only for Cat5 & STM32L1xxDX devices.
1368:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  WRP4 specifies the address of the pages to be write protected.
1369:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *   This parameter can be a combination of @ref FLASHEx_Option_Bytes_Write_Protection4
1370:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  NewState new state of the specified FLASH Pages Wtite protection.
1371:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *   This parameter can be: ENABLE or DISABLE.
1372:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval None
1373:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
1374:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static void FLASH_OB_WRPConfigWRP4(uint32_t WRP4, FunctionalState NewState)
1375:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
1376:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint32_t wrp1213data = 0U, wrp1415data = 0U;
1377:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1378:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint32_t tmp1 = 0U, tmp2 = 0U;
1379:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1380:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Check the parameters */
1381:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_OB_WRP(WRP4));
1382:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1383:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1384:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if (NewState != DISABLE)
1385:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
ARM GAS  /tmp/cc6rDylt.s 			page 32


1386:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     wrp1213data = (uint16_t)(((WRP4 & WRP_MASK_LOW) | OB->WRP1213));
1387:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     wrp1415data = (uint16_t)((((WRP4 & WRP_MASK_HIGH)>>16U | OB->WRP1415))); 
1388:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     tmp1 = (uint32_t)(~(wrp1213data) << 16U)|(wrp1213data);
1389:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     OB->WRP1213 = tmp1;
1390:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1391:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     tmp2 = (uint32_t)(~(wrp1415data) << 16U)|(wrp1415data);
1392:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     OB->WRP1415 = tmp2;      
1393:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
1394:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   else
1395:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
1396:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     wrp1213data = (uint16_t)(~WRP4 & (WRP_MASK_LOW & OB->WRP1213));
1397:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     wrp1415data = (uint16_t)((((~WRP4 & WRP_MASK_HIGH)>>16U & OB->WRP1415))); 
1398:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1399:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     tmp1 = (uint32_t)((~wrp1213data) << 16U)|(wrp1213data);
1400:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     OB->WRP1213 = tmp1;
1401:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1402:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     tmp2 = (uint32_t)((~wrp1415data) << 16U)|(wrp1415data);
1403:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     OB->WRP1415 = tmp2;
1404:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
1405:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
1406:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L151xE || STM32L152xE || STM32L162xE || STM32L151xDX || ... */
1407:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1408:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
1409:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Programs the FLASH User Option Byte: IWDG_SW / RST_STOP / RST_STDBY.
1410:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  OB_IWDG Selects the WDG mode.
1411:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *   This parameter can be one of the following values:
1412:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *     @arg @ref OB_IWDG_SW Software WDG selected
1413:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *     @arg @ref OB_IWDG_HW Hardware WDG selected
1414:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  OB_STOP Reset event when entering STOP mode.
1415:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *   This parameter can be one of the following values:
1416:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *     @arg @ref OB_STOP_NORST No reset generated when entering in STOP
1417:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *     @arg @ref OB_STOP_RST Reset generated when entering in STOP
1418:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  OB_STDBY Reset event when entering Standby mode.
1419:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *   This parameter can be one of the following values:
1420:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *     @arg @ref OB_STDBY_NORST No reset generated when entering in STANDBY
1421:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *     @arg @ref OB_STDBY_RST Reset generated when entering in STANDBY
1422:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval HAL status
1423:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
1424:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
1425:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
 366              		.loc 1 1425 0
 367              		.cfi_startproc
 368              		@ args = 0, pretend = 0, frame = 0
 369              		@ frame_needed = 0, uses_anonymous_args = 0
 370              	.LVL46:
 371 0000 10B5     		push	{r4, lr}
 372              	.LCFI4:
 373              		.cfi_def_cfa_offset 8
 374              		.cfi_offset 4, -8
 375              		.cfi_offset 14, -4
 376              	.LVL47:
1426:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK; 
1427:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint32_t tmp = 0U, tmp1 = 0U;
1428:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1429:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Check the parameters */
1430:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
1431:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_OB_STOP_SOURCE(OB_STOP));
ARM GAS  /tmp/cc6rDylt.s 			page 33


1432:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));
1433:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1434:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Get the User Option byte register */
1435:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   tmp1 = OB->USER & ((~(FLASH_OBR_IWDG_SW | FLASH_OBR_nRST_STOP | FLASH_OBR_nRST_STDBY)) >> 16U);
 377              		.loc 1 1435 0
 378 0002 0F4B     		ldr	r3, .L40
 379 0004 5B68     		ldr	r3, [r3, #4]
 380 0006 23F07003 		bic	r3, r3, #112
 381 000a 1B04     		lsls	r3, r3, #16
 382 000c 1B0C     		lsrs	r3, r3, #16
 383              	.LVL48:
1436:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1437:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Calculate the user option byte to write */ 
1438:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   tmp = (uint32_t)(((uint32_t)~((uint32_t)((uint32_t)(OB_IWDG) | (uint32_t)(OB_STOP) | (uint32_t)(O
 384              		.loc 1 1438 0
 385 000e 0143     		orrs	r1, r1, r0
 386              	.LVL49:
 387 0010 0A43     		orrs	r2, r2, r1
 388              	.LVL50:
 389 0012 1A43     		orrs	r2, r2, r3
 390 0014 D443     		mvns	r4, r2
 391              	.LVL51:
1439:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   tmp |= ((uint32_t)(OB_IWDG) | ((uint32_t)OB_STOP) | (uint32_t)(OB_STDBY) | tmp1);
 392              		.loc 1 1439 0
 393 0016 42EA0444 		orr	r4, r2, r4, lsl #16
 394              	.LVL52:
1440:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1441:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
1442:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 395              		.loc 1 1442 0
 396 001a 4CF25030 		movw	r0, #50000
 397              	.LVL53:
 398 001e FFF7FEFF 		bl	FLASH_WaitForLastOperation
 399              	.LVL54:
1443:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1444:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if(status == HAL_OK)
 400              		.loc 1 1444 0
 401 0022 0346     		mov	r3, r0
 402 0024 08B1     		cbz	r0, .L39
 403              	.LVL55:
 404              	.L37:
1445:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {  
1446:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Clean the error context */
1447:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
1448:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1449:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Write the User Option Byte */
1450:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     OB->USER = tmp;
1451:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
1452:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Wait for last operation to be completed */
1453:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1454:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
1455:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1456:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Return the Option Byte program Status */
1457:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   return status;
1458:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
 405              		.loc 1 1458 0
 406 0026 1846     		mov	r0, r3
ARM GAS  /tmp/cc6rDylt.s 			page 34


 407 0028 10BD     		pop	{r4, pc}
 408              	.LVL56:
 409              	.L39:
1447:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 410              		.loc 1 1447 0
 411 002a 0022     		movs	r2, #0
 412 002c 054B     		ldr	r3, .L40+4
 413 002e 5A61     		str	r2, [r3, #20]
1450:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
 414              		.loc 1 1450 0
 415 0030 034B     		ldr	r3, .L40
 416 0032 5C60     		str	r4, [r3, #4]
1453:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 417              		.loc 1 1453 0
 418 0034 4CF25030 		movw	r0, #50000
 419              	.LVL57:
 420 0038 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 421              	.LVL58:
 422 003c 0346     		mov	r3, r0
 423              	.LVL59:
 424 003e F2E7     		b	.L37
 425              	.L41:
 426              		.align	2
 427              	.L40:
 428 0040 0000F81F 		.word	536346624
 429 0044 00000000 		.word	pFlash
 430              		.cfi_endproc
 431              	.LFE94:
 433              		.section	.text.FLASH_OB_BORConfig,"ax",%progbits
 434              		.align	1
 435              		.syntax unified
 436              		.thumb
 437              		.thumb_func
 438              		.fpu softvfp
 440              	FLASH_OB_BORConfig:
 441              	.LFB87:
1023:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 442              		.loc 1 1023 0
 443              		.cfi_startproc
 444              		@ args = 0, pretend = 0, frame = 0
 445              		@ frame_needed = 0, uses_anonymous_args = 0
 446              	.LVL60:
 447 0000 10B5     		push	{r4, lr}
 448              	.LCFI5:
 449              		.cfi_def_cfa_offset 8
 450              		.cfi_offset 4, -8
 451              		.cfi_offset 14, -4
 452              	.LVL61:
1031:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 453              		.loc 1 1031 0
 454 0002 0E4B     		ldr	r3, .L46
 455 0004 5B68     		ldr	r3, [r3, #4]
 456 0006 23F00F03 		bic	r3, r3, #15
 457 000a 1B04     		lsls	r3, r3, #16
 458 000c 1B0C     		lsrs	r3, r3, #16
 459              	.LVL62:
1034:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   tmp |= (OB_BOR | tmp1);
ARM GAS  /tmp/cc6rDylt.s 			page 35


 460              		.loc 1 1034 0
 461 000e 1843     		orrs	r0, r0, r3
 462              	.LVL63:
 463 0010 C443     		mvns	r4, r0
 464              	.LVL64:
1035:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
 465              		.loc 1 1035 0
 466 0012 40EA0444 		orr	r4, r0, r4, lsl #16
 467              	.LVL65:
1038:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 468              		.loc 1 1038 0
 469 0016 4CF25030 		movw	r0, #50000
 470 001a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 471              	.LVL66:
1040:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {  
 472              		.loc 1 1040 0
 473 001e 0346     		mov	r3, r0
 474 0020 08B1     		cbz	r0, .L45
 475              	.LVL67:
 476              	.L43:
1054:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 477              		.loc 1 1054 0
 478 0022 1846     		mov	r0, r3
 479 0024 10BD     		pop	{r4, pc}
 480              	.LVL68:
 481              	.L45:
1043:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 482              		.loc 1 1043 0
 483 0026 0022     		movs	r2, #0
 484 0028 054B     		ldr	r3, .L46+4
 485 002a 5A61     		str	r2, [r3, #20]
1046:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 486              		.loc 1 1046 0
 487 002c 034B     		ldr	r3, .L46
 488 002e 5C60     		str	r4, [r3, #4]
1049:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 489              		.loc 1 1049 0
 490 0030 4CF25030 		movw	r0, #50000
 491              	.LVL69:
 492 0034 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 493              	.LVL70:
 494 0038 0346     		mov	r3, r0
 495              	.LVL71:
 496 003a F2E7     		b	.L43
 497              	.L47:
 498              		.align	2
 499              	.L46:
 500 003c 0000F81F 		.word	536346624
 501 0040 00000000 		.word	pFlash
 502              		.cfi_endproc
 503              	.LFE87:
 505              		.section	.text.FLASH_OB_PCROPConfig,"ax",%progbits
 506              		.align	1
 507              		.syntax unified
 508              		.thumb
 509              		.thumb_func
 510              		.fpu softvfp
ARM GAS  /tmp/cc6rDylt.s 			page 36


 512              	FLASH_OB_PCROPConfig:
 513              	.LFB92:
1184:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 514              		.loc 1 1184 0
 515              		.cfi_startproc
 516              		@ args = 0, pretend = 0, frame = 0
 517              		@ frame_needed = 0, uses_anonymous_args = 0
 518              	.LVL72:
 519 0000 38B5     		push	{r3, r4, r5, lr}
 520              	.LCFI6:
 521              		.cfi_def_cfa_offset 16
 522              		.cfi_offset 3, -16
 523              		.cfi_offset 4, -12
 524              		.cfi_offset 5, -8
 525              		.cfi_offset 14, -4
 526 0002 0546     		mov	r5, r0
 527 0004 0C46     		mov	r4, r1
 528              	.LVL73:
1189:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 529              		.loc 1 1189 0
 530 0006 4CF25030 		movw	r0, #50000
 531              	.LVL74:
 532 000a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 533              	.LVL75:
1192:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 534              		.loc 1 1192 0
 535 000e 5CB1     		cbz	r4, .L52
1186:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 536              		.loc 1 1186 0
 537 0010 0021     		movs	r1, #0
 538              	.L49:
 539              	.LVL76:
1197:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 540              		.loc 1 1197 0
 541 0012 40B9     		cbnz	r0, .L50
1200:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 542              		.loc 1 1200 0
 543 0014 0022     		movs	r2, #0
 544 0016 074B     		ldr	r3, .L55
 545 0018 5A61     		str	r2, [r3, #20]
1204:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 546              		.loc 1 1204 0
 547 001a A868     		ldr	r0, [r5, #8]
 548              	.LVL77:
 549 001c 30B9     		cbnz	r0, .L54
 550              	.LVL78:
 551              	.L51:
1221:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 552              		.loc 1 1221 0
 553 001e 4CF25030 		movw	r0, #50000
 554 0022 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 555              	.LVL79:
 556              	.L50:
1226:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L151xBA || STM32L152xBA || STM32L151xC || STM32L152xC || STM32L162xC */
 557              		.loc 1 1226 0
 558 0026 38BD     		pop	{r3, r4, r5, pc}
 559              	.LVL80:
ARM GAS  /tmp/cc6rDylt.s 			page 37


 560              	.L52:
1194:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 561              		.loc 1 1194 0
 562 0028 0121     		movs	r1, #1
 563 002a F2E7     		b	.L49
 564              	.LVL81:
 565              	.L54:
1206:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 566              		.loc 1 1206 0
 567 002c FFF7FEFF 		bl	FLASH_OB_WRPConfigWRP1OrPCROP1
 568              	.LVL82:
 569 0030 F5E7     		b	.L51
 570              	.L56:
 571 0032 00BF     		.align	2
 572              	.L55:
 573 0034 00000000 		.word	pFlash
 574              		.cfi_endproc
 575              	.LFE92:
 577              		.section	.text.FLASH_DATAEEPROM_ProgramWord,"ax",%progbits
 578              		.align	1
 579              		.syntax unified
 580              		.thumb
 581              		.thumb_func
 582              		.fpu softvfp
 584              	FLASH_DATAEEPROM_ProgramWord:
 585              	.LFB100:
1459:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1460:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(FLASH_OBR_nRST_BFB2)
1461:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
1462:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Configures to boot from Bank1 or Bank2.
1463:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  OB_BOOT select the FLASH Bank to boot from.
1464:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *   This parameter can be one of the following values:
1465:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *     @arg @ref OB_BOOT_BANK2 At startup, if boot pins are set in boot from user Flash
1466:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *        position and this parameter is selected the device will boot from Bank2 or Bank1,
1467:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *        depending on the activation of the bank. The active banks are checked in
1468:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *        the following order: Bank2, followed by Bank1.
1469:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *        The active bank is recognized by the value programmed at the base address
1470:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *        of the respective bank (corresponding to the initial stack pointer value
1471:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *        in the interrupt vector table).
1472:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *     @arg @ref OB_BOOT_BANK1 At startup, if boot pins are set in boot from user Flash
1473:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *        position and this parameter is selected the device will boot from Bank1(Default).
1474:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *        For more information, please refer to AN2606 from www.st.com. 
1475:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval HAL status
1476:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
1477:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_BootConfig(uint8_t OB_BOOT)
1478:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
1479:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK; 
1480:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint32_t tmp = 0U, tmp1 = 0U;
1481:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1482:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Check the parameters */
1483:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_OB_BOOT_BANK(OB_BOOT));
1484:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1485:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Get the User Option byte register  and BOR Level*/
1486:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   tmp1 = OB->USER & ((~FLASH_OBR_nRST_BFB2) >> 16U);
1487:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1488:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Calculate the option byte to write */
1489:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   tmp = (uint32_t)~(OB_BOOT | tmp1) << 16U;
ARM GAS  /tmp/cc6rDylt.s 			page 38


1490:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   tmp |= (OB_BOOT | tmp1);
1491:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1492:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
1493:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1494:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1495:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if(status == HAL_OK)
1496:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {  
1497:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Clean the error context */
1498:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
1499:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1500:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Write the BOOT Option Byte */
1501:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     OB->USER = tmp;
1502:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
1503:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Wait for last operation to be completed */
1504:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1505:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
1506:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1507:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Return the Option Byte program Status */
1508:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   return status;
1509:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
1510:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1511:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* FLASH_OBR_nRST_BFB2 */
1512:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1513:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /*
1514:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** ==============================================================================
1515:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****               DATA
1516:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** ==============================================================================
1517:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** */
1518:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1519:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
1520:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Write a Byte at a specified address in data memory.
1521:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  Address specifies the address to be written.
1522:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  Data specifies the data to be written.
1523:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @note   This function assumes that the is data word is already erased.
1524:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval HAL status
1525:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
1526:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramByte(uint32_t Address, uint8_t Data)
1527:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
1528:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
1529:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
1530:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint32_t tmp = 0U, tmpaddr = 0U;
1531:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
1532:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1533:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Check the parameters */
1534:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_FLASH_DATA_ADDRESS(Address)); 
1535:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1536:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
1537:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1538:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
1539:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if(status == HAL_OK)
1540:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
1541:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Clear the FTDW bit */
1542:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
1543:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1544:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
1545:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Possible only on Cat1 devices */
1546:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     if(Data != (uint8_t)0x00U) 
ARM GAS  /tmp/cc6rDylt.s 			page 39


1547:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
1548:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* If the previous operation is completed, proceed to write the new Data */
1549:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       *(__IO uint8_t *)Address = Data;
1550:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****             
1551:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Wait for last operation to be completed */
1552:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1553:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
1554:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     else
1555:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
1556:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       tmpaddr = Address & 0xFFFFFFFCU;
1557:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       tmp = * (__IO uint32_t *) tmpaddr;
1558:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       tmpaddr = 0xFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
1559:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       tmp &= ~tmpaddr;
1560:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
1561:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Process Unlocked */
1562:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       __HAL_UNLOCK(&pFlash);
1563:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFC
1564:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Process Locked */
1565:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       __HAL_LOCK(&pFlash);
1566:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
1567:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #else /*!Cat1*/ 
1568:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* If the previous operation is completed, proceed to write the new Data */
1569:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     *(__IO uint8_t *)Address = Data;
1570:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****             
1571:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Wait for last operation to be completed */
1572:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1573:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
1574:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
1575:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Return the Write Status */
1576:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   return status;
1577:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
1578:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1579:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
1580:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Writes a half word at a specified address in data memory.
1581:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  Address specifies the address to be written.
1582:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  Data specifies the data to be written.
1583:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @note   This function assumes that the is data word is already erased.
1584:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval HAL status
1585:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
1586:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramHalfWord(uint32_t Address, uint16_t Data)
1587:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
1588:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
1589:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
1590:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint32_t tmp = 0U, tmpaddr = 0U;
1591:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
1592:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1593:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Check the parameters */
1594:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_FLASH_DATA_ADDRESS(Address));
1595:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1596:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
1597:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1598:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
1599:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if(status == HAL_OK)
1600:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
1601:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Clear the FTDW bit */
1602:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
1603:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
ARM GAS  /tmp/cc6rDylt.s 			page 40


1604:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
1605:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Possible only on Cat1 devices */
1606:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     if(Data != (uint16_t)0x0000U) 
1607:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
1608:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* If the previous operation is completed, proceed to write the new data */
1609:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       *(__IO uint16_t *)Address = Data;
1610:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1611:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Wait for last operation to be completed */
1612:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1613:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
1614:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     else
1615:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
1616:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Process Unlocked */
1617:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       __HAL_UNLOCK(&pFlash);
1618:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       if((Address & 0x3U) != 0x3U)
1619:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       {
1620:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         tmpaddr = Address & 0xFFFFFFFCU;
1621:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         tmp = * (__IO uint32_t *) tmpaddr;
1622:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         tmpaddr = 0xFFFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
1623:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         tmp &= ~tmpaddr;        
1624:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
1625:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFF
1626:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       }
1627:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       else
1628:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       {
1629:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address, 0x00U);
1630:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address + 1U, 0x00U);
1631:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       }
1632:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Process Locked */
1633:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       __HAL_LOCK(&pFlash);
1634:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
1635:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #else /* !Cat1 */
1636:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* If the previous operation is completed, proceed to write the new data */
1637:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     *(__IO uint16_t *)Address = Data;
1638:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1639:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Wait for last operation to be completed */
1640:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1641:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
1642:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
1643:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Return the Write Status */
1644:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   return status;
1645:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
1646:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1647:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
1648:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Programs a word at a specified address in data memory.
1649:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  Address specifies the address to be written.
1650:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  Data specifies the data to be written.
1651:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @note   This function assumes that the is data word is already erased.
1652:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval HAL status
1653:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
1654:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramWord(uint32_t Address, uint32_t Data)
1655:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
1656:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
1657:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1658:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Check the parameters */
1659:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_FLASH_DATA_ADDRESS(Address));
1660:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
ARM GAS  /tmp/cc6rDylt.s 			page 41


1661:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
1662:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1663:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1664:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if(status == HAL_OK)
1665:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
1666:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Clear the FTDW bit */
1667:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
1668:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1669:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* If the previous operation is completed, proceed to program the new data */    
1670:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     *(__IO uint32_t *)Address = Data;
1671:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
1672:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Wait for last operation to be completed */
1673:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);       
1674:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
1675:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Return the Write Status */
1676:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   return status;
1677:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
1678:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1679:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
1680:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Write a Byte at a specified address in data memory without erase.
1681:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  Address specifies the address to be written.
1682:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  Data specifies the data to be written.
1683:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval HAL status
1684:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
1685:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramByte(uint32_t Address, uint8_t Data)
1686:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
1687:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
1688:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
1689:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint32_t tmp = 0U, tmpaddr = 0U;
1690:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
1691:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1692:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Check the parameters */
1693:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_FLASH_DATA_ADDRESS(Address)); 
1694:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1695:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
1696:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1697:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1698:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if(status == HAL_OK)
1699:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
1700:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
1701:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     if(Data != (uint8_t) 0x00U)
1702:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {  
1703:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       *(__IO uint8_t *)Address = Data;
1704:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
1705:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Wait for last operation to be completed */
1706:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1707:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1708:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
1709:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     else
1710:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
1711:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       tmpaddr = Address & 0xFFFFFFFCU;
1712:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       tmp = * (__IO uint32_t *) tmpaddr;
1713:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       tmpaddr = 0xFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
1714:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       tmp &= ~tmpaddr;        
1715:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
1716:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Process Unlocked */
1717:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       __HAL_UNLOCK(&pFlash);
ARM GAS  /tmp/cc6rDylt.s 			page 42


1718:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFC
1719:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Process Locked */
1720:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       __HAL_LOCK(&pFlash);
1721:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
1722:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #else /* Not Cat1*/
1723:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     *(__IO uint8_t *)Address = Data;
1724:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
1725:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Wait for last operation to be completed */
1726:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1727:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
1728:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
1729:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Return the Write Status */
1730:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   return status;
1731:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
1732:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1733:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
1734:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Writes a half word at a specified address in data memory without erase.
1735:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  Address specifies the address to be written.
1736:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  Data specifies the data to be written.
1737:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval HAL status
1738:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
1739:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramHalfWord(uint32_t Address, uint16_t Data)
1740:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
1741:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
1742:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
1743:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   uint32_t tmp = 0U, tmpaddr = 0U;
1744:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
1745:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1746:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Check the parameters */
1747:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_FLASH_DATA_ADDRESS(Address));
1748:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1749:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
1750:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1751:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1752:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if(status == HAL_OK)
1753:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
1754:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #if defined(STM32L100xB) || defined(STM32L151xB) || defined(STM32L152xB)
1755:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     if(Data != (uint16_t)0x0000U)
1756:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
1757:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       *(__IO uint16_t *)Address = Data;
1758:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****    
1759:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Wait for last operation to be completed */
1760:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1761:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
1762:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     else
1763:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
1764:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Process Unlocked */
1765:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       __HAL_UNLOCK(&pFlash);
1766:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       if((Address & 0x3U) != 0x3U)
1767:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       {
1768:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         tmpaddr = Address & 0xFFFFFFFCU;
1769:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         tmp = * (__IO uint32_t *) tmpaddr;
1770:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         tmpaddr = 0xFFFFU << ((uint32_t) (0x8U * (Address & 0x3U)));
1771:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         tmp &= ~tmpaddr;          
1772:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         status = HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, Address & 0xFFFFFFFCU);
1773:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFF
1774:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       }
ARM GAS  /tmp/cc6rDylt.s 			page 43


1775:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       else
1776:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       {
1777:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address, 0x00U);
1778:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTBYTE, Address + 1U, 0x00U);
1779:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       }
1780:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       /* Process Locked */
1781:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       __HAL_LOCK(&pFlash);
1782:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
1783:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #else /* Not Cat1*/
1784:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     *(__IO uint16_t *)Address = Data;
1785:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****    
1786:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Wait for last operation to be completed */
1787:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1788:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
1789:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
1790:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Return the Write Status */
1791:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   return status;
1792:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
1793:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1794:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
1795:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Programs a word at a specified address in data memory without erase.
1796:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  Address specifies the address to be written.
1797:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  Data specifies the data to be written.
1798:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval HAL status
1799:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
1800:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramWord(uint32_t Address, uint32_t Data)
1801:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
 586              		.loc 1 1801 0
 587              		.cfi_startproc
 588              		@ args = 0, pretend = 0, frame = 0
 589              		@ frame_needed = 0, uses_anonymous_args = 0
 590              	.LVL83:
 591 0000 38B5     		push	{r3, r4, r5, lr}
 592              	.LCFI7:
 593              		.cfi_def_cfa_offset 16
 594              		.cfi_offset 3, -16
 595              		.cfi_offset 4, -12
 596              		.cfi_offset 5, -8
 597              		.cfi_offset 14, -4
 598 0002 0446     		mov	r4, r0
 599 0004 0D46     		mov	r5, r1
 600              	.LVL84:
1802:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
1803:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1804:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Check the parameters */
1805:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   assert_param(IS_FLASH_DATA_ADDRESS(Address));
1806:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1807:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
1808:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 601              		.loc 1 1808 0
 602 0006 4CF25030 		movw	r0, #50000
 603              	.LVL85:
 604 000a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 605              	.LVL86:
1809:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
1810:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if(status == HAL_OK)
 606              		.loc 1 1810 0
ARM GAS  /tmp/cc6rDylt.s 			page 44


 607 000e 0346     		mov	r3, r0
 608 0010 08B1     		cbz	r0, .L60
 609              	.LVL87:
 610              	.L58:
1811:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
1812:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     *(__IO uint32_t *)Address = Data;
1813:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1814:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     /* Wait for last operation to be completed */
1815:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1816:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
1817:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Return the Write Status */
1818:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   return status;
1819:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
 611              		.loc 1 1819 0
 612 0012 1846     		mov	r0, r3
 613 0014 38BD     		pop	{r3, r4, r5, pc}
 614              	.LVL88:
 615              	.L60:
1812:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 616              		.loc 1 1812 0
 617 0016 2560     		str	r5, [r4]
1815:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 618              		.loc 1 1815 0
 619 0018 4CF25030 		movw	r0, #50000
 620              	.LVL89:
 621 001c FFF7FEFF 		bl	FLASH_WaitForLastOperation
 622              	.LVL90:
 623 0020 0346     		mov	r3, r0
 624              	.LVL91:
 625 0022 F6E7     		b	.L58
 626              		.cfi_endproc
 627              	.LFE100:
 629              		.section	.text.FLASH_DATAEEPROM_ProgramHalfWord,"ax",%progbits
 630              		.align	1
 631              		.syntax unified
 632              		.thumb
 633              		.thumb_func
 634              		.fpu softvfp
 636              	FLASH_DATAEEPROM_ProgramHalfWord:
 637              	.LFB99:
1740:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 638              		.loc 1 1740 0
 639              		.cfi_startproc
 640              		@ args = 0, pretend = 0, frame = 0
 641              		@ frame_needed = 0, uses_anonymous_args = 0
 642              	.LVL92:
 643 0000 38B5     		push	{r3, r4, r5, lr}
 644              	.LCFI8:
 645              		.cfi_def_cfa_offset 16
 646              		.cfi_offset 3, -16
 647              		.cfi_offset 4, -12
 648              		.cfi_offset 5, -8
 649              		.cfi_offset 14, -4
 650 0002 0446     		mov	r4, r0
 651 0004 0D46     		mov	r5, r1
 652              	.LVL93:
1750:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
ARM GAS  /tmp/cc6rDylt.s 			page 45


 653              		.loc 1 1750 0
 654 0006 4CF25030 		movw	r0, #50000
 655              	.LVL94:
 656 000a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 657              	.LVL95:
1752:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 658              		.loc 1 1752 0
 659 000e 0346     		mov	r3, r0
 660 0010 08B1     		cbz	r0, .L64
 661              	.LVL96:
 662              	.L62:
1792:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 663              		.loc 1 1792 0
 664 0012 1846     		mov	r0, r3
 665 0014 38BD     		pop	{r3, r4, r5, pc}
 666              	.LVL97:
 667              	.L64:
1784:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****    
 668              		.loc 1 1784 0
 669 0016 2580     		strh	r5, [r4]	@ movhi
1787:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
 670              		.loc 1 1787 0
 671 0018 4CF25030 		movw	r0, #50000
 672              	.LVL98:
 673 001c FFF7FEFF 		bl	FLASH_WaitForLastOperation
 674              	.LVL99:
 675 0020 0346     		mov	r3, r0
 676              	.LVL100:
 677 0022 F6E7     		b	.L62
 678              		.cfi_endproc
 679              	.LFE99:
 681              		.section	.text.FLASH_DATAEEPROM_ProgramByte,"ax",%progbits
 682              		.align	1
 683              		.syntax unified
 684              		.thumb
 685              		.thumb_func
 686              		.fpu softvfp
 688              	FLASH_DATAEEPROM_ProgramByte:
 689              	.LFB98:
1686:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 690              		.loc 1 1686 0
 691              		.cfi_startproc
 692              		@ args = 0, pretend = 0, frame = 0
 693              		@ frame_needed = 0, uses_anonymous_args = 0
 694              	.LVL101:
 695 0000 38B5     		push	{r3, r4, r5, lr}
 696              	.LCFI9:
 697              		.cfi_def_cfa_offset 16
 698              		.cfi_offset 3, -16
 699              		.cfi_offset 4, -12
 700              		.cfi_offset 5, -8
 701              		.cfi_offset 14, -4
 702 0002 0446     		mov	r4, r0
 703 0004 0D46     		mov	r5, r1
 704              	.LVL102:
1696:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 705              		.loc 1 1696 0
ARM GAS  /tmp/cc6rDylt.s 			page 46


 706 0006 4CF25030 		movw	r0, #50000
 707              	.LVL103:
 708 000a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 709              	.LVL104:
1698:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 710              		.loc 1 1698 0
 711 000e 0346     		mov	r3, r0
 712 0010 08B1     		cbz	r0, .L68
 713              	.LVL105:
 714              	.L66:
1731:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 715              		.loc 1 1731 0
 716 0012 1846     		mov	r0, r3
 717 0014 38BD     		pop	{r3, r4, r5, pc}
 718              	.LVL106:
 719              	.L68:
1723:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
 720              		.loc 1 1723 0
 721 0016 2570     		strb	r5, [r4]
1726:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
 722              		.loc 1 1726 0
 723 0018 4CF25030 		movw	r0, #50000
 724              	.LVL107:
 725 001c FFF7FEFF 		bl	FLASH_WaitForLastOperation
 726              	.LVL108:
 727 0020 0346     		mov	r3, r0
 728              	.LVL109:
 729 0022 F6E7     		b	.L66
 730              		.cfi_endproc
 731              	.LFE98:
 733              		.section	.text.FLASH_DATAEEPROM_FastProgramByte,"ax",%progbits
 734              		.align	1
 735              		.syntax unified
 736              		.thumb
 737              		.thumb_func
 738              		.fpu softvfp
 740              	FLASH_DATAEEPROM_FastProgramByte:
 741              	.LFB95:
1527:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 742              		.loc 1 1527 0
 743              		.cfi_startproc
 744              		@ args = 0, pretend = 0, frame = 0
 745              		@ frame_needed = 0, uses_anonymous_args = 0
 746              	.LVL110:
 747 0000 38B5     		push	{r3, r4, r5, lr}
 748              	.LCFI10:
 749              		.cfi_def_cfa_offset 16
 750              		.cfi_offset 3, -16
 751              		.cfi_offset 4, -12
 752              		.cfi_offset 5, -8
 753              		.cfi_offset 14, -4
 754 0002 0446     		mov	r4, r0
 755 0004 0D46     		mov	r5, r1
 756              	.LVL111:
1537:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
 757              		.loc 1 1537 0
 758 0006 4CF25030 		movw	r0, #50000
ARM GAS  /tmp/cc6rDylt.s 			page 47


 759              	.LVL112:
 760 000a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 761              	.LVL113:
1539:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 762              		.loc 1 1539 0
 763 000e 0346     		mov	r3, r0
 764 0010 08B1     		cbz	r0, .L72
 765              	.LVL114:
 766              	.L70:
1577:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 767              		.loc 1 1577 0
 768 0012 1846     		mov	r0, r3
 769 0014 38BD     		pop	{r3, r4, r5, pc}
 770              	.LVL115:
 771              	.L72:
1542:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 772              		.loc 1 1542 0
 773 0016 064A     		ldr	r2, .L73
 774 0018 5368     		ldr	r3, [r2, #4]
 775 001a 23F48073 		bic	r3, r3, #256
 776 001e 5360     		str	r3, [r2, #4]
1569:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****             
 777              		.loc 1 1569 0
 778 0020 2570     		strb	r5, [r4]
1572:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
 779              		.loc 1 1572 0
 780 0022 4CF25030 		movw	r0, #50000
 781              	.LVL116:
 782 0026 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 783              	.LVL117:
 784 002a 0346     		mov	r3, r0
 785              	.LVL118:
 786 002c F1E7     		b	.L70
 787              	.L74:
 788 002e 00BF     		.align	2
 789              	.L73:
 790 0030 003C0240 		.word	1073888256
 791              		.cfi_endproc
 792              	.LFE95:
 794              		.section	.text.FLASH_DATAEEPROM_FastProgramHalfWord,"ax",%progbits
 795              		.align	1
 796              		.syntax unified
 797              		.thumb
 798              		.thumb_func
 799              		.fpu softvfp
 801              	FLASH_DATAEEPROM_FastProgramHalfWord:
 802              	.LFB96:
1587:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 803              		.loc 1 1587 0
 804              		.cfi_startproc
 805              		@ args = 0, pretend = 0, frame = 0
 806              		@ frame_needed = 0, uses_anonymous_args = 0
 807              	.LVL119:
 808 0000 38B5     		push	{r3, r4, r5, lr}
 809              	.LCFI11:
 810              		.cfi_def_cfa_offset 16
 811              		.cfi_offset 3, -16
ARM GAS  /tmp/cc6rDylt.s 			page 48


 812              		.cfi_offset 4, -12
 813              		.cfi_offset 5, -8
 814              		.cfi_offset 14, -4
 815 0002 0446     		mov	r4, r0
 816 0004 0D46     		mov	r5, r1
 817              	.LVL120:
1597:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
 818              		.loc 1 1597 0
 819 0006 4CF25030 		movw	r0, #50000
 820              	.LVL121:
 821 000a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 822              	.LVL122:
1599:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 823              		.loc 1 1599 0
 824 000e 0346     		mov	r3, r0
 825 0010 08B1     		cbz	r0, .L78
 826              	.LVL123:
 827              	.L76:
1645:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 828              		.loc 1 1645 0
 829 0012 1846     		mov	r0, r3
 830 0014 38BD     		pop	{r3, r4, r5, pc}
 831              	.LVL124:
 832              	.L78:
1602:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 833              		.loc 1 1602 0
 834 0016 064A     		ldr	r2, .L79
 835 0018 5368     		ldr	r3, [r2, #4]
 836 001a 23F48073 		bic	r3, r3, #256
 837 001e 5360     		str	r3, [r2, #4]
1637:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 838              		.loc 1 1637 0
 839 0020 2580     		strh	r5, [r4]	@ movhi
1640:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** #endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
 840              		.loc 1 1640 0
 841 0022 4CF25030 		movw	r0, #50000
 842              	.LVL125:
 843 0026 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 844              	.LVL126:
 845 002a 0346     		mov	r3, r0
 846              	.LVL127:
 847 002c F1E7     		b	.L76
 848              	.L80:
 849 002e 00BF     		.align	2
 850              	.L79:
 851 0030 003C0240 		.word	1073888256
 852              		.cfi_endproc
 853              	.LFE96:
 855              		.section	.text.FLASH_DATAEEPROM_FastProgramWord,"ax",%progbits
 856              		.align	1
 857              		.syntax unified
 858              		.thumb
 859              		.thumb_func
 860              		.fpu softvfp
 862              	FLASH_DATAEEPROM_FastProgramWord:
 863              	.LFB97:
1655:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
ARM GAS  /tmp/cc6rDylt.s 			page 49


 864              		.loc 1 1655 0
 865              		.cfi_startproc
 866              		@ args = 0, pretend = 0, frame = 0
 867              		@ frame_needed = 0, uses_anonymous_args = 0
 868              	.LVL128:
 869 0000 38B5     		push	{r3, r4, r5, lr}
 870              	.LCFI12:
 871              		.cfi_def_cfa_offset 16
 872              		.cfi_offset 3, -16
 873              		.cfi_offset 4, -12
 874              		.cfi_offset 5, -8
 875              		.cfi_offset 14, -4
 876 0002 0446     		mov	r4, r0
 877 0004 0D46     		mov	r5, r1
 878              	.LVL129:
1662:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 879              		.loc 1 1662 0
 880 0006 4CF25030 		movw	r0, #50000
 881              	.LVL130:
 882 000a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 883              	.LVL131:
1664:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 884              		.loc 1 1664 0
 885 000e 0346     		mov	r3, r0
 886 0010 08B1     		cbz	r0, .L84
 887              	.LVL132:
 888              	.L82:
1677:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 889              		.loc 1 1677 0
 890 0012 1846     		mov	r0, r3
 891 0014 38BD     		pop	{r3, r4, r5, pc}
 892              	.LVL133:
 893              	.L84:
1667:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 894              		.loc 1 1667 0
 895 0016 064A     		ldr	r2, .L85
 896 0018 5368     		ldr	r3, [r2, #4]
 897 001a 23F48073 		bic	r3, r3, #256
 898 001e 5360     		str	r3, [r2, #4]
1670:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
 899              		.loc 1 1670 0
 900 0020 2560     		str	r5, [r4]
1673:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 901              		.loc 1 1673 0
 902 0022 4CF25030 		movw	r0, #50000
 903              	.LVL134:
 904 0026 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 905              	.LVL135:
 906 002a 0346     		mov	r3, r0
 907              	.LVL136:
 908 002c F1E7     		b	.L82
 909              	.L86:
 910 002e 00BF     		.align	2
 911              	.L85:
 912 0030 003C0240 		.word	1073888256
 913              		.cfi_endproc
 914              	.LFE97:
ARM GAS  /tmp/cc6rDylt.s 			page 50


 916              		.section	.text.HAL_FLASHEx_OBProgram,"ax",%progbits
 917              		.align	1
 918              		.global	HAL_FLASHEx_OBProgram
 919              		.syntax unified
 920              		.thumb
 921              		.thumb_func
 922              		.fpu softvfp
 924              	HAL_FLASHEx_OBProgram:
 925              	.LFB74:
 407:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 926              		.loc 1 407 0
 927              		.cfi_startproc
 928              		@ args = 0, pretend = 0, frame = 0
 929              		@ frame_needed = 0, uses_anonymous_args = 0
 930              	.LVL137:
 411:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 931              		.loc 1 411 0
 932 0000 2B4B     		ldr	r3, .L105
 933 0002 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 934 0004 012B     		cmp	r3, #1
 935 0006 4FD0     		beq	.L95
 407:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 936              		.loc 1 407 0 discriminator 2
 937 0008 10B5     		push	{r4, lr}
 938              	.LCFI13:
 939              		.cfi_def_cfa_offset 8
 940              		.cfi_offset 4, -8
 941              		.cfi_offset 14, -4
 942 000a 0446     		mov	r4, r0
 411:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 943              		.loc 1 411 0 discriminator 2
 944 000c 0122     		movs	r2, #1
 945 000e 284B     		ldr	r3, .L105
 946 0010 1A74     		strb	r2, [r3, #16]
 417:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 947              		.loc 1 417 0 discriminator 2
 948 0012 0368     		ldr	r3, [r0]
 949 0014 13F0010F 		tst	r3, #1
 950 0018 10D0     		beq	.L96
 420:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 951              		.loc 1 420 0
 952 001a 4368     		ldr	r3, [r0, #4]
 953 001c 9342     		cmp	r3, r2
 954 001e 08D0     		beq	.L101
 428:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 955              		.loc 1 428 0
 956 0020 0021     		movs	r1, #0
 957 0022 FFF7FEFF 		bl	FLASH_OB_WRPConfig
 958              	.LVL138:
 959 0026 0346     		mov	r3, r0
 960              	.LVL139:
 961              	.L91:
 430:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 962              		.loc 1 430 0
 963 0028 4BB1     		cbz	r3, .L89
 433:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       return status;
 964              		.loc 1 433 0
ARM GAS  /tmp/cc6rDylt.s 			page 51


 965 002a 0021     		movs	r1, #0
 966 002c 204A     		ldr	r2, .L105
 967 002e 1174     		strb	r1, [r2, #16]
 434:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 968              		.loc 1 434 0
 969 0030 14E0     		b	.L88
 970              	.LVL140:
 971              	.L101:
 423:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 972              		.loc 1 423 0
 973 0032 1146     		mov	r1, r2
 974 0034 FFF7FEFF 		bl	FLASH_OB_WRPConfig
 975              	.LVL141:
 976 0038 0346     		mov	r3, r0
 977              	.LVL142:
 978 003a F5E7     		b	.L91
 979              	.LVL143:
 980              	.L96:
 408:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 981              		.loc 1 408 0
 982 003c 0123     		movs	r3, #1
 983              	.LVL144:
 984              	.L89:
 439:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 985              		.loc 1 439 0
 986 003e 2268     		ldr	r2, [r4]
 987 0040 12F0020F 		tst	r2, #2
 988 0044 0CD1     		bne	.L102
 989              	.LVL145:
 990              	.L92:
 451:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 991              		.loc 1 451 0
 992 0046 2268     		ldr	r2, [r4]
 993 0048 12F0040F 		tst	r2, #4
 994 004c 12D1     		bne	.L103
 995              	.LVL146:
 996              	.L93:
 465:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 997              		.loc 1 465 0
 998 004e 2268     		ldr	r2, [r4]
 999 0050 12F0080F 		tst	r2, #8
 1000 0054 1ED1     		bne	.L104
 1001              	.LVL147:
 1002              	.L94:
 476:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1003              		.loc 1 476 0
 1004 0056 0021     		movs	r1, #0
 1005 0058 154A     		ldr	r2, .L105
 1006 005a 1174     		strb	r1, [r2, #16]
 1007              	.LVL148:
 1008              	.L88:
 479:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1009              		.loc 1 479 0
 1010 005c 1846     		mov	r0, r3
 1011 005e 10BD     		pop	{r4, pc}
 1012              	.LVL149:
 1013              	.L102:
ARM GAS  /tmp/cc6rDylt.s 			page 52


 441:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     if (status != HAL_OK)
 1014              		.loc 1 441 0
 1015 0060 207B     		ldrb	r0, [r4, #12]	@ zero_extendqisi2
 1016 0062 FFF7FEFF 		bl	FLASH_OB_RDPConfig
 1017              	.LVL150:
 442:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 1018              		.loc 1 442 0
 1019 0066 0346     		mov	r3, r0
 1020 0068 0028     		cmp	r0, #0
 1021 006a ECD0     		beq	.L92
 445:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       return status;
 1022              		.loc 1 445 0
 1023 006c 0021     		movs	r1, #0
 1024 006e 104A     		ldr	r2, .L105
 1025 0070 1174     		strb	r1, [r2, #16]
 446:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 1026              		.loc 1 446 0
 1027 0072 F3E7     		b	.L88
 1028              	.LVL151:
 1029              	.L103:
 453:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****                                  pOBInit->USERConfig & OB_STOP_NORST,
 1030              		.loc 1 453 0
 1031 0074 A07B     		ldrb	r0, [r4, #14]	@ zero_extendqisi2
 1032 0076 00F04002 		and	r2, r0, #64
 1033 007a 00F02001 		and	r1, r0, #32
 1034 007e 00F01000 		and	r0, r0, #16
 1035 0082 FFF7FEFF 		bl	FLASH_OB_UserConfig
 1036              	.LVL152:
 456:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 1037              		.loc 1 456 0
 1038 0086 0346     		mov	r3, r0
 1039 0088 0028     		cmp	r0, #0
 1040 008a E0D0     		beq	.L93
 459:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       return status;
 1041              		.loc 1 459 0
 1042 008c 0021     		movs	r1, #0
 1043 008e 084A     		ldr	r2, .L105
 1044 0090 1174     		strb	r1, [r2, #16]
 460:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 1045              		.loc 1 460 0
 1046 0092 E3E7     		b	.L88
 1047              	.LVL153:
 1048              	.L104:
 467:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     if (status != HAL_OK)
 1049              		.loc 1 467 0
 1050 0094 607B     		ldrb	r0, [r4, #13]	@ zero_extendqisi2
 1051 0096 FFF7FEFF 		bl	FLASH_OB_BORConfig
 1052              	.LVL154:
 468:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 1053              		.loc 1 468 0
 1054 009a 0346     		mov	r3, r0
 1055 009c 0028     		cmp	r0, #0
 1056 009e DAD0     		beq	.L94
 471:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       return status;
 1057              		.loc 1 471 0
 1058 00a0 0021     		movs	r1, #0
 1059 00a2 034A     		ldr	r2, .L105
ARM GAS  /tmp/cc6rDylt.s 			page 53


 1060 00a4 1174     		strb	r1, [r2, #16]
 472:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 1061              		.loc 1 472 0
 1062 00a6 D9E7     		b	.L88
 1063              	.LVL155:
 1064              	.L95:
 1065              	.LCFI14:
 1066              		.cfi_def_cfa_offset 0
 1067              		.cfi_restore 4
 1068              		.cfi_restore 14
 411:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1069              		.loc 1 411 0
 1070 00a8 0223     		movs	r3, #2
 479:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1071              		.loc 1 479 0
 1072 00aa 1846     		mov	r0, r3
 1073              	.LVL156:
 1074 00ac 7047     		bx	lr
 1075              	.L106:
 1076 00ae 00BF     		.align	2
 1077              	.L105:
 1078 00b0 00000000 		.word	pFlash
 1079              		.cfi_endproc
 1080              	.LFE74:
 1082              		.section	.text.HAL_FLASHEx_OBGetConfig,"ax",%progbits
 1083              		.align	1
 1084              		.global	HAL_FLASHEx_OBGetConfig
 1085              		.syntax unified
 1086              		.thumb
 1087              		.thumb_func
 1088              		.fpu softvfp
 1090              	HAL_FLASHEx_OBGetConfig:
 1091              	.LFB75:
 489:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 1092              		.loc 1 489 0
 1093              		.cfi_startproc
 1094              		@ args = 0, pretend = 0, frame = 0
 1095              		@ frame_needed = 0, uses_anonymous_args = 0
 1096              	.LVL157:
 1097 0000 10B5     		push	{r4, lr}
 1098              	.LCFI15:
 1099              		.cfi_def_cfa_offset 8
 1100              		.cfi_offset 4, -8
 1101              		.cfi_offset 14, -4
 1102 0002 0446     		mov	r4, r0
 490:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1103              		.loc 1 490 0
 1104 0004 0F23     		movs	r3, #15
 1105 0006 0360     		str	r3, [r0]
 493:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1106              		.loc 1 493 0
 1107 0008 064B     		ldr	r3, .L109
 1108 000a 1B6A     		ldr	r3, [r3, #32]
 1109 000c 8360     		str	r3, [r0, #8]
 523:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1110              		.loc 1 523 0
 1111 000e FFF7FEFF 		bl	FLASH_OB_GetRDP
ARM GAS  /tmp/cc6rDylt.s 			page 54


 1112              	.LVL158:
 1113 0012 2073     		strb	r0, [r4, #12]
 526:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1114              		.loc 1 526 0
 1115 0014 FFF7FEFF 		bl	FLASH_OB_GetUser
 1116              	.LVL159:
 1117 0018 A073     		strb	r0, [r4, #14]
 529:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
 1118              		.loc 1 529 0
 1119 001a FFF7FEFF 		bl	FLASH_OB_GetBOR
 1120              	.LVL160:
 1121 001e 6073     		strb	r0, [r4, #13]
 1122 0020 10BD     		pop	{r4, pc}
 1123              	.LVL161:
 1124              	.L110:
 1125 0022 00BF     		.align	2
 1126              	.L109:
 1127 0024 003C0240 		.word	1073888256
 1128              		.cfi_endproc
 1129              	.LFE75:
 1131              		.section	.text.HAL_FLASHEx_AdvOBProgram,"ax",%progbits
 1132              		.align	1
 1133              		.global	HAL_FLASHEx_AdvOBProgram
 1134              		.syntax unified
 1135              		.thumb
 1136              		.thumb_func
 1137              		.fpu softvfp
 1139              	HAL_FLASHEx_AdvOBProgram:
 1140              	.LFB76:
 543:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 1141              		.loc 1 543 0
 1142              		.cfi_startproc
 1143              		@ args = 0, pretend = 0, frame = 0
 1144              		@ frame_needed = 0, uses_anonymous_args = 0
 1145              	.LVL162:
 1146 0000 08B5     		push	{r3, lr}
 1147              	.LCFI16:
 1148              		.cfi_def_cfa_offset 8
 1149              		.cfi_offset 3, -8
 1150              		.cfi_offset 14, -4
 1151              	.LVL163:
 552:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 1152              		.loc 1 552 0
 1153 0002 0368     		ldr	r3, [r0]
 1154 0004 13F0010F 		tst	r3, #1
 1155 0008 0AD0     		beq	.L114
 556:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 1156              		.loc 1 556 0
 1157 000a 4368     		ldr	r3, [r0, #4]
 1158 000c 012B     		cmp	r3, #1
 1159 000e 03D0     		beq	.L116
 568:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       if (status != HAL_OK)
 1160              		.loc 1 568 0
 1161 0010 0021     		movs	r1, #0
 1162 0012 FFF7FEFF 		bl	FLASH_OB_PCROPConfig
 1163              	.LVL164:
 1164 0016 08BD     		pop	{r3, pc}
ARM GAS  /tmp/cc6rDylt.s 			page 55


 1165              	.LVL165:
 1166              	.L116:
 559:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       if (status != HAL_OK)
 1167              		.loc 1 559 0
 1168 0018 0121     		movs	r1, #1
 1169 001a FFF7FEFF 		bl	FLASH_OB_PCROPConfig
 1170              	.LVL166:
 1171 001e 08BD     		pop	{r3, pc}
 1172              	.LVL167:
 1173              	.L114:
 544:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 1174              		.loc 1 544 0
 1175 0020 0120     		movs	r0, #1
 1176              	.LVL168:
 589:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1177              		.loc 1 589 0
 1178 0022 08BD     		pop	{r3, pc}
 1179              		.cfi_endproc
 1180              	.LFE76:
 1182              		.section	.text.HAL_FLASHEx_AdvOBGetConfig,"ax",%progbits
 1183              		.align	1
 1184              		.global	HAL_FLASHEx_AdvOBGetConfig
 1185              		.syntax unified
 1186              		.thumb
 1187              		.thumb_func
 1188              		.fpu softvfp
 1190              	HAL_FLASHEx_AdvOBGetConfig:
 1191              	.LFB77:
 600:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   pAdvOBInit->OptionType = 0U;
 1192              		.loc 1 600 0
 1193              		.cfi_startproc
 1194              		@ args = 0, pretend = 0, frame = 0
 1195              		@ frame_needed = 0, uses_anonymous_args = 0
 1196              		@ link register save eliminated.
 1197              	.LVL169:
 605:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1198              		.loc 1 605 0
 1199 0000 0123     		movs	r3, #1
 1200 0002 0360     		str	r3, [r0]
 608:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 1201              		.loc 1 608 0
 1202 0004 0749     		ldr	r1, .L118
 1203 0006 CB69     		ldr	r3, [r1, #28]
 1204 0008 03F48073 		and	r3, r3, #256
 1205              	.LVL170:
 1206              	.LBB4:
 1207              	.LBB5:
 1208              		.file 2 "..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h"
   1:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /*
   8:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  *
ARM GAS  /tmp/cc6rDylt.s 			page 56


  10:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  *
  12:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  *
  16:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  *
  18:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
  24:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
  25:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
  28:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
  34:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
  38:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
  39:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
  43:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
  46:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
  49:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
  55:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
  58:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
  61:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
  64:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/cc6rDylt.s 			page 57


  67:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
  70:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
  78:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
  86:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
  94:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 102:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 110:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 113:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 116:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 117:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 118:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   @{
 122:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 123:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc6rDylt.s 			page 58


 124:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 125:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 129:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 131:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 133:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 134:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 135:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 136:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 140:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 142:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 144:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 145:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 146:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 147:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 150:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 151:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 153:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 154:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 155:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 157:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 158:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 159:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 160:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 162:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 166:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 168:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 169:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 170:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 172:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 173:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 174:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 175:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 176:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 177:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/cc6rDylt.s 			page 59


 181:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 183:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 185:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 186:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 187:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 189:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 193:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 195:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 197:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 198:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 199:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 200:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 201:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 205:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 207:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 208:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 209:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 211:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 212:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 213:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 214:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 215:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 219:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 221:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 222:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 223:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 225:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 226:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 227:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 228:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 229:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 233:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 235:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 237:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
ARM GAS  /tmp/cc6rDylt.s 			page 60


 238:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 240:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 241:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 242:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 243:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 247:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 249:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 250:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 251:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 253:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 254:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 255:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 256:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 258:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 262:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 264:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 265:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 266:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 268:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 269:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 270:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 271:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 272:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 273:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 277:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 279:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 281:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 282:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 283:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 285:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 289:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 291:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 293:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 294:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc6rDylt.s 			page 61


 295:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 296:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 297:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 301:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 303:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 304:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 305:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 307:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 308:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 309:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 310:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 312:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 316:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 318:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 319:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 320:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 322:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 323:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 324:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 325:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 326:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 327:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 331:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 333:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 335:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 336:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 337:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 339:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 343:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 345:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 347:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 348:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 349:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 350:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/cc6rDylt.s 			page 62


 352:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 355:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 356:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 358:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 359:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 360:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 362:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 363:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 364:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 365:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 366:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 370:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 372:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 374:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 375:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 376:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 377:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 378:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 382:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 384:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 385:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 386:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 388:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 389:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 390:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 391:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 393:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 397:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 399:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 400:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 401:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 403:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 404:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 405:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 406:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 407:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 408:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
ARM GAS  /tmp/cc6rDylt.s 			page 63


 409:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 412:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 414:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 416:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 417:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 418:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 420:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 424:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 426:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 428:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 429:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 430:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 431:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 435:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 439:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 441:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 443:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 444:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 445:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 446:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 450:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 452:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 454:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 455:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 456:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 457:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 461:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 463:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 464:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 465:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
ARM GAS  /tmp/cc6rDylt.s 			page 64


 466:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 467:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 468:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 469:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 470:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 472:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 475:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 476:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 478:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 479:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 480:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 482:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 483:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 484:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 485:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 486:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 487:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 491:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 493:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 495:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 496:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 497:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 499:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 503:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 505:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 507:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 508:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 509:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 510:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 511:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 516:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 518:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 520:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 521:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 522:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/cc6rDylt.s 			page 65


 523:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 524:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 526:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 527:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 529:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 530:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 531:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 533:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 534:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 535:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 536:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 538:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 541:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 542:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 544:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 545:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 546:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 548:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 549:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 550:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 551:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 552:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 553:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 554:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 557:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 559:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 560:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 561:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 562:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 563:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 564:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 565:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 567:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 568:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 569:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 571:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 573:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 574:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 575:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 576:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 577:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 579:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc6rDylt.s 			page 66


 580:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 583:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 584:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 585:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 586:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 587:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   mode.
 588:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   
 589:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 590:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 591:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 592:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 593:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 594:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 595:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 596:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 597:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 598:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 599:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 600:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 601:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return result;
 602:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 603:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 604:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 605:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 606:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 607:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 608:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 609:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 610:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 611:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 612:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 613:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 614:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 615:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 616:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 617:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 618:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 619:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 620:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 621:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 622:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return result;
 623:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 624:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 625:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 626:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 627:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 628:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 629:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 630:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 631:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 632:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   mode.
 633:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   
 634:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 635:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 636:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/cc6rDylt.s 			page 67


 637:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 638:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 639:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 640:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 641:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 642:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 643:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 644:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 645:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 646:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 647:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 648:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 649:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 650:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 651:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 652:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 654:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 655:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 656:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 657:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 658:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 659:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 660:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 661:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 662:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 663:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 664:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 665:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 666:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 667:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 668:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 669:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 670:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 671:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 672:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 673:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 674:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   mode.
 675:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 676:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 677:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 678:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 679:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 680:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 681:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 682:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 683:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 684:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 685:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 686:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 687:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 688:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return result;
 689:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 690:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 691:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 692:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 693:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
ARM GAS  /tmp/cc6rDylt.s 			page 68


 694:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 695:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 696:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 697:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 698:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 699:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 700:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 701:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 702:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 703:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 704:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 705:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 706:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 707:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 708:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 709:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 710:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return result;
 711:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 712:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 713:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 714:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 715:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 716:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 717:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 718:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 719:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 720:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   mode.
 721:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 722:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 723:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 724:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 725:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 726:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 727:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 728:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 729:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 730:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 731:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 732:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 733:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 734:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 735:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 736:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 737:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 738:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 739:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 740:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 741:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 742:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 743:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 744:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 745:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 746:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 747:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 748:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 749:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 750:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
ARM GAS  /tmp/cc6rDylt.s 			page 69


 751:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 752:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 753:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 754:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 755:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 756:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 757:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 758:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 759:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 760:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 761:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 762:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 763:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 764:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 765:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 766:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 767:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 768:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 769:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 770:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 771:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 772:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 773:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 774:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 775:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 776:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 777:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 778:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 779:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 780:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 781:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 782:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 783:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 784:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 785:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 786:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 787:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 788:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 789:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 790:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 791:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 792:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 793:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 794:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 795:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 796:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 797:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 798:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 799:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 800:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 801:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 802:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 803:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 804:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 805:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 806:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 807:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/cc6rDylt.s 			page 70


 808:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 809:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 810:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 811:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 812:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 813:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 814:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 815:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 816:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   @{
 817:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** */
 818:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 819:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 820:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 821:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 822:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 823:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 824:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 825:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 826:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 827:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 828:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 829:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 830:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 831:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 832:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 833:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 834:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 835:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 836:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 837:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 838:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 839:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 840:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 841:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 842:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 843:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 844:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 845:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 846:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 847:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 848:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 849:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 850:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 851:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 852:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 853:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 854:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 855:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 856:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 857:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 858:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 859:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 860:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 861:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 862:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 863:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 864:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
ARM GAS  /tmp/cc6rDylt.s 			page 71


 865:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 866:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 867:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 868:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 869:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 870:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 871:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 872:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 873:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 874:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 875:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 876:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 877:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 878:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 879:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 880:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 881:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 882:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 883:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 884:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 885:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 886:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 887:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 888:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 889:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 890:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 891:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 892:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 893:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 894:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 895:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 896:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 897:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 898:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 899:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 900:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 901:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 902:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 903:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 904:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 905:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 906:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 907:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 908:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return result;
 909:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 910:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 911:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 912:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 913:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 914:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 915:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 916:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 917:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 918:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 919:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 920:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 921:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
ARM GAS  /tmp/cc6rDylt.s 			page 72


 922:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 923:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 924:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return result;
 925:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 926:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 927:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 928:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 929:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 930:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 931:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 932:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 933:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 934:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 935:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 936:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 937:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 938:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 939:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 940:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 941:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 942:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return result;
 943:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 944:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 945:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 946:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 947:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 948:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 949:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 950:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 951:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 952:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 953:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 954:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 955:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 956:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 957:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 958:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   {
 959:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****     return op1;
 960:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   }
 961:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 962:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 963:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 964:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 965:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 966:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 967:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 968:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 969:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 970:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 971:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 972:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 973:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 974:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 975:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 976:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 977:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 978:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
ARM GAS  /tmp/cc6rDylt.s 			page 73


 979:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 980:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 981:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 982:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 983:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 984:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 985:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 986:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 987:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 988:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 1209              		.loc 2 988 0
 1210 000c 4FF48072 		mov	r2, #256
 1211              		.syntax unified
 1212              	@ 988 "..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h" 1
 1213 0010 92FAA2F2 		rbit r2, r2
 1214              	@ 0 "" 2
 1215              	.LVL171:
 1216              		.thumb
 1217              		.syntax unified
 1218              	.LBE5:
 1219              	.LBE4:
 608:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 1220              		.loc 1 608 0
 1221 0014 B2FA82F2 		clz	r2, r2
 1222 0018 D340     		lsrs	r3, r3, r2
 1223 001a 4360     		str	r3, [r0, #4]
 611:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 1224              		.loc 1 611 0
 1225 001c 0B6A     		ldr	r3, [r1, #32]
 1226 001e 8360     		str	r3, [r0, #8]
 1227 0020 7047     		bx	lr
 1228              	.L119:
 1229 0022 00BF     		.align	2
 1230              	.L118:
 1231 0024 003C0240 		.word	1073888256
 1232              		.cfi_endproc
 1233              	.LFE77:
 1235              		.section	.text.HAL_FLASHEx_OB_SelectPCROP,"ax",%progbits
 1236              		.align	1
 1237              		.global	HAL_FLASHEx_OB_SelectPCROP
 1238              		.syntax unified
 1239              		.thumb
 1240              		.thumb_func
 1241              		.fpu softvfp
 1243              	HAL_FLASHEx_OB_SelectPCROP:
 1244              	.LFB78:
 643:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 1245              		.loc 1 643 0
 1246              		.cfi_startproc
 1247              		@ args = 0, pretend = 0, frame = 0
 1248              		@ frame_needed = 0, uses_anonymous_args = 0
 1249 0000 08B5     		push	{r3, lr}
 1250              	.LCFI17:
 1251              		.cfi_def_cfa_offset 8
 1252              		.cfi_offset 3, -8
 1253              		.cfi_offset 14, -4
 1254              	.LVL172:
ARM GAS  /tmp/cc6rDylt.s 			page 74


 650:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 1255              		.loc 1 650 0
 1256 0002 4CF25030 		movw	r0, #50000
 1257 0006 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1258              	.LVL173:
 653:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 1259              		.loc 1 653 0
 1260 000a 0C4B     		ldr	r3, .L124
 1261 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1262              	.LVL174:
 656:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 1263              		.loc 1 656 0
 1264 000e 43F48073 		orr	r3, r3, #256
 1265              	.LVL175:
 659:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   tmp2 = (uint32_t)(((uint32_t)((uint32_t)(tmp1) << 16U)) | ((uint32_t)optiontmp2));
 1266              		.loc 1 659 0
 1267 0012 83F47F42 		eor	r2, r3, #65280
 1268 0016 82F0FF02 		eor	r2, r2, #255
 1269              	.LVL176:
 660:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 1270              		.loc 1 660 0
 1271 001a 43EA0243 		orr	r3, r3, r2, lsl #16
 1272              	.LVL177:
 662:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {         
 1273              		.loc 1 662 0
 1274 001e 0246     		mov	r2, r0
 1275              	.LVL178:
 1276 0020 08B1     		cbz	r0, .L123
 1277              	.LVL179:
 1278              	.L121:
 676:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1279              		.loc 1 676 0
 1280 0022 1046     		mov	r0, r2
 1281 0024 08BD     		pop	{r3, pc}
 1282              	.LVL180:
 1283              	.L123:
 665:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1284              		.loc 1 665 0
 1285 0026 0021     		movs	r1, #0
 1286 0028 054A     		ldr	r2, .L124+4
 1287 002a 5161     		str	r1, [r2, #20]
 668:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
 1288              		.loc 1 668 0
 1289 002c 034A     		ldr	r2, .L124
 1290 002e 1360     		str	r3, [r2]
 671:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 1291              		.loc 1 671 0
 1292 0030 4CF25030 		movw	r0, #50000
 1293              	.LVL181:
 1294 0034 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1295              	.LVL182:
 1296 0038 0246     		mov	r2, r0
 1297              	.LVL183:
 1298 003a F2E7     		b	.L121
 1299              	.L125:
 1300              		.align	2
 1301              	.L124:
ARM GAS  /tmp/cc6rDylt.s 			page 75


 1302 003c 0000F81F 		.word	536346624
 1303 0040 00000000 		.word	pFlash
 1304              		.cfi_endproc
 1305              	.LFE78:
 1307              		.section	.text.HAL_FLASHEx_OB_DeSelectPCROP,"ax",%progbits
 1308              		.align	1
 1309              		.global	HAL_FLASHEx_OB_DeSelectPCROP
 1310              		.syntax unified
 1311              		.thumb
 1312              		.thumb_func
 1313              		.fpu softvfp
 1315              	HAL_FLASHEx_OB_DeSelectPCROP:
 1316              	.LFB79:
 686:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 1317              		.loc 1 686 0
 1318              		.cfi_startproc
 1319              		@ args = 0, pretend = 0, frame = 0
 1320              		@ frame_needed = 0, uses_anonymous_args = 0
 1321 0000 08B5     		push	{r3, lr}
 1322              	.LCFI18:
 1323              		.cfi_def_cfa_offset 8
 1324              		.cfi_offset 3, -8
 1325              		.cfi_offset 14, -4
 1326              	.LVL184:
 693:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 1327              		.loc 1 693 0
 1328 0002 4CF25030 		movw	r0, #50000
 1329 0006 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1330              	.LVL185:
 696:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 1331              		.loc 1 696 0
 1332 000a 0C4B     		ldr	r3, .L130
 1333 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1334 000e DBB2     		uxtb	r3, r3
 1335              	.LVL186:
 702:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   tmp2 = (uint32_t)(((uint32_t)((uint32_t)(tmp1) << 16U)) | ((uint32_t)optiontmp2));
 1336              		.loc 1 702 0
 1337 0010 83F47F42 		eor	r2, r3, #65280
 1338 0014 82F0FF02 		eor	r2, r2, #255
 1339              	.LVL187:
 703:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 1340              		.loc 1 703 0
 1341 0018 43EA0243 		orr	r3, r3, r2, lsl #16
 1342              	.LVL188:
 705:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {         
 1343              		.loc 1 705 0
 1344 001c 0246     		mov	r2, r0
 1345              	.LVL189:
 1346 001e 08B1     		cbz	r0, .L129
 1347              	.LVL190:
 1348              	.L127:
 719:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1349              		.loc 1 719 0
 1350 0020 1046     		mov	r0, r2
 1351 0022 08BD     		pop	{r3, pc}
 1352              	.LVL191:
 1353              	.L129:
ARM GAS  /tmp/cc6rDylt.s 			page 76


 708:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1354              		.loc 1 708 0
 1355 0024 0021     		movs	r1, #0
 1356 0026 064A     		ldr	r2, .L130+4
 1357 0028 5161     		str	r1, [r2, #20]
 711:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
 1358              		.loc 1 711 0
 1359 002a 044A     		ldr	r2, .L130
 1360 002c 1360     		str	r3, [r2]
 714:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 1361              		.loc 1 714 0
 1362 002e 4CF25030 		movw	r0, #50000
 1363              	.LVL192:
 1364 0032 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1365              	.LVL193:
 1366 0036 0246     		mov	r2, r0
 1367              	.LVL194:
 1368 0038 F2E7     		b	.L127
 1369              	.L131:
 1370 003a 00BF     		.align	2
 1371              	.L130:
 1372 003c 0000F81F 		.word	536346624
 1373 0040 00000000 		.word	pFlash
 1374              		.cfi_endproc
 1375              	.LFE79:
 1377              		.section	.text.HAL_FLASHEx_DATAEEPROM_Unlock,"ax",%progbits
 1378              		.align	1
 1379              		.global	HAL_FLASHEx_DATAEEPROM_Unlock
 1380              		.syntax unified
 1381              		.thumb
 1382              		.thumb_func
 1383              		.fpu softvfp
 1385              	HAL_FLASHEx_DATAEEPROM_Unlock:
 1386              	.LFB80:
 752:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 1387              		.loc 1 752 0
 1388              		.cfi_startproc
 1389              		@ args = 0, pretend = 0, frame = 0
 1390              		@ frame_needed = 0, uses_anonymous_args = 0
 1391              		@ link register save eliminated.
 753:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {  
 1392              		.loc 1 753 0
 1393 0000 064B     		ldr	r3, .L135
 1394 0002 5B68     		ldr	r3, [r3, #4]
 1395 0004 13F0010F 		tst	r3, #1
 1396 0008 06D0     		beq	.L134
 756:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     FLASH->PEKEYR = FLASH_PEKEY2;
 1397              		.loc 1 756 0
 1398 000a 044B     		ldr	r3, .L135
 1399 000c 044A     		ldr	r2, .L135+4
 1400 000e DA60     		str	r2, [r3, #12]
 757:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 1401              		.loc 1 757 0
 1402 0010 044A     		ldr	r2, .L135+8
 1403 0012 DA60     		str	r2, [r3, #12]
 763:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
 1404              		.loc 1 763 0
ARM GAS  /tmp/cc6rDylt.s 			page 77


 1405 0014 0020     		movs	r0, #0
 1406 0016 7047     		bx	lr
 1407              	.L134:
 761:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 1408              		.loc 1 761 0
 1409 0018 0120     		movs	r0, #1
 764:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1410              		.loc 1 764 0
 1411 001a 7047     		bx	lr
 1412              	.L136:
 1413              		.align	2
 1414              	.L135:
 1415 001c 003C0240 		.word	1073888256
 1416 0020 EFCDAB89 		.word	-1985229329
 1417 0024 05040302 		.word	33752069
 1418              		.cfi_endproc
 1419              	.LFE80:
 1421              		.section	.text.HAL_FLASHEx_DATAEEPROM_Lock,"ax",%progbits
 1422              		.align	1
 1423              		.global	HAL_FLASHEx_DATAEEPROM_Lock
 1424              		.syntax unified
 1425              		.thumb
 1426              		.thumb_func
 1427              		.fpu softvfp
 1429              	HAL_FLASHEx_DATAEEPROM_Lock:
 1430              	.LFB81:
 771:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
 1431              		.loc 1 771 0
 1432              		.cfi_startproc
 1433              		@ args = 0, pretend = 0, frame = 0
 1434              		@ frame_needed = 0, uses_anonymous_args = 0
 1435              		@ link register save eliminated.
 773:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 1436              		.loc 1 773 0
 1437 0000 034A     		ldr	r2, .L138
 1438 0002 5368     		ldr	r3, [r2, #4]
 1439 0004 43F00103 		orr	r3, r3, #1
 1440 0008 5360     		str	r3, [r2, #4]
 776:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1441              		.loc 1 776 0
 1442 000a 0020     		movs	r0, #0
 1443 000c 7047     		bx	lr
 1444              	.L139:
 1445 000e 00BF     		.align	2
 1446              	.L138:
 1447 0010 003C0240 		.word	1073888256
 1448              		.cfi_endproc
 1449              	.LFE81:
 1451              		.section	.text.HAL_FLASHEx_DATAEEPROM_Erase,"ax",%progbits
 1452              		.align	1
 1453              		.global	HAL_FLASHEx_DATAEEPROM_Erase
 1454              		.syntax unified
 1455              		.thumb
 1456              		.thumb_func
 1457              		.fpu softvfp
 1459              	HAL_FLASHEx_DATAEEPROM_Erase:
 1460              	.LFB82:
ARM GAS  /tmp/cc6rDylt.s 			page 78


 791:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 1461              		.loc 1 791 0
 1462              		.cfi_startproc
 1463              		@ args = 0, pretend = 0, frame = 0
 1464              		@ frame_needed = 0, uses_anonymous_args = 0
 1465              	.LVL195:
 1466 0000 38B5     		push	{r3, r4, r5, lr}
 1467              	.LCFI19:
 1468              		.cfi_def_cfa_offset 16
 1469              		.cfi_offset 3, -16
 1470              		.cfi_offset 4, -12
 1471              		.cfi_offset 5, -8
 1472              		.cfi_offset 14, -4
 1473 0002 0446     		mov	r4, r0
 1474 0004 0D46     		mov	r5, r1
 1475              	.LVL196:
 799:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 1476              		.loc 1 799 0
 1477 0006 4CF25030 		movw	r0, #50000
 1478              	.LVL197:
 1479 000a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1480              	.LVL198:
 801:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 1481              		.loc 1 801 0
 1482 000e 0346     		mov	r3, r0
 1483 0010 70B9     		cbnz	r0, .L141
 804:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1484              		.loc 1 804 0
 1485 0012 0022     		movs	r2, #0
 1486 0014 0A4B     		ldr	r3, .L148
 1487 0016 5A61     		str	r2, [r3, #20]
 806:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 1488              		.loc 1 806 0
 1489 0018 022C     		cmp	r4, #2
 1490 001a 0BD0     		beq	.L146
 1491              	.L142:
 812:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 1492              		.loc 1 812 0
 1493 001c 012C     		cmp	r4, #1
 1494 001e 0BD0     		beq	.L147
 1495              	.L143:
 818:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 1496              		.loc 1 818 0
 1497 0020 0CB9     		cbnz	r4, .L144
 821:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 1498              		.loc 1 821 0
 1499 0022 0023     		movs	r3, #0
 1500 0024 2B70     		strb	r3, [r5]
 1501              	.L144:
 824:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 1502              		.loc 1 824 0
 1503 0026 4CF25030 		movw	r0, #50000
 1504              	.LVL199:
 1505 002a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1506              	.LVL200:
 1507 002e 0346     		mov	r3, r0
 1508              	.LVL201:
ARM GAS  /tmp/cc6rDylt.s 			page 79


 1509              	.L141:
 829:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1510              		.loc 1 829 0
 1511 0030 1846     		mov	r0, r3
 1512 0032 38BD     		pop	{r3, r4, r5, pc}
 1513              	.LVL202:
 1514              	.L146:
 809:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 1515              		.loc 1 809 0
 1516 0034 2A60     		str	r2, [r5]
 1517 0036 F1E7     		b	.L142
 1518              	.L147:
 815:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 1519              		.loc 1 815 0
 1520 0038 0023     		movs	r3, #0
 1521 003a 2B80     		strh	r3, [r5]	@ movhi
 1522 003c F0E7     		b	.L143
 1523              	.L149:
 1524 003e 00BF     		.align	2
 1525              	.L148:
 1526 0040 00000000 		.word	pFlash
 1527              		.cfi_endproc
 1528              	.LFE82:
 1530              		.section	.text.HAL_FLASHEx_DATAEEPROM_Program,"ax",%progbits
 1531              		.align	1
 1532              		.global	HAL_FLASHEx_DATAEEPROM_Program
 1533              		.syntax unified
 1534              		.thumb
 1535              		.thumb_func
 1536              		.fpu softvfp
 1538              	HAL_FLASHEx_DATAEEPROM_Program:
 1539              	.LFB83:
 849:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 1540              		.loc 1 849 0
 1541              		.cfi_startproc
 1542              		@ args = 0, pretend = 0, frame = 0
 1543              		@ frame_needed = 0, uses_anonymous_args = 0
 1544              	.LVL203:
 853:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1545              		.loc 1 853 0
 1546 0000 254B     		ldr	r3, .L171
 1547 0002 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 1548 0004 012B     		cmp	r3, #1
 1549 0006 02D1     		bne	.L164
 1550 0008 0223     		movs	r3, #2
 907:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1551              		.loc 1 907 0
 1552 000a 1846     		mov	r0, r3
 1553              	.LVL204:
 1554 000c 7047     		bx	lr
 1555              	.LVL205:
 1556              	.L164:
 849:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 1557              		.loc 1 849 0 discriminator 2
 1558 000e 70B5     		push	{r4, r5, r6, lr}
 1559              	.LCFI20:
 1560              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/cc6rDylt.s 			page 80


 1561              		.cfi_offset 4, -16
 1562              		.cfi_offset 5, -12
 1563              		.cfi_offset 6, -8
 1564              		.cfi_offset 14, -4
 1565 0010 1646     		mov	r6, r2
 1566 0012 0D46     		mov	r5, r1
 1567 0014 0446     		mov	r4, r0
 853:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1568              		.loc 1 853 0 discriminator 2
 1569 0016 0122     		movs	r2, #1
 1570              	.LVL206:
 1571 0018 1F4B     		ldr	r3, .L171
 1572 001a 1A74     		strb	r2, [r3, #16]
 859:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 1573              		.loc 1 859 0 discriminator 2
 1574 001c 4CF25030 		movw	r0, #50000
 1575              	.LVL207:
 1576 0020 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1577              	.LVL208:
 861:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 1578              		.loc 1 861 0 discriminator 2
 1579 0024 0346     		mov	r3, r0
 1580 0026 70B9     		cbnz	r0, .L152
 864:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1581              		.loc 1 864 0
 1582 0028 0022     		movs	r2, #0
 1583 002a 1B4B     		ldr	r3, .L171
 1584 002c 5A61     		str	r2, [r3, #20]
 866:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 1585              		.loc 1 866 0
 1586 002e 022C     		cmp	r4, #2
 1587 0030 0ED0     		beq	.L165
 871:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 1588              		.loc 1 871 0
 1589 0032 012C     		cmp	r4, #1
 1590 0034 12D0     		beq	.L166
 876:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 1591              		.loc 1 876 0
 1592 0036 BCB1     		cbz	r4, .L167
 881:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 1593              		.loc 1 881 0
 1594 0038 042C     		cmp	r4, #4
 1595 003a 1BD0     		beq	.L168
 886:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 1596              		.loc 1 886 0
 1597 003c 082C     		cmp	r4, #8
 1598 003e 1FD0     		beq	.L169
 891:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 1599              		.loc 1 891 0
 1600 0040 102C     		cmp	r4, #16
 1601 0042 23D0     		beq	.L170
 898:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 1602              		.loc 1 898 0
 1603 0044 0123     		movs	r3, #1
 1604              	.LVL209:
 1605              	.L152:
 904:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
ARM GAS  /tmp/cc6rDylt.s 			page 81


 1606              		.loc 1 904 0
 1607 0046 0021     		movs	r1, #0
 1608 0048 134A     		ldr	r2, .L171
 1609 004a 1174     		strb	r1, [r2, #16]
 907:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1610              		.loc 1 907 0
 1611 004c 1846     		mov	r0, r3
 1612 004e 70BD     		pop	{r4, r5, r6, pc}
 1613              	.LVL210:
 1614              	.L165:
 869:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 1615              		.loc 1 869 0
 1616 0050 3146     		mov	r1, r6
 1617 0052 2846     		mov	r0, r5
 1618              	.LVL211:
 1619 0054 FFF7FEFF 		bl	FLASH_DATAEEPROM_ProgramWord
 1620              	.LVL212:
 1621 0058 0346     		mov	r3, r0
 1622              	.LVL213:
 1623 005a F4E7     		b	.L152
 1624              	.LVL214:
 1625              	.L166:
 874:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 1626              		.loc 1 874 0
 1627 005c B1B2     		uxth	r1, r6
 1628 005e 2846     		mov	r0, r5
 1629              	.LVL215:
 1630 0060 FFF7FEFF 		bl	FLASH_DATAEEPROM_ProgramHalfWord
 1631              	.LVL216:
 1632 0064 0346     		mov	r3, r0
 1633              	.LVL217:
 1634 0066 EEE7     		b	.L152
 1635              	.LVL218:
 1636              	.L167:
 879:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 1637              		.loc 1 879 0
 1638 0068 F1B2     		uxtb	r1, r6
 1639 006a 2846     		mov	r0, r5
 1640              	.LVL219:
 1641 006c FFF7FEFF 		bl	FLASH_DATAEEPROM_ProgramByte
 1642              	.LVL220:
 1643 0070 0346     		mov	r3, r0
 1644              	.LVL221:
 1645 0072 E8E7     		b	.L152
 1646              	.LVL222:
 1647              	.L168:
 884:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 1648              		.loc 1 884 0
 1649 0074 F1B2     		uxtb	r1, r6
 1650 0076 2846     		mov	r0, r5
 1651              	.LVL223:
 1652 0078 FFF7FEFF 		bl	FLASH_DATAEEPROM_FastProgramByte
 1653              	.LVL224:
 1654 007c 0346     		mov	r3, r0
 1655              	.LVL225:
 1656 007e E2E7     		b	.L152
 1657              	.LVL226:
ARM GAS  /tmp/cc6rDylt.s 			page 82


 1658              	.L169:
 889:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }    
 1659              		.loc 1 889 0
 1660 0080 B1B2     		uxth	r1, r6
 1661 0082 2846     		mov	r0, r5
 1662              	.LVL227:
 1663 0084 FFF7FEFF 		bl	FLASH_DATAEEPROM_FastProgramHalfWord
 1664              	.LVL228:
 1665 0088 0346     		mov	r3, r0
 1666              	.LVL229:
 1667 008a DCE7     		b	.L152
 1668              	.LVL230:
 1669              	.L170:
 894:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     }
 1670              		.loc 1 894 0
 1671 008c 3146     		mov	r1, r6
 1672 008e 2846     		mov	r0, r5
 1673              	.LVL231:
 1674 0090 FFF7FEFF 		bl	FLASH_DATAEEPROM_FastProgramWord
 1675              	.LVL232:
 1676 0094 0346     		mov	r3, r0
 1677              	.LVL233:
 1678 0096 D6E7     		b	.L152
 1679              	.L172:
 1680              		.align	2
 1681              	.L171:
 1682 0098 00000000 		.word	pFlash
 1683              		.cfi_endproc
 1684              	.LFE83:
 1686              		.section	.text.HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram,"ax",%progbits
 1687              		.align	1
 1688              		.global	HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram
 1689              		.syntax unified
 1690              		.thumb
 1691              		.thumb_func
 1692              		.fpu softvfp
 1694              	HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram:
 1695              	.LFB84:
 914:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   SET_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 1696              		.loc 1 914 0
 1697              		.cfi_startproc
 1698              		@ args = 0, pretend = 0, frame = 0
 1699              		@ frame_needed = 0, uses_anonymous_args = 0
 1700              		@ link register save eliminated.
 915:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
 1701              		.loc 1 915 0
 1702 0000 024A     		ldr	r2, .L174
 1703 0002 5368     		ldr	r3, [r2, #4]
 1704 0004 43F48073 		orr	r3, r3, #256
 1705 0008 5360     		str	r3, [r2, #4]
 1706 000a 7047     		bx	lr
 1707              	.L175:
 1708              		.align	2
 1709              	.L174:
 1710 000c 003C0240 		.word	1073888256
 1711              		.cfi_endproc
 1712              	.LFE84:
ARM GAS  /tmp/cc6rDylt.s 			page 83


 1714              		.section	.text.HAL_FLASHEx_DATAEEPROM_DisableFixedTimeProgram,"ax",%progbits
 1715              		.align	1
 1716              		.global	HAL_FLASHEx_DATAEEPROM_DisableFixedTimeProgram
 1717              		.syntax unified
 1718              		.thumb
 1719              		.thumb_func
 1720              		.fpu softvfp
 1722              	HAL_FLASHEx_DATAEEPROM_DisableFixedTimeProgram:
 1723              	.LFB85:
 923:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 1724              		.loc 1 923 0
 1725              		.cfi_startproc
 1726              		@ args = 0, pretend = 0, frame = 0
 1727              		@ frame_needed = 0, uses_anonymous_args = 0
 1728              		@ link register save eliminated.
 924:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** }
 1729              		.loc 1 924 0
 1730 0000 024A     		ldr	r2, .L177
 1731 0002 5368     		ldr	r3, [r2, #4]
 1732 0004 23F48073 		bic	r3, r3, #256
 1733 0008 5360     		str	r3, [r2, #4]
 1734 000a 7047     		bx	lr
 1735              	.L178:
 1736              		.align	2
 1737              	.L177:
 1738 000c 003C0240 		.word	1073888256
 1739              		.cfi_endproc
 1740              	.LFE85:
 1742              		.section	.text.FLASH_PageErase,"ax",%progbits
 1743              		.align	1
 1744              		.global	FLASH_PageErase
 1745              		.syntax unified
 1746              		.thumb
 1747              		.thumb_func
 1748              		.fpu softvfp
 1750              	FLASH_PageErase:
 1751              	.LFB101:
1820:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1821:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
1822:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @}
1823:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
1824:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1825:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
1826:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @}
1827:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
1828:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1829:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /** @addtogroup FLASH
1830:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @{
1831:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
1832:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1833:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1834:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /** @addtogroup FLASH_Private_Functions
1835:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  * @{
1836:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****  */
1837:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1838:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** /**
1839:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @brief  Erases a specified page in program memory.
ARM GAS  /tmp/cc6rDylt.s 			page 84


1840:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @param  PageAddress The page address in program memory to be erased.
1841:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @note   A Page is erased in the Program memory only if the address to load 
1842:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *         is the start address of a page (multiple of @ref FLASH_PAGE_SIZE bytes).
1843:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   * @retval None
1844:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   */
1845:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** void FLASH_PageErase(uint32_t PageAddress)
1846:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** {
 1752              		.loc 1 1846 0
 1753              		.cfi_startproc
 1754              		@ args = 0, pretend = 0, frame = 0
 1755              		@ frame_needed = 0, uses_anonymous_args = 0
 1756              		@ link register save eliminated.
 1757              	.LVL234:
1847:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Clean the error context */
1848:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 1758              		.loc 1 1848 0
 1759 0000 0021     		movs	r1, #0
 1760 0002 074B     		ldr	r3, .L180
 1761 0004 5961     		str	r1, [r3, #20]
1849:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1850:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Set the ERASE bit */
1851:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   SET_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 1762              		.loc 1 1851 0
 1763 0006 074B     		ldr	r3, .L180+4
 1764 0008 5A68     		ldr	r2, [r3, #4]
 1765 000a 42F40072 		orr	r2, r2, #512
 1766 000e 5A60     		str	r2, [r3, #4]
1852:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1853:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Set PROG bit */
1854:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   SET_BIT(FLASH->PECR, FLASH_PECR_PROG);
 1767              		.loc 1 1854 0
 1768 0010 5A68     		ldr	r2, [r3, #4]
 1769 0012 42F00802 		orr	r2, r2, #8
 1770 0016 5A60     		str	r2, [r3, #4]
1855:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
1856:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   /* Write 00000000h to the first word of the program page to erase */
1857:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   *(__IO uint32_t *)(uint32_t)(PageAddress & ~(FLASH_PAGE_SIZE - 1)) = 0x00000000;
 1771              		.loc 1 1857 0
 1772 0018 20F0FF00 		bic	r0, r0, #255
 1773              	.LVL235:
 1774 001c 0160     		str	r1, [r0]
 1775 001e 7047     		bx	lr
 1776              	.L181:
 1777              		.align	2
 1778              	.L180:
 1779 0020 00000000 		.word	pFlash
 1780 0024 003C0240 		.word	1073888256
 1781              		.cfi_endproc
 1782              	.LFE101:
 1784              		.section	.text.HAL_FLASHEx_Erase,"ax",%progbits
 1785              		.align	1
 1786              		.global	HAL_FLASHEx_Erase
 1787              		.syntax unified
 1788              		.thumb
 1789              		.thumb_func
 1790              		.fpu softvfp
 1792              	HAL_FLASHEx_Erase:
ARM GAS  /tmp/cc6rDylt.s 			page 85


 1793              	.LFB72:
 188:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 1794              		.loc 1 188 0
 1795              		.cfi_startproc
 1796              		@ args = 0, pretend = 0, frame = 0
 1797              		@ frame_needed = 0, uses_anonymous_args = 0
 1798              	.LVL236:
 193:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1799              		.loc 1 193 0
 1800 0000 1B4B     		ldr	r3, .L195
 1801 0002 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 1802 0004 012B     		cmp	r3, #1
 1803 0006 02D1     		bne	.L193
 1804 0008 0221     		movs	r1, #2
 1805              	.LVL237:
 266:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1806              		.loc 1 266 0
 1807 000a 0846     		mov	r0, r1
 1808              	.LVL238:
 1809 000c 7047     		bx	lr
 1810              	.LVL239:
 1811              	.L193:
 188:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 1812              		.loc 1 188 0 discriminator 2
 1813 000e 70B5     		push	{r4, r5, r6, lr}
 1814              	.LCFI21:
 1815              		.cfi_def_cfa_offset 16
 1816              		.cfi_offset 4, -16
 1817              		.cfi_offset 5, -12
 1818              		.cfi_offset 6, -8
 1819              		.cfi_offset 14, -4
 1820 0010 0E46     		mov	r6, r1
 1821 0012 0546     		mov	r5, r0
 193:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1822              		.loc 1 193 0 discriminator 2
 1823 0014 0122     		movs	r2, #1
 1824 0016 164B     		ldr	r3, .L195
 1825 0018 1A74     		strb	r2, [r3, #16]
 196:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1826              		.loc 1 196 0 discriminator 2
 1827 001a 4CF25030 		movw	r0, #50000
 1828              	.LVL240:
 1829 001e FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1830              	.LVL241:
 198:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 1831              		.loc 1 198 0 discriminator 2
 1832 0022 0146     		mov	r1, r0
 1833 0024 F8B9     		cbnz	r0, .L184
 201:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1834              		.loc 1 201 0
 1835 0026 4FF0FF33 		mov	r3, #-1
 1836 002a 3360     		str	r3, [r6]
 240:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 1837              		.loc 1 240 0
 1838 002c 6C68     		ldr	r4, [r5, #4]
 1839              	.LVL242:
 1840              	.L185:
ARM GAS  /tmp/cc6rDylt.s 			page 86


 241:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         address += FLASH_PAGE_SIZE)
 1841              		.loc 1 241 0 discriminator 1
 1842 002e AA68     		ldr	r2, [r5, #8]
 1843 0030 6B68     		ldr	r3, [r5, #4]
 1844 0032 03EB0223 		add	r3, r3, r2, lsl #8
 240:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 1845              		.loc 1 240 0 discriminator 1
 1846 0036 9C42     		cmp	r4, r3
 1847 0038 15D2     		bcs	.L184
 244:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1848              		.loc 1 244 0
 1849 003a 2046     		mov	r0, r4
 1850 003c FFF7FEFF 		bl	FLASH_PageErase
 1851              	.LVL243:
 247:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1852              		.loc 1 247 0
 1853 0040 4CF25030 		movw	r0, #50000
 1854 0044 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1855              	.LVL244:
 250:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 1856              		.loc 1 250 0
 1857 0048 0A4B     		ldr	r3, .L195+4
 1858 004a 5A68     		ldr	r2, [r3, #4]
 1859 004c 22F00802 		bic	r2, r2, #8
 1860 0050 5A60     		str	r2, [r3, #4]
 251:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1861              		.loc 1 251 0
 1862 0052 5A68     		ldr	r2, [r3, #4]
 1863 0054 22F40072 		bic	r2, r2, #512
 1864 0058 5A60     		str	r2, [r3, #4]
 253:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****       {
 1865              		.loc 1 253 0
 1866 005a 0146     		mov	r1, r0
 1867 005c 10B9     		cbnz	r0, .L194
 242:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     {
 1868              		.loc 1 242 0
 1869 005e 04F58074 		add	r4, r4, #256
 1870              	.LVL245:
 1871 0062 E4E7     		b	.L185
 1872              	.L194:
 256:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****         break;
 1873              		.loc 1 256 0
 1874 0064 3460     		str	r4, [r6]
 1875              	.LVL246:
 1876              	.L184:
 263:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1877              		.loc 1 263 0
 1878 0066 0022     		movs	r2, #0
 1879 0068 014B     		ldr	r3, .L195
 1880 006a 1A74     		strb	r2, [r3, #16]
 266:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1881              		.loc 1 266 0
 1882 006c 0846     		mov	r0, r1
 1883 006e 70BD     		pop	{r4, r5, r6, pc}
 1884              	.LVL247:
 1885              	.L196:
 1886              		.align	2
ARM GAS  /tmp/cc6rDylt.s 			page 87


 1887              	.L195:
 1888 0070 00000000 		.word	pFlash
 1889 0074 003C0240 		.word	1073888256
 1890              		.cfi_endproc
 1891              	.LFE72:
 1893              		.section	.text.HAL_FLASHEx_Erase_IT,"ax",%progbits
 1894              		.align	1
 1895              		.global	HAL_FLASHEx_Erase_IT
 1896              		.syntax unified
 1897              		.thumb
 1898              		.thumb_func
 1899              		.fpu softvfp
 1901              	HAL_FLASHEx_Erase_IT:
 1902              	.LFB73:
 284:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 1903              		.loc 1 284 0
 1904              		.cfi_startproc
 1905              		@ args = 0, pretend = 0, frame = 0
 1906              		@ frame_needed = 0, uses_anonymous_args = 0
 1907              	.LVL248:
 1908 0000 38B5     		push	{r3, r4, r5, lr}
 1909              	.LCFI22:
 1910              		.cfi_def_cfa_offset 16
 1911              		.cfi_offset 3, -16
 1912              		.cfi_offset 4, -12
 1913              		.cfi_offset 5, -8
 1914              		.cfi_offset 14, -4
 1915              	.LVL249:
 288:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 1916              		.loc 1 288 0
 1917 0002 154B     		ldr	r3, .L205
 1918 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1919 0006 23BB     		cbnz	r3, .L200
 300:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1920              		.loc 1 300 0
 1921 0008 134B     		ldr	r3, .L205
 1922 000a 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 1923 000c 012B     		cmp	r3, #1
 1924 000e 02D1     		bne	.L203
 1925 0010 0224     		movs	r4, #2
 1926              	.LVL250:
 1927              	.L198:
 354:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1928              		.loc 1 354 0
 1929 0012 2046     		mov	r0, r4
 1930 0014 38BD     		pop	{r3, r4, r5, pc}
 1931              	.LVL251:
 1932              	.L203:
 1933 0016 0546     		mov	r5, r0
 300:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1934              		.loc 1 300 0 discriminator 2
 1935 0018 0122     		movs	r2, #1
 1936 001a 0F4B     		ldr	r3, .L205
 1937 001c 1A74     		strb	r2, [r3, #16]
 333:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   
 1938              		.loc 1 333 0 discriminator 2
 1939 001e 4CF25030 		movw	r0, #50000
ARM GAS  /tmp/cc6rDylt.s 			page 88


 1940              	.LVL252:
 1941 0022 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1942              	.LVL253:
 335:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   {
 1943              		.loc 1 335 0 discriminator 2
 1944 0026 0446     		mov	r4, r0
 1945 0028 18B1     		cbz	r0, .L204
 350:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 1946              		.loc 1 350 0
 1947 002a 0022     		movs	r2, #0
 1948 002c 0A4B     		ldr	r3, .L205
 1949 002e 1A74     		strb	r2, [r3, #16]
 1950 0030 EFE7     		b	.L198
 1951              	.L204:
 338:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     
 1952              		.loc 1 338 0
 1953 0032 0A4A     		ldr	r2, .L205+4
 1954 0034 5368     		ldr	r3, [r2, #4]
 1955 0036 43F44033 		orr	r3, r3, #196608
 1956 003a 5360     		str	r3, [r2, #4]
 340:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     pFlash.NbPagesToErase = pEraseInit->NbPages;
 1957              		.loc 1 340 0
 1958 003c 064B     		ldr	r3, .L205
 1959 003e 0122     		movs	r2, #1
 1960 0040 1A70     		strb	r2, [r3]
 341:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****     pFlash.Page = pEraseInit->PageAddress;
 1961              		.loc 1 341 0
 1962 0042 AA68     		ldr	r2, [r5, #8]
 1963 0044 5A60     		str	r2, [r3, #4]
 342:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c **** 
 1964              		.loc 1 342 0
 1965 0046 6A68     		ldr	r2, [r5, #4]
 1966 0048 DA60     		str	r2, [r3, #12]
 345:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 1967              		.loc 1 345 0
 1968 004a 6868     		ldr	r0, [r5, #4]
 1969              	.LVL254:
 1970 004c FFF7FEFF 		bl	FLASH_PageErase
 1971              	.LVL255:
 1972 0050 DFE7     		b	.L198
 1973              	.LVL256:
 1974              	.L200:
 290:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_flash_ex.c ****   }
 1975              		.loc 1 290 0
 1976 0052 0124     		movs	r4, #1
 1977 0054 DDE7     		b	.L198
 1978              	.L206:
 1979 0056 00BF     		.align	2
 1980              	.L205:
 1981 0058 00000000 		.word	pFlash
 1982 005c 003C0240 		.word	1073888256
 1983              		.cfi_endproc
 1984              	.LFE73:
 1986              		.text
 1987              	.Letext0:
 1988              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 1989              		.file 4 "/usr/include/newlib/sys/_stdint.h"
ARM GAS  /tmp/cc6rDylt.s 			page 89


 1990              		.file 5 "..//Source/stm/lib/CMSIS/Include/core_cm3.h"
 1991              		.file 6 "..//Source/stm/lib/CMSIS/Device/ST/STM32L1xx/Include/system_stm32l1xx.h"
 1992              		.file 7 "..//Source/stm/lib/CMSIS/Device/ST/STM32L1xx/Include/stm32l151xba.h"
 1993              		.file 8 "..//Source/stm/lib/CMSIS/Device/ST/STM32L1xx/Include/stm32l1xx.h"
 1994              		.file 9 "..//Source/stm/lib/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal_def.h"
 1995              		.file 10 "..//Source/stm/lib/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal_flash.h"
 1996              		.file 11 "..//Source/stm/lib/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal_flash_ex.h"
 1997              		.file 12 "..//Source/stm/lib/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal.h"
ARM GAS  /tmp/cc6rDylt.s 			page 90


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32l1xx_hal_flash_ex.c
     /tmp/cc6rDylt.s:16     .text.FLASH_OB_GetUser:0000000000000000 $t
     /tmp/cc6rDylt.s:22     .text.FLASH_OB_GetUser:0000000000000000 FLASH_OB_GetUser
     /tmp/cc6rDylt.s:40     .text.FLASH_OB_GetUser:000000000000000c $d
     /tmp/cc6rDylt.s:45     .text.FLASH_OB_GetRDP:0000000000000000 $t
     /tmp/cc6rDylt.s:51     .text.FLASH_OB_GetRDP:0000000000000000 FLASH_OB_GetRDP
     /tmp/cc6rDylt.s:78     .text.FLASH_OB_GetRDP:0000000000000014 $d
     /tmp/cc6rDylt.s:83     .text.FLASH_OB_GetBOR:0000000000000000 $t
     /tmp/cc6rDylt.s:89     .text.FLASH_OB_GetBOR:0000000000000000 FLASH_OB_GetBOR
     /tmp/cc6rDylt.s:105    .text.FLASH_OB_GetBOR:000000000000000c $d
     /tmp/cc6rDylt.s:110    .text.FLASH_OB_WRPConfigWRP1OrPCROP1:0000000000000000 $t
     /tmp/cc6rDylt.s:116    .text.FLASH_OB_WRPConfigWRP1OrPCROP1:0000000000000000 FLASH_OB_WRPConfigWRP1OrPCROP1
     /tmp/cc6rDylt.s:187    .text.FLASH_OB_WRPConfigWRP1OrPCROP1:0000000000000048 $d
     /tmp/cc6rDylt.s:192    .text.FLASH_OB_WRPConfig:0000000000000000 $t
     /tmp/cc6rDylt.s:198    .text.FLASH_OB_WRPConfig:0000000000000000 FLASH_OB_WRPConfig
     /tmp/cc6rDylt.s:252    .text.FLASH_OB_WRPConfig:0000000000000034 $d
     /tmp/cc6rDylt.s:257    .text.FLASH_OB_RDPConfig:0000000000000000 $t
     /tmp/cc6rDylt.s:263    .text.FLASH_OB_RDPConfig:0000000000000000 FLASH_OB_RDPConfig
     /tmp/cc6rDylt.s:352    .text.FLASH_OB_RDPConfig:000000000000004c $d
     /tmp/cc6rDylt.s:358    .text.FLASH_OB_UserConfig:0000000000000000 $t
     /tmp/cc6rDylt.s:364    .text.FLASH_OB_UserConfig:0000000000000000 FLASH_OB_UserConfig
     /tmp/cc6rDylt.s:428    .text.FLASH_OB_UserConfig:0000000000000040 $d
     /tmp/cc6rDylt.s:434    .text.FLASH_OB_BORConfig:0000000000000000 $t
     /tmp/cc6rDylt.s:440    .text.FLASH_OB_BORConfig:0000000000000000 FLASH_OB_BORConfig
     /tmp/cc6rDylt.s:500    .text.FLASH_OB_BORConfig:000000000000003c $d
     /tmp/cc6rDylt.s:506    .text.FLASH_OB_PCROPConfig:0000000000000000 $t
     /tmp/cc6rDylt.s:512    .text.FLASH_OB_PCROPConfig:0000000000000000 FLASH_OB_PCROPConfig
     /tmp/cc6rDylt.s:573    .text.FLASH_OB_PCROPConfig:0000000000000034 $d
     /tmp/cc6rDylt.s:578    .text.FLASH_DATAEEPROM_ProgramWord:0000000000000000 $t
     /tmp/cc6rDylt.s:584    .text.FLASH_DATAEEPROM_ProgramWord:0000000000000000 FLASH_DATAEEPROM_ProgramWord
     /tmp/cc6rDylt.s:630    .text.FLASH_DATAEEPROM_ProgramHalfWord:0000000000000000 $t
     /tmp/cc6rDylt.s:636    .text.FLASH_DATAEEPROM_ProgramHalfWord:0000000000000000 FLASH_DATAEEPROM_ProgramHalfWord
     /tmp/cc6rDylt.s:682    .text.FLASH_DATAEEPROM_ProgramByte:0000000000000000 $t
     /tmp/cc6rDylt.s:688    .text.FLASH_DATAEEPROM_ProgramByte:0000000000000000 FLASH_DATAEEPROM_ProgramByte
     /tmp/cc6rDylt.s:734    .text.FLASH_DATAEEPROM_FastProgramByte:0000000000000000 $t
     /tmp/cc6rDylt.s:740    .text.FLASH_DATAEEPROM_FastProgramByte:0000000000000000 FLASH_DATAEEPROM_FastProgramByte
     /tmp/cc6rDylt.s:790    .text.FLASH_DATAEEPROM_FastProgramByte:0000000000000030 $d
     /tmp/cc6rDylt.s:795    .text.FLASH_DATAEEPROM_FastProgramHalfWord:0000000000000000 $t
     /tmp/cc6rDylt.s:801    .text.FLASH_DATAEEPROM_FastProgramHalfWord:0000000000000000 FLASH_DATAEEPROM_FastProgramHalfWord
     /tmp/cc6rDylt.s:851    .text.FLASH_DATAEEPROM_FastProgramHalfWord:0000000000000030 $d
     /tmp/cc6rDylt.s:856    .text.FLASH_DATAEEPROM_FastProgramWord:0000000000000000 $t
     /tmp/cc6rDylt.s:862    .text.FLASH_DATAEEPROM_FastProgramWord:0000000000000000 FLASH_DATAEEPROM_FastProgramWord
     /tmp/cc6rDylt.s:912    .text.FLASH_DATAEEPROM_FastProgramWord:0000000000000030 $d
     /tmp/cc6rDylt.s:917    .text.HAL_FLASHEx_OBProgram:0000000000000000 $t
     /tmp/cc6rDylt.s:924    .text.HAL_FLASHEx_OBProgram:0000000000000000 HAL_FLASHEx_OBProgram
     /tmp/cc6rDylt.s:1078   .text.HAL_FLASHEx_OBProgram:00000000000000b0 $d
     /tmp/cc6rDylt.s:1083   .text.HAL_FLASHEx_OBGetConfig:0000000000000000 $t
     /tmp/cc6rDylt.s:1090   .text.HAL_FLASHEx_OBGetConfig:0000000000000000 HAL_FLASHEx_OBGetConfig
     /tmp/cc6rDylt.s:1127   .text.HAL_FLASHEx_OBGetConfig:0000000000000024 $d
     /tmp/cc6rDylt.s:1132   .text.HAL_FLASHEx_AdvOBProgram:0000000000000000 $t
     /tmp/cc6rDylt.s:1139   .text.HAL_FLASHEx_AdvOBProgram:0000000000000000 HAL_FLASHEx_AdvOBProgram
     /tmp/cc6rDylt.s:1183   .text.HAL_FLASHEx_AdvOBGetConfig:0000000000000000 $t
     /tmp/cc6rDylt.s:1190   .text.HAL_FLASHEx_AdvOBGetConfig:0000000000000000 HAL_FLASHEx_AdvOBGetConfig
     /tmp/cc6rDylt.s:1231   .text.HAL_FLASHEx_AdvOBGetConfig:0000000000000024 $d
     /tmp/cc6rDylt.s:1236   .text.HAL_FLASHEx_OB_SelectPCROP:0000000000000000 $t
     /tmp/cc6rDylt.s:1243   .text.HAL_FLASHEx_OB_SelectPCROP:0000000000000000 HAL_FLASHEx_OB_SelectPCROP
ARM GAS  /tmp/cc6rDylt.s 			page 91


     /tmp/cc6rDylt.s:1302   .text.HAL_FLASHEx_OB_SelectPCROP:000000000000003c $d
     /tmp/cc6rDylt.s:1308   .text.HAL_FLASHEx_OB_DeSelectPCROP:0000000000000000 $t
     /tmp/cc6rDylt.s:1315   .text.HAL_FLASHEx_OB_DeSelectPCROP:0000000000000000 HAL_FLASHEx_OB_DeSelectPCROP
     /tmp/cc6rDylt.s:1372   .text.HAL_FLASHEx_OB_DeSelectPCROP:000000000000003c $d
     /tmp/cc6rDylt.s:1378   .text.HAL_FLASHEx_DATAEEPROM_Unlock:0000000000000000 $t
     /tmp/cc6rDylt.s:1385   .text.HAL_FLASHEx_DATAEEPROM_Unlock:0000000000000000 HAL_FLASHEx_DATAEEPROM_Unlock
     /tmp/cc6rDylt.s:1415   .text.HAL_FLASHEx_DATAEEPROM_Unlock:000000000000001c $d
     /tmp/cc6rDylt.s:1422   .text.HAL_FLASHEx_DATAEEPROM_Lock:0000000000000000 $t
     /tmp/cc6rDylt.s:1429   .text.HAL_FLASHEx_DATAEEPROM_Lock:0000000000000000 HAL_FLASHEx_DATAEEPROM_Lock
     /tmp/cc6rDylt.s:1447   .text.HAL_FLASHEx_DATAEEPROM_Lock:0000000000000010 $d
     /tmp/cc6rDylt.s:1452   .text.HAL_FLASHEx_DATAEEPROM_Erase:0000000000000000 $t
     /tmp/cc6rDylt.s:1459   .text.HAL_FLASHEx_DATAEEPROM_Erase:0000000000000000 HAL_FLASHEx_DATAEEPROM_Erase
     /tmp/cc6rDylt.s:1526   .text.HAL_FLASHEx_DATAEEPROM_Erase:0000000000000040 $d
     /tmp/cc6rDylt.s:1531   .text.HAL_FLASHEx_DATAEEPROM_Program:0000000000000000 $t
     /tmp/cc6rDylt.s:1538   .text.HAL_FLASHEx_DATAEEPROM_Program:0000000000000000 HAL_FLASHEx_DATAEEPROM_Program
     /tmp/cc6rDylt.s:1682   .text.HAL_FLASHEx_DATAEEPROM_Program:0000000000000098 $d
     /tmp/cc6rDylt.s:1687   .text.HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram:0000000000000000 $t
     /tmp/cc6rDylt.s:1694   .text.HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram:0000000000000000 HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram
     /tmp/cc6rDylt.s:1710   .text.HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram:000000000000000c $d
     /tmp/cc6rDylt.s:1715   .text.HAL_FLASHEx_DATAEEPROM_DisableFixedTimeProgram:0000000000000000 $t
     /tmp/cc6rDylt.s:1722   .text.HAL_FLASHEx_DATAEEPROM_DisableFixedTimeProgram:0000000000000000 HAL_FLASHEx_DATAEEPROM_DisableFixedTimeProgram
     /tmp/cc6rDylt.s:1738   .text.HAL_FLASHEx_DATAEEPROM_DisableFixedTimeProgram:000000000000000c $d
     /tmp/cc6rDylt.s:1743   .text.FLASH_PageErase:0000000000000000 $t
     /tmp/cc6rDylt.s:1750   .text.FLASH_PageErase:0000000000000000 FLASH_PageErase
     /tmp/cc6rDylt.s:1779   .text.FLASH_PageErase:0000000000000020 $d
     /tmp/cc6rDylt.s:1785   .text.HAL_FLASHEx_Erase:0000000000000000 $t
     /tmp/cc6rDylt.s:1792   .text.HAL_FLASHEx_Erase:0000000000000000 HAL_FLASHEx_Erase
     /tmp/cc6rDylt.s:1888   .text.HAL_FLASHEx_Erase:0000000000000070 $d
     /tmp/cc6rDylt.s:1894   .text.HAL_FLASHEx_Erase_IT:0000000000000000 $t
     /tmp/cc6rDylt.s:1901   .text.HAL_FLASHEx_Erase_IT:0000000000000000 HAL_FLASHEx_Erase_IT
     /tmp/cc6rDylt.s:1981   .text.HAL_FLASHEx_Erase_IT:0000000000000058 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
FLASH_WaitForLastOperation
pFlash
