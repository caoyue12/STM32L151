ARM GAS  /tmp/ccWJ882I.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"rtc-board.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.RtcCheckCalendarRollOver,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	RtcCheckCalendarRollOver:
  23              	.LFB87:
  24              		.file 1 "..//Source/stm/board/board_stm32l151cd/rtc-board.c"
   1:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** /*!
   2:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  * \file      rtc-board.c
   3:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  *
   4:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  * \brief     Target board RTC timer and low power modes management
   5:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  *
   6:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  * \copyright Revised BSD License, see section \ref LICENSE.
   7:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  *
   8:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  * \code
   9:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  *                ______                              _
  10:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  *               / _____)             _              | |
  11:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  *              ( (____  _____ ____ _| |_ _____  ____| |__
  12:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  *               \____ \| ___ |    (_   _) ___ |/ ___)  _ \
  13:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  *               _____) ) ____| | | || |_| ____( (___| | | |
  14:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  *              (______/|_____)_|_|_| \__)_____)\____)_| |_|
  15:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  *              (C)2013-2017 Semtech
  16:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  *
  17:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  * \endcode
  18:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  *
  19:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  * \author    Miguel Luis ( Semtech )
  20:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  *
  21:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  * \author    Gregory Cristian ( Semtech )
  22:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  */
  23:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** #include <math.h>
  24:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** #include "stm32l1xx.h"
  25:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** #include "utilities.h"
  26:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** #include "board.h"
  27:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** #include "timer.h"
  28:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** #include "gpio.h"
  29:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** #include "rtc-board.h"
  30:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
  31:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** /*!
  32:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  * RTC Time base in ms
  33:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  */
  34:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** #define RTC_ALARM_TICK_DURATION                     0.48828125      // 1 tick every 488us
ARM GAS  /tmp/ccWJ882I.s 			page 2


  35:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** #define RTC_ALARM_TICK_PER_MS                       2.048           // 1/2.048 = tick duration in m
  36:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
  37:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** /*!
  38:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  * Maximum number of days (with some margin) that can be handled by the RTC alarm counter before ov
  39:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  */
  40:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** #define RTC_ALARM_MAX_NUMBER_OF_DAYS                27
  41:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
  42:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** /*!
  43:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  * Number of seconds in a minute
  44:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  */
  45:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** static const uint8_t SecondsInMinute = 60;
  46:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
  47:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** /*!
  48:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  * Number of seconds in an hour
  49:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  */
  50:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** static const uint16_t SecondsInHour = 3600;
  51:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
  52:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** /*!
  53:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  * Number of seconds in a day
  54:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  */
  55:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** static const uint32_t SecondsInDay = 86400;
  56:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
  57:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** /*!
  58:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  * Number of hours in a day
  59:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  */
  60:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** static const uint8_t HoursInDay = 24;
  61:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
  62:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** /*!
  63:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  * Number of seconds in a leap year
  64:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  */
  65:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** static const uint32_t SecondsInLeapYear = 31622400;
  66:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
  67:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** /*!
  68:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  * Number of seconds in a year
  69:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  */
  70:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** static const uint32_t SecondsInYear = 31536000;
  71:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
  72:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** /*!
  73:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  * Number of days in each month on a normal year
  74:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  */
  75:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** static const uint8_t DaysInMonth[] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
  76:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
  77:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** /*!
  78:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  * Number of days in each month on a leap year
  79:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  */
  80:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** static const uint8_t DaysInMonthLeapYear[] = { 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
  81:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
  82:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** /*!
  83:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  * Holds the current century for real time computation
  84:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  */
  85:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** static uint16_t Century = 0;
  86:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
  87:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** /*!
  88:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  * Holds the previous century for centruy wrapping
  89:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  */
  90:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** static uint16_t PreviousCentury = 0;
  91:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
ARM GAS  /tmp/ccWJ882I.s 			page 3


  92:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** /*!
  93:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  * Flag used to indicates a Calendar Roll Over is about to happen
  94:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  */
  95:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** static bool CalendarRollOverReady = false;
  96:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
  97:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** /*!
  98:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  * Flag used to indicates a the MCU has waken-up from an external IRQ
  99:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  */
 100:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** volatile bool NonScheduledWakeUp = false;
 101:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 102:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** /*!
 103:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  * RTC timer context
 104:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  */
 105:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** typedef struct RtcCalendar_s
 106:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** {
 107:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     uint16_t CalendarCentury;     //! Keep track of century value
 108:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     RTC_DateTypeDef CalendarDate; //! Reference time in calendar format
 109:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     RTC_TimeTypeDef CalendarTime; //! Reference date in calendar format
 110:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** } RtcCalendar_t;
 111:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 112:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** /*!
 113:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  * Current RTC timer context
 114:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  */
 115:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** RtcCalendar_t RtcCalendarContext;
 116:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 117:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** /*!
 118:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  * \brief Flag to indicate if the timestamp until the next event is long enough
 119:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  * to set the MCU into low power mode
 120:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  */
 121:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** static bool RtcTimerEventAllowsLowPower = false;
 122:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 123:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** /*!
 124:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  * \brief Flag to disable the low power mode even if the timestamp until the
 125:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  * next event is long enough to allow low power mode
 126:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  */
 127:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** static bool LowPowerDisableDuringTask = false;
 128:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 129:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** /*!
 130:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  * \brief RTC Handler
 131:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  */
 132:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** RTC_HandleTypeDef RtcHandle = { 0 };
 133:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 134:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** /*!
 135:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  * \brief Indicates if the RTC is already Initialized or not
 136:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  */
 137:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** static bool RtcInitialized = false;
 138:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 139:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** /*!
 140:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  * \brief Indicates if the RTC Wake Up Time is calibrated or not
 141:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  */
 142:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** static bool WakeUpTimeInitialized = false;
 143:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 144:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** /*!
 145:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  * \brief Hold the Wake-up time duration in ms
 146:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  */
 147:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** volatile uint32_t McuWakeUpTime = 0;
 148:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
ARM GAS  /tmp/ccWJ882I.s 			page 4


 149:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** /*!
 150:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  * \brief Hold the cumulated error in micro-second to compensate the timing errors
 151:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  */
 152:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** static int32_t TimeoutValueError = 0;
 153:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 154:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** /*!
 155:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  * \brief RTC wakeup time computation
 156:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  */
 157:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** static void RtcComputeWakeUpTime( void );
 158:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 159:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** /*!
 160:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  * \brief Start the RTC Alarm (timeoutValue is in ms)
 161:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  */
 162:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** static void RtcStartWakeUpAlarm( uint32_t timeoutValue );
 163:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 164:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** /*!
 165:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  * \brief Converts a TimerTime_t value into RtcCalendar_t value
 166:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  *
 167:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  * \param[IN] timeCounter Value to convert to RTC calendar
 168:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  * \retval rtcCalendar New RTC calendar value
 169:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  */
 170:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** //
 171:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** // REMARK: Removed function static attribute in order to suppress
 172:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** //         "#177-D function was declared but never referenced" warning.
 173:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** // static RtcCalendar_t RtcConvertTimerTimeToCalendarTick( TimerTime_t timeCounter )
 174:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** //
 175:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** RtcCalendar_t RtcConvertTimerTimeToCalendarTick( TimerTime_t timeCounter );
 176:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 177:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** /*!
 178:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  * \brief Converts a RtcCalendar_t value into TimerTime_t value
 179:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  *
 180:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  * \param[IN/OUT] calendar Calendar value to be converted
 181:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  *                         [NULL: compute from "now",
 182:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  *                          Others: compute from given calendar value]
 183:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  * \retval timerTime New TimerTime_t value
 184:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  */
 185:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** static TimerTime_t RtcConvertCalendarTickToTimerTime( RtcCalendar_t *calendar );
 186:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 187:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** /*!
 188:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  * \brief Converts a TimerTime_t value into a value for the RTC Alarm
 189:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  *
 190:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  * \param[IN] timeCounter Value in ms to convert into a calendar alarm date
 191:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  * \param[IN] now Current RTC calendar context
 192:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  * \retval rtcCalendar Value for the RTC Alarm
 193:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  */
 194:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** static RtcCalendar_t RtcComputeTimerTimeToAlarmTick( TimerTime_t timeCounter, RtcCalendar_t now );
 195:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 196:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** /*!
 197:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  * \brief Returns the internal RTC Calendar and check for RTC overflow
 198:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  *
 199:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  * \retval calendar RTC calendar
 200:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  */
 201:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** static RtcCalendar_t RtcGetCalendar( void );
 202:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 203:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** /*!
 204:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  * \brief Check the status for the calendar year to increase the value of Century at the overflow o
 205:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  *
ARM GAS  /tmp/ccWJ882I.s 			page 5


 206:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  * \param[IN] year Calendar current year
 207:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  */
 208:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** static void RtcCheckCalendarRollOver( uint8_t year );
 209:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 210:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** void RtcInit( void )
 211:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** {
 212:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     RtcCalendar_t rtcInit;
 213:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 214:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     if( RtcInitialized == false )
 215:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 216:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         __HAL_RCC_RTC_ENABLE( );
 217:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 218:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         RtcHandle.Instance = RTC;
 219:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 220:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 221:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         RtcHandle.Init.AsynchPrediv = 3;
 222:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         RtcHandle.Init.SynchPrediv = 3;
 223:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 224:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 225:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 226:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 227:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         HAL_RTC_Init( &RtcHandle );
 228:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 229:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         // Set Date: Friday 1st of January 2000
 230:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         rtcInit.CalendarDate.Year = 0;
 231:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         rtcInit.CalendarDate.Month = 1;
 232:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         rtcInit.CalendarDate.Date = 1;
 233:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         rtcInit.CalendarDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 234:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         HAL_RTC_SetDate( &RtcHandle, &rtcInit.CalendarDate, RTC_FORMAT_BIN );
 235:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 236:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         // Set Time: 00:00:00
 237:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         rtcInit.CalendarTime.Hours = 0;
 238:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         rtcInit.CalendarTime.Minutes = 0;
 239:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         rtcInit.CalendarTime.Seconds = 0;
 240:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         rtcInit.CalendarTime.TimeFormat = RTC_HOURFORMAT12_AM;
 241:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         rtcInit.CalendarTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 242:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         rtcInit.CalendarTime.StoreOperation = RTC_STOREOPERATION_RESET;
 243:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         HAL_RTC_SetTime( &RtcHandle, &rtcInit.CalendarTime, RTC_FORMAT_BIN );
 244:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 245:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         HAL_NVIC_SetPriority( RTC_Alarm_IRQn, 4, 0 );
 246:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         HAL_NVIC_EnableIRQ( RTC_Alarm_IRQn );
 247:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         RtcInitialized = true;
 248:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 249:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** }
 250:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 251:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** void RtcSetTimeout( uint32_t timeout )
 252:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** {
 253:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     RtcStartWakeUpAlarm( timeout );
 254:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** }
 255:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 256:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** TimerTime_t RtcGetAdjustedTimeoutValue( uint32_t timeout )
 257:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** {
 258:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     if( timeout > McuWakeUpTime )
 259:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {   // we have waken up from a GPIO and we have lost "McuWakeUpTime" that we need to compensate
 260:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         if( NonScheduledWakeUp == true )
 261:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         {
 262:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****             NonScheduledWakeUp = false;
ARM GAS  /tmp/ccWJ882I.s 			page 6


 263:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****             timeout -= McuWakeUpTime;
 264:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         }
 265:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 266:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 267:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     if( timeout > McuWakeUpTime )
 268:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {   // we don't go in low power mode for delay below 50ms (needed for LEDs)
 269:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         if( timeout < 50 ) // 50 ms
 270:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         {
 271:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****             RtcTimerEventAllowsLowPower = false;
 272:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         }
 273:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         else
 274:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         {
 275:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****             RtcTimerEventAllowsLowPower = true;
 276:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****             timeout -= McuWakeUpTime;
 277:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         }
 278:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 279:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     return  timeout;
 280:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** }
 281:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 282:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** TimerTime_t RtcGetTimerValue( void )
 283:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** {
 284:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     return( RtcConvertCalendarTickToTimerTime( NULL ) );
 285:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** }
 286:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 287:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** TimerTime_t RtcGetElapsedAlarmTime( void )
 288:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** {
 289:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     TimerTime_t currentTime = 0;
 290:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     TimerTime_t contextTime = 0;
 291:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 292:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     currentTime = RtcConvertCalendarTickToTimerTime( NULL );
 293:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     contextTime = RtcConvertCalendarTickToTimerTime( &RtcCalendarContext );
 294:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 295:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     if( currentTime < contextTime )
 296:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 297:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         return( currentTime + ( 0xFFFFFFFF - contextTime ) );
 298:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 299:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     else
 300:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 301:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         return( currentTime - contextTime );
 302:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 303:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** }
 304:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 305:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** TimerTime_t RtcComputeFutureEventTime( TimerTime_t futureEventInTime )
 306:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** {
 307:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     return( RtcGetTimerValue( ) + futureEventInTime );
 308:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** }
 309:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 310:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** TimerTime_t RtcComputeElapsedTime( TimerTime_t eventInTime )
 311:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** {
 312:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     TimerTime_t elapsedTime = 0;
 313:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 314:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     // Needed at boot, cannot compute with 0 or elapsed time will be equal to current time
 315:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     if( eventInTime == 0 )
 316:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 317:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         return 0;
 318:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 319:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
ARM GAS  /tmp/ccWJ882I.s 			page 7


 320:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     elapsedTime = RtcConvertCalendarTickToTimerTime( NULL );
 321:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 322:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     if( elapsedTime < eventInTime )
 323:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     { // roll over of the counter
 324:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         return( elapsedTime + ( 0xFFFFFFFF - eventInTime ) );
 325:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 326:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     else
 327:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 328:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         return( elapsedTime - eventInTime );
 329:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 330:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** }
 331:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 332:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** void BlockLowPowerDuringTask ( bool status )
 333:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** {
 334:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     if( status == true )
 335:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 336:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         RtcRecoverMcuStatus( );
 337:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 338:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     LowPowerDisableDuringTask = status;
 339:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** }
 340:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 341:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** void RtcEnterLowPowerStopMode( void )
 342:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** {
 343:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     if( ( LowPowerDisableDuringTask == false ) && ( RtcTimerEventAllowsLowPower == true ) )
 344:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 345:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         BoardDeInitMcu( );
 346:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 347:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         // Disable the Power Voltage Detector
 348:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         HAL_PWR_DisablePVD( );
 349:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 350:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         SET_BIT( PWR->CR, PWR_CR_CWUF );
 351:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 352:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         // Enable Ultra low power mode
 353:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         HAL_PWREx_EnableUltraLowPower( );
 354:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 355:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         // Enable the fast wake up from Ultra low power mode
 356:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         HAL_PWREx_EnableFastWakeUp( );
 357:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 358:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         // Enter Stop Mode
 359:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         HAL_PWR_EnterSTOPMode( PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI );
 360:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 361:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** }
 362:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 363:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** void RtcRecoverMcuStatus( void )
 364:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** {
 365:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     // PWR_FLAG_WU indicates the Alarm has waken-up the MCU
 366:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     if( __HAL_PWR_GET_FLAG( PWR_FLAG_WU ) != RESET )
 367:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 368:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         __HAL_PWR_CLEAR_FLAG( PWR_FLAG_WU );
 369:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 370:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     else
 371:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 372:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         NonScheduledWakeUp = true;
 373:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 374:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     // check the clk source and set to full speed if we are coming from sleep mode
 375:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     if( ( __HAL_RCC_GET_SYSCLK_SOURCE( ) == RCC_SYSCLKSOURCE_STATUS_HSI ) ||
 376:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         ( __HAL_RCC_GET_SYSCLK_SOURCE( ) == RCC_SYSCLKSOURCE_STATUS_MSI ) )
ARM GAS  /tmp/ccWJ882I.s 			page 8


 377:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 378:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         BoardInitMcu( );
 379:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 380:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** }
 381:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 382:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** static void RtcComputeWakeUpTime( void )
 383:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** {
 384:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     uint32_t start = 0;
 385:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     uint32_t stop = 0;
 386:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     RTC_AlarmTypeDef  alarmRtc;
 387:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     RtcCalendar_t now;
 388:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 389:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     if( WakeUpTimeInitialized == false )
 390:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 391:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         now = RtcGetCalendar( );
 392:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         HAL_RTC_GetAlarm( &RtcHandle, &alarmRtc, RTC_ALARM_A, RTC_FORMAT_BIN );
 393:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 394:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         start = alarmRtc.AlarmTime.Seconds + ( SecondsInMinute * alarmRtc.AlarmTime.Minutes ) + ( S
 395:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         stop = now.CalendarTime.Seconds + ( SecondsInMinute * now.CalendarTime.Minutes ) + ( Second
 396:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 397:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         McuWakeUpTime = ceil ( ( stop - start ) * RTC_ALARM_TICK_DURATION );
 398:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 399:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         WakeUpTimeInitialized = true;
 400:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 401:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** }
 402:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 403:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** static void RtcStartWakeUpAlarm( uint32_t timeoutValue )
 404:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** {
 405:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     RtcCalendar_t now;
 406:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     RtcCalendar_t alarmTimer;
 407:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     RTC_AlarmTypeDef alarmStructure;
 408:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 409:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     HAL_RTC_DeactivateAlarm( &RtcHandle, RTC_ALARM_A );
 410:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     HAL_RTCEx_DeactivateWakeUpTimer( &RtcHandle );
 411:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 412:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     // Load the RTC calendar
 413:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     now = RtcGetCalendar( );
 414:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 415:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     // Save the calendar into RtcCalendarContext to be able to calculate the elapsed time
 416:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     RtcCalendarContext = now;
 417:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 418:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     // timeoutValue is in ms
 419:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     alarmTimer = RtcComputeTimerTimeToAlarmTick( timeoutValue, now );
 420:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 421:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     alarmStructure.Alarm = RTC_ALARM_A;
 422:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     alarmStructure.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 423:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     alarmStructure.AlarmMask = RTC_ALARMMASK_NONE;
 424:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     alarmStructure.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 425:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 426:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     alarmStructure.AlarmTime.Seconds = alarmTimer.CalendarTime.Seconds;
 427:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     alarmStructure.AlarmTime.Minutes = alarmTimer.CalendarTime.Minutes;
 428:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     alarmStructure.AlarmTime.Hours = alarmTimer.CalendarTime.Hours;
 429:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     alarmStructure.AlarmDateWeekDay = alarmTimer.CalendarDate.Date;
 430:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 431:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     if( HAL_RTC_SetAlarm_IT( &RtcHandle, &alarmStructure, RTC_FORMAT_BIN ) != HAL_OK )
 432:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 433:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         assert_param( FAIL );
ARM GAS  /tmp/ccWJ882I.s 			page 9


 434:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 435:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** }
 436:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 437:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** static RtcCalendar_t RtcComputeTimerTimeToAlarmTick( TimerTime_t timeCounter, RtcCalendar_t now )
 438:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** {
 439:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     RtcCalendar_t calendar = now;
 440:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 441:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     uint16_t seconds = now.CalendarTime.Seconds;
 442:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     uint16_t minutes = now.CalendarTime.Minutes;
 443:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     uint16_t hours = now.CalendarTime.Hours;
 444:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     uint16_t days = now.CalendarDate.Date;
 445:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     double timeoutValueTemp = 0.0;
 446:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     double timeoutValue = 0.0;
 447:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     double error = 0.0;
 448:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 449:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     timeCounter = MIN( timeCounter, ( TimerTime_t )( RTC_ALARM_MAX_NUMBER_OF_DAYS * SecondsInDay * 
 450:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 451:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     if( timeCounter < 1 )
 452:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 453:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         timeCounter = 1;
 454:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 455:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 456:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     // timeoutValue is used for complete computation
 457:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     timeoutValue = round( timeCounter * RTC_ALARM_TICK_PER_MS );
 458:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 459:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     // timeoutValueTemp is used to compensate the cumulating errors in timing far in the future
 460:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     timeoutValueTemp =  ( double )timeCounter * RTC_ALARM_TICK_PER_MS;
 461:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 462:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     // Compute timeoutValue error
 463:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     error = timeoutValue - timeoutValueTemp;
 464:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 465:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     // Add new error value to the cumulated value in uS
 466:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     TimeoutValueError += ( error  * 1000 );
 467:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 468:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     // Correct cumulated error if greater than ( RTC_ALARM_TICK_DURATION * 1000 )
 469:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     if( TimeoutValueError >= ( int32_t )( RTC_ALARM_TICK_DURATION * 1000 ) )
 470:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 471:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         TimeoutValueError = TimeoutValueError - ( uint32_t )( RTC_ALARM_TICK_DURATION * 1000 );
 472:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         timeoutValue = timeoutValue + 1;
 473:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 474:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 475:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     // Convert milliseconds to RTC format and add to now
 476:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     while( timeoutValue >= SecondsInDay )
 477:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 478:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         timeoutValue -= SecondsInDay;
 479:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         days++;
 480:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 481:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 482:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     // Calculate hours
 483:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     while( timeoutValue >= SecondsInHour )
 484:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 485:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         timeoutValue -= SecondsInHour;
 486:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         hours++;
 487:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 488:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 489:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     // Calculate minutes
 490:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     while( timeoutValue >= SecondsInMinute )
ARM GAS  /tmp/ccWJ882I.s 			page 10


 491:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 492:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         timeoutValue -= SecondsInMinute;
 493:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         minutes++;
 494:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 495:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 496:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     // Calculate seconds
 497:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     seconds += timeoutValue;
 498:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 499:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     // Correct for modulo
 500:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     while( seconds >= 60 )
 501:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 502:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         seconds -= 60;
 503:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         minutes++;
 504:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 505:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 506:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     while( minutes >= 60 )
 507:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 508:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         minutes -= 60;
 509:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         hours++;
 510:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 511:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 512:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     while( hours >= HoursInDay )
 513:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 514:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         hours -= HoursInDay;
 515:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         days++;
 516:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 517:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 518:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     if( ( now.CalendarDate.Year == 0 ) || ( ( now.CalendarDate.Year + Century ) % 4 ) == 0 )
 519:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 520:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         if( days > DaysInMonthLeapYear[now.CalendarDate.Month - 1] )
 521:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         {
 522:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****             days = days % DaysInMonthLeapYear[now.CalendarDate.Month - 1];
 523:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         }
 524:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 525:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     else
 526:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 527:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         if( days > DaysInMonth[now.CalendarDate.Month - 1] )
 528:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         {
 529:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****             days = days % DaysInMonth[now.CalendarDate.Month - 1];
 530:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         }
 531:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 532:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 533:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     calendar.CalendarTime.Seconds = seconds;
 534:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     calendar.CalendarTime.Minutes = minutes;
 535:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     calendar.CalendarTime.Hours = hours;
 536:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     calendar.CalendarDate.Date = days;
 537:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 538:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     return calendar;
 539:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** }
 540:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 541:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** //
 542:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** // REMARK: Removed function static attribute in order to suppress
 543:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** //         "#177-D function was declared but never referenced" warning.
 544:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** // static RtcCalendar_t RtcConvertTimerTimeToCalendarTick( TimerTime_t timeCounter )
 545:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** //
 546:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** RtcCalendar_t RtcConvertTimerTimeToCalendarTick( TimerTime_t timeCounter )
 547:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** {
ARM GAS  /tmp/ccWJ882I.s 			page 11


 548:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     RtcCalendar_t calendar = { 0 };
 549:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 550:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     uint16_t seconds = 0;
 551:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     uint16_t minutes = 0;
 552:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     uint16_t hours = 0;
 553:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     uint16_t days = 0;
 554:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     uint8_t months = 1; // Start at 1, month 0 does not exist
 555:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     uint16_t years = 0;
 556:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     uint16_t century = 0;
 557:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     double timeCounterTemp = 0.0;
 558:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 559:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     timeCounterTemp = ( double )timeCounter * RTC_ALARM_TICK_PER_MS;
 560:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 561:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     // Convert milliseconds to RTC format and add to now
 562:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     while( timeCounterTemp >= SecondsInLeapYear )
 563:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 564:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         if( ( years == 0 ) || ( years % 4 ) == 0 )
 565:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         {
 566:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****             timeCounterTemp -= SecondsInLeapYear;
 567:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         }
 568:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         else
 569:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         {
 570:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****             timeCounterTemp -= SecondsInYear;
 571:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         }
 572:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         years++;
 573:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         if( years == 100 )
 574:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         {
 575:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****             century = century + 100;
 576:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****             years = 0;
 577:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         }
 578:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 579:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 580:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     if( timeCounterTemp >= SecondsInYear )
 581:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 582:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         if( ( years == 0 ) || ( years % 4 ) == 0 )
 583:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         {
 584:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****             // Nothing to be done
 585:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         }
 586:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         else
 587:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         {
 588:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****             timeCounterTemp -= SecondsInYear;
 589:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****             years++;
 590:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         }
 591:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 592:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 593:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     if( ( years == 0 ) || ( years % 4 ) == 0 )
 594:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 595:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         while( timeCounterTemp >= ( DaysInMonthLeapYear[ months - 1 ] * SecondsInDay ) )
 596:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         {
 597:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****             timeCounterTemp -= DaysInMonthLeapYear[ months - 1 ] * SecondsInDay;
 598:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****             months++;
 599:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         }
 600:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 601:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     else
 602:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 603:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         while( timeCounterTemp >= ( DaysInMonth[ months - 1 ] * SecondsInDay ) )
 604:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         {
ARM GAS  /tmp/ccWJ882I.s 			page 12


 605:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****             timeCounterTemp -= DaysInMonth[ months - 1 ] * SecondsInDay;
 606:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****             months++;
 607:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         }
 608:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 609:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 610:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     // Convert milliseconds to RTC format and add to now
 611:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     while( timeCounterTemp >= SecondsInDay )
 612:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 613:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         timeCounterTemp -= SecondsInDay;
 614:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         days++;
 615:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 616:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 617:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     // Calculate hours
 618:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     while( timeCounterTemp >= SecondsInHour )
 619:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 620:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         timeCounterTemp -= SecondsInHour;
 621:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         hours++;
 622:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 623:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 624:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     // Calculate minutes
 625:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     while( timeCounterTemp >= SecondsInMinute )
 626:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 627:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         timeCounterTemp -= SecondsInMinute;
 628:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         minutes++;
 629:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 630:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 631:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     // Calculate seconds
 632:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     seconds = round( timeCounterTemp );
 633:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 634:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     calendar.CalendarTime.Seconds = seconds;
 635:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     calendar.CalendarTime.Minutes = minutes;
 636:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     calendar.CalendarTime.Hours = hours;
 637:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     calendar.CalendarDate.Date = days;
 638:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     calendar.CalendarDate.Month = months;
 639:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     calendar.CalendarDate.Year = years;
 640:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     calendar.CalendarCentury = century;
 641:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 642:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     return calendar;
 643:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** }
 644:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 645:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** static TimerTime_t RtcConvertCalendarTickToTimerTime( RtcCalendar_t *calendar )
 646:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** {
 647:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     TimerTime_t timeCounter = 0;
 648:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     RtcCalendar_t now;
 649:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     double timeCounterTemp = 0.0;
 650:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 651:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     // Passing a NULL pointer will compute from "now" else,
 652:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     // compute from the given calendar value
 653:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     if( calendar == NULL )
 654:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 655:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         now = RtcGetCalendar( );
 656:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 657:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     else
 658:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 659:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         now = *calendar;
 660:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 661:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
ARM GAS  /tmp/ccWJ882I.s 			page 13


 662:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     // Years (calculation valid up to year 2099)
 663:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     for( int16_t i = 0; i < ( now.CalendarDate.Year + now.CalendarCentury ); i++ )
 664:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 665:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         if( ( i == 0 ) || ( i % 4 ) == 0 )
 666:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         {
 667:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****             timeCounterTemp += ( double )SecondsInLeapYear;
 668:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         }
 669:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         else
 670:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         {
 671:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****             timeCounterTemp += ( double )SecondsInYear;
 672:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         }
 673:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 674:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 675:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     // Months (calculation valid up to year 2099)*/
 676:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     if( ( now.CalendarDate.Year == 0 ) || ( ( now.CalendarDate.Year + now.CalendarCentury ) % 4 ) =
 677:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 678:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         for( uint8_t i = 0; i < ( now.CalendarDate.Month - 1 ); i++ )
 679:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         {
 680:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****             timeCounterTemp += ( double )( DaysInMonthLeapYear[i] * SecondsInDay );
 681:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         }
 682:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 683:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     else
 684:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 685:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         for( uint8_t i = 0;  i < ( now.CalendarDate.Month - 1 ); i++ )
 686:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         {
 687:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****             timeCounterTemp += ( double )( DaysInMonth[i] * SecondsInDay );
 688:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         }
 689:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 690:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 691:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     timeCounterTemp += ( double )( ( uint32_t )now.CalendarTime.Seconds +
 692:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****                      ( ( uint32_t )now.CalendarTime.Minutes * SecondsInMinute ) +
 693:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****                      ( ( uint32_t )now.CalendarTime.Hours * SecondsInHour ) +
 694:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****                      ( ( uint32_t )( now.CalendarDate.Date * SecondsInDay ) ) );
 695:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 696:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     timeCounterTemp = ( double )timeCounterTemp * RTC_ALARM_TICK_DURATION;
 697:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 698:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     timeCounter = round( timeCounterTemp );
 699:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     return ( timeCounter );
 700:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** }
 701:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 702:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** static void RtcCheckCalendarRollOver( uint8_t year )
 703:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** {
  25              		.loc 1 703 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30              	.LVL0:
 704:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     if( year > 0 )
  31              		.loc 1 704 0
  32 0000 0346     		mov	r3, r0
  33 0002 30B1     		cbz	r0, .L2
 705:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 706:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         CalendarRollOverReady = true;
  34              		.loc 1 706 0
  35 0004 0121     		movs	r1, #1
  36 0006 0B4A     		ldr	r2, .L4
ARM GAS  /tmp/ccWJ882I.s 			page 14


  37 0008 1170     		strb	r1, [r2]
 707:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         PreviousCentury = Century;
  38              		.loc 1 707 0
  39 000a 0B4A     		ldr	r2, .L4+4
  40 000c 1188     		ldrh	r1, [r2]
  41 000e 0B4A     		ldr	r2, .L4+8
  42 0010 1180     		strh	r1, [r2]	@ movhi
  43              	.L2:
 708:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 709:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 710:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     if( ( CalendarRollOverReady == true ) && ( ( year + Century ) <= PreviousCentury ) )
  44              		.loc 1 710 0
  45 0012 084A     		ldr	r2, .L4
  46 0014 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
  47 0016 62B1     		cbz	r2, .L1
  48              		.loc 1 710 0 is_stmt 0 discriminator 1
  49 0018 074A     		ldr	r2, .L4+4
  50 001a 1288     		ldrh	r2, [r2]
  51 001c 1344     		add	r3, r3, r2
  52 001e 0749     		ldr	r1, .L4+8
  53 0020 0988     		ldrh	r1, [r1]
  54 0022 8B42     		cmp	r3, r1
  55 0024 05DC     		bgt	.L1
 711:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {   // Indicate a roll-over of the calendar
 712:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         CalendarRollOverReady = false;
  56              		.loc 1 712 0 is_stmt 1
  57 0026 0021     		movs	r1, #0
  58 0028 024B     		ldr	r3, .L4
  59 002a 1970     		strb	r1, [r3]
 713:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         Century = Century + 100;
  60              		.loc 1 713 0
  61 002c 6432     		adds	r2, r2, #100
  62 002e 024B     		ldr	r3, .L4+4
  63 0030 1A80     		strh	r2, [r3]	@ movhi
  64              	.L1:
  65 0032 7047     		bx	lr
  66              	.L5:
  67              		.align	2
  68              	.L4:
  69 0034 00000000 		.word	.LANCHOR0
  70 0038 00000000 		.word	.LANCHOR2
  71 003c 00000000 		.word	.LANCHOR1
  72              		.cfi_endproc
  73              	.LFE87:
  75              		.section	.text.RtcGetCalendar,"ax",%progbits
  76              		.align	1
  77              		.syntax unified
  78              		.thumb
  79              		.thumb_func
  80              		.fpu softvfp
  82              	RtcGetCalendar:
  83              	.LFB88:
 714:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 715:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** }
 716:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 717:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** static RtcCalendar_t RtcGetCalendar( void )
 718:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** {
ARM GAS  /tmp/ccWJ882I.s 			page 15


  84              		.loc 1 718 0
  85              		.cfi_startproc
  86              		@ args = 0, pretend = 0, frame = 32
  87              		@ frame_needed = 0, uses_anonymous_args = 0
  88              	.LVL1:
  89 0000 70B5     		push	{r4, r5, r6, lr}
  90              	.LCFI0:
  91              		.cfi_def_cfa_offset 16
  92              		.cfi_offset 4, -16
  93              		.cfi_offset 5, -12
  94              		.cfi_offset 6, -8
  95              		.cfi_offset 14, -4
  96 0002 88B0     		sub	sp, sp, #32
  97              	.LCFI1:
  98              		.cfi_def_cfa_offset 48
  99 0004 0646     		mov	r6, r0
 719:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     RtcCalendar_t calendar;
 720:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     HAL_RTC_GetTime( &RtcHandle, &calendar.CalendarTime, RTC_FORMAT_BIN );
 100              		.loc 1 720 0
 101 0006 0F4C     		ldr	r4, .L8
 102 0008 0022     		movs	r2, #0
 103 000a 03A9     		add	r1, sp, #12
 104 000c 2046     		mov	r0, r4
 105              	.LVL2:
 106 000e FFF7FEFF 		bl	HAL_RTC_GetTime
 107              	.LVL3:
 721:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     HAL_RTC_GetDate( &RtcHandle, &calendar.CalendarDate, RTC_FORMAT_BIN );
 108              		.loc 1 721 0
 109 0012 0022     		movs	r2, #0
 110 0014 0DF10601 		add	r1, sp, #6
 111 0018 2046     		mov	r0, r4
 112 001a FFF7FEFF 		bl	HAL_RTC_GetDate
 113              	.LVL4:
 722:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     calendar.CalendarCentury = Century;
 114              		.loc 1 722 0
 115 001e 0A4B     		ldr	r3, .L8+4
 116 0020 1B88     		ldrh	r3, [r3]
 117 0022 ADF80430 		strh	r3, [sp, #4]	@ movhi
 723:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     RtcCheckCalendarRollOver( calendar.CalendarDate.Year );
 118              		.loc 1 723 0
 119 0026 9DF80900 		ldrb	r0, [sp, #9]	@ zero_extendqisi2
 120 002a FFF7FEFF 		bl	RtcCheckCalendarRollOver
 121              	.LVL5:
 724:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     return calendar;
 122              		.loc 1 724 0
 123 002e 3446     		mov	r4, r6
 124 0030 01AD     		add	r5, sp, #4
 125 0032 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 126 0034 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 127 0036 95E80700 		ldm	r5, {r0, r1, r2}
 128 003a 84E80700 		stm	r4, {r0, r1, r2}
 725:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** }
 129              		.loc 1 725 0
 130 003e 3046     		mov	r0, r6
 131 0040 08B0     		add	sp, sp, #32
 132              	.LCFI2:
 133              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccWJ882I.s 			page 16


 134              		@ sp needed
 135 0042 70BD     		pop	{r4, r5, r6, pc}
 136              	.LVL6:
 137              	.L9:
 138              		.align	2
 139              	.L8:
 140 0044 00000000 		.word	.LANCHOR3
 141 0048 00000000 		.word	.LANCHOR2
 142              		.cfi_endproc
 143              	.LFE88:
 145              		.global	__aeabi_ui2d
 146              		.global	__aeabi_dmul
 147              		.global	__aeabi_dsub
 148              		.global	__aeabi_i2d
 149              		.global	__aeabi_dadd
 150              		.global	__aeabi_d2iz
 151              		.global	__aeabi_dcmpge
 152              		.global	__aeabi_d2uiz
 153              		.section	.text.RtcComputeTimerTimeToAlarmTick,"ax",%progbits
 154              		.align	1
 155              		.syntax unified
 156              		.thumb
 157              		.thumb_func
 158              		.fpu softvfp
 160              	RtcComputeTimerTimeToAlarmTick:
 161              	.LFB84:
 438:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     RtcCalendar_t calendar = now;
 162              		.loc 1 438 0
 163              		.cfi_startproc
 164              		@ args = 28, pretend = 8, frame = 8
 165              		@ frame_needed = 0, uses_anonymous_args = 0
 166              	.LVL7:
 167 0000 82B0     		sub	sp, sp, #8
 168              	.LCFI3:
 169              		.cfi_def_cfa_offset 8
 170 0002 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 171              	.LCFI4:
 172              		.cfi_def_cfa_offset 44
 173              		.cfi_offset 4, -44
 174              		.cfi_offset 5, -40
 175              		.cfi_offset 6, -36
 176              		.cfi_offset 7, -32
 177              		.cfi_offset 8, -28
 178              		.cfi_offset 9, -24
 179              		.cfi_offset 10, -20
 180              		.cfi_offset 11, -16
 181              		.cfi_offset 14, -12
 182 0006 83B0     		sub	sp, sp, #12
 183              	.LCFI5:
 184              		.cfi_def_cfa_offset 56
 185 0008 8146     		mov	r9, r0
 186 000a 0E46     		mov	r6, r1
 187 000c 0CA9     		add	r1, sp, #48
 188              	.LVL8:
 189 000e 81E80C00 		stm	r1, {r2, r3}
 439:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 190              		.loc 1 439 0
ARM GAS  /tmp/ccWJ882I.s 			page 17


 191 0012 0446     		mov	r4, r0
 192 0014 0D46     		mov	r5, r1
 193 0016 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 194              	.LVL9:
 195 0018 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 196              	.LVL10:
 197 001a 95E80700 		ldm	r5, {r0, r1, r2}
 198 001e 84E80700 		stm	r4, {r0, r1, r2}
 441:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     uint16_t minutes = now.CalendarTime.Minutes;
 199              		.loc 1 441 0
 200 0022 9DF83AB0 		ldrb	fp, [sp, #58]	@ zero_extendqisi2
 201              	.LVL11:
 442:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     uint16_t hours = now.CalendarTime.Hours;
 202              		.loc 1 442 0
 203 0026 9DF83950 		ldrb	r5, [sp, #57]	@ zero_extendqisi2
 204              	.LVL12:
 443:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     uint16_t days = now.CalendarDate.Date;
 205              		.loc 1 443 0
 206 002a 9DF83840 		ldrb	r4, [sp, #56]	@ zero_extendqisi2
 207              	.LVL13:
 444:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     double timeoutValueTemp = 0.0;
 208              		.loc 1 444 0
 209 002e 9DF83480 		ldrb	r8, [sp, #52]	@ zero_extendqisi2
 210              	.LVL14:
 449:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 211              		.loc 1 449 0
 212 0032 6D48     		ldr	r0, .L30+24
 213 0034 B042     		cmp	r0, r6
 214 0036 28BF     		it	cs
 215 0038 3046     		movcs	r0, r6
 216              	.LVL15:
 451:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 217              		.loc 1 451 0
 218 003a 00B9     		cbnz	r0, .L11
 453:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 219              		.loc 1 453 0
 220 003c 0120     		movs	r0, #1
 221              	.LVL16:
 222              	.L11:
 457:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 223              		.loc 1 457 0
 224 003e FFF7FEFF 		bl	__aeabi_ui2d
 225              	.LVL17:
 226 0042 63A3     		adr	r3, .L30
 227 0044 D3E90023 		ldrd	r2, [r3]
 228 0048 FFF7FEFF 		bl	__aeabi_dmul
 229              	.LVL18:
 230 004c CDE90001 		strd	r0, [sp]
 231 0050 FFF7FEFF 		bl	round
 232              	.LVL19:
 233 0054 0646     		mov	r6, r0
 234 0056 0F46     		mov	r7, r1
 235              	.LVL20:
 463:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 236              		.loc 1 463 0
 237 0058 DDE90023 		ldrd	r2, [sp]
 238 005c FFF7FEFF 		bl	__aeabi_dsub
ARM GAS  /tmp/ccWJ882I.s 			page 18


 239              	.LVL21:
 466:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 240              		.loc 1 466 0
 241 0060 0022     		movs	r2, #0
 242 0062 624B     		ldr	r3, .L30+28
 243 0064 FFF7FEFF 		bl	__aeabi_dmul
 244              	.LVL22:
 245 0068 CDE90001 		strd	r0, [sp]
 246              	.LVL23:
 247 006c DFF894A1 		ldr	r10, .L30+52
 248 0070 DAF80000 		ldr	r0, [r10]
 249 0074 FFF7FEFF 		bl	__aeabi_i2d
 250              	.LVL24:
 251 0078 DDE90023 		ldrd	r2, [sp]
 252 007c FFF7FEFF 		bl	__aeabi_dadd
 253              	.LVL25:
 254 0080 FFF7FEFF 		bl	__aeabi_d2iz
 255              	.LVL26:
 256 0084 CAF80000 		str	r0, [r10]
 469:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 257              		.loc 1 469 0
 258 0088 B0F5F47F 		cmp	r0, #488
 259 008c 19DB     		blt	.L13
 471:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         timeoutValue = timeoutValue + 1;
 260              		.loc 1 471 0
 261 008e A0F5F470 		sub	r0, r0, #488
 262 0092 CAF80000 		str	r0, [r10]
 472:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 263              		.loc 1 472 0
 264 0096 0022     		movs	r2, #0
 265 0098 554B     		ldr	r3, .L30+32
 266 009a 3046     		mov	r0, r6
 267 009c 3946     		mov	r1, r7
 268 009e FFF7FEFF 		bl	__aeabi_dadd
 269              	.LVL27:
 270 00a2 0646     		mov	r6, r0
 271              	.LVL28:
 272 00a4 0F46     		mov	r7, r1
 273              	.LVL29:
 274 00a6 0CE0     		b	.L13
 275              	.L14:
 478:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         days++;
 276              		.loc 1 478 0
 277 00a8 4BA3     		adr	r3, .L30+8
 278 00aa D3E90023 		ldrd	r2, [r3]
 279 00ae 3046     		mov	r0, r6
 280 00b0 3946     		mov	r1, r7
 281 00b2 FFF7FEFF 		bl	__aeabi_dsub
 282              	.LVL30:
 283 00b6 0646     		mov	r6, r0
 284              	.LVL31:
 285 00b8 0F46     		mov	r7, r1
 286              	.LVL32:
 479:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 287              		.loc 1 479 0
 288 00ba 08F10108 		add	r8, r8, #1
 289              	.LVL33:
ARM GAS  /tmp/ccWJ882I.s 			page 19


 290 00be 1FFA88F8 		uxth	r8, r8
 291              	.LVL34:
 292              	.L13:
 476:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 293              		.loc 1 476 0
 294 00c2 45A3     		adr	r3, .L30+8
 295 00c4 D3E90023 		ldrd	r2, [r3]
 296 00c8 3046     		mov	r0, r6
 297 00ca 3946     		mov	r1, r7
 298 00cc FFF7FEFF 		bl	__aeabi_dcmpge
 299              	.LVL35:
 300 00d0 0028     		cmp	r0, #0
 301 00d2 E9D1     		bne	.L14
 302 00d4 0AE0     		b	.L15
 303              	.L16:
 485:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         hours++;
 304              		.loc 1 485 0
 305 00d6 42A3     		adr	r3, .L30+16
 306 00d8 D3E90023 		ldrd	r2, [r3]
 307 00dc 3046     		mov	r0, r6
 308 00de 3946     		mov	r1, r7
 309 00e0 FFF7FEFF 		bl	__aeabi_dsub
 310              	.LVL36:
 311 00e4 0646     		mov	r6, r0
 312              	.LVL37:
 313 00e6 0F46     		mov	r7, r1
 314              	.LVL38:
 486:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 315              		.loc 1 486 0
 316 00e8 0134     		adds	r4, r4, #1
 317              	.LVL39:
 318 00ea A4B2     		uxth	r4, r4
 319              	.LVL40:
 320              	.L15:
 483:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 321              		.loc 1 483 0
 322 00ec 3CA3     		adr	r3, .L30+16
 323 00ee D3E90023 		ldrd	r2, [r3]
 324 00f2 3046     		mov	r0, r6
 325 00f4 3946     		mov	r1, r7
 326 00f6 FFF7FEFF 		bl	__aeabi_dcmpge
 327              	.LVL41:
 328 00fa 0028     		cmp	r0, #0
 329 00fc EBD1     		bne	.L16
 330 00fe 09E0     		b	.L17
 331              	.L18:
 492:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         minutes++;
 332              		.loc 1 492 0
 333 0100 0022     		movs	r2, #0
 334 0102 3C4B     		ldr	r3, .L30+36
 335 0104 3046     		mov	r0, r6
 336 0106 3946     		mov	r1, r7
 337 0108 FFF7FEFF 		bl	__aeabi_dsub
 338              	.LVL42:
 339 010c 0646     		mov	r6, r0
 340              	.LVL43:
 341 010e 0F46     		mov	r7, r1
ARM GAS  /tmp/ccWJ882I.s 			page 20


 342              	.LVL44:
 493:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 343              		.loc 1 493 0
 344 0110 0135     		adds	r5, r5, #1
 345              	.LVL45:
 346 0112 ADB2     		uxth	r5, r5
 347              	.LVL46:
 348              	.L17:
 490:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 349              		.loc 1 490 0
 350 0114 0022     		movs	r2, #0
 351 0116 374B     		ldr	r3, .L30+36
 352 0118 3046     		mov	r0, r6
 353 011a 3946     		mov	r1, r7
 354 011c FFF7FEFF 		bl	__aeabi_dcmpge
 355              	.LVL47:
 356 0120 0028     		cmp	r0, #0
 357 0122 EDD1     		bne	.L18
 497:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 358              		.loc 1 497 0
 359 0124 5846     		mov	r0, fp
 360 0126 FFF7FEFF 		bl	__aeabi_i2d
 361              	.LVL48:
 362 012a 3246     		mov	r2, r6
 363 012c 3B46     		mov	r3, r7
 364 012e FFF7FEFF 		bl	__aeabi_dadd
 365              	.LVL49:
 366 0132 FFF7FEFF 		bl	__aeabi_d2uiz
 367              	.LVL50:
 368 0136 80B2     		uxth	r0, r0
 369              	.LVL51:
 500:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 370              		.loc 1 500 0
 371 0138 03E0     		b	.L19
 372              	.L20:
 502:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         minutes++;
 373              		.loc 1 502 0
 374 013a 3C38     		subs	r0, r0, #60
 375              	.LVL52:
 376 013c 80B2     		uxth	r0, r0
 377              	.LVL53:
 503:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 378              		.loc 1 503 0
 379 013e 0135     		adds	r5, r5, #1
 380              	.LVL54:
 381 0140 ADB2     		uxth	r5, r5
 382              	.LVL55:
 383              	.L19:
 500:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 384              		.loc 1 500 0
 385 0142 3B28     		cmp	r0, #59
 386 0144 F9D8     		bhi	.L20
 387 0146 03E0     		b	.L21
 388              	.L22:
 508:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         hours++;
 389              		.loc 1 508 0
 390 0148 3C3D     		subs	r5, r5, #60
ARM GAS  /tmp/ccWJ882I.s 			page 21


 391              	.LVL56:
 392 014a ADB2     		uxth	r5, r5
 393              	.LVL57:
 509:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 394              		.loc 1 509 0
 395 014c 0134     		adds	r4, r4, #1
 396              	.LVL58:
 397 014e A4B2     		uxth	r4, r4
 398              	.LVL59:
 399              	.L21:
 506:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 400              		.loc 1 506 0
 401 0150 3B2D     		cmp	r5, #59
 402 0152 F9D8     		bhi	.L22
 403 0154 05E0     		b	.L23
 404              	.L24:
 514:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         days++;
 405              		.loc 1 514 0
 406 0156 183C     		subs	r4, r4, #24
 407              	.LVL60:
 408 0158 A4B2     		uxth	r4, r4
 409              	.LVL61:
 515:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 410              		.loc 1 515 0
 411 015a 08F10108 		add	r8, r8, #1
 412              	.LVL62:
 413 015e 1FFA88F8 		uxth	r8, r8
 414              	.LVL63:
 415              	.L23:
 512:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 416              		.loc 1 512 0
 417 0162 172C     		cmp	r4, #23
 418 0164 F7D8     		bhi	.L24
 518:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 419              		.loc 1 518 0
 420 0166 9DF83530 		ldrb	r3, [sp, #53]	@ zero_extendqisi2
 421 016a 2BB1     		cbz	r3, .L25
 518:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 422              		.loc 1 518 0 is_stmt 0 discriminator 1
 423 016c 224A     		ldr	r2, .L30+40
 424 016e 1288     		ldrh	r2, [r2]
 425 0170 1344     		add	r3, r3, r2
 426 0172 13F0030F 		tst	r3, #3
 427 0176 1BD1     		bne	.L26
 428              	.L25:
 520:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         {
 429              		.loc 1 520 0 is_stmt 1
 430 0178 9DF83330 		ldrb	r3, [sp, #51]	@ zero_extendqisi2
 431 017c 013B     		subs	r3, r3, #1
 432 017e 1F4A     		ldr	r2, .L30+44
 433 0180 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 434 0182 9AB2     		uxth	r2, r3
 435 0184 9045     		cmp	r8, r2
 436 0186 05D9     		bls	.L27
 522:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         }
 437              		.loc 1 522 0
 438 0188 98FBF3F2 		sdiv	r2, r8, r3
ARM GAS  /tmp/ccWJ882I.s 			page 22


 439 018c 03FB1288 		mls	r8, r3, r2, r8
 440              	.LVL64:
 441 0190 1FFA88F8 		uxth	r8, r8
 442              	.LVL65:
 443              	.L27:
 533:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     calendar.CalendarTime.Minutes = minutes;
 444              		.loc 1 533 0
 445 0194 89F80A00 		strb	r0, [r9, #10]
 534:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     calendar.CalendarTime.Hours = hours;
 446              		.loc 1 534 0
 447 0198 89F80950 		strb	r5, [r9, #9]
 535:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     calendar.CalendarDate.Date = days;
 448              		.loc 1 535 0
 449 019c 89F80840 		strb	r4, [r9, #8]
 536:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 450              		.loc 1 536 0
 451 01a0 89F80480 		strb	r8, [r9, #4]
 539:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 452              		.loc 1 539 0
 453 01a4 4846     		mov	r0, r9
 454              	.LVL66:
 455 01a6 03B0     		add	sp, sp, #12
 456              	.LCFI6:
 457              		.cfi_remember_state
 458              		.cfi_def_cfa_offset 44
 459              		@ sp needed
 460 01a8 BDE8F04F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 461              	.LCFI7:
 462              		.cfi_restore 14
 463              		.cfi_restore 11
 464              		.cfi_restore 10
 465              		.cfi_restore 9
 466              		.cfi_restore 8
 467              		.cfi_restore 7
 468              		.cfi_restore 6
 469              		.cfi_restore 5
 470              		.cfi_restore 4
 471              		.cfi_def_cfa_offset 8
 472              	.LVL67:
 473 01ac 02B0     		add	sp, sp, #8
 474              	.LCFI8:
 475              		.cfi_def_cfa_offset 0
 476 01ae 7047     		bx	lr
 477              	.LVL68:
 478              	.L26:
 479              	.LCFI9:
 480              		.cfi_restore_state
 527:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         {
 481              		.loc 1 527 0
 482 01b0 9DF83330 		ldrb	r3, [sp, #51]	@ zero_extendqisi2
 483 01b4 013B     		subs	r3, r3, #1
 484 01b6 124A     		ldr	r2, .L30+48
 485 01b8 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 486 01ba 9AB2     		uxth	r2, r3
 487 01bc 9045     		cmp	r8, r2
 488 01be E9D9     		bls	.L27
 529:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         }
ARM GAS  /tmp/ccWJ882I.s 			page 23


 489              		.loc 1 529 0
 490 01c0 98FBF3F2 		sdiv	r2, r8, r3
 491 01c4 03FB1288 		mls	r8, r3, r2, r8
 492              	.LVL69:
 493 01c8 1FFA88F8 		uxth	r8, r8
 494              	.LVL70:
 495 01cc E2E7     		b	.L27
 496              	.L31:
 497 01ce 00BF     		.align	3
 498              	.L30:
 499 01d0 FCA9F1D2 		.word	3539053052
 500 01d4 4D620040 		.word	1073766989
 501 01d8 00000000 		.word	0
 502 01dc 0018F540 		.word	1089804288
 503 01e0 00000000 		.word	0
 504 01e4 0020AC40 		.word	1085022208
 505 01e8 76611100 		.word	1139062
 506 01ec 00408F40 		.word	1083129856
 507 01f0 0000F03F 		.word	1072693248
 508 01f4 00004E40 		.word	1078853632
 509 01f8 00000000 		.word	.LANCHOR2
 510 01fc 00000000 		.word	.LANCHOR5
 511 0200 00000000 		.word	.LANCHOR6
 512 0204 00000000 		.word	.LANCHOR4
 513              		.cfi_endproc
 514              	.LFE84:
 516              		.section	.text.RtcStartWakeUpAlarm,"ax",%progbits
 517              		.align	1
 518              		.syntax unified
 519              		.thumb
 520              		.thumb_func
 521              		.fpu softvfp
 523              	RtcStartWakeUpAlarm:
 524              	.LFB83:
 404:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     RtcCalendar_t now;
 525              		.loc 1 404 0
 526              		.cfi_startproc
 527              		@ args = 0, pretend = 0, frame = 96
 528              		@ frame_needed = 0, uses_anonymous_args = 0
 529              	.LVL71:
 530 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 531              	.LCFI10:
 532              		.cfi_def_cfa_offset 24
 533              		.cfi_offset 4, -24
 534              		.cfi_offset 5, -20
 535              		.cfi_offset 6, -16
 536              		.cfi_offset 7, -12
 537              		.cfi_offset 8, -8
 538              		.cfi_offset 14, -4
 539 0004 9EB0     		sub	sp, sp, #120
 540              	.LCFI11:
 541              		.cfi_def_cfa_offset 144
 542 0006 8046     		mov	r8, r0
 409:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     HAL_RTCEx_DeactivateWakeUpTimer( &RtcHandle );
 543              		.loc 1 409 0
 544 0008 1F4F     		ldr	r7, .L34
 545 000a 4FF48071 		mov	r1, #256
ARM GAS  /tmp/ccWJ882I.s 			page 24


 546 000e 3846     		mov	r0, r7
 547              	.LVL72:
 548 0010 FFF7FEFF 		bl	HAL_RTC_DeactivateAlarm
 549              	.LVL73:
 410:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 550              		.loc 1 410 0
 551 0014 3846     		mov	r0, r7
 552 0016 FFF7FEFF 		bl	HAL_RTCEx_DeactivateWakeUpTimer
 553              	.LVL74:
 413:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 554              		.loc 1 413 0
 555 001a 17AE     		add	r6, sp, #92
 556 001c 3046     		mov	r0, r6
 557 001e FFF7FEFF 		bl	RtcGetCalendar
 558              	.LVL75:
 416:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 559              		.loc 1 416 0
 560 0022 1A4C     		ldr	r4, .L34+4
 561 0024 3546     		mov	r5, r6
 562 0026 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 563 0028 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 564 002a 95E80700 		ldm	r5, {r0, r1, r2}
 565 002e 84E80700 		stm	r4, {r0, r1, r2}
 419:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 566              		.loc 1 419 0
 567 0032 6C46     		mov	r4, sp
 568 0034 19AD     		add	r5, sp, #100
 569 0036 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 570 0038 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 571 003a 2B68     		ldr	r3, [r5]
 572 003c 2360     		str	r3, [r4]
 573 003e 96E80C00 		ldm	r6, {r2, r3}
 574 0042 4146     		mov	r1, r8
 575 0044 10A8     		add	r0, sp, #64
 576 0046 FFF7FEFF 		bl	RtcComputeTimerTimeToAlarmTick
 577              	.LVL76:
 421:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     alarmStructure.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 578              		.loc 1 421 0
 579 004a 4FF48073 		mov	r3, #256
 580 004e 0F93     		str	r3, [sp, #60]
 422:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     alarmStructure.AlarmMask = RTC_ALARMMASK_NONE;
 581              		.loc 1 422 0
 582 0050 0022     		movs	r2, #0
 583 0052 0D92     		str	r2, [sp, #52]
 423:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     alarmStructure.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 584              		.loc 1 423 0
 585 0054 0B92     		str	r2, [sp, #44]
 424:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 586              		.loc 1 424 0
 587 0056 8DF81B20 		strb	r2, [sp, #27]
 426:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     alarmStructure.AlarmTime.Minutes = alarmTimer.CalendarTime.Minutes;
 588              		.loc 1 426 0
 589 005a 9DF84A30 		ldrb	r3, [sp, #74]	@ zero_extendqisi2
 590 005e 8DF81A30 		strb	r3, [sp, #26]
 427:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     alarmStructure.AlarmTime.Hours = alarmTimer.CalendarTime.Hours;
 591              		.loc 1 427 0
 592 0062 9DF84930 		ldrb	r3, [sp, #73]	@ zero_extendqisi2
ARM GAS  /tmp/ccWJ882I.s 			page 25


 593 0066 8DF81930 		strb	r3, [sp, #25]
 428:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     alarmStructure.AlarmDateWeekDay = alarmTimer.CalendarDate.Date;
 594              		.loc 1 428 0
 595 006a 9DF84830 		ldrb	r3, [sp, #72]	@ zero_extendqisi2
 596 006e 8DF81830 		strb	r3, [sp, #24]
 429:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 597              		.loc 1 429 0
 598 0072 9DF84430 		ldrb	r3, [sp, #68]	@ zero_extendqisi2
 599 0076 8DF83830 		strb	r3, [sp, #56]
 431:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 600              		.loc 1 431 0
 601 007a 06A9     		add	r1, sp, #24
 602 007c 3846     		mov	r0, r7
 603 007e FFF7FEFF 		bl	HAL_RTC_SetAlarm_IT
 604              	.LVL77:
 435:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 605              		.loc 1 435 0
 606 0082 1EB0     		add	sp, sp, #120
 607              	.LCFI12:
 608              		.cfi_def_cfa_offset 24
 609              		@ sp needed
 610 0084 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 611              	.LVL78:
 612              	.L35:
 613              		.align	2
 614              	.L34:
 615 0088 00000000 		.word	.LANCHOR3
 616 008c 00000000 		.word	RtcCalendarContext
 617              		.cfi_endproc
 618              	.LFE83:
 620              		.section	.text.RtcConvertCalendarTickToTimerTime,"ax",%progbits
 621              		.align	1
 622              		.syntax unified
 623              		.thumb
 624              		.thumb_func
 625              		.fpu softvfp
 627              	RtcConvertCalendarTickToTimerTime:
 628              	.LFB86:
 646:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     TimerTime_t timeCounter = 0;
 629              		.loc 1 646 0
 630              		.cfi_startproc
 631              		@ args = 0, pretend = 0, frame = 32
 632              		@ frame_needed = 0, uses_anonymous_args = 0
 633              	.LVL79:
 634 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 635              	.LCFI13:
 636              		.cfi_def_cfa_offset 20
 637              		.cfi_offset 4, -20
 638              		.cfi_offset 5, -16
 639              		.cfi_offset 6, -12
 640              		.cfi_offset 7, -8
 641              		.cfi_offset 14, -4
 642 0002 89B0     		sub	sp, sp, #36
 643              	.LCFI14:
 644              		.cfi_def_cfa_offset 56
 645              	.LVL80:
 653:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
ARM GAS  /tmp/ccWJ882I.s 			page 26


 646              		.loc 1 653 0
 647 0004 58B1     		cbz	r0, .L51
 648 0006 0446     		mov	r4, r0
 659:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 649              		.loc 1 659 0
 650 0008 01AD     		add	r5, sp, #4
 651 000a 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 652              	.LVL81:
 653 000c 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 654 000e 94E80700 		ldm	r4, {r0, r1, r2}
 655 0012 85E80700 		stm	r5, {r0, r1, r2}
 656              	.LVL82:
 657              	.L38:
 658              	.LBB2:
 663:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 659              		.loc 1 663 0
 660 0016 0025     		movs	r5, #0
 661              	.LBE2:
 649:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 662              		.loc 1 649 0
 663 0018 0026     		movs	r6, #0
 664 001a 0027     		movs	r7, #0
 665              	.LBB3:
 663:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 666              		.loc 1 663 0
 667 001c 0EE0     		b	.L39
 668              	.LVL83:
 669              	.L51:
 670              	.LBE3:
 655:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 671              		.loc 1 655 0
 672 001e 01A8     		add	r0, sp, #4
 673              	.LVL84:
 674 0020 FFF7FEFF 		bl	RtcGetCalendar
 675              	.LVL85:
 676 0024 F7E7     		b	.L38
 677              	.LVL86:
 678              	.L40:
 679              	.LBB4:
 667:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         }
 680              		.loc 1 667 0
 681 0026 3EA3     		adr	r3, .L53
 682 0028 D3E90023 		ldrd	r2, [r3]
 683 002c 3046     		mov	r0, r6
 684 002e 3946     		mov	r1, r7
 685 0030 FFF7FEFF 		bl	__aeabi_dadd
 686              	.LVL87:
 687 0034 0646     		mov	r6, r0
 688              	.LVL88:
 689 0036 0F46     		mov	r7, r1
 690              	.LVL89:
 691              	.L42:
 663:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 692              		.loc 1 663 0 discriminator 2
 693 0038 0135     		adds	r5, r5, #1
 694              	.LVL90:
 695 003a 2DB2     		sxth	r5, r5
ARM GAS  /tmp/ccWJ882I.s 			page 27


 696              	.LVL91:
 697              	.L39:
 663:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 698              		.loc 1 663 0 is_stmt 0 discriminator 1
 699 003c 9DF80940 		ldrb	r4, [sp, #9]	@ zero_extendqisi2
 700 0040 BDF80430 		ldrh	r3, [sp, #4]
 701 0044 2344     		add	r3, r3, r4
 702 0046 9D42     		cmp	r5, r3
 703 0048 0EDA     		bge	.L52
 665:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         {
 704              		.loc 1 665 0 is_stmt 1
 705 004a 002D     		cmp	r5, #0
 706 004c EBD0     		beq	.L40
 665:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         {
 707              		.loc 1 665 0 is_stmt 0 discriminator 1
 708 004e 15F0030F 		tst	r5, #3
 709 0052 E8D0     		beq	.L40
 671:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         }
 710              		.loc 1 671 0 is_stmt 1
 711 0054 34A3     		adr	r3, .L53+8
 712 0056 D3E90023 		ldrd	r2, [r3]
 713 005a 3046     		mov	r0, r6
 714 005c 3946     		mov	r1, r7
 715 005e FFF7FEFF 		bl	__aeabi_dadd
 716              	.LVL92:
 717 0062 0646     		mov	r6, r0
 718              	.LVL93:
 719 0064 0F46     		mov	r7, r1
 720              	.LVL94:
 721 0066 E7E7     		b	.L42
 722              	.L52:
 723              	.LBE4:
 676:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 724              		.loc 1 676 0
 725 0068 ACB1     		cbz	r4, .L44
 676:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 726              		.loc 1 676 0 is_stmt 0 discriminator 1
 727 006a 13F0030F 		tst	r3, #3
 728 006e 3CD0     		beq	.L49
 729 0070 0024     		movs	r4, #0
 730 0072 4DE0     		b	.L45
 731              	.LVL95:
 732              	.L46:
 733              	.LBB5:
 680:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         }
 734              		.loc 1 680 0 is_stmt 1 discriminator 3
 735 0074 2E4B     		ldr	r3, .L53+16
 736 0076 1B5D     		ldrb	r3, [r3, r4]	@ zero_extendqisi2
 737 0078 2E48     		ldr	r0, .L53+20
 738 007a 00FB03F0 		mul	r0, r0, r3
 739 007e FFF7FEFF 		bl	__aeabi_ui2d
 740              	.LVL96:
 741 0082 0246     		mov	r2, r0
 742 0084 0B46     		mov	r3, r1
 743 0086 3046     		mov	r0, r6
 744 0088 3946     		mov	r1, r7
 745 008a FFF7FEFF 		bl	__aeabi_dadd
ARM GAS  /tmp/ccWJ882I.s 			page 28


 746              	.LVL97:
 747 008e 0646     		mov	r6, r0
 748              	.LVL98:
 749 0090 0F46     		mov	r7, r1
 750              	.LVL99:
 678:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         {
 751              		.loc 1 678 0 discriminator 3
 752 0092 0134     		adds	r4, r4, #1
 753              	.LVL100:
 754 0094 E4B2     		uxtb	r4, r4
 755              	.LVL101:
 756              	.L44:
 678:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         {
 757              		.loc 1 678 0 is_stmt 0 discriminator 1
 758 0096 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 759 009a 013B     		subs	r3, r3, #1
 760 009c 9C42     		cmp	r4, r3
 761 009e E9DB     		blt	.L46
 762              	.LVL102:
 763              	.L47:
 764              	.LBE5:
 691:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****                      ( ( uint32_t )now.CalendarTime.Minutes * SecondsInMinute ) +
 765              		.loc 1 691 0 is_stmt 1
 766 00a0 9DF80E10 		ldrb	r1, [sp, #14]	@ zero_extendqisi2
 693:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****                      ( ( uint32_t )( now.CalendarDate.Date * SecondsInDay ) ) );
 767              		.loc 1 693 0
 768 00a4 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 692:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****                      ( ( uint32_t )now.CalendarTime.Hours * SecondsInHour ) +
 769              		.loc 1 692 0
 770 00a8 9DF80D20 		ldrb	r2, [sp, #13]	@ zero_extendqisi2
 771 00ac C2EB0212 		rsb	r2, r2, r2, lsl #4
 772 00b0 9000     		lsls	r0, r2, #2
 773 00b2 4FF46162 		mov	r2, #3600
 774 00b6 02FB0303 		mla	r3, r2, r3, r0
 775 00ba 0B44     		add	r3, r3, r1
 694:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 776              		.loc 1 694 0
 777 00bc 9DF80820 		ldrb	r2, [sp, #8]	@ zero_extendqisi2
 691:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****                      ( ( uint32_t )now.CalendarTime.Minutes * SecondsInMinute ) +
 778              		.loc 1 691 0
 779 00c0 1C48     		ldr	r0, .L53+20
 780 00c2 00FB0230 		mla	r0, r0, r2, r3
 781 00c6 FFF7FEFF 		bl	__aeabi_ui2d
 782              	.LVL103:
 783 00ca 0246     		mov	r2, r0
 784 00cc 0B46     		mov	r3, r1
 785 00ce 3046     		mov	r0, r6
 786 00d0 3946     		mov	r1, r7
 787 00d2 FFF7FEFF 		bl	__aeabi_dadd
 788              	.LVL104:
 696:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 789              		.loc 1 696 0
 790 00d6 0022     		movs	r2, #0
 791 00d8 174B     		ldr	r3, .L53+24
 792 00da FFF7FEFF 		bl	__aeabi_dmul
 793              	.LVL105:
 698:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     return ( timeCounter );
ARM GAS  /tmp/ccWJ882I.s 			page 29


 794              		.loc 1 698 0
 795 00de FFF7FEFF 		bl	round
 796              	.LVL106:
 797 00e2 FFF7FEFF 		bl	__aeabi_d2uiz
 798              	.LVL107:
 700:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 799              		.loc 1 700 0
 800 00e6 09B0     		add	sp, sp, #36
 801              	.LCFI15:
 802              		.cfi_remember_state
 803              		.cfi_def_cfa_offset 20
 804              		@ sp needed
 805 00e8 F0BD     		pop	{r4, r5, r6, r7, pc}
 806              	.LVL108:
 807              	.L49:
 808              	.LCFI16:
 809              		.cfi_restore_state
 810 00ea 0024     		movs	r4, #0
 811 00ec D3E7     		b	.L44
 812              	.LVL109:
 813              	.L48:
 814              	.LBB6:
 687:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         }
 815              		.loc 1 687 0 discriminator 3
 816 00ee 134B     		ldr	r3, .L53+28
 817 00f0 1B5D     		ldrb	r3, [r3, r4]	@ zero_extendqisi2
 818 00f2 1048     		ldr	r0, .L53+20
 819 00f4 00FB03F0 		mul	r0, r0, r3
 820 00f8 FFF7FEFF 		bl	__aeabi_ui2d
 821              	.LVL110:
 822 00fc 0246     		mov	r2, r0
 823 00fe 0B46     		mov	r3, r1
 824 0100 3046     		mov	r0, r6
 825 0102 3946     		mov	r1, r7
 826 0104 FFF7FEFF 		bl	__aeabi_dadd
 827              	.LVL111:
 828 0108 0646     		mov	r6, r0
 829              	.LVL112:
 830 010a 0F46     		mov	r7, r1
 831              	.LVL113:
 685:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         {
 832              		.loc 1 685 0 discriminator 3
 833 010c 0134     		adds	r4, r4, #1
 834              	.LVL114:
 835 010e E4B2     		uxtb	r4, r4
 836              	.LVL115:
 837              	.L45:
 685:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         {
 838              		.loc 1 685 0 is_stmt 0 discriminator 1
 839 0110 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 840 0114 013B     		subs	r3, r3, #1
 841 0116 9C42     		cmp	r4, r3
 842 0118 E9DB     		blt	.L48
 843 011a C1E7     		b	.L47
 844              	.L54:
 845 011c AFF30080 		.align	3
 846              	.L53:
ARM GAS  /tmp/ccWJ882I.s 			page 30


 847 0120 00000000 		.word	0
 848 0124 50287E41 		.word	1098786896
 849 0128 00000000 		.word	0
 850 012c 38137E41 		.word	1098781496
 851 0130 00000000 		.word	.LANCHOR5
 852 0134 80510100 		.word	86400
 853 0138 0040DF3F 		.word	1071595520
 854 013c 00000000 		.word	.LANCHOR6
 855              	.LBE6:
 856              		.cfi_endproc
 857              	.LFE86:
 859              		.section	.text.RtcComputeWakeUpTime,"ax",%progbits
 860              		.align	1
 861              		.syntax unified
 862              		.thumb
 863              		.thumb_func
 864              		.fpu softvfp
 866              	RtcComputeWakeUpTime:
 867              	.LFB82:
 383:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     uint32_t start = 0;
 868              		.loc 1 383 0 is_stmt 1
 869              		.cfi_startproc
 870              		@ args = 0, pretend = 0, frame = 72
 871              		@ frame_needed = 0, uses_anonymous_args = 0
 872              	.LVL116:
 389:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 873              		.loc 1 389 0
 874 0000 1D4B     		ldr	r3, .L62
 875 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 876 0004 03B1     		cbz	r3, .L61
 877 0006 7047     		bx	lr
 878              	.L61:
 383:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     uint32_t start = 0;
 879              		.loc 1 383 0
 880 0008 10B5     		push	{r4, lr}
 881              	.LCFI17:
 882              		.cfi_def_cfa_offset 8
 883              		.cfi_offset 4, -8
 884              		.cfi_offset 14, -4
 885 000a 92B0     		sub	sp, sp, #72
 886              	.LCFI18:
 887              		.cfi_def_cfa_offset 80
 391:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         HAL_RTC_GetAlarm( &RtcHandle, &alarmRtc, RTC_ALARM_A, RTC_FORMAT_BIN );
 888              		.loc 1 391 0
 889 000c 01A8     		add	r0, sp, #4
 890 000e FFF7FEFF 		bl	RtcGetCalendar
 891              	.LVL117:
 392:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 892              		.loc 1 392 0
 893 0012 0023     		movs	r3, #0
 894 0014 4FF48072 		mov	r2, #256
 895 0018 08A9     		add	r1, sp, #32
 896 001a 1848     		ldr	r0, .L62+4
 897 001c FFF7FEFF 		bl	HAL_RTC_GetAlarm
 898              	.LVL118:
 394:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         stop = now.CalendarTime.Seconds + ( SecondsInMinute * now.CalendarTime.Minutes ) + ( Second
 899              		.loc 1 394 0
ARM GAS  /tmp/ccWJ882I.s 			page 31


 900 0020 9DF82220 		ldrb	r2, [sp, #34]	@ zero_extendqisi2
 901 0024 9DF82130 		ldrb	r3, [sp, #33]	@ zero_extendqisi2
 902 0028 C3EB0313 		rsb	r3, r3, r3, lsl #4
 903 002c 9800     		lsls	r0, r3, #2
 904 002e 1318     		adds	r3, r2, r0
 905 0030 9DF82020 		ldrb	r2, [sp, #32]	@ zero_extendqisi2
 906 0034 4FF46161 		mov	r1, #3600
 907 0038 01FB0232 		mla	r2, r1, r2, r3
 908              	.LVL119:
 395:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 909              		.loc 1 395 0
 910 003c 9DF80E00 		ldrb	r0, [sp, #14]	@ zero_extendqisi2
 911 0040 9DF80D30 		ldrb	r3, [sp, #13]	@ zero_extendqisi2
 912 0044 C3EB0313 		rsb	r3, r3, r3, lsl #4
 913 0048 9C00     		lsls	r4, r3, #2
 914 004a 0319     		adds	r3, r0, r4
 915 004c 9DF80C00 		ldrb	r0, [sp, #12]	@ zero_extendqisi2
 916 0050 01FB0030 		mla	r0, r1, r0, r3
 917              	.LVL120:
 397:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 918              		.loc 1 397 0
 919 0054 801A     		subs	r0, r0, r2
 920              	.LVL121:
 921 0056 FFF7FEFF 		bl	__aeabi_ui2d
 922              	.LVL122:
 923 005a 0022     		movs	r2, #0
 924 005c 084B     		ldr	r3, .L62+8
 925 005e FFF7FEFF 		bl	__aeabi_dmul
 926              	.LVL123:
 927 0062 FFF7FEFF 		bl	ceil
 928              	.LVL124:
 929 0066 FFF7FEFF 		bl	__aeabi_d2uiz
 930              	.LVL125:
 931 006a 064B     		ldr	r3, .L62+12
 932 006c 1860     		str	r0, [r3]
 399:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 933              		.loc 1 399 0
 934 006e 0122     		movs	r2, #1
 935 0070 014B     		ldr	r3, .L62
 936 0072 1A70     		strb	r2, [r3]
 401:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 937              		.loc 1 401 0
 938 0074 12B0     		add	sp, sp, #72
 939              	.LCFI19:
 940              		.cfi_def_cfa_offset 8
 941              		@ sp needed
 942 0076 10BD     		pop	{r4, pc}
 943              	.LVL126:
 944              	.L63:
 945              		.align	2
 946              	.L62:
 947 0078 00000000 		.word	.LANCHOR7
 948 007c 00000000 		.word	.LANCHOR3
 949 0080 0040DF3F 		.word	1071595520
 950 0084 00000000 		.word	.LANCHOR8
 951              		.cfi_endproc
 952              	.LFE82:
ARM GAS  /tmp/ccWJ882I.s 			page 32


 954              		.section	.text.RtcInit,"ax",%progbits
 955              		.align	1
 956              		.global	RtcInit
 957              		.syntax unified
 958              		.thumb
 959              		.thumb_func
 960              		.fpu softvfp
 962              	RtcInit:
 963              	.LFB72:
 211:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     RtcCalendar_t rtcInit;
 964              		.loc 1 211 0
 965              		.cfi_startproc
 966              		@ args = 0, pretend = 0, frame = 32
 967              		@ frame_needed = 0, uses_anonymous_args = 0
 214:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 968              		.loc 1 214 0
 969 0000 1F4B     		ldr	r3, .L71
 970 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 971 0004 03B1     		cbz	r3, .L70
 972 0006 7047     		bx	lr
 973              	.L70:
 211:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     RtcCalendar_t rtcInit;
 974              		.loc 1 211 0
 975 0008 70B5     		push	{r4, r5, r6, lr}
 976              	.LCFI20:
 977              		.cfi_def_cfa_offset 16
 978              		.cfi_offset 4, -16
 979              		.cfi_offset 5, -12
 980              		.cfi_offset 6, -8
 981              		.cfi_offset 14, -4
 982 000a 88B0     		sub	sp, sp, #32
 983              	.LCFI21:
 984              		.cfi_def_cfa_offset 48
 216:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 985              		.loc 1 216 0
 986 000c 0126     		movs	r6, #1
 987 000e 1D4B     		ldr	r3, .L71+4
 988 0010 1E60     		str	r6, [r3]
 218:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 989              		.loc 1 218 0
 990 0012 1D4D     		ldr	r5, .L71+8
 991 0014 1D4B     		ldr	r3, .L71+12
 992 0016 2B60     		str	r3, [r5]
 219:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 993              		.loc 1 219 0
 994 0018 0024     		movs	r4, #0
 995 001a 6C60     		str	r4, [r5, #4]
 221:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         RtcHandle.Init.SynchPrediv = 3;
 996              		.loc 1 221 0
 997 001c 0323     		movs	r3, #3
 998 001e AB60     		str	r3, [r5, #8]
 222:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 999              		.loc 1 222 0
 1000 0020 EB60     		str	r3, [r5, #12]
 224:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 1001              		.loc 1 224 0
 1002 0022 2C61     		str	r4, [r5, #16]
ARM GAS  /tmp/ccWJ882I.s 			page 33


 225:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 1003              		.loc 1 225 0
 1004 0024 6C61     		str	r4, [r5, #20]
 226:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         HAL_RTC_Init( &RtcHandle );
 1005              		.loc 1 226 0
 1006 0026 AC61     		str	r4, [r5, #24]
 227:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 1007              		.loc 1 227 0
 1008 0028 2846     		mov	r0, r5
 1009 002a FFF7FEFF 		bl	HAL_RTC_Init
 1010              	.LVL127:
 230:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         rtcInit.CalendarDate.Month = 1;
 1011              		.loc 1 230 0
 1012 002e 8DF80940 		strb	r4, [sp, #9]
 231:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         rtcInit.CalendarDate.Date = 1;
 1013              		.loc 1 231 0
 1014 0032 8DF80760 		strb	r6, [sp, #7]
 232:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         rtcInit.CalendarDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 1015              		.loc 1 232 0
 1016 0036 8DF80860 		strb	r6, [sp, #8]
 233:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         HAL_RTC_SetDate( &RtcHandle, &rtcInit.CalendarDate, RTC_FORMAT_BIN );
 1017              		.loc 1 233 0
 1018 003a 08A9     		add	r1, sp, #32
 1019 003c 0623     		movs	r3, #6
 1020 003e 01F81A3D 		strb	r3, [r1, #-26]!
 234:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 1021              		.loc 1 234 0
 1022 0042 2246     		mov	r2, r4
 1023 0044 2846     		mov	r0, r5
 1024 0046 FFF7FEFF 		bl	HAL_RTC_SetDate
 1025              	.LVL128:
 237:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         rtcInit.CalendarTime.Minutes = 0;
 1026              		.loc 1 237 0
 1027 004a 8DF80C40 		strb	r4, [sp, #12]
 238:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         rtcInit.CalendarTime.Seconds = 0;
 1028              		.loc 1 238 0
 1029 004e 8DF80D40 		strb	r4, [sp, #13]
 239:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         rtcInit.CalendarTime.TimeFormat = RTC_HOURFORMAT12_AM;
 1030              		.loc 1 239 0
 1031 0052 8DF80E40 		strb	r4, [sp, #14]
 240:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         rtcInit.CalendarTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 1032              		.loc 1 240 0
 1033 0056 8DF80F40 		strb	r4, [sp, #15]
 241:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         rtcInit.CalendarTime.StoreOperation = RTC_STOREOPERATION_RESET;
 1034              		.loc 1 241 0
 1035 005a 0694     		str	r4, [sp, #24]
 242:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         HAL_RTC_SetTime( &RtcHandle, &rtcInit.CalendarTime, RTC_FORMAT_BIN );
 1036              		.loc 1 242 0
 1037 005c 0794     		str	r4, [sp, #28]
 243:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 1038              		.loc 1 243 0
 1039 005e 2246     		mov	r2, r4
 1040 0060 03A9     		add	r1, sp, #12
 1041 0062 2846     		mov	r0, r5
 1042 0064 FFF7FEFF 		bl	HAL_RTC_SetTime
 1043              	.LVL129:
 245:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         HAL_NVIC_EnableIRQ( RTC_Alarm_IRQn );
ARM GAS  /tmp/ccWJ882I.s 			page 34


 1044              		.loc 1 245 0
 1045 0068 2246     		mov	r2, r4
 1046 006a 0421     		movs	r1, #4
 1047 006c 2920     		movs	r0, #41
 1048 006e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 1049              	.LVL130:
 246:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         RtcInitialized = true;
 1050              		.loc 1 246 0
 1051 0072 2920     		movs	r0, #41
 1052 0074 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 1053              	.LVL131:
 247:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 1054              		.loc 1 247 0
 1055 0078 014B     		ldr	r3, .L71
 1056 007a 1E70     		strb	r6, [r3]
 249:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 1057              		.loc 1 249 0
 1058 007c 08B0     		add	sp, sp, #32
 1059              	.LCFI22:
 1060              		.cfi_def_cfa_offset 16
 1061              		@ sp needed
 1062 007e 70BD     		pop	{r4, r5, r6, pc}
 1063              	.L72:
 1064              		.align	2
 1065              	.L71:
 1066 0080 00000000 		.word	.LANCHOR9
 1067 0084 D8064742 		.word	1111951064
 1068 0088 00000000 		.word	.LANCHOR3
 1069 008c 00280040 		.word	1073752064
 1070              		.cfi_endproc
 1071              	.LFE72:
 1073              		.section	.text.RtcSetTimeout,"ax",%progbits
 1074              		.align	1
 1075              		.global	RtcSetTimeout
 1076              		.syntax unified
 1077              		.thumb
 1078              		.thumb_func
 1079              		.fpu softvfp
 1081              	RtcSetTimeout:
 1082              	.LFB73:
 252:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     RtcStartWakeUpAlarm( timeout );
 1083              		.loc 1 252 0
 1084              		.cfi_startproc
 1085              		@ args = 0, pretend = 0, frame = 0
 1086              		@ frame_needed = 0, uses_anonymous_args = 0
 1087              	.LVL132:
 1088 0000 08B5     		push	{r3, lr}
 1089              	.LCFI23:
 1090              		.cfi_def_cfa_offset 8
 1091              		.cfi_offset 3, -8
 1092              		.cfi_offset 14, -4
 253:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** }
 1093              		.loc 1 253 0
 1094 0002 FFF7FEFF 		bl	RtcStartWakeUpAlarm
 1095              	.LVL133:
 1096 0006 08BD     		pop	{r3, pc}
 1097              		.cfi_endproc
ARM GAS  /tmp/ccWJ882I.s 			page 35


 1098              	.LFE73:
 1100              		.section	.text.RtcGetAdjustedTimeoutValue,"ax",%progbits
 1101              		.align	1
 1102              		.global	RtcGetAdjustedTimeoutValue
 1103              		.syntax unified
 1104              		.thumb
 1105              		.thumb_func
 1106              		.fpu softvfp
 1108              	RtcGetAdjustedTimeoutValue:
 1109              	.LFB74:
 257:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     if( timeout > McuWakeUpTime )
 1110              		.loc 1 257 0
 1111              		.cfi_startproc
 1112              		@ args = 0, pretend = 0, frame = 0
 1113              		@ frame_needed = 0, uses_anonymous_args = 0
 1114              		@ link register save eliminated.
 1115              	.LVL134:
 258:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {   // we have waken up from a GPIO and we have lost "McuWakeUpTime" that we need to compensate
 1116              		.loc 1 258 0
 1117 0000 0E4B     		ldr	r3, .L80
 1118 0002 1B68     		ldr	r3, [r3]
 1119 0004 8342     		cmp	r3, r0
 1120 0006 08D2     		bcs	.L76
 260:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         {
 1121              		.loc 1 260 0
 1122 0008 0D4B     		ldr	r3, .L80+4
 1123 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1124 000c 2BB1     		cbz	r3, .L76
 262:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****             timeout -= McuWakeUpTime;
 1125              		.loc 1 262 0
 1126 000e 0022     		movs	r2, #0
 1127 0010 0B4B     		ldr	r3, .L80+4
 1128 0012 1A70     		strb	r2, [r3]
 263:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         }
 1129              		.loc 1 263 0
 1130 0014 094B     		ldr	r3, .L80
 1131 0016 1B68     		ldr	r3, [r3]
 1132 0018 C01A     		subs	r0, r0, r3
 1133              	.LVL135:
 1134              	.L76:
 267:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {   // we don't go in low power mode for delay below 50ms (needed for LEDs)
 1135              		.loc 1 267 0
 1136 001a 084B     		ldr	r3, .L80
 1137 001c 1B68     		ldr	r3, [r3]
 1138 001e 9842     		cmp	r0, r3
 1139 0020 07D9     		bls	.L77
 269:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         {
 1140              		.loc 1 269 0
 1141 0022 3128     		cmp	r0, #49
 1142 0024 06D9     		bls	.L79
 275:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****             timeout -= McuWakeUpTime;
 1143              		.loc 1 275 0
 1144 0026 0122     		movs	r2, #1
 1145 0028 064B     		ldr	r3, .L80+8
 1146 002a 1A70     		strb	r2, [r3]
 276:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         }
 1147              		.loc 1 276 0
ARM GAS  /tmp/ccWJ882I.s 			page 36


 1148 002c 034B     		ldr	r3, .L80
 1149 002e 1B68     		ldr	r3, [r3]
 1150 0030 C01A     		subs	r0, r0, r3
 1151              	.LVL136:
 1152              	.L77:
 280:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 1153              		.loc 1 280 0
 1154 0032 7047     		bx	lr
 1155              	.L79:
 271:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         }
 1156              		.loc 1 271 0
 1157 0034 0022     		movs	r2, #0
 1158 0036 034B     		ldr	r3, .L80+8
 1159 0038 1A70     		strb	r2, [r3]
 1160 003a 7047     		bx	lr
 1161              	.L81:
 1162              		.align	2
 1163              	.L80:
 1164 003c 00000000 		.word	.LANCHOR8
 1165 0040 00000000 		.word	.LANCHOR10
 1166 0044 00000000 		.word	.LANCHOR11
 1167              		.cfi_endproc
 1168              	.LFE74:
 1170              		.section	.text.RtcGetTimerValue,"ax",%progbits
 1171              		.align	1
 1172              		.global	RtcGetTimerValue
 1173              		.syntax unified
 1174              		.thumb
 1175              		.thumb_func
 1176              		.fpu softvfp
 1178              	RtcGetTimerValue:
 1179              	.LFB75:
 283:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     return( RtcConvertCalendarTickToTimerTime( NULL ) );
 1180              		.loc 1 283 0
 1181              		.cfi_startproc
 1182              		@ args = 0, pretend = 0, frame = 0
 1183              		@ frame_needed = 0, uses_anonymous_args = 0
 1184 0000 08B5     		push	{r3, lr}
 1185              	.LCFI24:
 1186              		.cfi_def_cfa_offset 8
 1187              		.cfi_offset 3, -8
 1188              		.cfi_offset 14, -4
 284:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** }
 1189              		.loc 1 284 0
 1190 0002 0020     		movs	r0, #0
 1191 0004 FFF7FEFF 		bl	RtcConvertCalendarTickToTimerTime
 1192              	.LVL137:
 285:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 1193              		.loc 1 285 0
 1194 0008 08BD     		pop	{r3, pc}
 1195              		.cfi_endproc
 1196              	.LFE75:
 1198              		.section	.text.RtcGetElapsedAlarmTime,"ax",%progbits
 1199              		.align	1
 1200              		.global	RtcGetElapsedAlarmTime
 1201              		.syntax unified
 1202              		.thumb
ARM GAS  /tmp/ccWJ882I.s 			page 37


 1203              		.thumb_func
 1204              		.fpu softvfp
 1206              	RtcGetElapsedAlarmTime:
 1207              	.LFB76:
 288:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     TimerTime_t currentTime = 0;
 1208              		.loc 1 288 0
 1209              		.cfi_startproc
 1210              		@ args = 0, pretend = 0, frame = 0
 1211              		@ frame_needed = 0, uses_anonymous_args = 0
 1212 0000 10B5     		push	{r4, lr}
 1213              	.LCFI25:
 1214              		.cfi_def_cfa_offset 8
 1215              		.cfi_offset 4, -8
 1216              		.cfi_offset 14, -4
 1217              	.LVL138:
 292:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     contextTime = RtcConvertCalendarTickToTimerTime( &RtcCalendarContext );
 1218              		.loc 1 292 0
 1219 0002 0020     		movs	r0, #0
 1220 0004 FFF7FEFF 		bl	RtcConvertCalendarTickToTimerTime
 1221              	.LVL139:
 1222 0008 0446     		mov	r4, r0
 1223              	.LVL140:
 293:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 1224              		.loc 1 293 0
 1225 000a 0548     		ldr	r0, .L89
 1226              	.LVL141:
 1227 000c FFF7FEFF 		bl	RtcConvertCalendarTickToTimerTime
 1228              	.LVL142:
 295:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 1229              		.loc 1 295 0
 1230 0010 8442     		cmp	r4, r0
 1231 0012 01D3     		bcc	.L88
 301:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 1232              		.loc 1 301 0
 1233 0014 201A     		subs	r0, r4, r0
 1234              	.LVL143:
 303:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 1235              		.loc 1 303 0
 1236 0016 10BD     		pop	{r4, pc}
 1237              	.LVL144:
 1238              	.L88:
 297:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 1239              		.loc 1 297 0
 1240 0018 201A     		subs	r0, r4, r0
 1241              	.LVL145:
 1242 001a 0138     		subs	r0, r0, #1
 1243 001c 10BD     		pop	{r4, pc}
 1244              	.LVL146:
 1245              	.L90:
 1246 001e 00BF     		.align	2
 1247              	.L89:
 1248 0020 00000000 		.word	RtcCalendarContext
 1249              		.cfi_endproc
 1250              	.LFE76:
 1252              		.section	.text.RtcComputeFutureEventTime,"ax",%progbits
 1253              		.align	1
 1254              		.global	RtcComputeFutureEventTime
ARM GAS  /tmp/ccWJ882I.s 			page 38


 1255              		.syntax unified
 1256              		.thumb
 1257              		.thumb_func
 1258              		.fpu softvfp
 1260              	RtcComputeFutureEventTime:
 1261              	.LFB77:
 306:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     return( RtcGetTimerValue( ) + futureEventInTime );
 1262              		.loc 1 306 0
 1263              		.cfi_startproc
 1264              		@ args = 0, pretend = 0, frame = 0
 1265              		@ frame_needed = 0, uses_anonymous_args = 0
 1266              	.LVL147:
 1267 0000 10B5     		push	{r4, lr}
 1268              	.LCFI26:
 1269              		.cfi_def_cfa_offset 8
 1270              		.cfi_offset 4, -8
 1271              		.cfi_offset 14, -4
 1272 0002 0446     		mov	r4, r0
 307:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** }
 1273              		.loc 1 307 0
 1274 0004 FFF7FEFF 		bl	RtcGetTimerValue
 1275              	.LVL148:
 308:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 1276              		.loc 1 308 0
 1277 0008 2044     		add	r0, r0, r4
 1278 000a 10BD     		pop	{r4, pc}
 1279              		.cfi_endproc
 1280              	.LFE77:
 1282              		.section	.text.RtcComputeElapsedTime,"ax",%progbits
 1283              		.align	1
 1284              		.global	RtcComputeElapsedTime
 1285              		.syntax unified
 1286              		.thumb
 1287              		.thumb_func
 1288              		.fpu softvfp
 1290              	RtcComputeElapsedTime:
 1291              	.LFB78:
 311:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     TimerTime_t elapsedTime = 0;
 1292              		.loc 1 311 0
 1293              		.cfi_startproc
 1294              		@ args = 0, pretend = 0, frame = 0
 1295              		@ frame_needed = 0, uses_anonymous_args = 0
 1296              	.LVL149:
 1297 0000 10B5     		push	{r4, lr}
 1298              	.LCFI27:
 1299              		.cfi_def_cfa_offset 8
 1300              		.cfi_offset 4, -8
 1301              		.cfi_offset 14, -4
 1302              	.LVL150:
 315:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 1303              		.loc 1 315 0
 1304 0002 0446     		mov	r4, r0
 1305 0004 08B9     		cbnz	r0, .L97
 1306              	.LVL151:
 1307              	.L94:
 330:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 1308              		.loc 1 330 0
ARM GAS  /tmp/ccWJ882I.s 			page 39


 1309 0006 2046     		mov	r0, r4
 1310 0008 10BD     		pop	{r4, pc}
 1311              	.LVL152:
 1312              	.L97:
 320:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 1313              		.loc 1 320 0
 1314 000a 0020     		movs	r0, #0
 1315              	.LVL153:
 1316 000c FFF7FEFF 		bl	RtcConvertCalendarTickToTimerTime
 1317              	.LVL154:
 322:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     { // roll over of the counter
 1318              		.loc 1 322 0
 1319 0010 8442     		cmp	r4, r0
 1320 0012 01D8     		bhi	.L98
 328:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 1321              		.loc 1 328 0
 1322 0014 041B     		subs	r4, r0, r4
 1323              	.LVL155:
 1324 0016 F6E7     		b	.L94
 1325              	.LVL156:
 1326              	.L98:
 324:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 1327              		.loc 1 324 0
 1328 0018 041B     		subs	r4, r0, r4
 1329              	.LVL157:
 1330 001a 013C     		subs	r4, r4, #1
 1331 001c F3E7     		b	.L94
 1332              		.cfi_endproc
 1333              	.LFE78:
 1335              		.section	.text.RtcEnterLowPowerStopMode,"ax",%progbits
 1336              		.align	1
 1337              		.global	RtcEnterLowPowerStopMode
 1338              		.syntax unified
 1339              		.thumb
 1340              		.thumb_func
 1341              		.fpu softvfp
 1343              	RtcEnterLowPowerStopMode:
 1344              	.LFB80:
 342:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     if( ( LowPowerDisableDuringTask == false ) && ( RtcTimerEventAllowsLowPower == true ) )
 1345              		.loc 1 342 0
 1346              		.cfi_startproc
 1347              		@ args = 0, pretend = 0, frame = 0
 1348              		@ frame_needed = 0, uses_anonymous_args = 0
 1349 0000 08B5     		push	{r3, lr}
 1350              	.LCFI28:
 1351              		.cfi_def_cfa_offset 8
 1352              		.cfi_offset 3, -8
 1353              		.cfi_offset 14, -4
 343:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 1354              		.loc 1 343 0
 1355 0002 0C4B     		ldr	r3, .L103
 1356 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1357 0006 13B9     		cbnz	r3, .L99
 343:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 1358              		.loc 1 343 0 is_stmt 0 discriminator 1
 1359 0008 0B4B     		ldr	r3, .L103+4
 1360 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  /tmp/ccWJ882I.s 			page 40


 1361 000c 03B9     		cbnz	r3, .L102
 1362              	.L99:
 1363 000e 08BD     		pop	{r3, pc}
 1364              	.L102:
 345:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 1365              		.loc 1 345 0 is_stmt 1
 1366 0010 FFF7FEFF 		bl	BoardDeInitMcu
 1367              	.LVL158:
 348:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 1368              		.loc 1 348 0
 1369 0014 FFF7FEFF 		bl	HAL_PWR_DisablePVD
 1370              	.LVL159:
 350:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 1371              		.loc 1 350 0
 1372 0018 084A     		ldr	r2, .L103+8
 1373 001a 1368     		ldr	r3, [r2]
 1374 001c 43F00403 		orr	r3, r3, #4
 1375 0020 1360     		str	r3, [r2]
 353:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 1376              		.loc 1 353 0
 1377 0022 FFF7FEFF 		bl	HAL_PWREx_EnableUltraLowPower
 1378              	.LVL160:
 356:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 1379              		.loc 1 356 0
 1380 0026 FFF7FEFF 		bl	HAL_PWREx_EnableFastWakeUp
 1381              	.LVL161:
 359:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 1382              		.loc 1 359 0
 1383 002a 0121     		movs	r1, #1
 1384 002c 0846     		mov	r0, r1
 1385 002e FFF7FEFF 		bl	HAL_PWR_EnterSTOPMode
 1386              	.LVL162:
 361:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 1387              		.loc 1 361 0
 1388 0032 ECE7     		b	.L99
 1389              	.L104:
 1390              		.align	2
 1391              	.L103:
 1392 0034 00000000 		.word	.LANCHOR12
 1393 0038 00000000 		.word	.LANCHOR11
 1394 003c 00700040 		.word	1073770496
 1395              		.cfi_endproc
 1396              	.LFE80:
 1398              		.section	.text.RtcRecoverMcuStatus,"ax",%progbits
 1399              		.align	1
 1400              		.global	RtcRecoverMcuStatus
 1401              		.syntax unified
 1402              		.thumb
 1403              		.thumb_func
 1404              		.fpu softvfp
 1406              	RtcRecoverMcuStatus:
 1407              	.LFB81:
 364:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     // PWR_FLAG_WU indicates the Alarm has waken-up the MCU
 1408              		.loc 1 364 0
 1409              		.cfi_startproc
 1410              		@ args = 0, pretend = 0, frame = 0
 1411              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccWJ882I.s 			page 41


 1412 0000 08B5     		push	{r3, lr}
 1413              	.LCFI29:
 1414              		.cfi_def_cfa_offset 8
 1415              		.cfi_offset 3, -8
 1416              		.cfi_offset 14, -4
 366:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 1417              		.loc 1 366 0
 1418 0002 0E4B     		ldr	r3, .L111
 1419 0004 5B68     		ldr	r3, [r3, #4]
 1420 0006 13F0010F 		tst	r3, #1
 1421 000a 12D0     		beq	.L106
 368:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 1422              		.loc 1 368 0
 1423 000c 0B4A     		ldr	r2, .L111
 1424 000e 1368     		ldr	r3, [r2]
 1425 0010 43F00403 		orr	r3, r3, #4
 1426 0014 1360     		str	r3, [r2]
 1427              	.L107:
 375:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         ( __HAL_RCC_GET_SYSCLK_SOURCE( ) == RCC_SYSCLKSOURCE_STATUS_MSI ) )
 1428              		.loc 1 375 0
 1429 0016 0A4B     		ldr	r3, .L111+4
 1430 0018 9B68     		ldr	r3, [r3, #8]
 1431 001a 03F00C03 		and	r3, r3, #12
 1432 001e 042B     		cmp	r3, #4
 1433 0020 04D0     		beq	.L108
 376:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 1434              		.loc 1 376 0 discriminator 1
 1435 0022 074B     		ldr	r3, .L111+4
 1436 0024 9B68     		ldr	r3, [r3, #8]
 375:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         ( __HAL_RCC_GET_SYSCLK_SOURCE( ) == RCC_SYSCLKSOURCE_STATUS_MSI ) )
 1437              		.loc 1 375 0 discriminator 1
 1438 0026 13F00C0F 		tst	r3, #12
 1439 002a 01D1     		bne	.L105
 1440              	.L108:
 378:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 1441              		.loc 1 378 0
 1442 002c FFF7FEFF 		bl	BoardInitMcu
 1443              	.LVL163:
 1444              	.L105:
 1445 0030 08BD     		pop	{r3, pc}
 1446              	.L106:
 372:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 1447              		.loc 1 372 0
 1448 0032 0122     		movs	r2, #1
 1449 0034 034B     		ldr	r3, .L111+8
 1450 0036 1A70     		strb	r2, [r3]
 1451 0038 EDE7     		b	.L107
 1452              	.L112:
 1453 003a 00BF     		.align	2
 1454              	.L111:
 1455 003c 00700040 		.word	1073770496
 1456 0040 00380240 		.word	1073887232
 1457 0044 00000000 		.word	.LANCHOR10
 1458              		.cfi_endproc
 1459              	.LFE81:
 1461              		.section	.text.BlockLowPowerDuringTask,"ax",%progbits
 1462              		.align	1
ARM GAS  /tmp/ccWJ882I.s 			page 42


 1463              		.global	BlockLowPowerDuringTask
 1464              		.syntax unified
 1465              		.thumb
 1466              		.thumb_func
 1467              		.fpu softvfp
 1469              	BlockLowPowerDuringTask:
 1470              	.LFB79:
 333:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     if( status == true )
 1471              		.loc 1 333 0
 1472              		.cfi_startproc
 1473              		@ args = 0, pretend = 0, frame = 0
 1474              		@ frame_needed = 0, uses_anonymous_args = 0
 1475              	.LVL164:
 1476 0000 10B5     		push	{r4, lr}
 1477              	.LCFI30:
 1478              		.cfi_def_cfa_offset 8
 1479              		.cfi_offset 4, -8
 1480              		.cfi_offset 14, -4
 334:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 1481              		.loc 1 334 0
 1482 0002 0446     		mov	r4, r0
 1483 0004 10B9     		cbnz	r0, .L116
 1484              	.LVL165:
 1485              	.L114:
 338:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** }
 1486              		.loc 1 338 0
 1487 0006 034B     		ldr	r3, .L117
 1488 0008 1C70     		strb	r4, [r3]
 1489 000a 10BD     		pop	{r4, pc}
 1490              	.LVL166:
 1491              	.L116:
 336:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 1492              		.loc 1 336 0
 1493 000c FFF7FEFF 		bl	RtcRecoverMcuStatus
 1494              	.LVL167:
 1495 0010 F9E7     		b	.L114
 1496              	.L118:
 1497 0012 00BF     		.align	2
 1498              	.L117:
 1499 0014 00000000 		.word	.LANCHOR12
 1500              		.cfi_endproc
 1501              	.LFE79:
 1503              		.section	.text.RtcConvertTimerTimeToCalendarTick,"ax",%progbits
 1504              		.align	1
 1505              		.global	RtcConvertTimerTimeToCalendarTick
 1506              		.syntax unified
 1507              		.thumb
 1508              		.thumb_func
 1509              		.fpu softvfp
 1511              	RtcConvertTimerTimeToCalendarTick:
 1512              	.LFB85:
 547:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     RtcCalendar_t calendar = { 0 };
 1513              		.loc 1 547 0
 1514              		.cfi_startproc
 1515              		@ args = 0, pretend = 0, frame = 8
 1516              		@ frame_needed = 0, uses_anonymous_args = 0
 1517              	.LVL168:
ARM GAS  /tmp/ccWJ882I.s 			page 43


 1518 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1519              	.LCFI31:
 1520              		.cfi_def_cfa_offset 36
 1521              		.cfi_offset 4, -36
 1522              		.cfi_offset 5, -32
 1523              		.cfi_offset 6, -28
 1524              		.cfi_offset 7, -24
 1525              		.cfi_offset 8, -20
 1526              		.cfi_offset 9, -16
 1527              		.cfi_offset 10, -12
 1528              		.cfi_offset 11, -8
 1529              		.cfi_offset 14, -4
 1530 0004 83B0     		sub	sp, sp, #12
 1531              	.LCFI32:
 1532              		.cfi_def_cfa_offset 48
 1533 0006 8246     		mov	r10, r0
 548:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 1534              		.loc 1 548 0
 1535 0008 0026     		movs	r6, #0
 1536 000a 0660     		str	r6, [r0]
 1537 000c 4660     		str	r6, [r0, #4]
 1538 000e 8660     		str	r6, [r0, #8]
 1539 0010 C660     		str	r6, [r0, #12]
 1540 0012 0661     		str	r6, [r0, #16]
 1541 0014 4661     		str	r6, [r0, #20]
 1542 0016 8661     		str	r6, [r0, #24]
 1543              	.LVL169:
 559:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 1544              		.loc 1 559 0
 1545 0018 0846     		mov	r0, r1
 1546              	.LVL170:
 1547 001a FFF7FEFF 		bl	__aeabi_ui2d
 1548              	.LVL171:
 1549 001e 78A3     		adr	r3, .L146
 1550 0020 D3E90023 		ldrd	r2, [r3]
 1551 0024 FFF7FEFF 		bl	__aeabi_dmul
 1552              	.LVL172:
 1553 0028 0446     		mov	r4, r0
 1554 002a 0D46     		mov	r5, r1
 1555              	.LVL173:
 556:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     double timeCounterTemp = 0.0;
 1556              		.loc 1 556 0
 1557 002c 0196     		str	r6, [sp, #4]
 562:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 1558              		.loc 1 562 0
 1559 002e 0CE0     		b	.L120
 1560              	.LVL174:
 1561              	.L121:
 566:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         }
 1562              		.loc 1 566 0
 1563 0030 75A3     		adr	r3, .L146+8
 1564 0032 D3E90023 		ldrd	r2, [r3]
 1565 0036 2046     		mov	r0, r4
 1566 0038 2946     		mov	r1, r5
 1567 003a FFF7FEFF 		bl	__aeabi_dsub
 1568              	.LVL175:
 1569 003e 0446     		mov	r4, r0
ARM GAS  /tmp/ccWJ882I.s 			page 44


 1570              	.LVL176:
 1571 0040 0D46     		mov	r5, r1
 1572              	.LVL177:
 1573              	.L123:
 572:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         if( years == 100 )
 1574              		.loc 1 572 0
 1575 0042 0136     		adds	r6, r6, #1
 1576              	.LVL178:
 1577 0044 B6B2     		uxth	r6, r6
 1578              	.LVL179:
 573:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         {
 1579              		.loc 1 573 0
 1580 0046 642E     		cmp	r6, #100
 1581 0048 16D0     		beq	.L144
 1582              	.LVL180:
 1583              	.L120:
 562:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 1584              		.loc 1 562 0
 1585 004a 6FA3     		adr	r3, .L146+8
 1586 004c D3E90023 		ldrd	r2, [r3]
 1587 0050 2046     		mov	r0, r4
 1588 0052 2946     		mov	r1, r5
 1589 0054 FFF7FEFF 		bl	__aeabi_dcmpge
 1590              	.LVL181:
 1591 0058 A0B1     		cbz	r0, .L145
 564:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         {
 1592              		.loc 1 564 0
 1593 005a 002E     		cmp	r6, #0
 1594 005c E8D0     		beq	.L121
 564:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         {
 1595              		.loc 1 564 0 is_stmt 0 discriminator 1
 1596 005e 16F0030F 		tst	r6, #3
 1597 0062 E5D0     		beq	.L121
 570:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         }
 1598              		.loc 1 570 0 is_stmt 1
 1599 0064 6AA3     		adr	r3, .L146+16
 1600 0066 D3E90023 		ldrd	r2, [r3]
 1601 006a 2046     		mov	r0, r4
 1602 006c 2946     		mov	r1, r5
 1603 006e FFF7FEFF 		bl	__aeabi_dsub
 1604              	.LVL182:
 1605 0072 0446     		mov	r4, r0
 1606              	.LVL183:
 1607 0074 0D46     		mov	r5, r1
 1608              	.LVL184:
 1609 0076 E4E7     		b	.L123
 1610              	.L144:
 575:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****             years = 0;
 1611              		.loc 1 575 0
 1612 0078 019B     		ldr	r3, [sp, #4]
 1613 007a 6433     		adds	r3, r3, #100
 1614 007c 9BB2     		uxth	r3, r3
 1615 007e 0193     		str	r3, [sp, #4]
 1616              	.LVL185:
 576:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         }
 1617              		.loc 1 576 0
 1618 0080 0026     		movs	r6, #0
ARM GAS  /tmp/ccWJ882I.s 			page 45


 1619 0082 E2E7     		b	.L120
 1620              	.LVL186:
 1621              	.L145:
 580:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 1622              		.loc 1 580 0
 1623 0084 62A3     		adr	r3, .L146+16
 1624 0086 D3E90023 		ldrd	r2, [r3]
 1625 008a 2046     		mov	r0, r4
 1626 008c 2946     		mov	r1, r5
 1627 008e FFF7FEFF 		bl	__aeabi_dcmpge
 1628              	.LVL187:
 1629 0092 70B1     		cbz	r0, .L126
 582:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         {
 1630              		.loc 1 582 0
 1631 0094 6EB1     		cbz	r6, .L126
 582:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         {
 1632              		.loc 1 582 0 is_stmt 0 discriminator 1
 1633 0096 16F0030F 		tst	r6, #3
 1634 009a 0AD0     		beq	.L126
 588:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****             years++;
 1635              		.loc 1 588 0 is_stmt 1
 1636 009c 5CA3     		adr	r3, .L146+16
 1637 009e D3E90023 		ldrd	r2, [r3]
 1638 00a2 2046     		mov	r0, r4
 1639 00a4 2946     		mov	r1, r5
 1640 00a6 FFF7FEFF 		bl	__aeabi_dsub
 1641              	.LVL188:
 1642 00aa 0446     		mov	r4, r0
 1643              	.LVL189:
 1644 00ac 0D46     		mov	r5, r1
 1645              	.LVL190:
 589:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         }
 1646              		.loc 1 589 0
 1647 00ae 0136     		adds	r6, r6, #1
 1648              	.LVL191:
 1649 00b0 B6B2     		uxth	r6, r6
 1650              	.LVL192:
 1651              	.L126:
 593:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 1652              		.loc 1 593 0
 1653 00b2 26B1     		cbz	r6, .L140
 593:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 1654              		.loc 1 593 0 is_stmt 0 discriminator 1
 1655 00b4 16F0030F 		tst	r6, #3
 1656 00b8 3FD1     		bne	.L141
 1657 00ba 0127     		movs	r7, #1
 1658 00bc 0BE0     		b	.L130
 1659              	.L140:
 1660 00be 0127     		movs	r7, #1
 1661 00c0 09E0     		b	.L130
 1662              	.LVL193:
 1663              	.L131:
 597:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****             months++;
 1664              		.loc 1 597 0 is_stmt 1
 1665 00c2 4246     		mov	r2, r8
 1666 00c4 4B46     		mov	r3, r9
 1667 00c6 2046     		mov	r0, r4
ARM GAS  /tmp/ccWJ882I.s 			page 46


 1668 00c8 2946     		mov	r1, r5
 1669 00ca FFF7FEFF 		bl	__aeabi_dsub
 1670              	.LVL194:
 1671 00ce 0446     		mov	r4, r0
 1672              	.LVL195:
 1673 00d0 0D46     		mov	r5, r1
 1674              	.LVL196:
 598:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         }
 1675              		.loc 1 598 0
 1676 00d2 0137     		adds	r7, r7, #1
 1677              	.LVL197:
 1678 00d4 FFB2     		uxtb	r7, r7
 1679              	.LVL198:
 1680              	.L130:
 595:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         {
 1681              		.loc 1 595 0
 1682 00d6 7B1E     		subs	r3, r7, #1
 1683 00d8 534A     		ldr	r2, .L146+40
 1684 00da D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1685 00dc 5348     		ldr	r0, .L146+44
 1686 00de 00FB03F0 		mul	r0, r0, r3
 1687 00e2 FFF7FEFF 		bl	__aeabi_ui2d
 1688              	.LVL199:
 1689 00e6 8046     		mov	r8, r0
 1690 00e8 8946     		mov	r9, r1
 1691 00ea 0246     		mov	r2, r0
 1692 00ec 0B46     		mov	r3, r1
 1693 00ee 2046     		mov	r0, r4
 1694 00f0 2946     		mov	r1, r5
 1695 00f2 FFF7FEFF 		bl	__aeabi_dcmpge
 1696              	.LVL200:
 1697 00f6 0028     		cmp	r0, #0
 1698 00f8 E3D1     		bne	.L131
 1699              	.L132:
 1700 00fa 4FF00008 		mov	r8, #0
 1701 00fe 2BE0     		b	.L134
 1702              	.L133:
 605:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****             months++;
 1703              		.loc 1 605 0
 1704 0100 4246     		mov	r2, r8
 1705 0102 4B46     		mov	r3, r9
 1706 0104 2046     		mov	r0, r4
 1707 0106 2946     		mov	r1, r5
 1708 0108 FFF7FEFF 		bl	__aeabi_dsub
 1709              	.LVL201:
 1710 010c 0446     		mov	r4, r0
 1711              	.LVL202:
 1712 010e 0D46     		mov	r5, r1
 1713              	.LVL203:
 606:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         }
 1714              		.loc 1 606 0
 1715 0110 0137     		adds	r7, r7, #1
 1716              	.LVL204:
 1717 0112 FFB2     		uxtb	r7, r7
 1718              	.LVL205:
 1719              	.L129:
 603:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         {
ARM GAS  /tmp/ccWJ882I.s 			page 47


 1720              		.loc 1 603 0
 1721 0114 7B1E     		subs	r3, r7, #1
 1722 0116 464A     		ldr	r2, .L146+48
 1723 0118 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1724 011a 4448     		ldr	r0, .L146+44
 1725 011c 00FB03F0 		mul	r0, r0, r3
 1726 0120 FFF7FEFF 		bl	__aeabi_ui2d
 1727              	.LVL206:
 1728 0124 8046     		mov	r8, r0
 1729 0126 8946     		mov	r9, r1
 1730 0128 0246     		mov	r2, r0
 1731 012a 0B46     		mov	r3, r1
 1732 012c 2046     		mov	r0, r4
 1733 012e 2946     		mov	r1, r5
 1734 0130 FFF7FEFF 		bl	__aeabi_dcmpge
 1735              	.LVL207:
 1736 0134 0028     		cmp	r0, #0
 1737 0136 E3D1     		bne	.L133
 1738 0138 DFE7     		b	.L132
 1739              	.LVL208:
 1740              	.L141:
 1741 013a 0127     		movs	r7, #1
 1742 013c EAE7     		b	.L129
 1743              	.LVL209:
 1744              	.L135:
 613:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         days++;
 1745              		.loc 1 613 0
 1746 013e 36A3     		adr	r3, .L146+24
 1747 0140 D3E90023 		ldrd	r2, [r3]
 1748 0144 2046     		mov	r0, r4
 1749 0146 2946     		mov	r1, r5
 1750 0148 FFF7FEFF 		bl	__aeabi_dsub
 1751              	.LVL210:
 1752 014c 0446     		mov	r4, r0
 1753              	.LVL211:
 1754 014e 0D46     		mov	r5, r1
 1755              	.LVL212:
 614:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 1756              		.loc 1 614 0
 1757 0150 08F10108 		add	r8, r8, #1
 1758              	.LVL213:
 1759 0154 1FFA88F8 		uxth	r8, r8
 1760              	.LVL214:
 1761              	.L134:
 611:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 1762              		.loc 1 611 0
 1763 0158 2FA3     		adr	r3, .L146+24
 1764 015a D3E90023 		ldrd	r2, [r3]
 1765 015e 2046     		mov	r0, r4
 1766 0160 2946     		mov	r1, r5
 1767 0162 FFF7FEFF 		bl	__aeabi_dcmpge
 1768              	.LVL215:
 1769 0166 0028     		cmp	r0, #0
 1770 0168 E9D1     		bne	.L135
 1771 016a 4FF00009 		mov	r9, #0
 1772 016e 0CE0     		b	.L136
 1773              	.LVL216:
ARM GAS  /tmp/ccWJ882I.s 			page 48


 1774              	.L137:
 620:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         hours++;
 1775              		.loc 1 620 0
 1776 0170 2BA3     		adr	r3, .L146+32
 1777 0172 D3E90023 		ldrd	r2, [r3]
 1778 0176 2046     		mov	r0, r4
 1779 0178 2946     		mov	r1, r5
 1780 017a FFF7FEFF 		bl	__aeabi_dsub
 1781              	.LVL217:
 1782 017e 0446     		mov	r4, r0
 1783              	.LVL218:
 1784 0180 0D46     		mov	r5, r1
 1785              	.LVL219:
 621:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 1786              		.loc 1 621 0
 1787 0182 09F10109 		add	r9, r9, #1
 1788              	.LVL220:
 1789 0186 1FFA89F9 		uxth	r9, r9
 1790              	.LVL221:
 1791              	.L136:
 618:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 1792              		.loc 1 618 0
 1793 018a 25A3     		adr	r3, .L146+32
 1794 018c D3E90023 		ldrd	r2, [r3]
 1795 0190 2046     		mov	r0, r4
 1796 0192 2946     		mov	r1, r5
 1797 0194 FFF7FEFF 		bl	__aeabi_dcmpge
 1798              	.LVL222:
 1799 0198 0028     		cmp	r0, #0
 1800 019a E9D1     		bne	.L137
 1801 019c 4FF0000B 		mov	fp, #0
 1802 01a0 0BE0     		b	.L138
 1803              	.LVL223:
 1804              	.L139:
 627:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****         minutes++;
 1805              		.loc 1 627 0
 1806 01a2 0022     		movs	r2, #0
 1807 01a4 234B     		ldr	r3, .L146+52
 1808 01a6 2046     		mov	r0, r4
 1809 01a8 2946     		mov	r1, r5
 1810 01aa FFF7FEFF 		bl	__aeabi_dsub
 1811              	.LVL224:
 1812 01ae 0446     		mov	r4, r0
 1813              	.LVL225:
 1814 01b0 0D46     		mov	r5, r1
 1815              	.LVL226:
 628:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     }
 1816              		.loc 1 628 0
 1817 01b2 0BF1010B 		add	fp, fp, #1
 1818              	.LVL227:
 1819 01b6 1FFA8BFB 		uxth	fp, fp
 1820              	.LVL228:
 1821              	.L138:
 625:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     {
 1822              		.loc 1 625 0
 1823 01ba 0022     		movs	r2, #0
 1824 01bc 1D4B     		ldr	r3, .L146+52
ARM GAS  /tmp/ccWJ882I.s 			page 49


 1825 01be 2046     		mov	r0, r4
 1826 01c0 2946     		mov	r1, r5
 1827 01c2 FFF7FEFF 		bl	__aeabi_dcmpge
 1828              	.LVL229:
 1829 01c6 0028     		cmp	r0, #0
 1830 01c8 EBD1     		bne	.L139
 632:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 1831              		.loc 1 632 0
 1832 01ca 2046     		mov	r0, r4
 1833 01cc 2946     		mov	r1, r5
 1834 01ce FFF7FEFF 		bl	round
 1835              	.LVL230:
 1836 01d2 FFF7FEFF 		bl	__aeabi_d2uiz
 1837              	.LVL231:
 634:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     calendar.CalendarTime.Minutes = minutes;
 1838              		.loc 1 634 0
 1839 01d6 8AF80A00 		strb	r0, [r10, #10]
 635:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     calendar.CalendarTime.Hours = hours;
 1840              		.loc 1 635 0
 1841 01da 8AF809B0 		strb	fp, [r10, #9]
 636:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     calendar.CalendarDate.Date = days;
 1842              		.loc 1 636 0
 1843 01de 8AF80890 		strb	r9, [r10, #8]
 637:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     calendar.CalendarDate.Month = months;
 1844              		.loc 1 637 0
 1845 01e2 8AF80480 		strb	r8, [r10, #4]
 638:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     calendar.CalendarDate.Year = years;
 1846              		.loc 1 638 0
 1847 01e6 8AF80370 		strb	r7, [r10, #3]
 639:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     calendar.CalendarCentury = century;
 1848              		.loc 1 639 0
 1849 01ea 8AF80560 		strb	r6, [r10, #5]
 640:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 1850              		.loc 1 640 0
 1851 01ee BDF80430 		ldrh	r3, [sp, #4]
 1852 01f2 AAF80030 		strh	r3, [r10]	@ movhi
 643:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 1853              		.loc 1 643 0
 1854 01f6 5046     		mov	r0, r10
 1855              	.LVL232:
 1856 01f8 03B0     		add	sp, sp, #12
 1857              	.LCFI33:
 1858              		.cfi_def_cfa_offset 36
 1859              		@ sp needed
 1860 01fa BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1861              	.LVL233:
 1862              	.L147:
 1863 01fe 00BF     		.align	3
 1864              	.L146:
 1865 0200 FCA9F1D2 		.word	3539053052
 1866 0204 4D620040 		.word	1073766989
 1867 0208 00000000 		.word	0
 1868 020c 50287E41 		.word	1098786896
 1869 0210 00000000 		.word	0
 1870 0214 38137E41 		.word	1098781496
 1871 0218 00000000 		.word	0
 1872 021c 0018F540 		.word	1089804288
ARM GAS  /tmp/ccWJ882I.s 			page 50


 1873 0220 00000000 		.word	0
 1874 0224 0020AC40 		.word	1085022208
 1875 0228 00000000 		.word	.LANCHOR5
 1876 022c 80510100 		.word	86400
 1877 0230 00000000 		.word	.LANCHOR6
 1878 0234 00004E40 		.word	1078853632
 1879              		.cfi_endproc
 1880              	.LFE85:
 1882              		.section	.text.RTC_Alarm_IRQHandler,"ax",%progbits
 1883              		.align	1
 1884              		.global	RTC_Alarm_IRQHandler
 1885              		.syntax unified
 1886              		.thumb
 1887              		.thumb_func
 1888              		.fpu softvfp
 1890              	RTC_Alarm_IRQHandler:
 1891              	.LFB89:
 726:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 727:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** /*!
 728:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  * \brief RTC IRQ Handler of the RTC Alarm
 729:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****  */
 730:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** void RTC_Alarm_IRQHandler( void )
 731:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** {
 1892              		.loc 1 731 0
 1893              		.cfi_startproc
 1894              		@ args = 0, pretend = 0, frame = 0
 1895              		@ frame_needed = 0, uses_anonymous_args = 0
 1896 0000 10B5     		push	{r4, lr}
 1897              	.LCFI34:
 1898              		.cfi_def_cfa_offset 8
 1899              		.cfi_offset 4, -8
 1900              		.cfi_offset 14, -4
 732:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     HAL_RTC_AlarmIRQHandler( &RtcHandle );
 1901              		.loc 1 732 0
 1902 0002 094C     		ldr	r4, .L150
 1903 0004 2046     		mov	r0, r4
 1904 0006 FFF7FEFF 		bl	HAL_RTC_AlarmIRQHandler
 1905              	.LVL234:
 733:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     HAL_RTC_DeactivateAlarm( &RtcHandle, RTC_ALARM_A );
 1906              		.loc 1 733 0
 1907 000a 4FF48071 		mov	r1, #256
 1908 000e 2046     		mov	r0, r4
 1909 0010 FFF7FEFF 		bl	HAL_RTC_DeactivateAlarm
 1910              	.LVL235:
 734:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     RtcRecoverMcuStatus( );
 1911              		.loc 1 734 0
 1912 0014 FFF7FEFF 		bl	RtcRecoverMcuStatus
 1913              	.LVL236:
 735:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     RtcComputeWakeUpTime( );
 1914              		.loc 1 735 0
 1915 0018 FFF7FEFF 		bl	RtcComputeWakeUpTime
 1916              	.LVL237:
 736:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     BlockLowPowerDuringTask( false );
 1917              		.loc 1 736 0
 1918 001c 0020     		movs	r0, #0
 1919 001e FFF7FEFF 		bl	BlockLowPowerDuringTask
 1920              	.LVL238:
ARM GAS  /tmp/ccWJ882I.s 			page 51


 737:..//Source/stm/board/board_stm32l151cd/rtc-board.c ****     TimerIrqHandler( );
 1921              		.loc 1 737 0
 1922 0022 FFF7FEFF 		bl	TimerIrqHandler
 1923              	.LVL239:
 1924 0026 10BD     		pop	{r4, pc}
 1925              	.L151:
 1926              		.align	2
 1927              	.L150:
 1928 0028 00000000 		.word	.LANCHOR3
 1929              		.cfi_endproc
 1930              	.LFE89:
 1932              		.section	.text.RtcProcess,"ax",%progbits
 1933              		.align	1
 1934              		.global	RtcProcess
 1935              		.syntax unified
 1936              		.thumb
 1937              		.thumb_func
 1938              		.fpu softvfp
 1940              	RtcProcess:
 1941              	.LFB90:
 738:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** }
 739:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** 
 740:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** void RtcProcess( void )
 741:..//Source/stm/board/board_stm32l151cd/rtc-board.c **** {
 1942              		.loc 1 741 0
 1943              		.cfi_startproc
 1944              		@ args = 0, pretend = 0, frame = 0
 1945              		@ frame_needed = 0, uses_anonymous_args = 0
 1946              		@ link register save eliminated.
 1947 0000 7047     		bx	lr
 1948              		.cfi_endproc
 1949              	.LFE90:
 1951              		.global	McuWakeUpTime
 1952              		.global	RtcHandle
 1953              		.comm	RtcCalendarContext,28,4
 1954              		.global	NonScheduledWakeUp
 1955              		.section	.bss.CalendarRollOverReady,"aw",%nobits
 1956              		.set	.LANCHOR0,. + 0
 1959              	CalendarRollOverReady:
 1960 0000 00       		.space	1
 1961              		.section	.bss.Century,"aw",%nobits
 1962              		.align	1
 1963              		.set	.LANCHOR2,. + 0
 1966              	Century:
 1967 0000 0000     		.space	2
 1968              		.section	.bss.LowPowerDisableDuringTask,"aw",%nobits
 1969              		.set	.LANCHOR12,. + 0
 1972              	LowPowerDisableDuringTask:
 1973 0000 00       		.space	1
 1974              		.section	.bss.McuWakeUpTime,"aw",%nobits
 1975              		.align	2
 1976              		.set	.LANCHOR8,. + 0
 1979              	McuWakeUpTime:
 1980 0000 00000000 		.space	4
 1981              		.section	.bss.NonScheduledWakeUp,"aw",%nobits
 1982              		.set	.LANCHOR10,. + 0
 1985              	NonScheduledWakeUp:
ARM GAS  /tmp/ccWJ882I.s 			page 52


 1986 0000 00       		.space	1
 1987              		.section	.bss.PreviousCentury,"aw",%nobits
 1988              		.align	1
 1989              		.set	.LANCHOR1,. + 0
 1992              	PreviousCentury:
 1993 0000 0000     		.space	2
 1994              		.section	.bss.RtcHandle,"aw",%nobits
 1995              		.align	2
 1996              		.set	.LANCHOR3,. + 0
 1999              	RtcHandle:
 2000 0000 00000000 		.space	32
 2000      00000000 
 2000      00000000 
 2000      00000000 
 2000      00000000 
 2001              		.section	.bss.RtcInitialized,"aw",%nobits
 2002              		.set	.LANCHOR9,. + 0
 2005              	RtcInitialized:
 2006 0000 00       		.space	1
 2007              		.section	.bss.RtcTimerEventAllowsLowPower,"aw",%nobits
 2008              		.set	.LANCHOR11,. + 0
 2011              	RtcTimerEventAllowsLowPower:
 2012 0000 00       		.space	1
 2013              		.section	.bss.TimeoutValueError,"aw",%nobits
 2014              		.align	2
 2015              		.set	.LANCHOR4,. + 0
 2018              	TimeoutValueError:
 2019 0000 00000000 		.space	4
 2020              		.section	.bss.WakeUpTimeInitialized,"aw",%nobits
 2021              		.set	.LANCHOR7,. + 0
 2024              	WakeUpTimeInitialized:
 2025 0000 00       		.space	1
 2026              		.section	.rodata.DaysInMonth,"a",%progbits
 2027              		.align	2
 2028              		.set	.LANCHOR6,. + 0
 2031              	DaysInMonth:
 2032 0000 1F       		.byte	31
 2033 0001 1C       		.byte	28
 2034 0002 1F       		.byte	31
 2035 0003 1E       		.byte	30
 2036 0004 1F       		.byte	31
 2037 0005 1E       		.byte	30
 2038 0006 1F       		.byte	31
 2039 0007 1F       		.byte	31
 2040 0008 1E       		.byte	30
 2041 0009 1F       		.byte	31
 2042 000a 1E       		.byte	30
 2043 000b 1F       		.byte	31
 2044              		.section	.rodata.DaysInMonthLeapYear,"a",%progbits
 2045              		.align	2
 2046              		.set	.LANCHOR5,. + 0
 2049              	DaysInMonthLeapYear:
 2050 0000 1F       		.byte	31
 2051 0001 1D       		.byte	29
 2052 0002 1F       		.byte	31
 2053 0003 1E       		.byte	30
 2054 0004 1F       		.byte	31
ARM GAS  /tmp/ccWJ882I.s 			page 53


 2055 0005 1E       		.byte	30
 2056 0006 1F       		.byte	31
 2057 0007 1F       		.byte	31
 2058 0008 1E       		.byte	30
 2059 0009 1F       		.byte	31
 2060 000a 1E       		.byte	30
 2061 000b 1F       		.byte	31
 2062              		.text
 2063              	.Letext0:
 2064              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 2065              		.file 3 "/usr/include/newlib/sys/lock.h"
 2066              		.file 4 "/usr/include/newlib/sys/_types.h"
 2067              		.file 5 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 2068              		.file 6 "/usr/include/newlib/sys/reent.h"
 2069              		.file 7 "/usr/include/newlib/math.h"
 2070              		.file 8 "/usr/include/newlib/sys/_stdint.h"
 2071              		.file 9 "..//Source/stm/lib/CMSIS/Include/core_cm3.h"
 2072              		.file 10 "..//Source/stm/lib/CMSIS/Device/ST/STM32L1xx/Include/system_stm32l1xx.h"
 2073              		.file 11 "..//Source/stm/lib/CMSIS/Device/ST/STM32L1xx/Include/stm32l151xba.h"
 2074              		.file 12 "..//Source/stm/lib/CMSIS/Device/ST/STM32L1xx/Include/stm32l1xx.h"
 2075              		.file 13 "..//Source/stm/lib/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal_def.h"
 2076              		.file 14 "..//Source/stm/lib/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal_rtc.h"
 2077              		.file 15 "..//Source/stm/lib/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal.h"
 2078              		.file 16 "..//Source/stm/hal/timer.h"
 2079              		.file 17 "..//Source/stm/lib/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal_rtc_ex.h"
 2080              		.file 18 "..//Source/stm/board/board.h"
 2081              		.file 19 "..//Source/stm/lib/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal_pwr.h"
 2082              		.file 20 "..//Source/stm/lib/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal_pwr_ex.h"
 2083              		.file 21 "..//Source/stm/lib/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal_cortex.h"
ARM GAS  /tmp/ccWJ882I.s 			page 54


DEFINED SYMBOLS
                            *ABS*:0000000000000000 rtc-board.c
     /tmp/ccWJ882I.s:16     .text.RtcCheckCalendarRollOver:0000000000000000 $t
     /tmp/ccWJ882I.s:22     .text.RtcCheckCalendarRollOver:0000000000000000 RtcCheckCalendarRollOver
     /tmp/ccWJ882I.s:69     .text.RtcCheckCalendarRollOver:0000000000000034 $d
     /tmp/ccWJ882I.s:76     .text.RtcGetCalendar:0000000000000000 $t
     /tmp/ccWJ882I.s:82     .text.RtcGetCalendar:0000000000000000 RtcGetCalendar
     /tmp/ccWJ882I.s:140    .text.RtcGetCalendar:0000000000000044 $d
     /tmp/ccWJ882I.s:154    .text.RtcComputeTimerTimeToAlarmTick:0000000000000000 $t
     /tmp/ccWJ882I.s:160    .text.RtcComputeTimerTimeToAlarmTick:0000000000000000 RtcComputeTimerTimeToAlarmTick
     /tmp/ccWJ882I.s:499    .text.RtcComputeTimerTimeToAlarmTick:00000000000001d0 $d
     /tmp/ccWJ882I.s:517    .text.RtcStartWakeUpAlarm:0000000000000000 $t
     /tmp/ccWJ882I.s:523    .text.RtcStartWakeUpAlarm:0000000000000000 RtcStartWakeUpAlarm
     /tmp/ccWJ882I.s:615    .text.RtcStartWakeUpAlarm:0000000000000088 $d
                            *COM*:000000000000001c RtcCalendarContext
     /tmp/ccWJ882I.s:621    .text.RtcConvertCalendarTickToTimerTime:0000000000000000 $t
     /tmp/ccWJ882I.s:627    .text.RtcConvertCalendarTickToTimerTime:0000000000000000 RtcConvertCalendarTickToTimerTime
     /tmp/ccWJ882I.s:847    .text.RtcConvertCalendarTickToTimerTime:0000000000000120 $d
     /tmp/ccWJ882I.s:860    .text.RtcComputeWakeUpTime:0000000000000000 $t
     /tmp/ccWJ882I.s:866    .text.RtcComputeWakeUpTime:0000000000000000 RtcComputeWakeUpTime
     /tmp/ccWJ882I.s:947    .text.RtcComputeWakeUpTime:0000000000000078 $d
     /tmp/ccWJ882I.s:955    .text.RtcInit:0000000000000000 $t
     /tmp/ccWJ882I.s:962    .text.RtcInit:0000000000000000 RtcInit
     /tmp/ccWJ882I.s:1066   .text.RtcInit:0000000000000080 $d
     /tmp/ccWJ882I.s:1074   .text.RtcSetTimeout:0000000000000000 $t
     /tmp/ccWJ882I.s:1081   .text.RtcSetTimeout:0000000000000000 RtcSetTimeout
     /tmp/ccWJ882I.s:1101   .text.RtcGetAdjustedTimeoutValue:0000000000000000 $t
     /tmp/ccWJ882I.s:1108   .text.RtcGetAdjustedTimeoutValue:0000000000000000 RtcGetAdjustedTimeoutValue
     /tmp/ccWJ882I.s:1164   .text.RtcGetAdjustedTimeoutValue:000000000000003c $d
     /tmp/ccWJ882I.s:1171   .text.RtcGetTimerValue:0000000000000000 $t
     /tmp/ccWJ882I.s:1178   .text.RtcGetTimerValue:0000000000000000 RtcGetTimerValue
     /tmp/ccWJ882I.s:1199   .text.RtcGetElapsedAlarmTime:0000000000000000 $t
     /tmp/ccWJ882I.s:1206   .text.RtcGetElapsedAlarmTime:0000000000000000 RtcGetElapsedAlarmTime
     /tmp/ccWJ882I.s:1248   .text.RtcGetElapsedAlarmTime:0000000000000020 $d
     /tmp/ccWJ882I.s:1253   .text.RtcComputeFutureEventTime:0000000000000000 $t
     /tmp/ccWJ882I.s:1260   .text.RtcComputeFutureEventTime:0000000000000000 RtcComputeFutureEventTime
     /tmp/ccWJ882I.s:1283   .text.RtcComputeElapsedTime:0000000000000000 $t
     /tmp/ccWJ882I.s:1290   .text.RtcComputeElapsedTime:0000000000000000 RtcComputeElapsedTime
     /tmp/ccWJ882I.s:1336   .text.RtcEnterLowPowerStopMode:0000000000000000 $t
     /tmp/ccWJ882I.s:1343   .text.RtcEnterLowPowerStopMode:0000000000000000 RtcEnterLowPowerStopMode
     /tmp/ccWJ882I.s:1392   .text.RtcEnterLowPowerStopMode:0000000000000034 $d
     /tmp/ccWJ882I.s:1399   .text.RtcRecoverMcuStatus:0000000000000000 $t
     /tmp/ccWJ882I.s:1406   .text.RtcRecoverMcuStatus:0000000000000000 RtcRecoverMcuStatus
     /tmp/ccWJ882I.s:1455   .text.RtcRecoverMcuStatus:000000000000003c $d
     /tmp/ccWJ882I.s:1462   .text.BlockLowPowerDuringTask:0000000000000000 $t
     /tmp/ccWJ882I.s:1469   .text.BlockLowPowerDuringTask:0000000000000000 BlockLowPowerDuringTask
     /tmp/ccWJ882I.s:1499   .text.BlockLowPowerDuringTask:0000000000000014 $d
     /tmp/ccWJ882I.s:1504   .text.RtcConvertTimerTimeToCalendarTick:0000000000000000 $t
     /tmp/ccWJ882I.s:1511   .text.RtcConvertTimerTimeToCalendarTick:0000000000000000 RtcConvertTimerTimeToCalendarTick
     /tmp/ccWJ882I.s:1865   .text.RtcConvertTimerTimeToCalendarTick:0000000000000200 $d
     /tmp/ccWJ882I.s:1883   .text.RTC_Alarm_IRQHandler:0000000000000000 $t
     /tmp/ccWJ882I.s:1890   .text.RTC_Alarm_IRQHandler:0000000000000000 RTC_Alarm_IRQHandler
     /tmp/ccWJ882I.s:1928   .text.RTC_Alarm_IRQHandler:0000000000000028 $d
     /tmp/ccWJ882I.s:1933   .text.RtcProcess:0000000000000000 $t
     /tmp/ccWJ882I.s:1940   .text.RtcProcess:0000000000000000 RtcProcess
     /tmp/ccWJ882I.s:1979   .bss.McuWakeUpTime:0000000000000000 McuWakeUpTime
     /tmp/ccWJ882I.s:1999   .bss.RtcHandle:0000000000000000 RtcHandle
ARM GAS  /tmp/ccWJ882I.s 			page 55


     /tmp/ccWJ882I.s:1985   .bss.NonScheduledWakeUp:0000000000000000 NonScheduledWakeUp
     /tmp/ccWJ882I.s:1959   .bss.CalendarRollOverReady:0000000000000000 CalendarRollOverReady
     /tmp/ccWJ882I.s:1960   .bss.CalendarRollOverReady:0000000000000000 $d
     /tmp/ccWJ882I.s:1962   .bss.Century:0000000000000000 $d
     /tmp/ccWJ882I.s:1966   .bss.Century:0000000000000000 Century
     /tmp/ccWJ882I.s:1972   .bss.LowPowerDisableDuringTask:0000000000000000 LowPowerDisableDuringTask
     /tmp/ccWJ882I.s:1973   .bss.LowPowerDisableDuringTask:0000000000000000 $d
     /tmp/ccWJ882I.s:1975   .bss.McuWakeUpTime:0000000000000000 $d
     /tmp/ccWJ882I.s:1986   .bss.NonScheduledWakeUp:0000000000000000 $d
     /tmp/ccWJ882I.s:1988   .bss.PreviousCentury:0000000000000000 $d
     /tmp/ccWJ882I.s:1992   .bss.PreviousCentury:0000000000000000 PreviousCentury
     /tmp/ccWJ882I.s:1995   .bss.RtcHandle:0000000000000000 $d
     /tmp/ccWJ882I.s:2005   .bss.RtcInitialized:0000000000000000 RtcInitialized
     /tmp/ccWJ882I.s:2006   .bss.RtcInitialized:0000000000000000 $d
     /tmp/ccWJ882I.s:2011   .bss.RtcTimerEventAllowsLowPower:0000000000000000 RtcTimerEventAllowsLowPower
     /tmp/ccWJ882I.s:2012   .bss.RtcTimerEventAllowsLowPower:0000000000000000 $d
     /tmp/ccWJ882I.s:2014   .bss.TimeoutValueError:0000000000000000 $d
     /tmp/ccWJ882I.s:2018   .bss.TimeoutValueError:0000000000000000 TimeoutValueError
     /tmp/ccWJ882I.s:2024   .bss.WakeUpTimeInitialized:0000000000000000 WakeUpTimeInitialized
     /tmp/ccWJ882I.s:2025   .bss.WakeUpTimeInitialized:0000000000000000 $d
     /tmp/ccWJ882I.s:2027   .rodata.DaysInMonth:0000000000000000 $d
     /tmp/ccWJ882I.s:2031   .rodata.DaysInMonth:0000000000000000 DaysInMonth
     /tmp/ccWJ882I.s:2045   .rodata.DaysInMonthLeapYear:0000000000000000 $d
     /tmp/ccWJ882I.s:2049   .rodata.DaysInMonthLeapYear:0000000000000000 DaysInMonthLeapYear
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_RTC_GetTime
HAL_RTC_GetDate
__aeabi_ui2d
__aeabi_dmul
__aeabi_dsub
__aeabi_i2d
__aeabi_dadd
__aeabi_d2iz
__aeabi_dcmpge
__aeabi_d2uiz
round
HAL_RTC_DeactivateAlarm
HAL_RTCEx_DeactivateWakeUpTimer
HAL_RTC_SetAlarm_IT
HAL_RTC_GetAlarm
ceil
HAL_RTC_Init
HAL_RTC_SetDate
HAL_RTC_SetTime
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
BoardDeInitMcu
HAL_PWR_DisablePVD
HAL_PWREx_EnableUltraLowPower
HAL_PWREx_EnableFastWakeUp
HAL_PWR_EnterSTOPMode
BoardInitMcu
HAL_RTC_AlarmIRQHandler
TimerIrqHandler
