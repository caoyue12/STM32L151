ARM GAS  /tmp/ccf5d4Yb.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32l1xx_hal_adc.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.HAL_ADC_MspInit,"ax",%progbits
  16              		.align	1
  17              		.weak	HAL_ADC_MspInit
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	HAL_ADC_MspInit:
  24              	.LFB74:
  25              		.file 1 "..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c"
   1:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
   2:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   ******************************************************************************
   3:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @file    stm32l1xx_hal_adc.c
   4:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @author  MCD Application Team
   5:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief   This file provides firmware functions to manage the following 
   6:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *          functionalities of the Analog to Digital Convertor (ADC)
   7:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *          peripheral:
   8:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *           + Initialization and de-initialization functions
   9:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *             ++ Initialization and Configuration of ADC
  10:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *           + Operation functions
  11:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *             ++ Start, stop, get result of conversions of regular
  12:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *                group, using 3 possible modes: polling, interruption or DMA.
  13:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *           + Control functions
  14:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *             ++ Channels configuration on regular group
  15:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *             ++ Channels configuration on injected group
  16:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *             ++ Analog Watchdog configuration
  17:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *           + State functions
  18:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *             ++ ADC state machine management
  19:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *             ++ Interrupts and flags management
  20:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *          Other functions (extended functions) are available in file 
  21:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *          "stm32l1xx_hal_adc_ex.c".
  22:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *
  23:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   @verbatim
  24:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   ==============================================================================
  25:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                      ##### ADC peripheral features #####
  26:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   ==============================================================================
  27:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   [..]
  28:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   (+) 12-bit, 10-bit, 8-bit or 6-bit configurable resolution
  29:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
  30:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   (+) Interrupt generation at the end of regular conversion, end of injected
  31:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       conversion, and in case of analog watchdog or overrun events.
  32:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
  33:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   (+) Single and continuous conversion modes.
ARM GAS  /tmp/ccf5d4Yb.s 			page 2


  34:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
  35:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   (+) Scan mode for conversion of several channels sequentially.
  36:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
  37:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   (+) Data alignment with in-built data coherency.
  38:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
  39:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   (+) Programmable sampling time (channel wise)
  40:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
  41:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   (+) ADC conversion of regular group and injected group.
  42:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
  43:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   (+) External trigger (timer or EXTI) with configurable polarity
  44:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       for both regular and injected groups.
  45:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
  46:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   (+) DMA request generation for transfer of conversions data of regular group.
  47:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
  48:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   (+) ADC offset on injected channels
  49:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
  50:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   (+) ADC supply requirements: 2.4 V to 3.6 V at full speed and down to 1.8 V at 
  51:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       slower speed.
  52:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
  53:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   (+) ADC input range: from Vref- (connected to Vssa) to Vref+ (connected to 
  54:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       Vdda or to an external voltage reference).
  55:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
  56:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
  57:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                      ##### How to use this driver #####
  58:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   ==============================================================================
  59:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     [..]
  60:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
  61:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      *** Configuration of top level parameters related to ADC ***
  62:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      ============================================================
  63:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      [..]
  64:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
  65:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     (#) Enable the ADC interface
  66:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       (++) As prerequisite, ADC clock must be configured at RCC top level.
  67:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****            Caution: On STM32L1, ADC clock frequency max is 16MHz (refer
  68:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                     to device datasheet).
  69:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                     Therefore, ADC clock prescaler must be configured in 
  70:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                     function of ADC clock source frequency to remain below
  71:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                     this maximum frequency.
  72:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
  73:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         (++) Two clock settings are mandatory: 
  74:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****              (+++) ADC clock (core clock).
  75:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****              (+++) ADC clock (conversions clock).
  76:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                    Only one possible clock source: derived from HSI RC 16MHz oscillator
  77:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                    (HSI). 
  78:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                    ADC is connected directly to HSI RC 16MHz oscillator.
  79:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                    Therefore, RCC PLL setting has no impact on ADC.
  80:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                    PLL can be disabled (".PLL.PLLState = RCC_PLL_NONE") or 
  81:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                    enabled with HSI16 as clock source
  82:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                    (".PLL.PLLSource = RCC_PLLSOURCE_HSI") to be used as device 
  83:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                    main clock source SYSCLK.
  84:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                    The only mandatory setting is ".HSIState = RCC_HSI_ON"
  85:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
  86:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****              (+++) Example:
  87:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                    Into HAL_ADC_MspInit() (recommended code location) or with
  88:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                    other device clock parameters configuration:
  89:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                (+++) __HAL_RCC_ADC1_CLK_ENABLE();
  90:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
ARM GAS  /tmp/ccf5d4Yb.s 			page 3


  91:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                (+++) HAL_RCC_GetOscConfig(&RCC_OscInitStructure);
  92:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                (+++) RCC_OscInitStructure.OscillatorType = (... | RCC_OSCILLATORTYPE_HSI);
  93:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                (+++) RCC_OscInitStructure.HSIState = RCC_HSI_ON;
  94:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                (+++) RCC_OscInitStructure.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  95:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                (+++) RCC_OscInitStructure.PLL.PLLState = RCC_PLL_NONE;
  96:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                (+++) RCC_OscInitStructure.PLL.PLLSource = ...
  97:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                (+++) RCC_OscInitStructure.PLL...
  98:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                (+++) HAL_RCC_OscConfig(&RCC_OscInitStructure);
  99:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 100:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         (++) ADC clock prescaler is configured at ADC level with
 101:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****              parameter "ClockPrescaler" using function HAL_ADC_Init().
 102:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 103:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     (#) ADC pins configuration
 104:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****          (++) Enable the clock for the ADC GPIOs
 105:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_ENABLE()
 106:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****          (++) Configure these ADC pins in analog mode
 107:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****               using function HAL_GPIO_Init()
 108:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 109:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
 110:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****          (++) Configure the NVIC for ADC
 111:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
 112:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler() 
 113:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****               into the function of corresponding ADC interruption vector 
 114:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****               ADCx_IRQHandler().
 115:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 116:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 117:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****          (++) Configure the DMA (DMA channel, mode normal or circular, ...)
 118:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****               using function HAL_DMA_Init().
 119:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****          (++) Configure the NVIC for DMA
 120:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 121:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler() 
 122:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****               into the function of corresponding DMA interruption vector 
 123:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****               DMAx_Channelx_IRQHandler().
 124:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 125:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      *** Configuration of ADC, groups regular/injected, channels parameters ***
 126:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      ==========================================================================
 127:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      [..]
 128:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 129:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     (#) Configure the ADC parameters (resolution, data alignment, ...)
 130:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         and regular group parameters (conversion trigger, sequencer, ...)
 131:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         using function HAL_ADC_Init().
 132:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 133:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     (#) Configure the channels for regular group parameters (channel number, 
 134:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         channel rank into sequencer, ..., into regular group)
 135:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         using function HAL_ADC_ConfigChannel().
 136:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 137:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     (#) Optionally, configure the injected group parameters (conversion trigger, 
 138:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         sequencer, ..., of injected group)
 139:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         and the channels for injected group parameters (channel number, 
 140:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         channel rank into sequencer, ..., into injected group)
 141:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         using function HAL_ADCEx_InjectedConfigChannel().
 142:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 143:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     (#) Optionally, configure the analog watchdog parameters (channels
 144:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         monitored, thresholds, ...)
 145:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         using function HAL_ADC_AnalogWDGConfig().
 146:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 147:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     (#) Optionally, for devices with several ADC instances: configure the 
ARM GAS  /tmp/ccf5d4Yb.s 			page 4


 148:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         multimode parameters
 149:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         using function HAL_ADCEx_MultiModeConfigChannel().
 150:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 151:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      *** Execution of ADC conversions ***
 152:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      ====================================
 153:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      [..]
 154:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 155:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     (#) ADC driver can be used among three modes: polling, interruption,
 156:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         transfer by DMA.
 157:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 158:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         (++) ADC conversion by polling:
 159:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 160:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 using function HAL_ADC_Start()
 161:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           (+++) Wait for ADC conversion completion 
 162:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 using function HAL_ADC_PollForConversion()
 163:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 (or for injected group: HAL_ADCEx_InjectedPollForConversion() )
 164:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           (+++) Retrieve conversion results 
 165:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 166:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 (or for injected group: HAL_ADCEx_InjectedGetValue() )
 167:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 168:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 using function HAL_ADC_Stop()
 169:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 170:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         (++) ADC conversion by interruption: 
 171:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 172:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 using function HAL_ADC_Start_IT()
 173:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 174:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback()
 175:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 (this function must be implemented in user program)
 176:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 (or for injected group: HAL_ADCEx_InjectedConvCpltCallback() )
 177:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           (+++) Retrieve conversion results 
 178:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 179:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 (or for injected group: HAL_ADCEx_InjectedGetValue() )
 180:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 181:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 using function HAL_ADC_Stop_IT()
 182:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 183:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         (++) ADC conversion with transfer by DMA:
 184:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 185:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 using function HAL_ADC_Start_DMA()
 186:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 187:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback() or HAL_ADC_ConvHalfCpltCallback()
 188:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 (these functions must be implemented in user program)
 189:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           (+++) Conversion results are automatically transferred by DMA into
 190:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 destination variable address.
 191:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 192:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 using function HAL_ADC_Stop_DMA()
 193:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 194:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         (++) For devices with several ADCs: ADC multimode conversion 
 195:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****              with transfer by DMA:
 196:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           (+++) Activate the ADC peripheral (slave) and start conversions
 197:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 using function HAL_ADC_Start()
 198:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           (+++) Activate the ADC peripheral (master) and start conversions
 199:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 using function HAL_ADCEx_MultiModeStart_DMA()
 200:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 201:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback() or HAL_ADC_ConvHalfCpltCallback()
 202:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 (these functions must be implemented in user program)
 203:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           (+++) Conversion results are automatically transferred by DMA into
 204:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 destination variable address.
ARM GAS  /tmp/ccf5d4Yb.s 			page 5


 205:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral (master)
 206:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 using function HAL_ADCEx_MultiModeStop_DMA()
 207:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral (slave)
 208:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 using function HAL_ADC_Stop_IT()
 209:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 210:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      [..]
 211:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 212:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     (@) Callback functions must be implemented in user program:
 213:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       (+@) HAL_ADC_ErrorCallback()
 214:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       (+@) HAL_ADC_LevelOutOfWindowCallback() (callback of analog watchdog)
 215:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       (+@) HAL_ADC_ConvCpltCallback()
 216:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       (+@) HAL_ADC_ConvHalfCpltCallback
 217:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       (+@) HAL_ADCEx_InjectedConvCpltCallback()
 218:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 219:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      *** Deinitialization of ADC ***
 220:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      ============================================================
 221:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      [..]
 222:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 223:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     (#) Disable the ADC interface
 224:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       (++) ADC clock can be hard reset and disabled at RCC top level.
 225:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         (++) Hard reset of ADC peripherals
 226:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****              using macro __ADCx_FORCE_RESET(), __ADCx_RELEASE_RESET().
 227:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         (++) ADC clock disable
 228:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****              using the equivalent macro/functions as configuration step.
 229:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****              (+++) Example:
 230:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                    Into HAL_ADC_MspDeInit() (recommended code location) or with
 231:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                    other device clock parameters configuration:
 232:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                (+++) HAL_RCC_GetOscConfig(&RCC_OscInitStructure);
 233:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                (+++) RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 234:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                (+++) RCC_OscInitStructure.HSIState = RCC_HSI_OFF; (if not used for system clock)
 235:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                (+++) HAL_RCC_OscConfig(&RCC_OscInitStructure);
 236:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 237:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     (#) ADC pins configuration
 238:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****          (++) Disable the clock for the ADC GPIOs
 239:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_DISABLE()
 240:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 241:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
 242:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****          (++) Disable the NVIC for ADC
 243:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
 244:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 245:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 246:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****          (++) Deinitialize the DMA
 247:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****               using function HAL_DMA_Init().
 248:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****          (++) Disable the NVIC for DMA
 249:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 250:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 251:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     [..]
 252:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 253:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     *** Callback registration ***
 254:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     =============================================
 255:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     [..]
 256:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 257:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      The compilation flag USE_HAL_ADC_REGISTER_CALLBACKS, when set to 1,
 258:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      allows the user to configure dynamically the driver callbacks.
 259:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      Use Functions @ref HAL_ADC_RegisterCallback()
 260:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      to register an interrupt callback.
 261:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     [..]
ARM GAS  /tmp/ccf5d4Yb.s 			page 6


 262:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 263:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      Function @ref HAL_ADC_RegisterCallback() allows to register following callbacks:
 264:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****        (+) ConvCpltCallback               : ADC conversion complete callback
 265:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****        (+) ConvHalfCpltCallback           : ADC conversion DMA half-transfer callback
 266:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****        (+) LevelOutOfWindowCallback       : ADC analog watchdog 1 callback
 267:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****        (+) ErrorCallback                  : ADC error callback
 268:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****        (+) InjectedConvCpltCallback       : ADC group injected conversion complete callback
 269:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****        (+) MspInitCallback                : ADC Msp Init callback
 270:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****        (+) MspDeInitCallback              : ADC Msp DeInit callback
 271:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      This function takes as parameters the HAL peripheral handle, the Callback ID
 272:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      and a pointer to the user callback function.
 273:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     [..]
 274:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 275:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      Use function @ref HAL_ADC_UnRegisterCallback to reset a callback to the default
 276:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      weak function.
 277:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     [..]
 278:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 279:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      @ref HAL_ADC_UnRegisterCallback takes as parameters the HAL peripheral handle,
 280:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      and the Callback ID.
 281:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      This function allows to reset following callbacks:
 282:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****        (+) ConvCpltCallback               : ADC conversion complete callback
 283:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****        (+) ConvHalfCpltCallback           : ADC conversion DMA half-transfer callback
 284:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****        (+) LevelOutOfWindowCallback       : ADC analog watchdog 1 callback
 285:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****        (+) ErrorCallback                  : ADC error callback
 286:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****        (+) InjectedConvCpltCallback       : ADC group injected conversion complete callback
 287:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****        (+) MspInitCallback                : ADC Msp Init callback
 288:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****        (+) MspDeInitCallback              : ADC Msp DeInit callback
 289:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      [..]
 290:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 291:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      By default, after the @ref HAL_ADC_Init() and when the state is @ref HAL_ADC_STATE_RESET
 292:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      all callbacks are set to the corresponding weak functions:
 293:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      examples @ref HAL_ADC_ConvCpltCallback(), @ref HAL_ADC_ErrorCallback().
 294:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      Exception done for MspInit and MspDeInit functions that are
 295:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      reset to the legacy weak functions in the @ref HAL_ADC_Init()/ @ref HAL_ADC_DeInit() only when
 296:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      these callbacks are null (not registered beforehand).
 297:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     [..]
 298:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 299:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      If MspInit or MspDeInit are not null, the @ref HAL_ADC_Init()/ @ref HAL_ADC_DeInit()
 300:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      keep and use the user MspInit/MspDeInit callbacks (registered beforehand) whatever the state.
 301:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      [..]
 302:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 303:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      Callbacks can be registered/unregistered in @ref HAL_ADC_STATE_READY state only.
 304:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      Exception done MspInit/MspDeInit functions that can be registered/unregistered
 305:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      in @ref HAL_ADC_STATE_READY or @ref HAL_ADC_STATE_RESET state,
 306:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      thus registered (user) MspInit/DeInit callbacks can be used during the Init/DeInit.
 307:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     [..]
 308:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 309:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      Then, the user first registers the MspInit/MspDeInit user callbacks
 310:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      using @ref HAL_ADC_RegisterCallback() before calling @ref HAL_ADC_DeInit()
 311:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      or @ref HAL_ADC_Init() function.
 312:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      [..]
 313:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 314:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      When the compilation flag USE_HAL_ADC_REGISTER_CALLBACKS is set to 0 or
 315:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      not defined, the callback registration feature is not available and all callbacks
 316:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      are set to the corresponding weak functions.
 317:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 318:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   @endverbatim
ARM GAS  /tmp/ccf5d4Yb.s 			page 7


 319:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   ******************************************************************************
 320:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @attention
 321:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *
 322:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
 323:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * All rights reserved.</center></h2>
 324:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *
 325:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * This software component is licensed by ST under BSD 3-Clause license,
 326:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * the "License"; You may not use this file except in compliance with the
 327:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * License. You may obtain a copy of the License at:
 328:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *                        opensource.org/licenses/BSD-3-Clause
 329:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *
 330:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   ******************************************************************************  
 331:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
 332:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 333:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /* Includes ------------------------------------------------------------------*/
 334:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** #include "stm32l1xx_hal.h"
 335:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 336:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /** @addtogroup STM32L1xx_HAL_Driver
 337:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @{
 338:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
 339:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 340:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /** @defgroup ADC ADC
 341:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief ADC HAL module driver
 342:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @{
 343:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
 344:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 345:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** #ifdef HAL_ADC_MODULE_ENABLED
 346:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 347:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /* Private typedef -----------------------------------------------------------*/
 348:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /* Private define ------------------------------------------------------------*/
 349:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /** @defgroup ADC_Private_Constants ADC Private Constants
 350:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @{
 351:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
 352:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 353:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Timeout values for ADC enable and disable settling time.                 */
 354:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Values defined to be higher than worst cases: low clocks freq,           */
 355:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* maximum prescaler.                                                       */
 356:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Ex of profile low frequency : Clock source at 0.1 MHz, ADC clock         */
 357:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* prescaler 4, sampling time 7.5 ADC clock cycles, resolution 12 bits.     */
 358:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Unit: ms                                                                 */
 359:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   #define ADC_ENABLE_TIMEOUT              (2U)
 360:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   #define ADC_DISABLE_TIMEOUT             (2U)
 361:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 362:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Delay for ADC stabilization time.                                        */
 363:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Maximum delay is 1us (refer to device datasheet, parameter tSTAB).       */
 364:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Unit: us                                                                 */
 365:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   #define ADC_STAB_DELAY_US               (3U)
 366:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 367:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Delay for temperature sensor stabilization time.                         */
 368:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Maximum delay is 10us (refer to device datasheet, parameter tSTART).     */
 369:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Unit: us                                                                 */
 370:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   #define ADC_TEMPSENSOR_DELAY_US         (10U)
 371:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 372:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
 373:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @}
 374:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
 375:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
ARM GAS  /tmp/ccf5d4Yb.s 			page 8


 376:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /* Private macro -------------------------------------------------------------*/
 377:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /* Private variables ---------------------------------------------------------*/
 378:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /* Private function prototypes -----------------------------------------------*/
 379:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
 380:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @{
 381:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
 382:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma);
 383:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma);
 384:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** static void ADC_DMAError(DMA_HandleTypeDef *hdma);
 385:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
 386:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @}
 387:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
 388:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 389:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /* Exported functions --------------------------------------------------------*/
 390:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 391:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions ADC Exported Functions
 392:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @{
 393:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
 394:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 395:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group1 ADC Initialization/de-initialization functions 
 396:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief    ADC Initialization and Configuration functions
 397:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *
 398:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** @verbatim    
 399:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****  ===============================================================================
 400:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****               ##### Initialization and de-initialization functions #####
 401:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****  ===============================================================================
 402:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 403:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       (+) Initialize and configure the ADC. 
 404:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       (+) De-initialize the ADC.
 405:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** @endverbatim
 406:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @{
 407:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
 408:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 409:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
 410:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  Initializes the ADC peripheral and regular group according to  
 411:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         parameters specified in structure "ADC_InitTypeDef".
 412:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @note   As prerequisite, ADC clock must be configured at RCC top level
 413:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         (clock source APB2).
 414:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         See commented example code below that can be copied and uncommented 
 415:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         into HAL_ADC_MspInit().
 416:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
 417:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         This function initializes the ADC MSP (HAL_ADC_MspInit()) only when
 418:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         coming from ADC state reset. Following calls to this function can
 419:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         be used to reconfigure some parameters of ADC_InitTypeDef  
 420:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         structure on the fly, without modifying MSP configuration. If ADC  
 421:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         MSP has to be modified again, HAL_ADC_DeInit() must be called
 422:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         before HAL_ADC_Init().
 423:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
 424:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         For parameters constraints, see comments of structure 
 425:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         "ADC_InitTypeDef".
 426:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @note   This function configures the ADC within 2 scopes: scope of entire 
 427:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         ADC and scope of regular group. For parameters details, see comments 
 428:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         of structure "ADC_InitTypeDef".
 429:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hadc ADC handle
 430:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval HAL status
 431:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
 432:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
ARM GAS  /tmp/ccf5d4Yb.s 			page 9


 433:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
 434:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 435:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   uint32_t tmp_cr1 = 0;
 436:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   uint32_t tmp_cr2 = 0;
 437:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 438:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Check ADC handle */
 439:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if(hadc == NULL)
 440:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 441:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     return HAL_ERROR;
 442:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
 443:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 444:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Check the parameters */
 445:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 446:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 447:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 448:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign)); 
 449:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 450:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 451:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_AUTOWAIT(hadc->Init.LowPowerAutoWait));
 452:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_AUTOPOWEROFF(hadc->Init.LowPowerAutoPowerOff));
 453:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
 454:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 455:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 456:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 457:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 458:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 459:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 460:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 461:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 462:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     if(hadc->Init.DiscontinuousConvMode != DISABLE)
 463:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 464:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 465:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 466:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
 467:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 468:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 469:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 470:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 471:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
 472:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 473:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 474:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* As prerequisite, into HAL_ADC_MspInit(), ADC clock must be configured    */
 475:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* at RCC top level.                                                        */
 476:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Refer to header of this file for more details on clock enabling          */
 477:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* procedure.                                                               */
 478:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 479:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Actions performed only if ADC is coming from state reset:                */
 480:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* - Initialization of ADC MSP                                              */
 481:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if (hadc->State == HAL_ADC_STATE_RESET)
 482:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 483:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Initialize ADC error code */
 484:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 485:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 486:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Allocate lock resource and initialize it */
 487:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     hadc->Lock = HAL_UNLOCKED;
 488:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 489:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Enable SYSCFG clock to control the routing Interface (RI) */
ARM GAS  /tmp/ccf5d4Yb.s 			page 10


 490:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     __HAL_RCC_SYSCFG_CLK_ENABLE();
 491:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 492:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
 493:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Init the ADC Callback settings */
 494:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak 
 495:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak 
 496:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak 
 497:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak 
 498:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak 
 499:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 500:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     if (hadc->MspInitCallback == NULL)
 501:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 502:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 503:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 504:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 505:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Init the low level hardware */
 506:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     hadc->MspInitCallback(hadc);
 507:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** #else
 508:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Init the low level hardware */
 509:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     HAL_ADC_MspInit(hadc);
 510:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 511:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
 512:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 513:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 514:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* correctly completed.                                                     */
 515:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 516:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 517:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Set ADC state */
 518:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 519:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 520:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                       HAL_ADC_STATE_BUSY_INTERNAL);
 521:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 522:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Set ADC parameters */
 523:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 524:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Configuration of common ADC clock: clock source HSI with selectable    */
 525:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* prescaler                                                              */
 526:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     MODIFY_REG(ADC->CCR                 ,
 527:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_CCR_ADCPRE           ,
 528:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                hadc->Init.ClockPrescaler );
 529:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 530:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Configuration of ADC:                                                  */
 531:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*  - external trigger polarity                                           */
 532:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*  - End of conversion selection                                         */
 533:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*  - DMA continuous request                                              */
 534:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*  - Channels bank (Banks availability depends on devices categories)    */
 535:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*  - continuous conversion mode                                          */
 536:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     tmp_cr2 |= (hadc->Init.DataAlign                                           |
 537:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 hadc->Init.EOCSelection                                        |
 538:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 539:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 hadc->Init.ChannelsBank                                        |
 540:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 541:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 542:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Enable external trigger if trigger selection is different of software  */
 543:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* start.                                                                 */
 544:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Note: This configuration keeps the hardware feature of parameter       */
 545:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
 546:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*       software start.                                                  */
ARM GAS  /tmp/ccf5d4Yb.s 			page 11


 547:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 548:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 549:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 550:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                   hadc->Init.ExternalTrigConvEdge );
 551:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 552:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 553:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Parameters update conditioned to ADC state:                            */
 554:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Parameters that can be updated only when ADC is disabled:              */
 555:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*  - delay selection (LowPowerAutoWait mode)                             */
 556:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*  - resolution                                                          */
 557:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*  - auto power off (LowPowerAutoPowerOff mode)                          */
 558:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*  - scan mode                                                           */
 559:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*  - discontinuous mode disable/enable                                   */
 560:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*  - discontinuous mode number of conversions                            */
 561:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     if ((ADC_IS_ENABLE(hadc) == RESET))
 562:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 563:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 564:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 565:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       tmp_cr1 |= (hadc->Init.Resolution                     |
 566:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                   hadc->Init.LowPowerAutoPowerOff           |
 567:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                   ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 568:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 569:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Enable discontinuous mode only if continuous mode is disabled */
 570:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
 571:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /*       discontinuous is set anyway, but has no effect on ADC HW.      */
 572:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       if (hadc->Init.DiscontinuousConvMode == ENABLE)
 573:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       {
 574:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         if (hadc->Init.ContinuousConvMode == DISABLE)
 575:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         {
 576:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           /* Enable the selected ADC regular discontinuous mode */
 577:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           /* Set the number of channels to be converted in discontinuous mode */
 578:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 579:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                            ADC_CR1_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion)  );
 580:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         }
 581:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         else
 582:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         {
 583:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           /* ADC regular group settings continuous and sequencer discontinuous*/
 584:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           /* cannot be enabled simultaneously.                                */
 585:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           
 586:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           /* Update ADC state machine to error */
 587:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 588:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           
 589:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           /* Set ADC error code to ADC IP internal error */
 590:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 591:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         }
 592:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       }
 593:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 594:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Update ADC configuration register CR1 with previous settings */
 595:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         MODIFY_REG(hadc->Instance->CR1,
 596:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                    ADC_CR1_RES     |
 597:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                    ADC_CR1_PDI     |
 598:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                    ADC_CR1_PDD     |
 599:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                    ADC_CR1_DISCNUM |
 600:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                    ADC_CR1_DISCEN  |
 601:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                    ADC_CR1_SCAN     ,
 602:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                    tmp_cr1           );
 603:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
ARM GAS  /tmp/ccf5d4Yb.s 			page 12


 604:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 605:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Update ADC configuration register CR2 with previous settings */
 606:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->CR2    ,
 607:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_CR2_MASK_ADCINIT() ,
 608:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                tmp_cr2                 );
 609:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 610:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Configuration of regular group sequencer:                              */
 611:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* - if scan mode is disabled, regular channels sequence length is set to */
 612:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*   0x00: 1 channel converted (channel on regular rank 1)                */
 613:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*   Parameter "NbrOfConversion" is discarded.                            */
 614:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*   Note: Scan mode is present by hardware on this device and, if        */
 615:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
 616:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
 617:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* - if scan mode is enabled, regular channels sequence length is set to  */
 618:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*   parameter "NbrOfConversion"                                          */
 619:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 620:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 621:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->SQR1                         ,
 622:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                  ADC_SQR1_L                                   ,
 623:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                  ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
 624:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 625:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     else
 626:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 627:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->SQR1,
 628:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                  ADC_SQR1_L          ,
 629:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                  0x00000000           );
 630:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 631:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 632:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Check back that ADC registers have effectively been configured to      */
 633:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* ensure of no potential problem of ADC core IP clocking.                */
 634:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Check through register CR2 (excluding execution control bits ADON,     */
 635:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
 636:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 637:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                            ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
 638:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                            ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
 639:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****          == tmp_cr2)
 640:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 641:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Set ADC error code to none */
 642:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 643:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 644:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Set the ADC state */
 645:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 646:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 647:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
 648:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 649:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     else
 650:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 651:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Update ADC state machine to error */
 652:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 653:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 654:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                         HAL_ADC_STATE_ERROR_INTERNAL);
 655:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 656:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Set ADC error code to ADC IP internal error */
 657:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 658:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 659:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       tmp_hal_status = HAL_ERROR;
 660:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
ARM GAS  /tmp/ccf5d4Yb.s 			page 13


 661:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 662:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
 663:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   else
 664:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 665:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
 666:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
 667:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 668:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Return function status */
 669:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   return tmp_hal_status;
 670:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
 671:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 672:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
 673:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  Deinitialize the ADC peripheral registers to its default reset values.
 674:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @note   To not impact other ADCs, reset of common ADC registers have been
 675:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         left commented below.
 676:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         If needed, the example code can be copied and uncommented into
 677:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         function HAL_ADC_MspDeInit().
 678:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hadc ADC handle
 679:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval HAL status
 680:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
 681:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
 682:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
 683:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 684:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 685:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Check ADC handle */
 686:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if(hadc == NULL)
 687:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 688:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     return HAL_ERROR;
 689:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
 690:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 691:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Check the parameters */
 692:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 693:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 694:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Set ADC state */
 695:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 696:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 697:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
 698:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Disable ADC peripheral */
 699:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 700:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 701:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 702:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 703:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* correctly completed.                                                     */
 704:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 705:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 706:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* ========== Reset ADC registers ========== */
 707:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset register SR */
 708:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_JEOC | ADC_FLAG_EOC |
 709:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                 ADC_FLAG_JSTRT | ADC_FLAG_STRT));
 710:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                          
 711:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset register CR1 */
 712:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_OVRIE   | ADC_CR1_RES     | ADC_CR1_AWDEN  |
 713:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                     ADC_CR1_JAWDEN  | ADC_CR1_PDI     | ADC_CR1_PDD    |
 714:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                     ADC_CR1_DISCNUM | ADC_CR1_JDISCEN | ADC_CR1_DISCEN |
 715:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                     ADC_CR1_JAUTO   | ADC_CR1_AWDSGL  | ADC_CR1_SCAN   |
 716:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                     ADC_CR1_JEOCIE  | ADC_CR1_AWDIE   | ADC_CR1_EOCIE  |
 717:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                     ADC_CR1_AWDCH                                       ));
ARM GAS  /tmp/ccf5d4Yb.s 			page 14


 718:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 719:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset register CR2 */
 720:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     ADC_CR2_CLEAR(hadc);
 721:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 722:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset register SMPR0 */
 723:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     ADC_SMPR0_CLEAR(hadc);
 724:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 725:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset register SMPR1 */
 726:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     ADC_SMPR1_CLEAR(hadc);
 727:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 728:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset register SMPR2 */
 729:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SMPR2, (ADC_SMPR2_SMP19 | ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | 
 730:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                       ADC_SMPR2_SMP16 | ADC_SMPR2_SMP15 | ADC_SMPR2_SMP14 | 
 731:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                       ADC_SMPR2_SMP13 | ADC_SMPR2_SMP12 | ADC_SMPR2_SMP11 |
 732:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                       ADC_SMPR2_SMP10                                      ));
 733:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 734:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset register SMPR3 */
 735:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SMPR3, (ADC_SMPR3_SMP9 | ADC_SMPR3_SMP8 | ADC_SMPR3_SMP7 | 
 736:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                       ADC_SMPR3_SMP6 | ADC_SMPR3_SMP5 | ADC_SMPR3_SMP4 | 
 737:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                       ADC_SMPR3_SMP3 | ADC_SMPR3_SMP2 | ADC_SMPR3_SMP1 |
 738:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                       ADC_SMPR3_SMP0                                    ));
 739:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 740:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset register JOFR1 */
 741:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 742:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset register JOFR2 */
 743:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JOFR2, ADC_JOFR2_JOFFSET2);
 744:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset register JOFR3 */
 745:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JOFR3, ADC_JOFR3_JOFFSET3);
 746:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset register JOFR4 */
 747:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JOFR4, ADC_JOFR4_JOFFSET4);
 748:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 749:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset register HTR */
 750:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->HTR, ADC_HTR_HT);
 751:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset register LTR */
 752:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->LTR, ADC_LTR_LT);
 753:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 754:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset register SQR1 */
 755:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SQR1, (ADC_SQR1_L | __ADC_SQR1_SQXX));
 756:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 757:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset register SQR2 */
 758:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SQR2, (ADC_SQR2_SQ24 | ADC_SQR2_SQ23 | ADC_SQR2_SQ22 | 
 759:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                      ADC_SQR2_SQ21 | ADC_SQR2_SQ20 | ADC_SQR2_SQ19  ));
 760:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 761:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset register SQR3 */
 762:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SQR3, (ADC_SQR3_SQ18 | ADC_SQR3_SQ17 | ADC_SQR3_SQ16 | 
 763:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                      ADC_SQR3_SQ15 | ADC_SQR3_SQ14 | ADC_SQR3_SQ13  ));
 764:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 765:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset register SQR4 */
 766:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SQR4, (ADC_SQR4_SQ12 | ADC_SQR4_SQ11 | ADC_SQR4_SQ10 | 
 767:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                      ADC_SQR4_SQ9  | ADC_SQR4_SQ8  | ADC_SQR4_SQ7   ));
 768:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 769:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset register SQR5 */
 770:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SQR5, (ADC_SQR5_SQ6 | ADC_SQR5_SQ5 | ADC_SQR5_SQ4 | 
 771:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                      ADC_SQR5_SQ3 | ADC_SQR5_SQ2 | ADC_SQR5_SQ1  ));
 772:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 773:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 774:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset register JSQR */
ARM GAS  /tmp/ccf5d4Yb.s 			page 15


 775:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JSQR, (ADC_JSQR_JL |
 776:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                      ADC_JSQR_JSQ4 | ADC_JSQR_JSQ3 | 
 777:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                      ADC_JSQR_JSQ2 | ADC_JSQR_JSQ1  ));
 778:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 779:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset register DR */
 780:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* bits in access mode read only, no direct reset applicable*/
 781:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 782:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset registers JDR1, JDR2, JDR3, JDR4 */
 783:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* bits in access mode read only, no direct reset applicable*/
 784:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 785:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset register CCR */
 786:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     CLEAR_BIT(ADC->CCR, ADC_CCR_TSVREFE);   
 787:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 788:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* ========== Hard reset ADC peripheral ========== */
 789:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Performs a global reset of the entire ADC peripheral: ADC state is     */
 790:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* forced to a similar state after device power-on.                       */
 791:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* If needed, copy-paste and uncomment the following reset code into      */
 792:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* function "void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)":              */
 793:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*                                                                        */
 794:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*  __HAL_RCC_ADC1_FORCE_RESET()                                          */
 795:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*  __HAL_RCC_ADC1_RELEASE_RESET()                                        */
 796:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 797:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
 798:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     if (hadc->MspDeInitCallback == NULL)
 799:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 800:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       hadc->MspDeInitCallback = HAL_ADC_MspDeInit; /* Legacy weak MspDeInit  */
 801:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 802:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 803:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* DeInit the low level hardware */
 804:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     hadc->MspDeInitCallback(hadc);
 805:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** #else
 806:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* DeInit the low level hardware */
 807:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     HAL_ADC_MspDeInit(hadc);
 808:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 809:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 810:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Set ADC error code to none */
 811:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 812:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 813:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Set ADC state */
 814:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     hadc->State = HAL_ADC_STATE_RESET;
 815:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 816:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
 817:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 818:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Process unlocked */
 819:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 820:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 821:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Return function status */
 822:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   return tmp_hal_status;
 823:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
 824:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 825:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
 826:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  Initializes the ADC MSP.
 827:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hadc ADC handle
 828:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval None
 829:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
 830:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** __weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
 831:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
ARM GAS  /tmp/ccf5d4Yb.s 			page 16


  26              		.loc 1 831 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
  32 0000 7047     		bx	lr
  33              		.cfi_endproc
  34              	.LFE74:
  36              		.section	.text.HAL_ADC_Init,"ax",%progbits
  37              		.align	1
  38              		.global	HAL_ADC_Init
  39              		.syntax unified
  40              		.thumb
  41              		.thumb_func
  42              		.fpu softvfp
  44              	HAL_ADC_Init:
  45              	.LFB72:
 433:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  46              		.loc 1 433 0
  47              		.cfi_startproc
  48              		@ args = 0, pretend = 0, frame = 8
  49              		@ frame_needed = 0, uses_anonymous_args = 0
  50              	.LVL1:
 439:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
  51              		.loc 1 439 0
  52 0000 0028     		cmp	r0, #0
  53 0002 00F0BE80 		beq	.L14
 433:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  54              		.loc 1 433 0
  55 0006 70B5     		push	{r4, r5, r6, lr}
  56              	.LCFI0:
  57              		.cfi_def_cfa_offset 16
  58              		.cfi_offset 4, -16
  59              		.cfi_offset 5, -12
  60              		.cfi_offset 6, -8
  61              		.cfi_offset 14, -4
  62 0008 82B0     		sub	sp, sp, #8
  63              	.LCFI1:
  64              		.cfi_def_cfa_offset 24
  65 000a 0446     		mov	r4, r0
 481:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
  66              		.loc 1 481 0
  67 000c C36C     		ldr	r3, [r0, #76]
  68 000e 002B     		cmp	r3, #0
  69 0010 71D0     		beq	.L21
  70              	.LVL2:
  71              	.L4:
 515:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
  72              		.loc 1 515 0
  73 0012 E36C     		ldr	r3, [r4, #76]
  74 0014 13F0100F 		tst	r3, #16
  75 0018 40F0B580 		bne	.L15
 518:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
  76              		.loc 1 518 0
  77 001c E36C     		ldr	r3, [r4, #76]
  78 001e 23F48853 		bic	r3, r3, #4352
ARM GAS  /tmp/ccf5d4Yb.s 			page 17


  79 0022 23F00203 		bic	r3, r3, #2
  80 0026 43F00203 		orr	r3, r3, #2
  81 002a E364     		str	r3, [r4, #76]
 526:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_CCR_ADCPRE           ,
  82              		.loc 1 526 0
  83 002c 574A     		ldr	r2, .L25
  84 002e 5368     		ldr	r3, [r2, #4]
  85 0030 23F44033 		bic	r3, r3, #196608
  86 0034 6168     		ldr	r1, [r4, #4]
  87 0036 0B43     		orrs	r3, r3, r1
  88 0038 5360     		str	r3, [r2, #4]
 536:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 hadc->Init.EOCSelection                                        |
  89              		.loc 1 536 0
  90 003a E368     		ldr	r3, [r4, #12]
 537:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
  91              		.loc 1 537 0
  92 003c 6269     		ldr	r2, [r4, #20]
 536:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 hadc->Init.EOCSelection                                        |
  93              		.loc 1 536 0
  94 003e 1343     		orrs	r3, r3, r2
 538:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 hadc->Init.ChannelsBank                                        |
  95              		.loc 1 538 0
  96 0040 94F83C10 		ldrb	r1, [r4, #60]	@ zero_extendqisi2
  97              	.LVL3:
  98              	.LBB11:
  99              	.LBB12:
 100              		.file 2 "..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h"
   1:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /*
   8:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  *
  10:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  *
  12:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  *
  16:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  *
  18:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
  24:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
  25:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
  28:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
ARM GAS  /tmp/ccf5d4Yb.s 			page 18


  31:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
  34:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
  38:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
  39:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
  43:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
  46:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
  49:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
  55:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
  58:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
  61:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
  64:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
  67:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
  70:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
  78:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
  86:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
ARM GAS  /tmp/ccf5d4Yb.s 			page 19


  88:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
  94:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 102:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 110:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 113:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 116:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 117:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 118:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   @{
 122:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 123:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 124:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 125:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 129:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 131:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 133:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 134:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 135:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 136:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 140:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 142:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 144:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccf5d4Yb.s 			page 20


 145:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 146:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 147:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 150:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 151:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 153:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 154:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 155:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 157:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 158:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 159:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 160:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 162:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 166:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 168:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 169:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 170:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 172:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 173:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 174:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 175:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 176:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 177:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 181:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 183:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 185:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 186:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 187:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 189:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 193:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 195:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 197:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 198:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 199:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 200:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 201:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
ARM GAS  /tmp/ccf5d4Yb.s 			page 21


 202:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 205:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 207:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 208:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 209:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 211:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 212:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 213:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 214:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 215:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 219:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 221:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 222:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 223:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 225:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 226:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 227:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 228:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 229:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 233:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 235:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 237:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 240:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 241:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 242:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 243:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 247:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 249:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 250:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 251:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 253:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 254:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 255:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 256:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 258:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
ARM GAS  /tmp/ccf5d4Yb.s 			page 22


 259:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 262:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 264:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 265:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 266:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 268:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 269:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 270:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 271:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 272:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 273:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 277:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 279:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 281:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 282:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 283:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 285:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 289:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 291:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 293:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 294:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 295:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 296:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 297:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 301:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 303:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 304:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 305:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 307:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 308:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 309:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 310:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 312:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccf5d4Yb.s 			page 23


 316:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 318:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 319:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 320:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 322:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 323:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 324:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 325:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 326:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 327:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 331:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 333:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 335:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 336:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 337:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 339:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 343:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 345:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 347:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 348:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 349:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 350:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 352:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 355:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 356:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 358:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 359:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 360:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 362:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 363:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 364:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 365:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 366:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 370:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 372:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
ARM GAS  /tmp/ccf5d4Yb.s 			page 24


 373:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 374:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 375:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 376:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 377:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 378:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 382:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 384:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 385:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 386:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 388:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 389:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 390:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 391:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 393:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 397:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 399:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 400:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 401:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 403:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 404:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 405:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 406:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 407:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 408:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 412:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 414:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 416:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 417:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 418:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 420:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 424:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 426:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 428:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 429:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccf5d4Yb.s 			page 25


 430:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 431:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 435:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 439:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 441:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 443:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 444:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 445:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 446:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 450:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 452:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 454:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 455:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 456:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 457:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 461:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 463:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 464:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 465:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 467:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 468:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 469:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 470:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 472:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 475:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 476:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 478:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 479:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 480:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 482:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 483:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 484:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 485:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 486:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccf5d4Yb.s 			page 26


 487:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 491:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 493:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 495:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 496:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 497:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 499:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 503:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 505:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 507:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 508:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 509:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 510:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 511:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 516:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 518:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 520:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 521:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 522:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 523:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 524:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 526:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 527:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 529:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 530:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 531:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 533:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 534:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 535:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 536:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 538:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 541:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 542:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccf5d4Yb.s 			page 27


 544:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 545:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 546:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 548:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 549:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 550:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 551:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 552:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 553:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 554:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 557:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 559:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 560:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 561:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 562:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 563:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 564:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 565:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 567:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 568:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 569:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 571:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 573:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 574:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 575:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 576:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 577:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 579:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 580:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 583:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 584:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 585:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 586:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 587:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   mode.
 588:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   
 589:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 590:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 591:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 592:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 593:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 594:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 595:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 596:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 597:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 598:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 599:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 600:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
ARM GAS  /tmp/ccf5d4Yb.s 			page 28


 601:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return result;
 602:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 603:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 604:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 605:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 606:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 607:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 608:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 609:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 610:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 611:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 612:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 613:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 614:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 615:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 616:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 617:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 618:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 619:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 620:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 621:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 622:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return result;
 623:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 624:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 625:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 626:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 627:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 628:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 629:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 630:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 631:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 632:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   mode.
 633:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   
 634:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 635:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 636:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 637:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 638:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 639:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 640:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 641:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 642:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 643:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 644:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 645:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 646:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 647:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 648:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 649:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 650:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 651:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 652:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 654:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 655:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 656:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 657:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccf5d4Yb.s 			page 29


 658:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 659:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 660:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 661:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 662:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 663:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 664:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 665:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 666:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 667:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 668:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 669:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 670:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 671:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 672:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 673:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 674:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   mode.
 675:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 676:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 677:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 678:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 679:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 680:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 681:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 682:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 683:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 684:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 685:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 686:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 687:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 688:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return result;
 689:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 690:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 691:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 692:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 693:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 694:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 695:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 696:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 697:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 698:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 699:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 700:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 701:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 702:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 703:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 704:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 705:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 706:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 707:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 708:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 709:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 710:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return result;
 711:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 712:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 713:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 714:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccf5d4Yb.s 			page 30


 715:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 716:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 717:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 718:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 719:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 720:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   mode.
 721:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 722:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 723:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 724:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 725:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 726:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 727:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 728:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 729:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 730:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 731:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 732:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 733:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 734:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 735:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 736:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 737:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 738:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 739:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 740:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 741:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 742:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 743:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 744:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 745:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 746:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 747:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 748:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 749:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 750:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 751:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 752:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 753:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 754:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 755:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 756:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 757:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 758:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 759:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 760:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 761:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 762:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 763:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 764:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 765:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 766:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 767:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 768:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 769:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 770:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 771:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
ARM GAS  /tmp/ccf5d4Yb.s 			page 31


 772:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 773:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 774:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 775:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 776:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 777:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 778:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 779:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(result);
 780:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 781:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 782:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 783:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 784:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 785:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 786:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 787:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 788:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 789:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 790:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 791:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 792:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 793:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 794:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 795:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 796:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 797:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 798:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 799:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 800:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 801:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 802:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 803:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 804:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 805:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 806:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 807:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 808:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 809:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 810:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 811:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 812:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 813:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 814:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 815:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 816:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   @{
 817:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** */
 818:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 819:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 820:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 821:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 822:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 823:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 824:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 825:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 826:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 827:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 828:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
ARM GAS  /tmp/ccf5d4Yb.s 			page 32


 829:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 830:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 831:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 832:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 833:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 834:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 835:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 836:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 837:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 838:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 839:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 840:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 841:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 842:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 843:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 844:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 845:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 846:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 847:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 848:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 849:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 850:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 851:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 852:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 853:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 854:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 855:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 856:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 857:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 858:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 859:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 860:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 861:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 862:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 863:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 864:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 865:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 866:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 867:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 868:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 869:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 870:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 871:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 872:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 873:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 874:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 875:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 876:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 877:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 878:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 879:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 880:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 881:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 882:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 883:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 884:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 885:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
ARM GAS  /tmp/ccf5d4Yb.s 			page 33


 886:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 887:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 888:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 889:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 890:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 891:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 892:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 893:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 894:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 895:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 896:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 897:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 898:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 899:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 900:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 901:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 902:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 903:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 904:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 905:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 906:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 907:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 908:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return result;
 909:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 910:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 911:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 912:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 913:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 914:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 915:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 916:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 917:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 918:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 919:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 920:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 921:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 922:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 923:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 924:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return result;
 925:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 926:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 927:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 928:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 929:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 930:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 931:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 932:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 933:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 934:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 935:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 936:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 937:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 938:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #else
 939:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 940:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 941:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 942:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return result;
ARM GAS  /tmp/ccf5d4Yb.s 			page 34


 943:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #endif
 944:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 945:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 946:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 947:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 948:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 949:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 950:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 951:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 952:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 953:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 954:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 955:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 956:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 957:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 958:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   {
 959:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****     return op1;
 960:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   }
 961:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 962:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** }
 963:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 964:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 965:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 966:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 967:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 968:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 969:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 970:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 971:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 972:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 973:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 974:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 975:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** /**
 976:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 977:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 978:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 979:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 980:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****  */
 981:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 982:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** {
 983:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 984:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** 
 985:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 986:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 987:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 988:..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 101              		.loc 2 988 0
 102 0044 4FF40072 		mov	r2, #512
 103              		.syntax unified
 104              	@ 988 "..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h" 1
 105 0048 92FAA2F2 		rbit r2, r2
 106              	@ 0 "" 2
 107              	.LVL4:
 108              		.thumb
 109              		.syntax unified
 110              	.LBE12:
 111              	.LBE11:
ARM GAS  /tmp/ccf5d4Yb.s 			page 35


 538:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 hadc->Init.ChannelsBank                                        |
 112              		.loc 1 538 0
 113 004c B2FA82F2 		clz	r2, r2
 114 0050 01FA02F2 		lsl	r2, r1, r2
 537:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 115              		.loc 1 537 0
 116 0054 1343     		orrs	r3, r3, r2
 539:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 117              		.loc 1 539 0
 118 0056 226A     		ldr	r2, [r4, #32]
 538:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 hadc->Init.ChannelsBank                                        |
 119              		.loc 1 538 0
 120 0058 1A43     		orrs	r2, r2, r3
 540:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 121              		.loc 1 540 0
 122 005a 94F82400 		ldrb	r0, [r4, #36]	@ zero_extendqisi2
 123              	.LVL5:
 124              	.LBB13:
 125              	.LBB14:
 126              		.loc 2 988 0
 127 005e 0223     		movs	r3, #2
 128              		.syntax unified
 129              	@ 988 "..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h" 1
 130 0060 93FAA3F3 		rbit r3, r3
 131              	@ 0 "" 2
 132              	.LVL6:
 133              		.thumb
 134              		.syntax unified
 135              	.LBE14:
 136              	.LBE13:
 540:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 137              		.loc 1 540 0
 138 0064 B3FA83F3 		clz	r3, r3
 139 0068 00FA03F3 		lsl	r3, r0, r3
 539:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                 ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 140              		.loc 1 539 0
 141 006c 1343     		orrs	r3, r3, r2
 142              	.LVL7:
 547:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 143              		.loc 1 547 0
 144 006e 626B     		ldr	r2, [r4, #52]
 145 0070 102A     		cmp	r2, #16
 146 0072 02D0     		beq	.L5
 550:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 147              		.loc 1 550 0
 148 0074 A16B     		ldr	r1, [r4, #56]
 549:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                   hadc->Init.ExternalTrigConvEdge );
 149              		.loc 1 549 0
 150 0076 0A43     		orrs	r2, r2, r1
 151 0078 1343     		orrs	r3, r3, r2
 152              	.LVL8:
 153              	.L5:
 561:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 154              		.loc 1 561 0
 155 007a 2168     		ldr	r1, [r4]
 156 007c 0A68     		ldr	r2, [r1]
 157 007e 12F04002 		ands	r2, r2, #64
ARM GAS  /tmp/ccf5d4Yb.s 			page 36


 158 0082 14D1     		bne	.L6
 563:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 159              		.loc 1 563 0
 160 0084 A569     		ldr	r5, [r4, #24]
 161 0086 2B43     		orrs	r3, r3, r5
 162              	.LVL9:
 565:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                   hadc->Init.LowPowerAutoPowerOff           |
 163              		.loc 1 565 0
 164 0088 A568     		ldr	r5, [r4, #8]
 566:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                   ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 165              		.loc 1 566 0
 166 008a E669     		ldr	r6, [r4, #28]
 565:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                   hadc->Init.LowPowerAutoPowerOff           |
 167              		.loc 1 565 0
 168 008c 3543     		orrs	r5, r5, r6
 567:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 169              		.loc 1 567 0
 170 008e 2669     		ldr	r6, [r4, #16]
 171 0090 B6F5807F 		cmp	r6, #256
 172 0094 42D0     		beq	.L16
 567:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 173              		.loc 1 567 0 is_stmt 0 discriminator 2
 174 0096 012E     		cmp	r6, #1
 175 0098 3DD0     		beq	.L22
 176              	.L7:
 566:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                   ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 177              		.loc 1 566 0 is_stmt 1
 178 009a 2A43     		orrs	r2, r2, r5
 179              	.LVL10:
 572:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       {
 180              		.loc 1 572 0
 181 009c 94F82C50 		ldrb	r5, [r4, #44]	@ zero_extendqisi2
 182 00a0 012D     		cmp	r5, #1
 183 00a2 3ED0     		beq	.L23
 184              	.L8:
 595:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                    ADC_CR1_RES     |
 185              		.loc 1 595 0
 186 00a4 4D68     		ldr	r5, [r1, #4]
 187 00a6 3A48     		ldr	r0, .L25+4
 188 00a8 2840     		ands	r0, r0, r5
 189 00aa 0243     		orrs	r2, r2, r0
 190              	.LVL11:
 191 00ac 4A60     		str	r2, [r1, #4]
 192              	.L6:
 606:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_CR2_MASK_ADCINIT() ,
 193              		.loc 1 606 0
 194 00ae 2168     		ldr	r1, [r4]
 195 00b0 8868     		ldr	r0, [r1, #8]
 196 00b2 384A     		ldr	r2, .L25+8
 197 00b4 0240     		ands	r2, r2, r0
 198 00b6 1A43     		orrs	r2, r2, r3
 199 00b8 8A60     		str	r2, [r1, #8]
 619:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 200              		.loc 1 619 0
 201 00ba 2269     		ldr	r2, [r4, #16]
 202 00bc B2F5807F 		cmp	r2, #256
 203 00c0 46D0     		beq	.L10
ARM GAS  /tmp/ccf5d4Yb.s 			page 37


 619:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 204              		.loc 1 619 0 is_stmt 0 discriminator 1
 205 00c2 012A     		cmp	r2, #1
 206 00c4 44D0     		beq	.L10
 627:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                  ADC_SQR1_L          ,
 207              		.loc 1 627 0 is_stmt 1
 208 00c6 2168     		ldr	r1, [r4]
 209 00c8 0A6B     		ldr	r2, [r1, #48]
 210 00ca 22F0F872 		bic	r2, r2, #32505856
 211 00ce 0A63     		str	r2, [r1, #48]
 212              	.L12:
 636:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                            ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
 213              		.loc 1 636 0
 214 00d0 2268     		ldr	r2, [r4]
 215 00d2 9168     		ldr	r1, [r2, #8]
 216 00d4 304A     		ldr	r2, .L25+12
 217 00d6 0A40     		ands	r2, r2, r1
 218 00d8 9342     		cmp	r3, r2
 219 00da 49D0     		beq	.L24
 652:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 220              		.loc 1 652 0
 221 00dc E36C     		ldr	r3, [r4, #76]
 222              	.LVL12:
 223 00de 23F01203 		bic	r3, r3, #18
 224 00e2 43F01003 		orr	r3, r3, #16
 225 00e6 E364     		str	r3, [r4, #76]
 657:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 226              		.loc 1 657 0
 227 00e8 236D     		ldr	r3, [r4, #80]
 228 00ea 43F00103 		orr	r3, r3, #1
 229 00ee 2365     		str	r3, [r4, #80]
 230              	.LVL13:
 659:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 231              		.loc 1 659 0
 232 00f0 0120     		movs	r0, #1
 233              	.LVL14:
 234              	.L3:
 670:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 235              		.loc 1 670 0
 236 00f2 02B0     		add	sp, sp, #8
 237              	.LCFI2:
 238              		.cfi_remember_state
 239              		.cfi_def_cfa_offset 16
 240              		@ sp needed
 241 00f4 70BD     		pop	{r4, r5, r6, pc}
 242              	.LVL15:
 243              	.L21:
 244              	.LCFI3:
 245              		.cfi_restore_state
 484:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 246              		.loc 1 484 0
 247 00f6 0365     		str	r3, [r0, #80]
 487:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 248              		.loc 1 487 0
 249 00f8 80F84830 		strb	r3, [r0, #72]
 250              	.LBB15:
 490:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
ARM GAS  /tmp/ccf5d4Yb.s 			page 38


 251              		.loc 1 490 0
 252 00fc 274B     		ldr	r3, .L25+16
 253 00fe 1A6A     		ldr	r2, [r3, #32]
 254 0100 42F00102 		orr	r2, r2, #1
 255 0104 1A62     		str	r2, [r3, #32]
 256 0106 1B6A     		ldr	r3, [r3, #32]
 257 0108 03F00103 		and	r3, r3, #1
 258 010c 0193     		str	r3, [sp, #4]
 259 010e 019B     		ldr	r3, [sp, #4]
 260              	.LBE15:
 509:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 261              		.loc 1 509 0
 262 0110 FFF7FEFF 		bl	HAL_ADC_MspInit
 263              	.LVL16:
 264 0114 7DE7     		b	.L4
 265              	.LVL17:
 266              	.L22:
 567:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 267              		.loc 1 567 0
 268 0116 4FF48072 		mov	r2, #256
 269 011a BEE7     		b	.L7
 270              	.L16:
 271 011c 4FF48072 		mov	r2, #256
 272 0120 BBE7     		b	.L7
 273              	.LVL18:
 274              	.L23:
 574:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         {
 275              		.loc 1 574 0
 276 0122 60B9     		cbnz	r0, .L9
 578:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                            ADC_CR1_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion)  );
 277              		.loc 1 578 0
 278 0124 206B     		ldr	r0, [r4, #48]
 279 0126 0138     		subs	r0, r0, #1
 280              	.LVL19:
 281              	.LBB16:
 282              	.LBB17:
 283              		.loc 2 988 0
 284 0128 4FF46045 		mov	r5, #57344
 285              		.syntax unified
 286              	@ 988 "..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h" 1
 287 012c 95FAA5F5 		rbit r5, r5
 288              	@ 0 "" 2
 289              	.LVL20:
 290              		.thumb
 291              		.syntax unified
 292              	.LBE17:
 293              	.LBE16:
 578:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                            ADC_CR1_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion)  );
 294              		.loc 1 578 0
 295 0130 B5FA85F5 		clz	r5, r5
 296 0134 A840     		lsls	r0, r0, r5
 297 0136 40F40060 		orr	r0, r0, #2048
 298 013a 0243     		orrs	r2, r2, r0
 299              	.LVL21:
 300 013c B2E7     		b	.L8
 301              	.L9:
 587:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           
ARM GAS  /tmp/ccf5d4Yb.s 			page 39


 302              		.loc 1 587 0
 303 013e E06C     		ldr	r0, [r4, #76]
 304 0140 40F02000 		orr	r0, r0, #32
 305 0144 E064     		str	r0, [r4, #76]
 590:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         }
 306              		.loc 1 590 0
 307 0146 206D     		ldr	r0, [r4, #80]
 308 0148 40F00100 		orr	r0, r0, #1
 309 014c 2065     		str	r0, [r4, #80]
 310 014e A9E7     		b	.L8
 311              	.LVL22:
 312              	.L10:
 621:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                  ADC_SQR1_L                                   ,
 313              		.loc 1 621 0
 314 0150 2568     		ldr	r5, [r4]
 315 0152 2A6B     		ldr	r2, [r5, #48]
 316 0154 22F0F872 		bic	r2, r2, #32505856
 317 0158 A16A     		ldr	r1, [r4, #40]
 318 015a 0139     		subs	r1, r1, #1
 319              	.LVL23:
 320              	.LBB18:
 321              	.LBB19:
 322              		.loc 2 988 0
 323 015c 4FF0F870 		mov	r0, #32505856
 324              		.syntax unified
 325              	@ 988 "..//Source/stm/lib/CMSIS/Include/cmsis_gcc.h" 1
 326 0160 90FAA0F0 		rbit r0, r0
 327              	@ 0 "" 2
 328              	.LVL24:
 329              		.thumb
 330              		.syntax unified
 331              	.LBE19:
 332              	.LBE18:
 621:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                  ADC_SQR1_L                                   ,
 333              		.loc 1 621 0
 334 0164 B0FA80F0 		clz	r0, r0
 335 0168 8140     		lsls	r1, r1, r0
 336 016a 0A43     		orrs	r2, r2, r1
 337 016c 2A63     		str	r2, [r5, #48]
 338 016e AFE7     		b	.L12
 339              	.L24:
 642:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 340              		.loc 1 642 0
 341 0170 0020     		movs	r0, #0
 342 0172 2065     		str	r0, [r4, #80]
 645:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 343              		.loc 1 645 0
 344 0174 E36C     		ldr	r3, [r4, #76]
 345              	.LVL25:
 346 0176 23F00303 		bic	r3, r3, #3
 347 017a 43F00103 		orr	r3, r3, #1
 348 017e E364     		str	r3, [r4, #76]
 349 0180 B7E7     		b	.L3
 350              	.LVL26:
 351              	.L14:
 352              	.LCFI4:
 353              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccf5d4Yb.s 			page 40


 354              		.cfi_restore 4
 355              		.cfi_restore 5
 356              		.cfi_restore 6
 357              		.cfi_restore 14
 441:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
 358              		.loc 1 441 0
 359 0182 0120     		movs	r0, #1
 360              	.LVL27:
 361 0184 7047     		bx	lr
 362              	.LVL28:
 363              	.L15:
 364              	.LCFI5:
 365              		.cfi_def_cfa_offset 24
 366              		.cfi_offset 4, -16
 367              		.cfi_offset 5, -12
 368              		.cfi_offset 6, -8
 369              		.cfi_offset 14, -4
 665:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
 370              		.loc 1 665 0
 371 0186 0120     		movs	r0, #1
 372 0188 B3E7     		b	.L3
 373              	.L26:
 374 018a 00BF     		.align	2
 375              	.L25:
 376 018c 00270140 		.word	1073817344
 377 0190 FF16FCFC 		.word	-50587905
 378 0194 8DF1FFC0 		.word	-1056968307
 379 0198 FEFF80BF 		.word	-1082064898
 380 019c 00380240 		.word	1073887232
 381              		.cfi_endproc
 382              	.LFE72:
 384              		.section	.text.HAL_ADC_MspDeInit,"ax",%progbits
 385              		.align	1
 386              		.weak	HAL_ADC_MspDeInit
 387              		.syntax unified
 388              		.thumb
 389              		.thumb_func
 390              		.fpu softvfp
 392              	HAL_ADC_MspDeInit:
 393              	.LFB75:
 832:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 833:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   UNUSED(hadc);
 834:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 835:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
 836:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****             function HAL_ADC_MspInit must be implemented in the user file.
 837:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****    */ 
 838:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
 839:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 840:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
 841:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  DeInitializes the ADC MSP.
 842:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hadc ADC handle
 843:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval None
 844:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
 845:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** __weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
 846:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
 394              		.loc 1 846 0
 395              		.cfi_startproc
ARM GAS  /tmp/ccf5d4Yb.s 			page 41


 396              		@ args = 0, pretend = 0, frame = 0
 397              		@ frame_needed = 0, uses_anonymous_args = 0
 398              		@ link register save eliminated.
 399              	.LVL29:
 400 0000 7047     		bx	lr
 401              		.cfi_endproc
 402              	.LFE75:
 404              		.section	.text.HAL_ADC_PollForConversion,"ax",%progbits
 405              		.align	1
 406              		.global	HAL_ADC_PollForConversion
 407              		.syntax unified
 408              		.thumb
 409              		.thumb_func
 410              		.fpu softvfp
 412              	HAL_ADC_PollForConversion:
 413              	.LFB78:
 847:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 848:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   UNUSED(hadc);
 849:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 850:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
 851:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****             function HAL_ADC_MspDeInit must be implemented in the user file.
 852:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****    */ 
 853:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
 854:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 855:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
 856:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
 857:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  Register a User ADC Callback
 858:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         To be used instead of the weak predefined callback
 859:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hadc Pointer to a ADC_HandleTypeDef structure that contains
 860:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *                the configuration information for the specified ADC.
 861:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  CallbackID ID of the callback to be registered
 862:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         This parameter can be one of the following values:
 863:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_COMPLETE_CB_ID      ADC conversion complete callback ID
 864:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_HALF_CB_ID          ADC conversion complete callback ID
 865:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID    ADC analog watchdog 1 callback ID
 866:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_ERROR_CB_ID                    ADC error callback ID
 867:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID  ADC group injected conversion complet
 868:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID                  ADC Msp Init callback ID
 869:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID                ADC Msp DeInit callback ID
 870:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID MspInit callback ID
 871:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID MspDeInit callback ID
 872:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  pCallback pointer to the Callback function
 873:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval HAL status
 874:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
 875:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_RegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef Callb
 876:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
 877:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_StatusTypeDef status = HAL_OK;
 878:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 879:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if (pCallback == NULL)
 880:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 881:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Update the error code */
 882:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 883:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 884:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     return HAL_ERROR;
 885:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
 886:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 887:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if ((hadc->State & HAL_ADC_STATE_READY) != 0)
ARM GAS  /tmp/ccf5d4Yb.s 			page 42


 888:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 889:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     switch (CallbackID)
 890:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 891:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
 892:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         hadc->ConvCpltCallback = pCallback;
 893:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         break;
 894:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 895:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       case HAL_ADC_CONVERSION_HALF_CB_ID :
 896:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         hadc->ConvHalfCpltCallback = pCallback;
 897:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         break;
 898:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 899:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
 900:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         hadc->LevelOutOfWindowCallback = pCallback;
 901:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         break;
 902:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 903:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       case HAL_ADC_ERROR_CB_ID :
 904:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         hadc->ErrorCallback = pCallback;
 905:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         break;
 906:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 907:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       case HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID :
 908:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         hadc->InjectedConvCpltCallback = pCallback;
 909:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         break;
 910:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 911:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
 912:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         hadc->MspInitCallback = pCallback;
 913:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         break;
 914:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 915:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
 916:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         hadc->MspDeInitCallback = pCallback;
 917:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         break;
 918:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 919:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       default :
 920:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         /* Update the error code */
 921:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 922:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 923:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         /* Return error status */
 924:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         status = HAL_ERROR;
 925:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         break;
 926:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 927:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
 928:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   else if (HAL_ADC_STATE_RESET == hadc->State)
 929:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 930:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     switch (CallbackID)
 931:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 932:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
 933:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         hadc->MspInitCallback = pCallback;
 934:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         break;
 935:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 936:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
 937:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         hadc->MspDeInitCallback = pCallback;
 938:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         break;
 939:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 940:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       default :
 941:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         /* Update the error code */
 942:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 943:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 944:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         /* Return error status */
ARM GAS  /tmp/ccf5d4Yb.s 			page 43


 945:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         status = HAL_ERROR;
 946:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         break;
 947:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 948:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
 949:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   else
 950:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 951:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Update the error code */
 952:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 953:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 954:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Return error status */
 955:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     status =  HAL_ERROR;
 956:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
 957:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 958:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   return status;
 959:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
 960:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 961:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
 962:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  Unregister a ADC Callback
 963:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         ADC callback is redirected to the weak predefined callback
 964:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hadc Pointer to a ADC_HandleTypeDef structure that contains
 965:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *                the configuration information for the specified ADC.
 966:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  CallbackID ID of the callback to be unregistered
 967:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         This parameter can be one of the following values:
 968:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_COMPLETE_CB_ID      ADC conversion complete callback ID
 969:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_HALF_CB_ID          ADC conversion complete callback ID
 970:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID    ADC analog watchdog 1 callback ID
 971:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_ERROR_CB_ID                    ADC error callback ID
 972:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID  ADC group injected conversion complet
 973:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID                  ADC Msp Init callback ID
 974:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID                ADC Msp DeInit callback ID
 975:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID MspInit callback ID
 976:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID MspDeInit callback ID
 977:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval HAL status
 978:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
 979:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_UnRegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef Cal
 980:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
 981:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_StatusTypeDef status = HAL_OK;
 982:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 983:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if ((hadc->State & HAL_ADC_STATE_READY) != 0)
 984:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 985:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     switch (CallbackID)
 986:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 987:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
 988:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         hadc->ConvCpltCallback = HAL_ADC_ConvCpltCallback;
 989:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         break;
 990:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 991:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       case HAL_ADC_CONVERSION_HALF_CB_ID :
 992:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         hadc->ConvHalfCpltCallback = HAL_ADC_ConvHalfCpltCallback;
 993:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         break;
 994:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 995:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
 996:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         hadc->LevelOutOfWindowCallback = HAL_ADC_LevelOutOfWindowCallback;
 997:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         break;
 998:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 999:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       case HAL_ADC_ERROR_CB_ID :
1000:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         hadc->ErrorCallback = HAL_ADC_ErrorCallback;
1001:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         break;
ARM GAS  /tmp/ccf5d4Yb.s 			page 44


1002:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
1003:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       case HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID :
1004:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         hadc->InjectedConvCpltCallback = HAL_ADCEx_InjectedConvCpltCallback;
1005:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         break;
1006:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
1007:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
1008:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit              */
1009:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         break;
1010:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
1011:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
1012:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         hadc->MspDeInitCallback = HAL_ADC_MspDeInit; /* Legacy weak MspDeInit            */
1013:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         break;
1014:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
1015:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       default :
1016:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         /* Update the error code */
1017:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
1018:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         
1019:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         /* Return error status */
1020:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         status =  HAL_ERROR;
1021:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         break;
1022:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
1023:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1024:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   else if (HAL_ADC_STATE_RESET == hadc->State)
1025:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
1026:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     switch (CallbackID)
1027:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
1028:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
1029:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         hadc->MspInitCallback = HAL_ADC_MspInit;                   /* Legacy weak MspInit          
1030:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         break;
1031:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         
1032:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
1033:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         hadc->MspDeInitCallback = HAL_ADC_MspDeInit;               /* Legacy weak MspDeInit        
1034:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         break;
1035:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         
1036:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       default :
1037:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         /* Update the error code */
1038:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
1039:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         
1040:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         /* Return error status */
1041:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         status =  HAL_ERROR;
1042:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         break;
1043:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
1044:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1045:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   else
1046:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
1047:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Update the error code */
1048:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
1049:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
1050:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Return error status */
1051:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     status =  HAL_ERROR;
1052:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1053:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1054:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   return status;
1055:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
1056:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1057:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1058:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
ARM GAS  /tmp/ccf5d4Yb.s 			page 45


1059:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
1060:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @}
1061:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
1062:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1063:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group2 ADC Input and Output operation functions
1064:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****  *  @brief    ADC IO operation functions 
1065:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****  *
1066:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** @verbatim   
1067:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****  ===============================================================================
1068:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                       ##### IO operation functions #####
1069:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****  ===============================================================================
1070:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     [..]  This section provides functions allowing to:
1071:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       (+) Start conversion of regular group.
1072:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       (+) Stop conversion of regular group.
1073:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       (+) Poll for conversion complete on regular group.
1074:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       (+) Poll for conversion event.
1075:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       (+) Get result of regular channel conversion.
1076:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       (+) Start conversion of regular group and enable interruptions.
1077:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       (+) Stop conversion of regular group and disable interruptions.
1078:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       (+) Handle ADC interrupt request
1079:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       (+) Start conversion of regular group and enable DMA transfer.
1080:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       (+) Stop conversion of regular group and disable ADC DMA transfer.
1081:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** @endverbatim
1082:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @{
1083:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
1084:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1085:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
1086:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  Enables ADC, starts conversion of regular group.
1087:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         Interruptions enabled in this function: None.
1088:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hadc ADC handle
1089:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval HAL status
1090:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
1091:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
1092:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
1093:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1094:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1095:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Check the parameters */
1096:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1097:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1098:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Process locked */
1099:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   __HAL_LOCK(hadc);
1100:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1101:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Enable the ADC peripheral */
1102:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   tmp_hal_status = ADC_Enable(hadc);
1103:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1104:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Start conversion if ADC is effectively enabled */
1105:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
1106:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
1107:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Set ADC state                                                          */
1108:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* - Clear state bitfield related to regular group conversion results     */
1109:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* - Set state bitfield related to regular group operation                */
1110:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
1111:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
1112:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY);
1113:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
1114:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* If conversions on group regular are also triggering group injected,    */
1115:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* update ADC state.                                                      */
ARM GAS  /tmp/ccf5d4Yb.s 			page 46


1116:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
1117:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
1118:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
1119:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
1120:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
1121:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* State machine update: Check if an injected conversion is ongoing */
1122:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
1123:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
1124:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Reset ADC error code fields related to conversions on group regular */
1125:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
1126:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
1127:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     else
1128:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
1129:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Reset ADC all error code fields */
1130:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
1131:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
1132:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
1133:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Process unlocked */
1134:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Unlock before starting ADC conversions: in case of potential           */
1135:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
1136:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
1137:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
1138:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Clear regular group conversion flag and overrun flag */
1139:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
1140:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
1141:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
1142:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Enable conversion of regular group.                                    */
1143:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* If software start has been selected, conversion starts immediately.    */
1144:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* If external trigger has been selected, conversion will start at next   */
1145:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* trigger event.                                                         */
1146:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
1147:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
1148:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Start ADC conversion on regular group */
1149:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
1150:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
1151:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1152:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1153:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Return function status */
1154:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   return tmp_hal_status;
1155:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
1156:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1157:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
1158:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected channels in 
1159:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         case of auto_injection mode), disable ADC peripheral.
1160:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @note:  ADC peripheral disable is forcing stop of potential 
1161:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         conversion on injected group. If injected group is under use, it
1162:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
1163:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hadc ADC handle
1164:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval HAL status.
1165:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
1166:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
1167:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
1168:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1169:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1170:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Check the parameters */
1171:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1172:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
ARM GAS  /tmp/ccf5d4Yb.s 			page 47


1173:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Process locked */
1174:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   __HAL_LOCK(hadc);
1175:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1176:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
1177:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Disable ADC peripheral */
1178:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
1179:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1180:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Check if ADC is effectively disabled */
1181:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
1182:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
1183:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Set ADC state */
1184:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
1185:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
1186:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                       HAL_ADC_STATE_READY);
1187:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1188:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1189:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Process unlocked */
1190:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1191:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1192:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Return function status */
1193:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   return tmp_hal_status;
1194:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
1195:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1196:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
1197:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  Wait for regular group conversion to be completed.
1198:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @note   ADC conversion flags EOS (end of sequence) and EOC (end of
1199:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         conversion) are cleared by this function, with an exception:
1200:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         if low power feature "LowPowerAutoWait" is enabled, flags are 
1201:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         not cleared to not interfere with this feature until data register
1202:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         is read using function HAL_ADC_GetValue().
1203:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @note   This function cannot be used in a particular setup: ADC configured 
1204:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         in DMA mode and polling for end of each conversion (ADC init
1205:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         parameter "EOCSelection" set to ADC_EOC_SINGLE_CONV).
1206:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         In this case, DMA resets the flag EOC and polling cannot be
1207:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         performed on each conversion. Nevertheless, polling can still 
1208:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         be performed on the complete sequence (ADC init
1209:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         parameter "EOCSelection" set to ADC_EOC_SEQ_CONV).
1210:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hadc ADC handle
1211:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  Timeout Timeout value in millisecond.
1212:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval HAL status
1213:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
1214:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
1215:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
 414              		.loc 1 1215 0
 415              		.cfi_startproc
 416              		@ args = 0, pretend = 0, frame = 0
 417              		@ frame_needed = 0, uses_anonymous_args = 0
 418              	.LVL30:
1216:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   uint32_t tickstart = 0;
1217:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****  
1218:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Check the parameters */
1219:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1220:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1221:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Verification that ADC configuration is compliant with polling for      */
1222:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* each conversion:                                                       */
1223:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
1224:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* several ranks and polling for end of each conversion.                  */
ARM GAS  /tmp/ccf5d4Yb.s 			page 48


1225:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* For code simplicity sake, this particular case is generalized to       */
1226:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* ADC configured in DMA mode and and polling for end of each conversion. */
1227:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 419              		.loc 1 1227 0
 420 0000 0368     		ldr	r3, [r0]
 421 0002 9A68     		ldr	r2, [r3, #8]
 422 0004 12F4806F 		tst	r2, #1024
 423 0008 03D0     		beq	.L29
1228:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 424              		.loc 1 1228 0 discriminator 1
 425 000a 9B68     		ldr	r3, [r3, #8]
1227:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 426              		.loc 1 1227 0 discriminator 1
 427 000c 13F4807F 		tst	r3, #256
 428 0010 1CD1     		bne	.L44
 429              	.L29:
1215:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   uint32_t tickstart = 0;
 430              		.loc 1 1215 0
 431 0012 70B5     		push	{r4, r5, r6, lr}
 432              	.LCFI6:
 433              		.cfi_def_cfa_offset 16
 434              		.cfi_offset 4, -16
 435              		.cfi_offset 5, -12
 436              		.cfi_offset 6, -8
 437              		.cfi_offset 14, -4
 438 0014 0D46     		mov	r5, r1
 439 0016 0446     		mov	r4, r0
1229:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
1230:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Update ADC state machine to error */
1231:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1232:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
1233:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Process unlocked */
1234:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
1235:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
1236:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     return HAL_ERROR;
1237:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1238:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1239:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Get tick count */
1240:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   tickstart = HAL_GetTick();
 440              		.loc 1 1240 0
 441 0018 FFF7FEFF 		bl	HAL_GetTick
 442              	.LVL31:
 443 001c 0646     		mov	r6, r0
 444              	.LVL32:
 445              	.L32:
1241:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1242:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Wait until End of Conversion flag is raised */
1243:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 446              		.loc 1 1243 0
 447 001e 2368     		ldr	r3, [r4]
 448 0020 1A68     		ldr	r2, [r3]
 449 0022 12F0020F 		tst	r2, #2
 450 0026 1AD1     		bne	.L45
1244:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
1245:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Check if timeout is disabled (set to infinite wait) */
1246:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     if(Timeout != HAL_MAX_DELAY)
 451              		.loc 1 1246 0
ARM GAS  /tmp/ccf5d4Yb.s 			page 49


 452 0028 B5F1FF3F 		cmp	r5, #-1
 453 002c F7D0     		beq	.L32
1247:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
1248:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 454              		.loc 1 1248 0
 455 002e 25B1     		cbz	r5, .L33
 456              		.loc 1 1248 0 is_stmt 0 discriminator 1
 457 0030 FFF7FEFF 		bl	HAL_GetTick
 458              	.LVL33:
 459 0034 801B     		subs	r0, r0, r6
 460 0036 8542     		cmp	r5, r0
 461 0038 F1D2     		bcs	.L32
 462              	.L33:
1249:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       {
1250:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         /* Update ADC state machine to timeout */
1251:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 463              		.loc 1 1251 0 is_stmt 1
 464 003a E36C     		ldr	r3, [r4, #76]
 465 003c 43F00403 		orr	r3, r3, #4
 466 0040 E364     		str	r3, [r4, #76]
1252:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         
1253:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         /* Process unlocked */
1254:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
 467              		.loc 1 1254 0
 468 0042 0023     		movs	r3, #0
 469 0044 84F84830 		strb	r3, [r4, #72]
1255:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         
1256:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         return HAL_TIMEOUT;
 470              		.loc 1 1256 0
 471 0048 0320     		movs	r0, #3
 472 004a 70BD     		pop	{r4, r5, r6, pc}
 473              	.LVL34:
 474              	.L44:
 475              	.LCFI7:
 476              		.cfi_def_cfa_offset 0
 477              		.cfi_restore 4
 478              		.cfi_restore 5
 479              		.cfi_restore 6
 480              		.cfi_restore 14
1231:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 481              		.loc 1 1231 0
 482 004c C36C     		ldr	r3, [r0, #76]
 483 004e 43F02003 		orr	r3, r3, #32
 484 0052 C364     		str	r3, [r0, #76]
1234:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 485              		.loc 1 1234 0
 486 0054 0023     		movs	r3, #0
 487 0056 80F84830 		strb	r3, [r0, #72]
1236:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
 488              		.loc 1 1236 0
 489 005a 0120     		movs	r0, #1
 490              	.LVL35:
 491 005c 7047     		bx	lr
 492              	.LVL36:
 493              	.L45:
 494              	.LCFI8:
 495              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccf5d4Yb.s 			page 50


 496              		.cfi_offset 4, -16
 497              		.cfi_offset 5, -12
 498              		.cfi_offset 6, -8
 499              		.cfi_offset 14, -4
1257:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       }
1258:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
1259:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1260:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1261:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Clear end of conversion flag of regular group if low power feature     */
1262:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* "Auto Wait" is disabled, to not interfere with this feature until data */
1263:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* register is read using function HAL_ADC_GetValue().                    */
1264:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if (hadc->Init.LowPowerAutoWait == DISABLE)
 500              		.loc 1 1264 0
 501 005e A269     		ldr	r2, [r4, #24]
 502 0060 12B9     		cbnz	r2, .L35
1265:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
1266:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Clear regular group conversion flag */
1267:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 503              		.loc 1 1267 0
 504 0062 6FF01202 		mvn	r2, #18
 505 0066 1A60     		str	r2, [r3]
 506              	.L35:
1268:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1269:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1270:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Update ADC state machine */
1271:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 507              		.loc 1 1271 0
 508 0068 E36C     		ldr	r3, [r4, #76]
 509 006a 43F40073 		orr	r3, r3, #512
 510 006e E364     		str	r3, [r4, #76]
1272:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1273:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Determine whether any further conversion upcoming on group regular       */
1274:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* by external trigger, continuous mode or scan sequence on going.          */
1275:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Note: On STM32L1, there is no independent flag of end of sequence.       */
1276:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /*       The test of scan sequence on going is done either with scan        */
1277:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /*       sequence disabled or with end of conversion flag set to            */
1278:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /*       of end of sequence.                                                */
1279:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 511              		.loc 1 1279 0
 512 0070 2368     		ldr	r3, [r4]
 513 0072 9A68     		ldr	r2, [r3, #8]
 514 0074 12F0405F 		tst	r2, #805306368
 515 0078 18D1     		bne	.L37
1280:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 516              		.loc 1 1280 0 discriminator 1
 517 007a 94F82420 		ldrb	r2, [r4, #36]	@ zero_extendqisi2
1279:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 518              		.loc 1 1279 0 discriminator 1
 519 007e BAB9     		cbnz	r2, .L38
1281:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 520              		.loc 1 1281 0
 521 0080 1A6B     		ldr	r2, [r3, #48]
1280:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 522              		.loc 1 1280 0
 523 0082 12F0F87F 		tst	r2, #32505856
 524 0086 03D0     		beq	.L36
1282:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
ARM GAS  /tmp/ccf5d4Yb.s 			page 51


 525              		.loc 1 1282 0
 526 0088 9B68     		ldr	r3, [r3, #8]
1281:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 527              		.loc 1 1281 0
 528 008a 13F4806F 		tst	r3, #1024
 529 008e 11D1     		bne	.L39
 530              	.L36:
1283:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
1284:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Set ADC state */
1285:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 531              		.loc 1 1285 0
 532 0090 E36C     		ldr	r3, [r4, #76]
 533 0092 23F48073 		bic	r3, r3, #256
 534 0096 E364     		str	r3, [r4, #76]
1286:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
1287:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 535              		.loc 1 1287 0
 536 0098 E36C     		ldr	r3, [r4, #76]
 537 009a 13F4805F 		tst	r3, #4096
 538 009e 0BD1     		bne	.L40
1288:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     { 
1289:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 539              		.loc 1 1289 0
 540 00a0 E36C     		ldr	r3, [r4, #76]
 541 00a2 43F00103 		orr	r3, r3, #1
 542 00a6 E364     		str	r3, [r4, #76]
1290:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
1291:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1292:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1293:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Return ADC state */
1294:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   return HAL_OK;
 543              		.loc 1 1294 0
 544 00a8 0020     		movs	r0, #0
 545 00aa 70BD     		pop	{r4, r5, r6, pc}
 546              	.LVL37:
 547              	.L37:
 548 00ac 0020     		movs	r0, #0
 549 00ae 70BD     		pop	{r4, r5, r6, pc}
 550              	.LVL38:
 551              	.L38:
 552 00b0 0020     		movs	r0, #0
 553 00b2 70BD     		pop	{r4, r5, r6, pc}
 554              	.LVL39:
 555              	.L39:
 556 00b4 0020     		movs	r0, #0
 557 00b6 70BD     		pop	{r4, r5, r6, pc}
 558              	.LVL40:
 559              	.L40:
 560 00b8 0020     		movs	r0, #0
1295:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
 561              		.loc 1 1295 0
 562 00ba 70BD     		pop	{r4, r5, r6, pc}
 563              		.cfi_endproc
 564              	.LFE78:
 566              		.section	.text.HAL_ADC_PollForEvent,"ax",%progbits
 567              		.align	1
 568              		.global	HAL_ADC_PollForEvent
ARM GAS  /tmp/ccf5d4Yb.s 			page 52


 569              		.syntax unified
 570              		.thumb
 571              		.thumb_func
 572              		.fpu softvfp
 574              	HAL_ADC_PollForEvent:
 575              	.LFB79:
1296:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1297:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
1298:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  Poll for conversion event.
1299:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hadc ADC handle
1300:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  EventType the ADC event type.
1301:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *          This parameter can be one of the following values:
1302:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *            @arg ADC_AWD_EVENT: ADC Analog watchdog event.
1303:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *            @arg ADC_OVR_EVENT: ADC Overrun event.
1304:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  Timeout Timeout value in millisecond.
1305:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval HAL status
1306:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
1307:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForEvent(ADC_HandleTypeDef* hadc, uint32_t EventType, uint32_t Timeou
1308:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
 576              		.loc 1 1308 0
 577              		.cfi_startproc
 578              		@ args = 0, pretend = 0, frame = 0
 579              		@ frame_needed = 0, uses_anonymous_args = 0
 580              	.LVL41:
 581 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 582              	.LCFI9:
 583              		.cfi_def_cfa_offset 24
 584              		.cfi_offset 3, -24
 585              		.cfi_offset 4, -20
 586              		.cfi_offset 5, -16
 587              		.cfi_offset 6, -12
 588              		.cfi_offset 7, -8
 589              		.cfi_offset 14, -4
 590 0002 0446     		mov	r4, r0
 591 0004 0D46     		mov	r5, r1
 592 0006 1646     		mov	r6, r2
 593              	.LVL42:
1309:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   uint32_t tickstart = 0;
1310:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1311:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Check the parameters */
1312:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1313:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_EVENT_TYPE(EventType));
1314:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1315:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Get tick count */
1316:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   tickstart = HAL_GetTick();
 594              		.loc 1 1316 0
 595 0008 FFF7FEFF 		bl	HAL_GetTick
 596              	.LVL43:
 597 000c 0746     		mov	r7, r0
 598              	.LVL44:
 599              	.L48:
1317:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1318:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Check selected event flag */
1319:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   while(__HAL_ADC_GET_FLAG(hadc, EventType) == RESET)
 600              		.loc 1 1319 0
 601 000e 2368     		ldr	r3, [r4]
 602 0010 1A68     		ldr	r2, [r3]
ARM GAS  /tmp/ccf5d4Yb.s 			page 53


 603 0012 35EA0202 		bics	r2, r5, r2
 604 0016 11D0     		beq	.L56
1320:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
1321:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Check if timeout is disabled (set to infinite wait) */
1322:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     if(Timeout != HAL_MAX_DELAY)
 605              		.loc 1 1322 0
 606 0018 B6F1FF3F 		cmp	r6, #-1
 607 001c F7D0     		beq	.L48
1323:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
1324:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 608              		.loc 1 1324 0
 609 001e 26B1     		cbz	r6, .L49
 610              		.loc 1 1324 0 is_stmt 0 discriminator 1
 611 0020 FFF7FEFF 		bl	HAL_GetTick
 612              	.LVL45:
 613 0024 C01B     		subs	r0, r0, r7
 614 0026 8642     		cmp	r6, r0
 615 0028 F1D2     		bcs	.L48
 616              	.L49:
1325:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       {
1326:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         /* Update ADC state machine to timeout */
1327:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 617              		.loc 1 1327 0 is_stmt 1
 618 002a E36C     		ldr	r3, [r4, #76]
 619 002c 43F00403 		orr	r3, r3, #4
 620 0030 E364     		str	r3, [r4, #76]
1328:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         
1329:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         /* Process unlocked */
1330:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
 621              		.loc 1 1330 0
 622 0032 0023     		movs	r3, #0
 623 0034 84F84830 		strb	r3, [r4, #72]
1331:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         
1332:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         return HAL_TIMEOUT;
 624              		.loc 1 1332 0
 625 0038 0320     		movs	r0, #3
 626 003a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 627              	.LVL46:
 628              	.L56:
1333:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       }
1334:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
1335:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1336:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1337:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   switch(EventType)
 629              		.loc 1 1337 0
 630 003c 012D     		cmp	r5, #1
 631 003e 0CD0     		beq	.L57
1338:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
1339:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Analog watchdog (level out of window) event */
1340:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   case ADC_AWD_EVENT:
1341:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Set ADC state */
1342:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
1343:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
1344:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Clear ADC analog watchdog flag */
1345:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
1346:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     break;
1347:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
ARM GAS  /tmp/ccf5d4Yb.s 			page 54


1348:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Overrun event */
1349:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   default: /* Case ADC_OVR_EVENT */
1350:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Note: On STM32L1, ADC overrun can be set through other parameters      */
1351:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*       refer to description of parameter "EOCSelection" for more        */
1352:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*       details.                                                         */
1353:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1354:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Set ADC state */
1355:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 632              		.loc 1 1355 0
 633 0040 E26C     		ldr	r2, [r4, #76]
 634 0042 42F48062 		orr	r2, r2, #1024
 635 0046 E264     		str	r2, [r4, #76]
1356:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Set ADC error code to overrun */
1357:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 636              		.loc 1 1357 0
 637 0048 226D     		ldr	r2, [r4, #80]
 638 004a 42F00202 		orr	r2, r2, #2
 639 004e 2265     		str	r2, [r4, #80]
1358:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
1359:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Clear ADC overrun flag */
1360:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 640              		.loc 1 1360 0
 641 0050 6FF02002 		mvn	r2, #32
 642 0054 1A60     		str	r2, [r3]
1361:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     break;
1362:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1363:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1364:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Return ADC state */
1365:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   return HAL_OK;
 643              		.loc 1 1365 0
 644 0056 0020     		movs	r0, #0
1366:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
 645              		.loc 1 1366 0
 646 0058 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 647              	.LVL47:
 648              	.L57:
1342:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 649              		.loc 1 1342 0
 650 005a E26C     		ldr	r2, [r4, #76]
 651 005c 42F48032 		orr	r2, r2, #65536
 652 0060 E264     		str	r2, [r4, #76]
1345:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     break;
 653              		.loc 1 1345 0
 654 0062 6FF00102 		mvn	r2, #1
 655 0066 1A60     		str	r2, [r3]
1365:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
 656              		.loc 1 1365 0
 657 0068 0020     		movs	r0, #0
1346:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 658              		.loc 1 1346 0
 659 006a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 660              		.cfi_endproc
 661              	.LFE79:
 663              		.section	.text.HAL_ADC_GetValue,"ax",%progbits
 664              		.align	1
 665              		.global	HAL_ADC_GetValue
 666              		.syntax unified
ARM GAS  /tmp/ccf5d4Yb.s 			page 55


 667              		.thumb
 668              		.thumb_func
 669              		.fpu softvfp
 671              	HAL_ADC_GetValue:
 672              	.LFB84:
1367:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1368:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
1369:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  Enables ADC, starts conversion of regular group with interruption.
1370:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         Interruptions enabled in this function:
1371:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *          - EOC (end of conversion of regular group)
1372:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *          - overrun
1373:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1374:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hadc ADC handle
1375:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval HAL status
1376:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
1377:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
1378:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
1379:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1380:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1381:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Check the parameters */
1382:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1383:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1384:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Process locked */
1385:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   __HAL_LOCK(hadc);
1386:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1387:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Enable the ADC peripheral */
1388:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   tmp_hal_status = ADC_Enable(hadc);
1389:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1390:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Start conversion if ADC is effectively enabled */
1391:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
1392:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
1393:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Set ADC state                                                          */
1394:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* - Clear state bitfield related to regular group conversion results     */
1395:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* - Set state bitfield related to regular group operation                */
1396:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
1397:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
1398:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY);
1399:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
1400:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* If conversions on group regular are also triggering group injected,    */
1401:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* update ADC state.                                                      */
1402:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
1403:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
1404:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
1405:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
1406:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
1407:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* State machine update: Check if an injected conversion is ongoing */
1408:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
1409:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
1410:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Reset ADC error code fields related to conversions on group regular */
1411:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
1412:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
1413:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     else
1414:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
1415:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Reset ADC all error code fields */
1416:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
1417:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
1418:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
ARM GAS  /tmp/ccf5d4Yb.s 			page 56


1419:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Process unlocked */
1420:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Unlock before starting ADC conversions: in case of potential           */
1421:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
1422:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
1423:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
1424:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Clear regular group conversion flag and overrun flag */
1425:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
1426:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
1427:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
1428:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Enable end of conversion interrupt for regular group */
1429:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
1430:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
1431:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Enable conversion of regular group.                                    */
1432:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* If software start has been selected, conversion starts immediately.    */
1433:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* If external trigger has been selected, conversion will start at next   */
1434:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* trigger event.                                                         */
1435:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
1436:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
1437:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Start ADC conversion on regular group */
1438:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
1439:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
1440:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1441:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1442:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Return function status */
1443:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   return tmp_hal_status;
1444:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
1445:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1446:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
1447:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected group in 
1448:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         case of auto_injection mode), disable interrution of 
1449:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         end-of-conversion, disable ADC peripheral.
1450:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hadc ADC handle
1451:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval None
1452:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
1453:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
1454:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
1455:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1456:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1457:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Check the parameters */
1458:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1459:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1460:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Process locked */
1461:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   __HAL_LOCK(hadc);
1462:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1463:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
1464:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Disable ADC peripheral */
1465:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
1466:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1467:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Check if ADC is effectively disabled */
1468:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
1469:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
1470:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Disable ADC end of conversion interrupt for regular group */
1471:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
1472:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
1473:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Set ADC state */
1474:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
1475:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
ARM GAS  /tmp/ccf5d4Yb.s 			page 57


1476:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                       HAL_ADC_STATE_READY);
1477:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1478:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1479:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Process unlocked */
1480:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1481:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1482:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Return function status */
1483:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   return tmp_hal_status;
1484:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
1485:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1486:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
1487:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  Enables ADC, starts conversion of regular group and transfers result
1488:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         through DMA.
1489:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         Interruptions enabled in this function:
1490:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *          - DMA transfer complete
1491:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *          - DMA half transfer
1492:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *          - overrun
1493:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1494:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hadc ADC handle
1495:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  pData The destination Buffer address.
1496:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  Length The length of data to be transferred from ADC peripheral to memory.
1497:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval None
1498:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
1499:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
1500:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
1501:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1502:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1503:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Check the parameters */
1504:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1505:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1506:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Process locked */
1507:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   __HAL_LOCK(hadc);
1508:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1509:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Enable the ADC peripheral */
1510:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   tmp_hal_status = ADC_Enable(hadc);
1511:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1512:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Start conversion if ADC is effectively enabled */
1513:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
1514:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
1515:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Set ADC state                                                          */
1516:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* - Clear state bitfield related to regular group conversion results     */
1517:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* - Set state bitfield related to regular group operation                */
1518:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
1519:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
1520:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY);
1521:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
1522:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* If conversions on group regular are also triggering group injected,    */
1523:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* update ADC state.                                                      */
1524:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
1525:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
1526:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
1527:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
1528:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
1529:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* State machine update: Check if an injected conversion is ongoing */
1530:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
1531:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
1532:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Reset ADC error code fields related to conversions on group regular */
ARM GAS  /tmp/ccf5d4Yb.s 			page 58


1533:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
1534:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
1535:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     else
1536:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
1537:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Reset ADC all error code fields */
1538:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
1539:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
1540:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
1541:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Process unlocked */
1542:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Unlock before starting ADC conversions: in case of potential           */
1543:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
1544:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
1545:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1546:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Set the DMA transfer complete callback */
1547:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
1548:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1549:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Set the DMA half transfer complete callback */
1550:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
1551:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
1552:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Set the DMA error callback */
1553:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
1554:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1555:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
1556:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
1557:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* start (in case of SW start):                                           */
1558:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
1559:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Clear regular group conversion flag and overrun flag */
1560:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
1561:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
1562:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1563:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Enable ADC overrun interrupt */
1564:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
1565:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
1566:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Enable ADC DMA mode */
1567:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     hadc->Instance->CR2 |= ADC_CR2_DMA;
1568:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
1569:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Start the DMA channel */
1570:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
1571:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
1572:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Enable conversion of regular group.                                    */
1573:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* If software start has been selected, conversion starts immediately.    */
1574:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* If external trigger has been selected, conversion will start at next   */
1575:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* trigger event.                                                         */
1576:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Note: Alternate trigger for single conversion could be to force an     */
1577:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
1578:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
1579:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
1580:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Start ADC conversion on regular group */
1581:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
1582:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
1583:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1584:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1585:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Return function status */
1586:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   return tmp_hal_status;
1587:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
1588:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1589:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
ARM GAS  /tmp/ccf5d4Yb.s 			page 59


1590:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected group in 
1591:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         case of auto_injection mode), disable ADC DMA transfer, disable 
1592:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         ADC peripheral.
1593:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @note:  ADC peripheral disable is forcing stop of potential 
1594:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         conversion on injected group. If injected group is under use, it
1595:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
1596:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hadc ADC handle
1597:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval HAL status.
1598:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
1599:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
1600:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
1601:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1602:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1603:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Check the parameters */
1604:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1605:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      
1606:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Process locked */
1607:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   __HAL_LOCK(hadc);
1608:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1609:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
1610:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Disable ADC peripheral */
1611:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
1612:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1613:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Check if ADC is effectively disabled */
1614:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
1615:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
1616:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Disable ADC DMA mode */
1617:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     hadc->Instance->CR2 &= ~ADC_CR2_DMA;
1618:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
1619:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop while */
1620:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* DMA transfer is on going)                                              */
1621:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     HAL_DMA_Abort(hadc->DMA_Handle);
1622:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
1623:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Set ADC state */
1624:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
1625:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
1626:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                       HAL_ADC_STATE_READY);
1627:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
1628:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Disable ADC overrun interrupt */
1629:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
1630:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1631:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1632:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Process unlocked */
1633:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1634:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1635:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Return function status */
1636:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   return tmp_hal_status;
1637:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
1638:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1639:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
1640:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  Get ADC regular group conversion result.
1641:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @note   Reading register DR automatically clears ADC flag EOC
1642:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         (ADC group regular end of unitary conversion).
1643:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @note   This function does not clear ADC flag EOS 
1644:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         (ADC group regular end of sequence conversion).
1645:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         Occurrence of flag EOS rising:
1646:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *          - If sequencer is composed of 1 rank, flag EOS is equivalent
ARM GAS  /tmp/ccf5d4Yb.s 			page 60


1647:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *            to flag EOC.
1648:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *          - If sequencer is composed of several ranks, during the scan
1649:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *            sequence flag EOC only is raised, at the end of the scan sequence
1650:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *            both flags EOC and EOS are raised.
1651:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         To clear this flag, either use function: 
1652:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         in programming model IT: @ref HAL_ADC_IRQHandler(), in programming
1653:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         model polling: @ref HAL_ADC_PollForConversion() 
1654:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
1655:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hadc ADC handle
1656:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval ADC group regular conversion data
1657:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
1658:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
1659:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
 673              		.loc 1 1659 0
 674              		.cfi_startproc
 675              		@ args = 0, pretend = 0, frame = 0
 676              		@ frame_needed = 0, uses_anonymous_args = 0
 677              		@ link register save eliminated.
 678              	.LVL48:
1660:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Check the parameters */
1661:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1662:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1663:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Note: EOC flag is not cleared here by software because automatically     */
1664:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /*       cleared by hardware when reading register DR.                      */
1665:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1666:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Return ADC converted value */ 
1667:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   return hadc->Instance->DR;
 679              		.loc 1 1667 0
 680 0000 0368     		ldr	r3, [r0]
 681 0002 986D     		ldr	r0, [r3, #88]
 682              	.LVL49:
1668:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
 683              		.loc 1 1668 0
 684 0004 7047     		bx	lr
 685              		.cfi_endproc
 686              	.LFE84:
 688              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 689              		.align	1
 690              		.weak	HAL_ADC_ConvCpltCallback
 691              		.syntax unified
 692              		.thumb
 693              		.thumb_func
 694              		.fpu softvfp
 696              	HAL_ADC_ConvCpltCallback:
 697              	.LFB86:
1669:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1670:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
1671:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  Handles ADC interrupt request  
1672:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hadc ADC handle
1673:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval None
1674:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
1675:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
1676:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
1677:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Check the parameters */
1678:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1679:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
1680:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
ARM GAS  /tmp/ccf5d4Yb.s 			page 61


1681:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1682:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1683:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* ========== Check End of Conversion flag for regular group ========== */
1684:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
1685:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
1686:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
1687:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
1688:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Update state machine on conversion status if not in error state */
1689:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
1690:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       {
1691:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         /* Set ADC state */
1692:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
1693:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       }
1694:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1695:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Determine whether any further conversion upcoming on group regular   */
1696:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* by external trigger, continuous mode or scan sequence on going.      */
1697:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Note: On STM32L1, there is no independent flag of end of sequence.   */
1698:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /*       The test of scan sequence on going is done either with scan    */
1699:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /*       sequence disabled or with end of conversion flag set to        */
1700:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /*       of end of sequence.                                            */
1701:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
1702:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****          (hadc->Init.ContinuousConvMode == DISABLE)            &&
1703:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****          (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
1704:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
1705:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       {
1706:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         /* Disable ADC end of single conversion interrupt on group regular */
1707:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         /* Note: Overrun interrupt was enabled with EOC interrupt in          */
1708:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
1709:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         /* by overrun IRQ process below.                                      */
1710:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
1711:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         
1712:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         /* Set ADC state */
1713:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
1714:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         
1715:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
1716:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         {
1717:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_READY);
1718:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         }
1719:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       }
1720:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1721:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
1722:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       hadc->ConvCpltCallback(hadc);
1723:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** #else
1724:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       HAL_ADC_ConvCpltCallback(hadc);
1725:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1726:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
1727:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Clear regular group conversion flag */
1728:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
1729:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
1730:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1731:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1732:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* ========== Check End of Conversion flag for injected group ========== */
1733:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
1734:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
1735:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
1736:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
1737:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Update state machine on conversion status if not in error state */
ARM GAS  /tmp/ccf5d4Yb.s 			page 62


1738:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
1739:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       {
1740:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         /* Set ADC state */
1741:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
1742:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       }
1743:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1744:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Determine whether any further conversion upcoming on group injected  */
1745:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* by external trigger, scan sequence on going or by automatic injected */
1746:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* conversion from group regular (same conditions as group regular      */
1747:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* interruption disabling above).                                       */
1748:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
1749:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****          (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
1750:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
1751:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****          (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
1752:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
1753:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
1754:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       {
1755:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         /* Disable ADC end of single conversion interrupt on group injected */
1756:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
1757:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         
1758:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         /* Set ADC state */
1759:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
1760:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1761:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
1762:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         { 
1763:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_READY);
1764:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         }
1765:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       }
1766:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1767:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
1768:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       hadc->InjectedConvCpltCallback(hadc);
1769:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** #else
1770:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       HAL_ADCEx_InjectedConvCpltCallback(hadc);
1771:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1772:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
1773:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Clear injected group conversion flag */
1774:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
1775:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
1776:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1777:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****    
1778:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* ========== Check Analog watchdog flags ========== */
1779:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
1780:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
1781:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
1782:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
1783:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Set ADC state */
1784:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
1785:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
1786:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
1787:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       hadc->LevelOutOfWindowCallback(hadc);
1788:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** #else
1789:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       HAL_ADC_LevelOutOfWindowCallback(hadc);
1790:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1791:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
1792:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Clear the ADC analog watchdog flag */
1793:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
1794:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
ARM GAS  /tmp/ccf5d4Yb.s 			page 63


1795:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1796:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1797:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* ========== Check Overrun flag ========== */
1798:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
1799:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
1800:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR))
1801:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
1802:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Note: On STM32L1, ADC overrun can be set through other parameters    */
1803:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /*       refer to description of parameter "EOCSelection" for more      */
1804:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /*       details.                                                       */
1805:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
1806:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Set ADC error code to overrun */
1807:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
1808:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
1809:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Clear ADC overrun flag */
1810:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
1811:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
1812:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
1813:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       hadc->ErrorCallback(hadc);
1814:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** #else
1815:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       HAL_ADC_ErrorCallback(hadc);
1816:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1817:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
1818:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Clear the Overrun flag */
1819:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
1820:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
1821:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1822:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1823:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
1824:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1825:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
1826:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  Conversion complete callback in non blocking mode 
1827:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hadc ADC handle
1828:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval None
1829:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
1830:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** __weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
1831:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
 698              		.loc 1 1831 0
 699              		.cfi_startproc
 700              		@ args = 0, pretend = 0, frame = 0
 701              		@ frame_needed = 0, uses_anonymous_args = 0
 702              		@ link register save eliminated.
 703              	.LVL50:
 704 0000 7047     		bx	lr
 705              		.cfi_endproc
 706              	.LFE86:
 708              		.section	.text.ADC_DMAConvCplt,"ax",%progbits
 709              		.align	1
 710              		.syntax unified
 711              		.thumb
 712              		.thumb_func
 713              		.fpu softvfp
 715              	ADC_DMAConvCplt:
 716              	.LFB96:
1832:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1833:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   UNUSED(hadc);
1834:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
ARM GAS  /tmp/ccf5d4Yb.s 			page 64


1835:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1836:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****             function HAL_ADC_ConvCpltCallback must be implemented in the user file.
1837:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****    */
1838:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
1839:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1840:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
1841:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  Conversion DMA half-transfer callback in non blocking mode 
1842:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hadc ADC handle
1843:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval None
1844:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
1845:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** __weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
1846:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
1847:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1848:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   UNUSED(hadc);
1849:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1850:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1851:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****             function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
1852:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
1853:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
1854:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1855:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
1856:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  Analog watchdog callback in non blocking mode. 
1857:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hadc ADC handle
1858:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval None
1859:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
1860:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** __weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
1861:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
1862:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1863:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   UNUSED(hadc);
1864:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1865:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1866:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****             function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
1867:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
1868:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
1869:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1870:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
1871:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  ADC error callback in non blocking mode
1872:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         (ADC conversion with interruption or transfer by DMA)
1873:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @note   In case of error due to overrun when using ADC with DMA transfer 
1874:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         (HAL ADC handle paramater "ErrorCode" to state "HAL_ADC_ERROR_OVR"):
1875:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         - Reinitialize the DMA using function "HAL_ADC_Stop_DMA()".
1876:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         - If needed, restart a new ADC conversion using function
1877:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *           "HAL_ADC_Start_DMA()"
1878:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *           (this function is also clearing overrun flag)
1879:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hadc ADC handle
1880:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval None
1881:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
1882:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** __weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
1883:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
1884:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1885:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   UNUSED(hadc);
1886:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1887:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1888:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****             function HAL_ADC_ErrorCallback must be implemented in the user file.
1889:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
1890:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
1891:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
ARM GAS  /tmp/ccf5d4Yb.s 			page 65


1892:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1893:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
1894:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @}
1895:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
1896:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1897:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group3 Peripheral Control functions
1898:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****  *  @brief    Peripheral Control functions 
1899:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****  *
1900:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** @verbatim   
1901:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****  ===============================================================================
1902:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****              ##### Peripheral Control functions #####
1903:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****  ===============================================================================  
1904:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     [..]  This section provides functions allowing to:
1905:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       (+) Configure channels on regular group
1906:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       (+) Configure the analog watchdog
1907:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
1908:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** @endverbatim
1909:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @{
1910:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
1911:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
1912:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
1913:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  Configures the the selected channel to be linked to the regular
1914:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         group.
1915:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @note   In case of usage of internal measurement channels:
1916:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         Vbat/VrefInt/TempSensor.
1917:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         These internal paths can be be disabled using function 
1918:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         HAL_ADC_DeInit().
1919:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
1920:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         This function initializes channel into regular group, following  
1921:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         calls to this function can be used to reconfigure some parameters 
1922:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         of structure "ADC_ChannelConfTypeDef" on the fly, without reseting 
1923:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         the ADC.
1924:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
1925:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         For parameters constraints, see comments of structure 
1926:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         "ADC_ChannelConfTypeDef".
1927:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hadc ADC handle
1928:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  sConfig Structure of ADC channel for regular group.
1929:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval HAL status
1930:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
1931:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
1932:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
1933:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1934:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0;
1935:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1936:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Check the parameters */
1937:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1938:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_CHANNEL(sConfig->Channel));
1939:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
1940:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
1941:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1942:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Process locked */
1943:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   __HAL_LOCK(hadc);
1944:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1945:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****    
1946:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Regular sequence configuration */
1947:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* For Rank 1 to 6 */
1948:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if (sConfig->Rank < 7)
ARM GAS  /tmp/ccf5d4Yb.s 			page 66


1949:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
1950:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SQR5,
1951:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
1952:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
1953:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1954:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* For Rank 7 to 12 */
1955:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   else if (sConfig->Rank < 13)
1956:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
1957:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SQR4,
1958:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
1959:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
1960:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1961:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* For Rank 13 to 18 */
1962:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   else if (sConfig->Rank < 19)
1963:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
1964:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SQR3,
1965:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
1966:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
1967:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1968:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* For Rank 19 to 24 */
1969:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   else if (sConfig->Rank < 25)
1970:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
1971:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SQR2,
1972:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_SQR2_RK(ADC_SQR2_SQ19, sConfig->Rank),
1973:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
1974:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1975:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* For Rank 25 to 28 */
1976:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   else
1977:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
1978:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SQR1,
1979:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_SQR1_RK(ADC_SQR1_SQ25, sConfig->Rank),
1980:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
1981:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1982:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1983:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
1984:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Channel sampling time configuration */
1985:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* For channels 0 to 9 */
1986:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if (sConfig->Channel < ADC_CHANNEL_10)
1987:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
1988:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SMPR3,
1989:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
1990:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
1991:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1992:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* For channels 10 to 19 */
1993:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   else if (sConfig->Channel < ADC_CHANNEL_20)
1994:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
1995:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SMPR2,
1996:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
1997:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
1998:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
1999:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
2000:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* For channels 20 to 29 for devices Cat4, Cat.5 */
2001:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
2002:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
2003:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SMPR1,
2004:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_SMPR1(ADC_SMPR1_SMP20, sConfig->Channel),
2005:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
ARM GAS  /tmp/ccf5d4Yb.s 			page 67


2006:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
2007:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* For channels 30 to 31 for devices Cat4, Cat.5 */
2008:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   else
2009:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
2010:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
2011:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
2012:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
2013:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
2014:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* and VREFINT measurement path.                                            */
2015:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
2016:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
2017:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
2018:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
2019:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       {
2020:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
2021:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         
2022:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
2023:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         {
2024:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           /* Delay for temperature sensor stabilization time */
2025:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           /* Compute number of CPU cycles to wait for */
2026:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
2027:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           while(wait_loop_index != 0)
2028:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           {
2029:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****             wait_loop_index--;
2030:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           }
2031:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         }
2032:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
2033:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
2034:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
2035:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Process unlocked */
2036:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
2037:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
2038:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Return function status */
2039:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   return tmp_hal_status;
2040:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
2041:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
2042:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
2043:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  Configures the analog watchdog.
2044:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @note   Analog watchdog thresholds can be modified while ADC conversion
2045:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         is on going.
2046:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         In this case, some constraints must be taken into account:
2047:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         the programmed threshold values are effective from the next
2048:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         ADC EOC (end of unitary conversion).
2049:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         Considering that registers write delay may happen due to
2050:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         bus activity, this might cause an uncertainty on the
2051:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         effective timing of the new programmed threshold values.
2052:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hadc ADC handle
2053:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  AnalogWDGConfig Structure of ADC analog watchdog configuration
2054:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval HAL status
2055:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
2056:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* Analog
2057:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
2058:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Check the parameters */
2059:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2060:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
2061:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
2062:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(ADC_RESOLUTION_12B, AnalogWDGConfig->HighThreshold));
ARM GAS  /tmp/ccf5d4Yb.s 			page 68


2063:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(ADC_RESOLUTION_12B, AnalogWDGConfig->LowThreshold));
2064:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
2065:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
2066:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
2067:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REGINJEC)  )
2068:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
2069:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
2070:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
2071:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
2072:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Process locked */
2073:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   __HAL_LOCK(hadc);
2074:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
2075:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Analog watchdog configuration */
2076:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
2077:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Configure ADC Analog watchdog interrupt */
2078:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if(AnalogWDGConfig->ITMode == ENABLE)
2079:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
2080:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Enable the ADC Analog watchdog interrupt */
2081:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
2082:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
2083:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   else
2084:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
2085:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Disable the ADC Analog watchdog interrupt */
2086:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
2087:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
2088:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
2089:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Configuration of analog watchdog:                                        */
2090:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /*  - Set the analog watchdog enable mode: regular and/or injected groups,  */
2091:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /*    one or all channels.                                                  */
2092:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /*  - Set the Analog watchdog channel (is not used if watchdog              */
2093:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                             */
2094:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   hadc->Instance->CR1 &= ~( ADC_CR1_AWDSGL |
2095:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                             ADC_CR1_JAWDEN |
2096:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                             ADC_CR1_AWDEN  |
2097:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                             ADC_CR1_AWDCH   );
2098:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
2099:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   hadc->Instance->CR1 |= ( AnalogWDGConfig->WatchdogMode |
2100:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                            AnalogWDGConfig->Channel       );
2101:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
2102:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Set the high threshold */
2103:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
2104:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
2105:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Set the low threshold */
2106:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
2107:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
2108:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Process unlocked */
2109:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
2110:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
2111:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Return function status */
2112:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   return HAL_OK;
2113:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
2114:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
2115:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
2116:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
2117:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @}
2118:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
2119:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
ARM GAS  /tmp/ccf5d4Yb.s 			page 69


2120:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
2121:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group4 Peripheral State functions
2122:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****  *  @brief    Peripheral State functions
2123:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****  *
2124:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** @verbatim
2125:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****  ===============================================================================
2126:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****             ##### Peripheral State and Errors functions #####
2127:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****  ===============================================================================  
2128:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     [..]
2129:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     This subsection provides functions to get in run-time the status of the  
2130:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     peripheral.
2131:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       (+) Check the ADC state
2132:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       (+) Check the ADC error code
2133:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
2134:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** @endverbatim
2135:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @{
2136:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
2137:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
2138:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
2139:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  return the ADC state
2140:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hadc ADC handle
2141:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval HAL state
2142:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
2143:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
2144:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
2145:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Return ADC state */
2146:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   return hadc->State;
2147:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
2148:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
2149:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
2150:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  Return the ADC error code
2151:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hadc ADC handle
2152:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval ADC Error Code
2153:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
2154:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
2155:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
2156:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   return hadc->ErrorCode;
2157:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
2158:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
2159:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
2160:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @}
2161:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
2162:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
2163:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
2164:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @}
2165:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
2166:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
2167:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
2168:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @{
2169:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
2170:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
2171:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
2172:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  Enable the selected ADC.
2173:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC must be disabled
2174:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
2175:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @note   If low power mode AutoPowerOff is enabled, power-on/off phases are
2176:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         performed automatically by hardware.
ARM GAS  /tmp/ccf5d4Yb.s 			page 70


2177:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         In this mode, this function is useless and must not be called because 
2178:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         flag ADC_FLAG_RDY is not usable.
2179:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         Therefore, this function must be called under condition of
2180:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
2181:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hadc ADC handle
2182:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval HAL status.
2183:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
2184:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
2185:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
2186:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   uint32_t tickstart = 0;
2187:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0;
2188:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
2189:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
2190:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* enabling phase not yet completed: flag ADC ready not yet set).           */
2191:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
2192:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* causes: ADC clock not running, ...).                                     */
2193:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
2194:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
2195:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Enable the Peripheral */
2196:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     __HAL_ADC_ENABLE(hadc);
2197:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
2198:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Delay for ADC stabilization time */
2199:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Compute number of CPU cycles to wait for */
2200:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
2201:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     while(wait_loop_index != 0)
2202:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
2203:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       wait_loop_index--;
2204:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
2205:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
2206:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Get tick count */
2207:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     tickstart = HAL_GetTick();    
2208:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
2209:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Wait for ADC effectively enabled */
2210:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     while(ADC_IS_ENABLE(hadc) == RESET)
2211:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
2212:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
2213:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       {
2214:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         /* Update ADC state machine to error */
2215:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
2216:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
2217:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
2218:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2219:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         
2220:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         /* Process unlocked */
2221:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
2222:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
2223:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         return HAL_ERROR;
2224:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       }
2225:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
2226:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
2227:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****    
2228:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Return HAL status */
2229:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   return HAL_OK;
2230:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
2231:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
2232:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
2233:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  Stop ADC conversion and disable the selected ADC
ARM GAS  /tmp/ccf5d4Yb.s 			page 71


2234:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC conversions must be
2235:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   *         stopped to disable the ADC.
2236:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hadc ADC handle
2237:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval HAL status.
2238:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
2239:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
2240:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
2241:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   uint32_t tickstart = 0;
2242:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
2243:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Verification if ADC is not already disabled */
2244:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) != RESET)
2245:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
2246:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Disable the ADC peripheral */
2247:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     __HAL_ADC_DISABLE(hadc);
2248:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      
2249:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Get tick count */
2250:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     tickstart = HAL_GetTick();
2251:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
2252:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Wait for ADC effectively disabled */    
2253:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     while(ADC_IS_ENABLE(hadc) != RESET)
2254:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
2255:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
2256:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       {
2257:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         /* Update ADC state machine to error */
2258:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
2259:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
2260:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
2261:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2262:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         
2263:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         return HAL_ERROR;
2264:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       }
2265:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
2266:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
2267:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
2268:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Return HAL status */
2269:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   return HAL_OK;
2270:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
2271:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
2272:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
2273:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  DMA transfer complete callback. 
2274:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hdma pointer to DMA handle.
2275:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval None
2276:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
2277:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
2278:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
 717              		.loc 1 2278 0
 718              		.cfi_startproc
 719              		@ args = 0, pretend = 0, frame = 0
 720              		@ frame_needed = 0, uses_anonymous_args = 0
 721              	.LVL51:
 722              		.loc 1 2278 0
 723 0000 08B5     		push	{r3, lr}
 724              	.LCFI10:
 725              		.cfi_def_cfa_offset 8
 726              		.cfi_offset 3, -8
 727              		.cfi_offset 14, -4
2279:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
ARM GAS  /tmp/ccf5d4Yb.s 			page 72


2280:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 728              		.loc 1 2280 0
 729 0002 436A     		ldr	r3, [r0, #36]
 730              	.LVL52:
2281:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
2282:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Update state machine on conversion status if not in error state */
2283:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 731              		.loc 1 2283 0
 732 0004 DA6C     		ldr	r2, [r3, #76]
 733 0006 12F0500F 		tst	r2, #80
 734 000a 27D1     		bne	.L61
2284:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
2285:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Update ADC state machine */
2286:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 735              		.loc 1 2286 0
 736 000c DA6C     		ldr	r2, [r3, #76]
 737 000e 42F40072 		orr	r2, r2, #512
 738 0012 DA64     		str	r2, [r3, #76]
2287:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
2288:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular   */
2289:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going.      */
2290:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Note: On STM32L1, there is no independent flag of end of sequence.   */
2291:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*       The test of scan sequence on going is done either with scan    */
2292:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*       sequence disabled or with end of conversion flag set to        */
2293:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /*       of end of sequence.                                            */
2294:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 739              		.loc 1 2294 0
 740 0014 1A68     		ldr	r2, [r3]
 741 0016 9168     		ldr	r1, [r2, #8]
 742 0018 11F0405F 		tst	r1, #805306368
 743 001c 1AD1     		bne	.L62
2295:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 744              		.loc 1 2295 0 discriminator 1
 745 001e 93F82410 		ldrb	r1, [r3, #36]	@ zero_extendqisi2
2294:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 746              		.loc 1 2294 0 discriminator 1
 747 0022 B9B9     		cbnz	r1, .L62
2296:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 748              		.loc 1 2296 0
 749 0024 116B     		ldr	r1, [r2, #48]
2295:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 750              		.loc 1 2295 0
 751 0026 11F0F87F 		tst	r1, #32505856
 752 002a 03D0     		beq	.L63
2297:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 753              		.loc 1 2297 0
 754 002c 9168     		ldr	r1, [r2, #8]
2296:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 755              		.loc 1 2296 0
 756 002e 11F4806F 		tst	r1, #1024
 757 0032 0FD1     		bne	.L62
 758              	.L63:
2298:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
2299:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Disable ADC end of single conversion interrupt on group regular */
2300:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Note: Overrun interrupt was enabled with EOC interrupt in          */
2301:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
2302:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* by overrun IRQ process below.                                      */
ARM GAS  /tmp/ccf5d4Yb.s 			page 73


2303:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 759              		.loc 1 2303 0
 760 0034 5168     		ldr	r1, [r2, #4]
 761 0036 21F02001 		bic	r1, r1, #32
 762 003a 5160     		str	r1, [r2, #4]
2304:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
2305:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       /* Set ADC state */
2306:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 763              		.loc 1 2306 0
 764 003c DA6C     		ldr	r2, [r3, #76]
 765 003e 22F48072 		bic	r2, r2, #256
 766 0042 DA64     		str	r2, [r3, #76]
2307:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
2308:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 767              		.loc 1 2308 0
 768 0044 DA6C     		ldr	r2, [r3, #76]
 769 0046 12F4805F 		tst	r2, #4096
 770 004a 03D1     		bne	.L62
2309:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       {
2310:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 771              		.loc 1 2310 0
 772 004c DA6C     		ldr	r2, [r3, #76]
 773 004e 42F00102 		orr	r2, r2, #1
 774 0052 DA64     		str	r2, [r3, #76]
 775              	.L62:
2311:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       }
2312:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
2313:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
2314:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Conversion complete callback */
2315:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2316:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     hadc->ConvCpltCallback(hadc);
2317:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** #else
2318:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc);
 776              		.loc 1 2318 0
 777 0054 1846     		mov	r0, r3
 778              	.LVL53:
 779 0056 FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
 780              	.LVL54:
 781 005a 08BD     		pop	{r3, pc}
 782              	.LVL55:
 783              	.L61:
2319:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2320:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
2321:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   else
2322:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
2323:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Call DMA error callback */
2324:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     hadc->DMA_Handle->XferErrorCallback(hdma);
 784              		.loc 1 2324 0
 785 005c 5B6C     		ldr	r3, [r3, #68]
 786              	.LVL56:
 787 005e 1B6B     		ldr	r3, [r3, #48]
 788 0060 9847     		blx	r3
 789              	.LVL57:
 790 0062 08BD     		pop	{r3, pc}
 791              		.cfi_endproc
 792              	.LFE96:
 794              		.section	.text.HAL_ADC_ConvHalfCpltCallback,"ax",%progbits
ARM GAS  /tmp/ccf5d4Yb.s 			page 74


 795              		.align	1
 796              		.weak	HAL_ADC_ConvHalfCpltCallback
 797              		.syntax unified
 798              		.thumb
 799              		.thumb_func
 800              		.fpu softvfp
 802              	HAL_ADC_ConvHalfCpltCallback:
 803              	.LFB87:
1846:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 804              		.loc 1 1846 0
 805              		.cfi_startproc
 806              		@ args = 0, pretend = 0, frame = 0
 807              		@ frame_needed = 0, uses_anonymous_args = 0
 808              		@ link register save eliminated.
 809              	.LVL58:
 810 0000 7047     		bx	lr
 811              		.cfi_endproc
 812              	.LFE87:
 814              		.section	.text.ADC_DMAHalfConvCplt,"ax",%progbits
 815              		.align	1
 816              		.syntax unified
 817              		.thumb
 818              		.thumb_func
 819              		.fpu softvfp
 821              	ADC_DMAHalfConvCplt:
 822              	.LFB97:
2325:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
2326:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
2327:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
2328:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
2329:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  DMA half transfer complete callback. 
2330:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hdma pointer to DMA handle.
2331:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval None
2332:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
2333:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
2334:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
 823              		.loc 1 2334 0
 824              		.cfi_startproc
 825              		@ args = 0, pretend = 0, frame = 0
 826              		@ frame_needed = 0, uses_anonymous_args = 0
 827              	.LVL59:
 828              		.loc 1 2334 0
 829 0000 08B5     		push	{r3, lr}
 830              	.LCFI11:
 831              		.cfi_def_cfa_offset 8
 832              		.cfi_offset 3, -8
 833              		.cfi_offset 14, -4
 834              	.LVL60:
2335:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2336:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
2337:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
2338:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Half conversion callback */
2339:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2340:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     hadc->ConvHalfCpltCallback(hadc);
2341:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** #else
2342:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_ADC_ConvHalfCpltCallback(hadc);
 835              		.loc 1 2342 0
ARM GAS  /tmp/ccf5d4Yb.s 			page 75


 836 0002 406A     		ldr	r0, [r0, #36]
 837              	.LVL61:
 838 0004 FFF7FEFF 		bl	HAL_ADC_ConvHalfCpltCallback
 839              	.LVL62:
 840 0008 08BD     		pop	{r3, pc}
 841              		.cfi_endproc
 842              	.LFE97:
 844              		.section	.text.HAL_ADC_LevelOutOfWindowCallback,"ax",%progbits
 845              		.align	1
 846              		.weak	HAL_ADC_LevelOutOfWindowCallback
 847              		.syntax unified
 848              		.thumb
 849              		.thumb_func
 850              		.fpu softvfp
 852              	HAL_ADC_LevelOutOfWindowCallback:
 853              	.LFB88:
1861:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 854              		.loc 1 1861 0
 855              		.cfi_startproc
 856              		@ args = 0, pretend = 0, frame = 0
 857              		@ frame_needed = 0, uses_anonymous_args = 0
 858              		@ link register save eliminated.
 859              	.LVL63:
 860 0000 7047     		bx	lr
 861              		.cfi_endproc
 862              	.LFE88:
 864              		.section	.text.HAL_ADC_ErrorCallback,"ax",%progbits
 865              		.align	1
 866              		.weak	HAL_ADC_ErrorCallback
 867              		.syntax unified
 868              		.thumb
 869              		.thumb_func
 870              		.fpu softvfp
 872              	HAL_ADC_ErrorCallback:
 873              	.LFB89:
1883:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 874              		.loc 1 1883 0
 875              		.cfi_startproc
 876              		@ args = 0, pretend = 0, frame = 0
 877              		@ frame_needed = 0, uses_anonymous_args = 0
 878              		@ link register save eliminated.
 879              	.LVL64:
 880 0000 7047     		bx	lr
 881              		.cfi_endproc
 882              	.LFE89:
 884              		.section	.text.ADC_DMAError,"ax",%progbits
 885              		.align	1
 886              		.syntax unified
 887              		.thumb
 888              		.thumb_func
 889              		.fpu softvfp
 891              	ADC_DMAError:
 892              	.LFB98:
2343:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2344:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
2345:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
2346:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** /**
ARM GAS  /tmp/ccf5d4Yb.s 			page 76


2347:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @brief  DMA error callback 
2348:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @param  hdma pointer to DMA handle.
2349:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   * @retval None
2350:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   */
2351:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
2352:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** {
 893              		.loc 1 2352 0
 894              		.cfi_startproc
 895              		@ args = 0, pretend = 0, frame = 0
 896              		@ frame_needed = 0, uses_anonymous_args = 0
 897              	.LVL65:
 898              		.loc 1 2352 0
 899 0000 08B5     		push	{r3, lr}
 900              	.LCFI12:
 901              		.cfi_def_cfa_offset 8
 902              		.cfi_offset 3, -8
 903              		.cfi_offset 14, -4
2353:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2354:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 904              		.loc 1 2354 0
 905 0002 406A     		ldr	r0, [r0, #36]
 906              	.LVL66:
2355:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
2356:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Set ADC state */
2357:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 907              		.loc 1 2357 0
 908 0004 C36C     		ldr	r3, [r0, #76]
 909 0006 43F04003 		orr	r3, r3, #64
 910 000a C364     		str	r3, [r0, #76]
2358:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
2359:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Set ADC error code to DMA error */
2360:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 911              		.loc 1 2360 0
 912 000c 036D     		ldr	r3, [r0, #80]
 913 000e 43F00403 		orr	r3, r3, #4
 914 0012 0365     		str	r3, [r0, #80]
2361:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
2362:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Error callback */
2363:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2364:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   hadc->ErrorCallback(hadc);
2365:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** #else
2366:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_ADC_ErrorCallback(hadc);
 915              		.loc 1 2366 0
 916 0014 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 917              	.LVL67:
 918 0018 08BD     		pop	{r3, pc}
 919              		.cfi_endproc
 920              	.LFE98:
 922              		.section	.text.HAL_ADC_IRQHandler,"ax",%progbits
 923              		.align	1
 924              		.global	HAL_ADC_IRQHandler
 925              		.syntax unified
 926              		.thumb
 927              		.thumb_func
 928              		.fpu softvfp
 930              	HAL_ADC_IRQHandler:
 931              	.LFB85:
ARM GAS  /tmp/ccf5d4Yb.s 			page 77


1676:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Check the parameters */
 932              		.loc 1 1676 0
 933              		.cfi_startproc
 934              		@ args = 0, pretend = 0, frame = 0
 935              		@ frame_needed = 0, uses_anonymous_args = 0
 936              	.LVL68:
 937 0000 38B5     		push	{r3, r4, r5, lr}
 938              	.LCFI13:
 939              		.cfi_def_cfa_offset 16
 940              		.cfi_offset 3, -16
 941              		.cfi_offset 4, -12
 942              		.cfi_offset 5, -8
 943              		.cfi_offset 14, -4
 944 0002 0446     		mov	r4, r0
1684:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 945              		.loc 1 1684 0
 946 0004 0368     		ldr	r3, [r0]
 947 0006 5A68     		ldr	r2, [r3, #4]
 948 0008 12F0200F 		tst	r2, #32
 949 000c 31D0     		beq	.L74
1686:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 950              		.loc 1 1686 0
 951 000e 1A68     		ldr	r2, [r3]
 952 0010 12F0020F 		tst	r2, #2
 953 0014 2DD0     		beq	.L74
1689:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       {
 954              		.loc 1 1689 0
 955 0016 C26C     		ldr	r2, [r0, #76]
 956 0018 12F0100F 		tst	r2, #16
 957 001c 03D1     		bne	.L75
1692:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       }
 958              		.loc 1 1692 0
 959 001e C26C     		ldr	r2, [r0, #76]
 960 0020 42F40072 		orr	r2, r2, #512
 961 0024 C264     		str	r2, [r0, #76]
 962              	.L75:
1701:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****          (hadc->Init.ContinuousConvMode == DISABLE)            &&
 963              		.loc 1 1701 0
 964 0026 9A68     		ldr	r2, [r3, #8]
 965 0028 12F0405F 		tst	r2, #805306368
 966 002c 1AD1     		bne	.L76
1702:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****          (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 967              		.loc 1 1702 0 discriminator 1
 968 002e 94F82420 		ldrb	r2, [r4, #36]	@ zero_extendqisi2
1701:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****          (hadc->Init.ContinuousConvMode == DISABLE)            &&
 969              		.loc 1 1701 0 discriminator 1
 970 0032 BAB9     		cbnz	r2, .L76
1703:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 971              		.loc 1 1703 0
 972 0034 1A6B     		ldr	r2, [r3, #48]
1702:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****          (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 973              		.loc 1 1702 0
 974 0036 12F0F87F 		tst	r2, #32505856
 975 003a 03D0     		beq	.L77
1704:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       {
 976              		.loc 1 1704 0
 977 003c 9A68     		ldr	r2, [r3, #8]
ARM GAS  /tmp/ccf5d4Yb.s 			page 78


1703:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 978              		.loc 1 1703 0
 979 003e 12F4806F 		tst	r2, #1024
 980 0042 0FD1     		bne	.L76
 981              	.L77:
1710:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         
 982              		.loc 1 1710 0
 983 0044 5A68     		ldr	r2, [r3, #4]
 984 0046 22F02002 		bic	r2, r2, #32
 985 004a 5A60     		str	r2, [r3, #4]
1713:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         
 986              		.loc 1 1713 0
 987 004c E36C     		ldr	r3, [r4, #76]
 988 004e 23F48073 		bic	r3, r3, #256
 989 0052 E364     		str	r3, [r4, #76]
1715:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         {
 990              		.loc 1 1715 0
 991 0054 E36C     		ldr	r3, [r4, #76]
 992 0056 13F4805F 		tst	r3, #4096
 993 005a 03D1     		bne	.L76
1717:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         }
 994              		.loc 1 1717 0
 995 005c E36C     		ldr	r3, [r4, #76]
 996 005e 43F00103 		orr	r3, r3, #1
 997 0062 E364     		str	r3, [r4, #76]
 998              	.L76:
1724:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 999              		.loc 1 1724 0
 1000 0064 2046     		mov	r0, r4
 1001              	.LVL69:
 1002 0066 FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
 1003              	.LVL70:
1728:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 1004              		.loc 1 1728 0
 1005 006a 2368     		ldr	r3, [r4]
 1006 006c 6FF01202 		mvn	r2, #18
 1007 0070 1A60     		str	r2, [r3]
 1008              	.L74:
1733:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 1009              		.loc 1 1733 0
 1010 0072 2368     		ldr	r3, [r4]
 1011 0074 5A68     		ldr	r2, [r3, #4]
 1012 0076 12F0800F 		tst	r2, #128
 1013 007a 39D0     		beq	.L78
1735:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 1014              		.loc 1 1735 0
 1015 007c 1A68     		ldr	r2, [r3]
 1016 007e 12F0040F 		tst	r2, #4
 1017 0082 35D0     		beq	.L78
1738:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       {
 1018              		.loc 1 1738 0
 1019 0084 E26C     		ldr	r2, [r4, #76]
 1020 0086 12F0100F 		tst	r2, #16
 1021 008a 03D1     		bne	.L79
1741:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       }
 1022              		.loc 1 1741 0
 1023 008c E26C     		ldr	r2, [r4, #76]
ARM GAS  /tmp/ccf5d4Yb.s 			page 79


 1024 008e 42F40052 		orr	r2, r2, #8192
 1025 0092 E264     		str	r2, [r4, #76]
 1026              	.L79:
1748:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****          (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 1027              		.loc 1 1748 0
 1028 0094 9A68     		ldr	r2, [r3, #8]
 1029 0096 12F4401F 		tst	r2, #3145728
 1030 009a 22D1     		bne	.L80
1749:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 1031              		.loc 1 1749 0 discriminator 1
 1032 009c 5A6C     		ldr	r2, [r3, #68]
1748:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****          (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 1033              		.loc 1 1748 0 discriminator 1
 1034 009e 12F4401F 		tst	r2, #3145728
 1035 00a2 03D0     		beq	.L81
1750:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****          (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 1036              		.loc 1 1750 0
 1037 00a4 9A68     		ldr	r2, [r3, #8]
1749:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 1038              		.loc 1 1749 0
 1039 00a6 12F4806F 		tst	r2, #1024
 1040 00aa 1AD1     		bne	.L80
 1041              	.L81:
1751:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 1042              		.loc 1 1751 0
 1043 00ac 5A68     		ldr	r2, [r3, #4]
1750:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****          (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 1044              		.loc 1 1750 0
 1045 00ae 12F4806F 		tst	r2, #1024
 1046 00b2 16D1     		bne	.L80
1752:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 1047              		.loc 1 1752 0
 1048 00b4 9A68     		ldr	r2, [r3, #8]
1751:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 1049              		.loc 1 1751 0
 1050 00b6 12F0405F 		tst	r2, #805306368
 1051 00ba 12D1     		bne	.L80
1753:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       {
 1052              		.loc 1 1753 0
 1053 00bc 94F82420 		ldrb	r2, [r4, #36]	@ zero_extendqisi2
1752:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 1054              		.loc 1 1752 0
 1055 00c0 7AB9     		cbnz	r2, .L80
1756:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         
 1056              		.loc 1 1756 0
 1057 00c2 5A68     		ldr	r2, [r3, #4]
 1058 00c4 22F08002 		bic	r2, r2, #128
 1059 00c8 5A60     		str	r2, [r3, #4]
1759:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 1060              		.loc 1 1759 0
 1061 00ca E36C     		ldr	r3, [r4, #76]
 1062 00cc 23F48053 		bic	r3, r3, #4096
 1063 00d0 E364     		str	r3, [r4, #76]
1761:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         { 
 1064              		.loc 1 1761 0
 1065 00d2 E36C     		ldr	r3, [r4, #76]
 1066 00d4 13F4807F 		tst	r3, #256
ARM GAS  /tmp/ccf5d4Yb.s 			page 80


 1067 00d8 03D1     		bne	.L80
1763:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         }
 1068              		.loc 1 1763 0
 1069 00da E36C     		ldr	r3, [r4, #76]
 1070 00dc 43F00103 		orr	r3, r3, #1
 1071 00e0 E364     		str	r3, [r4, #76]
 1072              	.L80:
1770:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1073              		.loc 1 1770 0
 1074 00e2 2046     		mov	r0, r4
 1075 00e4 FFF7FEFF 		bl	HAL_ADCEx_InjectedConvCpltCallback
 1076              	.LVL71:
1774:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 1077              		.loc 1 1774 0
 1078 00e8 2368     		ldr	r3, [r4]
 1079 00ea 6FF00C02 		mvn	r2, #12
 1080 00ee 1A60     		str	r2, [r3]
 1081              	.L78:
1779:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 1082              		.loc 1 1779 0
 1083 00f0 2368     		ldr	r3, [r4]
 1084 00f2 5A68     		ldr	r2, [r3, #4]
 1085 00f4 12F0400F 		tst	r2, #64
 1086 00f8 03D0     		beq	.L82
1781:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 1087              		.loc 1 1781 0
 1088 00fa 1B68     		ldr	r3, [r3]
 1089 00fc 13F0010F 		tst	r3, #1
 1090 0100 09D1     		bne	.L85
 1091              	.L82:
1798:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 1092              		.loc 1 1798 0
 1093 0102 2368     		ldr	r3, [r4]
 1094 0104 5A68     		ldr	r2, [r3, #4]
 1095 0106 12F0806F 		tst	r2, #67108864
 1096 010a 03D0     		beq	.L73
1800:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 1097              		.loc 1 1800 0
 1098 010c 1A68     		ldr	r2, [r3]
 1099 010e 12F0200F 		tst	r2, #32
 1100 0112 0CD1     		bne	.L86
 1101              	.L73:
 1102 0114 38BD     		pop	{r3, r4, r5, pc}
 1103              	.LVL72:
 1104              	.L85:
1784:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 1105              		.loc 1 1784 0
 1106 0116 E36C     		ldr	r3, [r4, #76]
 1107 0118 43F48033 		orr	r3, r3, #65536
 1108 011c E364     		str	r3, [r4, #76]
1789:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1109              		.loc 1 1789 0
 1110 011e 2046     		mov	r0, r4
 1111 0120 FFF7FEFF 		bl	HAL_ADC_LevelOutOfWindowCallback
 1112              	.LVL73:
1793:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 1113              		.loc 1 1793 0
ARM GAS  /tmp/ccf5d4Yb.s 			page 81


 1114 0124 2368     		ldr	r3, [r4]
 1115 0126 6FF00102 		mvn	r2, #1
 1116 012a 1A60     		str	r2, [r3]
 1117 012c E9E7     		b	.L82
 1118              	.L86:
1807:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 1119              		.loc 1 1807 0
 1120 012e 226D     		ldr	r2, [r4, #80]
 1121 0130 42F00202 		orr	r2, r2, #2
 1122 0134 2265     		str	r2, [r4, #80]
1810:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 1123              		.loc 1 1810 0
 1124 0136 6FF02005 		mvn	r5, #32
 1125 013a 1D60     		str	r5, [r3]
1815:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1126              		.loc 1 1815 0
 1127 013c 2046     		mov	r0, r4
 1128 013e FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 1129              	.LVL74:
1819:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 1130              		.loc 1 1819 0
 1131 0142 2368     		ldr	r3, [r4]
 1132 0144 1D60     		str	r5, [r3]
1823:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 1133              		.loc 1 1823 0
 1134 0146 E5E7     		b	.L73
 1135              		.cfi_endproc
 1136              	.LFE85:
 1138              		.section	.text.HAL_ADC_ConfigChannel,"ax",%progbits
 1139              		.align	1
 1140              		.global	HAL_ADC_ConfigChannel
 1141              		.syntax unified
 1142              		.thumb
 1143              		.thumb_func
 1144              		.fpu softvfp
 1146              	HAL_ADC_ConfigChannel:
 1147              	.LFB90:
1932:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1148              		.loc 1 1932 0
 1149              		.cfi_startproc
 1150              		@ args = 0, pretend = 0, frame = 8
 1151              		@ frame_needed = 0, uses_anonymous_args = 0
 1152              		@ link register save eliminated.
 1153              	.LVL75:
 1154 0000 30B4     		push	{r4, r5}
 1155              	.LCFI14:
 1156              		.cfi_def_cfa_offset 8
 1157              		.cfi_offset 4, -8
 1158              		.cfi_offset 5, -4
 1159 0002 82B0     		sub	sp, sp, #8
 1160              	.LCFI15:
 1161              		.cfi_def_cfa_offset 16
 1162              	.LVL76:
1934:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 1163              		.loc 1 1934 0
 1164 0004 0023     		movs	r3, #0
 1165 0006 0193     		str	r3, [sp, #4]
ARM GAS  /tmp/ccf5d4Yb.s 			page 82


1943:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 1166              		.loc 1 1943 0
 1167 0008 90F84830 		ldrb	r3, [r0, #72]	@ zero_extendqisi2
 1168 000c 012B     		cmp	r3, #1
 1169 000e 00F0B980 		beq	.L101
1943:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 1170              		.loc 1 1943 0 is_stmt 0 discriminator 2
 1171 0012 0123     		movs	r3, #1
 1172 0014 80F84830 		strb	r3, [r0, #72]
1948:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 1173              		.loc 1 1948 0 is_stmt 1 discriminator 2
 1174 0018 4B68     		ldr	r3, [r1, #4]
 1175 001a 062B     		cmp	r3, #6
 1176 001c 28D8     		bhi	.L89
1950:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
 1177              		.loc 1 1950 0
 1178 001e 0568     		ldr	r5, [r0]
 1179 0020 2A6C     		ldr	r2, [r5, #64]
 1180 0022 03EB8303 		add	r3, r3, r3, lsl #2
 1181 0026 053B     		subs	r3, r3, #5
 1182 0028 1F24     		movs	r4, #31
 1183 002a 9C40     		lsls	r4, r4, r3
 1184 002c 22EA0402 		bic	r2, r2, r4
 1185 0030 0C68     		ldr	r4, [r1]
 1186 0032 04FA03F3 		lsl	r3, r4, r3
 1187 0036 1343     		orrs	r3, r3, r2
 1188 0038 2B64     		str	r3, [r5, #64]
 1189              	.L90:
1986:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 1190              		.loc 1 1986 0
 1191 003a 0B68     		ldr	r3, [r1]
 1192 003c 092B     		cmp	r3, #9
 1193 003e 59D8     		bhi	.L94
1988:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
 1194              		.loc 1 1988 0
 1195 0040 0568     		ldr	r5, [r0]
 1196 0042 6A69     		ldr	r2, [r5, #20]
 1197 0044 03EB4303 		add	r3, r3, r3, lsl #1
 1198 0048 0724     		movs	r4, #7
 1199 004a 9C40     		lsls	r4, r4, r3
 1200 004c 22EA0402 		bic	r2, r2, r4
 1201 0050 8C68     		ldr	r4, [r1, #8]
 1202 0052 04FA03F3 		lsl	r3, r4, r3
 1203 0056 1343     		orrs	r3, r3, r2
 1204 0058 6B61     		str	r3, [r5, #20]
 1205              	.L95:
2015:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 1206              		.loc 1 2015 0
 1207 005a 0B68     		ldr	r3, [r1]
 1208 005c 103B     		subs	r3, r3, #16
 1209 005e 012B     		cmp	r3, #1
 1210 0060 6CD9     		bls	.L103
 1211              	.L98:
2036:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 1212              		.loc 1 2036 0
 1213 0062 0023     		movs	r3, #0
 1214 0064 80F84830 		strb	r3, [r0, #72]
ARM GAS  /tmp/ccf5d4Yb.s 			page 83


2039:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
 1215              		.loc 1 2039 0
 1216 0068 1846     		mov	r0, r3
 1217              	.LVL77:
 1218              	.L88:
2040:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 1219              		.loc 1 2040 0
 1220 006a 02B0     		add	sp, sp, #8
 1221              	.LCFI16:
 1222              		.cfi_remember_state
 1223              		.cfi_def_cfa_offset 8
 1224              		@ sp needed
 1225 006c 30BC     		pop	{r4, r5}
 1226              	.LCFI17:
 1227              		.cfi_restore 5
 1228              		.cfi_restore 4
 1229              		.cfi_def_cfa_offset 0
 1230 006e 7047     		bx	lr
 1231              	.LVL78:
 1232              	.L89:
 1233              	.LCFI18:
 1234              		.cfi_restore_state
1955:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 1235              		.loc 1 1955 0
 1236 0070 0C2B     		cmp	r3, #12
 1237 0072 0ED8     		bhi	.L91
1957:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
 1238              		.loc 1 1957 0
 1239 0074 0568     		ldr	r5, [r0]
 1240 0076 EA6B     		ldr	r2, [r5, #60]
 1241 0078 03EB8303 		add	r3, r3, r3, lsl #2
 1242 007c 233B     		subs	r3, r3, #35
 1243 007e 1F24     		movs	r4, #31
 1244 0080 9C40     		lsls	r4, r4, r3
 1245 0082 22EA0402 		bic	r2, r2, r4
 1246 0086 0C68     		ldr	r4, [r1]
 1247 0088 04FA03F3 		lsl	r3, r4, r3
 1248 008c 1343     		orrs	r3, r3, r2
 1249 008e EB63     		str	r3, [r5, #60]
 1250 0090 D3E7     		b	.L90
 1251              	.L91:
1962:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 1252              		.loc 1 1962 0
 1253 0092 122B     		cmp	r3, #18
 1254 0094 0ED8     		bhi	.L92
1964:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
 1255              		.loc 1 1964 0
 1256 0096 0568     		ldr	r5, [r0]
 1257 0098 AA6B     		ldr	r2, [r5, #56]
 1258 009a 03EB8303 		add	r3, r3, r3, lsl #2
 1259 009e 413B     		subs	r3, r3, #65
 1260 00a0 1F24     		movs	r4, #31
 1261 00a2 9C40     		lsls	r4, r4, r3
 1262 00a4 22EA0402 		bic	r2, r2, r4
 1263 00a8 0C68     		ldr	r4, [r1]
 1264 00aa 04FA03F3 		lsl	r3, r4, r3
 1265 00ae 1343     		orrs	r3, r3, r2
ARM GAS  /tmp/ccf5d4Yb.s 			page 84


 1266 00b0 AB63     		str	r3, [r5, #56]
 1267 00b2 C2E7     		b	.L90
 1268              	.L92:
1969:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 1269              		.loc 1 1969 0
 1270 00b4 182B     		cmp	r3, #24
 1271 00b6 0ED8     		bhi	.L93
1971:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_SQR2_RK(ADC_SQR2_SQ19, sConfig->Rank),
 1272              		.loc 1 1971 0
 1273 00b8 0568     		ldr	r5, [r0]
 1274 00ba 6A6B     		ldr	r2, [r5, #52]
 1275 00bc 03EB8303 		add	r3, r3, r3, lsl #2
 1276 00c0 5F3B     		subs	r3, r3, #95
 1277 00c2 1F24     		movs	r4, #31
 1278 00c4 9C40     		lsls	r4, r4, r3
 1279 00c6 22EA0402 		bic	r2, r2, r4
 1280 00ca 0C68     		ldr	r4, [r1]
 1281 00cc 04FA03F3 		lsl	r3, r4, r3
 1282 00d0 1343     		orrs	r3, r3, r2
 1283 00d2 6B63     		str	r3, [r5, #52]
 1284 00d4 B1E7     		b	.L90
 1285              	.L93:
1978:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_SQR1_RK(ADC_SQR1_SQ25, sConfig->Rank),
 1286              		.loc 1 1978 0
 1287 00d6 0568     		ldr	r5, [r0]
 1288 00d8 2A6B     		ldr	r2, [r5, #48]
 1289 00da 03EB8303 		add	r3, r3, r3, lsl #2
 1290 00de 7D3B     		subs	r3, r3, #125
 1291 00e0 1F24     		movs	r4, #31
 1292 00e2 9C40     		lsls	r4, r4, r3
 1293 00e4 22EA0402 		bic	r2, r2, r4
 1294 00e8 0C68     		ldr	r4, [r1]
 1295 00ea 04FA03F3 		lsl	r3, r4, r3
 1296 00ee 1343     		orrs	r3, r3, r2
 1297 00f0 2B63     		str	r3, [r5, #48]
 1298 00f2 A2E7     		b	.L90
 1299              	.L94:
1993:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 1300              		.loc 1 1993 0
 1301 00f4 132B     		cmp	r3, #19
 1302 00f6 0ED8     		bhi	.L96
1995:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
 1303              		.loc 1 1995 0
 1304 00f8 0568     		ldr	r5, [r0]
 1305 00fa 2A69     		ldr	r2, [r5, #16]
 1306 00fc 03EB4303 		add	r3, r3, r3, lsl #1
 1307 0100 1E3B     		subs	r3, r3, #30
 1308 0102 0724     		movs	r4, #7
 1309 0104 9C40     		lsls	r4, r4, r3
 1310 0106 22EA0402 		bic	r2, r2, r4
 1311 010a 8C68     		ldr	r4, [r1, #8]
 1312 010c 04FA03F3 		lsl	r3, r4, r3
 1313 0110 1343     		orrs	r3, r3, r2
 1314 0112 2B61     		str	r3, [r5, #16]
 1315 0114 A1E7     		b	.L95
 1316              	.L96:
2001:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
ARM GAS  /tmp/ccf5d4Yb.s 			page 85


 1317              		.loc 1 2001 0
 1318 0116 1A2B     		cmp	r3, #26
 1319 0118 0ED8     		bhi	.L97
2003:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                ADC_SMPR1(ADC_SMPR1_SMP20, sConfig->Channel),
 1320              		.loc 1 2003 0
 1321 011a 0568     		ldr	r5, [r0]
 1322 011c EA68     		ldr	r2, [r5, #12]
 1323 011e 03EB4303 		add	r3, r3, r3, lsl #1
 1324 0122 3C3B     		subs	r3, r3, #60
 1325 0124 0724     		movs	r4, #7
 1326 0126 9C40     		lsls	r4, r4, r3
 1327 0128 22EA0402 		bic	r2, r2, r4
 1328 012c 8C68     		ldr	r4, [r1, #8]
 1329 012e 04FA03F3 		lsl	r3, r4, r3
 1330 0132 1343     		orrs	r3, r3, r2
 1331 0134 EB60     		str	r3, [r5, #12]
 1332 0136 90E7     		b	.L95
 1333              	.L97:
2010:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
 1334              		.loc 1 2010 0
 1335              		.syntax unified
 1336              	@ 2010 "..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c" 1
 1337 0138 00BF     		nop
 1338              	@ 0 "" 2
 1339              		.thumb
 1340              		.syntax unified
 1341 013a 8EE7     		b	.L95
 1342              	.L103:
2018:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       {
 1343              		.loc 1 2018 0
 1344 013c 124B     		ldr	r3, .L104
 1345 013e 5B68     		ldr	r3, [r3, #4]
 1346 0140 13F4000F 		tst	r3, #8388608
 1347 0144 8DD1     		bne	.L98
2020:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         
 1348              		.loc 1 2020 0
 1349 0146 104A     		ldr	r2, .L104
 1350 0148 5368     		ldr	r3, [r2, #4]
 1351 014a 43F40003 		orr	r3, r3, #8388608
 1352 014e 5360     		str	r3, [r2, #4]
2022:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         {
 1353              		.loc 1 2022 0
 1354 0150 0B68     		ldr	r3, [r1]
 1355 0152 102B     		cmp	r3, #16
 1356 0154 85D1     		bne	.L98
2026:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           while(wait_loop_index != 0)
 1357              		.loc 1 2026 0
 1358 0156 0D4B     		ldr	r3, .L104+4
 1359 0158 1B68     		ldr	r3, [r3]
 1360 015a 02F14672 		add	r2, r2, #51904512
 1361 015e 02F52D32 		add	r2, r2, #177152
 1362 0162 02F28332 		addw	r2, r2, #899
 1363 0166 A2FB0323 		umull	r2, r3, r2, r3
 1364 016a 9B0C     		lsrs	r3, r3, #18
 1365 016c 03EB8303 		add	r3, r3, r3, lsl #2
 1366 0170 5A00     		lsls	r2, r3, #1
 1367 0172 0192     		str	r2, [sp, #4]
ARM GAS  /tmp/ccf5d4Yb.s 			page 86


2027:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           {
 1368              		.loc 1 2027 0
 1369 0174 02E0     		b	.L99
 1370              	.L100:
2029:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           }
 1371              		.loc 1 2029 0
 1372 0176 019B     		ldr	r3, [sp, #4]
 1373 0178 013B     		subs	r3, r3, #1
 1374 017a 0193     		str	r3, [sp, #4]
 1375              	.L99:
2027:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****           {
 1376              		.loc 1 2027 0
 1377 017c 019B     		ldr	r3, [sp, #4]
 1378 017e 002B     		cmp	r3, #0
 1379 0180 F9D1     		bne	.L100
 1380 0182 6EE7     		b	.L98
 1381              	.L101:
1943:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 1382              		.loc 1 1943 0
 1383 0184 0220     		movs	r0, #2
 1384              	.LVL79:
 1385 0186 70E7     		b	.L88
 1386              	.L105:
 1387              		.align	2
 1388              	.L104:
 1389 0188 00270140 		.word	1073817344
 1390 018c 00000000 		.word	SystemCoreClock
 1391              		.cfi_endproc
 1392              	.LFE90:
 1394              		.section	.text.HAL_ADC_AnalogWDGConfig,"ax",%progbits
 1395              		.align	1
 1396              		.global	HAL_ADC_AnalogWDGConfig
 1397              		.syntax unified
 1398              		.thumb
 1399              		.thumb_func
 1400              		.fpu softvfp
 1402              	HAL_ADC_AnalogWDGConfig:
 1403              	.LFB91:
2057:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Check the parameters */
 1404              		.loc 1 2057 0
 1405              		.cfi_startproc
 1406              		@ args = 0, pretend = 0, frame = 0
 1407              		@ frame_needed = 0, uses_anonymous_args = 0
 1408              		@ link register save eliminated.
 1409              	.LVL80:
2073:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 1410              		.loc 1 2073 0
 1411 0000 90F84830 		ldrb	r3, [r0, #72]	@ zero_extendqisi2
 1412 0004 012B     		cmp	r3, #1
 1413 0006 29D0     		beq	.L110
2057:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Check the parameters */
 1414              		.loc 1 2057 0 discriminator 2
 1415 0008 30B4     		push	{r4, r5}
 1416              	.LCFI19:
 1417              		.cfi_def_cfa_offset 8
 1418              		.cfi_offset 4, -8
 1419              		.cfi_offset 5, -4
ARM GAS  /tmp/ccf5d4Yb.s 			page 87


2073:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 1420              		.loc 1 2073 0 discriminator 2
 1421 000a 0123     		movs	r3, #1
 1422 000c 80F84830 		strb	r3, [r0, #72]
2078:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 1423              		.loc 1 2078 0 discriminator 2
 1424 0010 0B7A     		ldrb	r3, [r1, #8]	@ zero_extendqisi2
 1425 0012 012B     		cmp	r3, #1
 1426 0014 1CD0     		beq	.L115
2086:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
 1427              		.loc 1 2086 0
 1428 0016 0268     		ldr	r2, [r0]
 1429 0018 5368     		ldr	r3, [r2, #4]
 1430 001a 23F04003 		bic	r3, r3, #64
 1431 001e 5360     		str	r3, [r2, #4]
 1432              	.L109:
2094:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                             ADC_CR1_JAWDEN |
 1433              		.loc 1 2094 0
 1434 0020 0268     		ldr	r2, [r0]
 1435 0022 5468     		ldr	r4, [r2, #4]
 1436 0024 0E4B     		ldr	r3, .L116
 1437 0026 2340     		ands	r3, r3, r4
 1438 0028 5360     		str	r3, [r2, #4]
2099:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                            AnalogWDGConfig->Channel       );
 1439              		.loc 1 2099 0
 1440 002a 0468     		ldr	r4, [r0]
 1441 002c 6368     		ldr	r3, [r4, #4]
 1442 002e 0A68     		ldr	r2, [r1]
2100:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 1443              		.loc 1 2100 0
 1444 0030 4D68     		ldr	r5, [r1, #4]
2099:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                            AnalogWDGConfig->Channel       );
 1445              		.loc 1 2099 0
 1446 0032 2A43     		orrs	r2, r2, r5
 1447 0034 1343     		orrs	r3, r3, r2
 1448 0036 6360     		str	r3, [r4, #4]
2103:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 1449              		.loc 1 2103 0
 1450 0038 0368     		ldr	r3, [r0]
 1451 003a CA68     		ldr	r2, [r1, #12]
 1452 003c 9A62     		str	r2, [r3, #40]
2106:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 1453              		.loc 1 2106 0
 1454 003e 0368     		ldr	r3, [r0]
 1455 0040 0A69     		ldr	r2, [r1, #16]
 1456 0042 DA62     		str	r2, [r3, #44]
2109:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 1457              		.loc 1 2109 0
 1458 0044 0023     		movs	r3, #0
 1459 0046 80F84830 		strb	r3, [r0, #72]
2112:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
 1460              		.loc 1 2112 0
 1461 004a 1846     		mov	r0, r3
 1462              	.LVL81:
2113:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 1463              		.loc 1 2113 0
 1464 004c 30BC     		pop	{r4, r5}
ARM GAS  /tmp/ccf5d4Yb.s 			page 88


 1465              	.LCFI20:
 1466              		.cfi_remember_state
 1467              		.cfi_restore 5
 1468              		.cfi_restore 4
 1469              		.cfi_def_cfa_offset 0
 1470 004e 7047     		bx	lr
 1471              	.LVL82:
 1472              	.L115:
 1473              	.LCFI21:
 1474              		.cfi_restore_state
2081:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
 1475              		.loc 1 2081 0
 1476 0050 0268     		ldr	r2, [r0]
 1477 0052 5368     		ldr	r3, [r2, #4]
 1478 0054 43F04003 		orr	r3, r3, #64
 1479 0058 5360     		str	r3, [r2, #4]
 1480 005a E1E7     		b	.L109
 1481              	.L110:
 1482              	.LCFI22:
 1483              		.cfi_def_cfa_offset 0
 1484              		.cfi_restore 4
 1485              		.cfi_restore 5
2073:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 1486              		.loc 1 2073 0
 1487 005c 0220     		movs	r0, #2
 1488              	.LVL83:
 1489 005e 7047     		bx	lr
 1490              	.L117:
 1491              		.align	2
 1492              	.L116:
 1493 0060 E0FD3FFF 		.word	-12583456
 1494              		.cfi_endproc
 1495              	.LFE91:
 1497              		.section	.text.HAL_ADC_GetState,"ax",%progbits
 1498              		.align	1
 1499              		.global	HAL_ADC_GetState
 1500              		.syntax unified
 1501              		.thumb
 1502              		.thumb_func
 1503              		.fpu softvfp
 1505              	HAL_ADC_GetState:
 1506              	.LFB92:
2144:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   /* Return ADC state */
 1507              		.loc 1 2144 0
 1508              		.cfi_startproc
 1509              		@ args = 0, pretend = 0, frame = 0
 1510              		@ frame_needed = 0, uses_anonymous_args = 0
 1511              		@ link register save eliminated.
 1512              	.LVL84:
2146:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
 1513              		.loc 1 2146 0
 1514 0000 C06C     		ldr	r0, [r0, #76]
 1515              	.LVL85:
2147:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 1516              		.loc 1 2147 0
 1517 0002 7047     		bx	lr
 1518              		.cfi_endproc
ARM GAS  /tmp/ccf5d4Yb.s 			page 89


 1519              	.LFE92:
 1521              		.section	.text.HAL_ADC_GetError,"ax",%progbits
 1522              		.align	1
 1523              		.global	HAL_ADC_GetError
 1524              		.syntax unified
 1525              		.thumb
 1526              		.thumb_func
 1527              		.fpu softvfp
 1529              	HAL_ADC_GetError:
 1530              	.LFB93:
2155:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   return hadc->ErrorCode;
 1531              		.loc 1 2155 0
 1532              		.cfi_startproc
 1533              		@ args = 0, pretend = 0, frame = 0
 1534              		@ frame_needed = 0, uses_anonymous_args = 0
 1535              		@ link register save eliminated.
 1536              	.LVL86:
2156:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
 1537              		.loc 1 2156 0
 1538 0000 006D     		ldr	r0, [r0, #80]
 1539              	.LVL87:
2157:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 1540              		.loc 1 2157 0
 1541 0002 7047     		bx	lr
 1542              		.cfi_endproc
 1543              	.LFE93:
 1545              		.section	.text.ADC_Enable,"ax",%progbits
 1546              		.align	1
 1547              		.global	ADC_Enable
 1548              		.syntax unified
 1549              		.thumb
 1550              		.thumb_func
 1551              		.fpu softvfp
 1553              	ADC_Enable:
 1554              	.LFB94:
2185:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   uint32_t tickstart = 0;
 1555              		.loc 1 2185 0
 1556              		.cfi_startproc
 1557              		@ args = 0, pretend = 0, frame = 8
 1558              		@ frame_needed = 0, uses_anonymous_args = 0
 1559              	.LVL88:
 1560 0000 30B5     		push	{r4, r5, lr}
 1561              	.LCFI23:
 1562              		.cfi_def_cfa_offset 12
 1563              		.cfi_offset 4, -12
 1564              		.cfi_offset 5, -8
 1565              		.cfi_offset 14, -4
 1566 0002 83B0     		sub	sp, sp, #12
 1567              	.LCFI24:
 1568              		.cfi_def_cfa_offset 24
 1569              	.LVL89:
2187:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 1570              		.loc 1 2187 0
 1571 0004 0023     		movs	r3, #0
 1572 0006 0193     		str	r3, [sp, #4]
2193:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 1573              		.loc 1 2193 0
ARM GAS  /tmp/ccf5d4Yb.s 			page 90


 1574 0008 0368     		ldr	r3, [r0]
 1575 000a 1A68     		ldr	r2, [r3]
 1576 000c 12F0400F 		tst	r2, #64
 1577 0010 30D1     		bne	.L126
2196:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 1578              		.loc 1 2196 0
 1579 0012 9A68     		ldr	r2, [r3, #8]
 1580 0014 42F00102 		orr	r2, r2, #1
 1581 0018 9A60     		str	r2, [r3, #8]
2200:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     while(wait_loop_index != 0)
 1582              		.loc 1 2200 0
 1583 001a 184B     		ldr	r3, .L129
 1584 001c 1B68     		ldr	r3, [r3]
 1585 001e 184A     		ldr	r2, .L129+4
 1586 0020 A2FB0323 		umull	r2, r3, r2, r3
 1587 0024 9B0C     		lsrs	r3, r3, #18
 1588 0026 03EB4303 		add	r3, r3, r3, lsl #1
 1589 002a 0193     		str	r3, [sp, #4]
2201:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 1590              		.loc 1 2201 0
 1591 002c 02E0     		b	.L122
 1592              	.L123:
2203:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 1593              		.loc 1 2203 0
 1594 002e 019B     		ldr	r3, [sp, #4]
 1595 0030 013B     		subs	r3, r3, #1
 1596 0032 0193     		str	r3, [sp, #4]
 1597              	.L122:
2201:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 1598              		.loc 1 2201 0
 1599 0034 019B     		ldr	r3, [sp, #4]
 1600 0036 002B     		cmp	r3, #0
 1601 0038 F9D1     		bne	.L123
 1602 003a 0446     		mov	r4, r0
2207:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 1603              		.loc 1 2207 0
 1604 003c FFF7FEFF 		bl	HAL_GetTick
 1605              	.LVL90:
 1606 0040 0546     		mov	r5, r0
 1607              	.LVL91:
 1608              	.L124:
2210:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 1609              		.loc 1 2210 0
 1610 0042 2368     		ldr	r3, [r4]
 1611 0044 1B68     		ldr	r3, [r3]
 1612 0046 13F0400F 		tst	r3, #64
 1613 004a 11D1     		bne	.L128
2212:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       {
 1614              		.loc 1 2212 0
 1615 004c FFF7FEFF 		bl	HAL_GetTick
 1616              	.LVL92:
 1617 0050 401B     		subs	r0, r0, r5
 1618 0052 0228     		cmp	r0, #2
 1619 0054 F5D9     		bls	.L124
2215:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 1620              		.loc 1 2215 0
 1621 0056 E36C     		ldr	r3, [r4, #76]
ARM GAS  /tmp/ccf5d4Yb.s 			page 91


 1622 0058 43F01003 		orr	r3, r3, #16
 1623 005c E364     		str	r3, [r4, #76]
2218:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         
 1624              		.loc 1 2218 0
 1625 005e 236D     		ldr	r3, [r4, #80]
 1626 0060 43F00103 		orr	r3, r3, #1
 1627 0064 2365     		str	r3, [r4, #80]
2221:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 1628              		.loc 1 2221 0
 1629 0066 0023     		movs	r3, #0
 1630 0068 84F84830 		strb	r3, [r4, #72]
2223:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       }
 1631              		.loc 1 2223 0
 1632 006c 0120     		movs	r0, #1
 1633 006e 02E0     		b	.L121
 1634              	.L128:
2229:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
 1635              		.loc 1 2229 0
 1636 0070 0020     		movs	r0, #0
 1637 0072 00E0     		b	.L121
 1638              	.LVL93:
 1639              	.L126:
 1640 0074 0020     		movs	r0, #0
 1641              	.LVL94:
 1642              	.L121:
2230:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 1643              		.loc 1 2230 0
 1644 0076 03B0     		add	sp, sp, #12
 1645              	.LCFI25:
 1646              		.cfi_def_cfa_offset 12
 1647              		@ sp needed
 1648 0078 30BD     		pop	{r4, r5, pc}
 1649              	.L130:
 1650 007a 00BF     		.align	2
 1651              	.L129:
 1652 007c 00000000 		.word	SystemCoreClock
 1653 0080 83DE1B43 		.word	1125899907
 1654              		.cfi_endproc
 1655              	.LFE94:
 1657              		.section	.text.HAL_ADC_Start,"ax",%progbits
 1658              		.align	1
 1659              		.global	HAL_ADC_Start
 1660              		.syntax unified
 1661              		.thumb
 1662              		.thumb_func
 1663              		.fpu softvfp
 1665              	HAL_ADC_Start:
 1666              	.LFB76:
1092:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1667              		.loc 1 1092 0
 1668              		.cfi_startproc
 1669              		@ args = 0, pretend = 0, frame = 0
 1670              		@ frame_needed = 0, uses_anonymous_args = 0
 1671              	.LVL95:
1099:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 1672              		.loc 1 1099 0
 1673 0000 90F84830 		ldrb	r3, [r0, #72]	@ zero_extendqisi2
ARM GAS  /tmp/ccf5d4Yb.s 			page 92


 1674 0004 012B     		cmp	r3, #1
 1675 0006 02D1     		bne	.L141
 1676 0008 0223     		movs	r3, #2
1155:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 1677              		.loc 1 1155 0
 1678 000a 1846     		mov	r0, r3
 1679              	.LVL96:
 1680 000c 7047     		bx	lr
 1681              	.LVL97:
 1682              	.L141:
1092:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1683              		.loc 1 1092 0 discriminator 2
 1684 000e 10B5     		push	{r4, lr}
 1685              	.LCFI26:
 1686              		.cfi_def_cfa_offset 8
 1687              		.cfi_offset 4, -8
 1688              		.cfi_offset 14, -4
 1689 0010 0446     		mov	r4, r0
1099:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 1690              		.loc 1 1099 0 discriminator 2
 1691 0012 0123     		movs	r3, #1
 1692 0014 80F84830 		strb	r3, [r0, #72]
1102:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 1693              		.loc 1 1102 0 discriminator 2
 1694 0018 FFF7FEFF 		bl	ADC_Enable
 1695              	.LVL98:
1105:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 1696              		.loc 1 1105 0 discriminator 2
 1697 001c 0346     		mov	r3, r0
 1698 001e 48BB     		cbnz	r0, .L132
1110:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
 1699              		.loc 1 1110 0
 1700 0020 E26C     		ldr	r2, [r4, #76]
 1701 0022 22F4E062 		bic	r2, r2, #1792
 1702 0026 22F00102 		bic	r2, r2, #1
 1703 002a 42F48072 		orr	r2, r2, #256
 1704 002e E264     		str	r2, [r4, #76]
1116:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 1705              		.loc 1 1116 0
 1706 0030 2268     		ldr	r2, [r4]
 1707 0032 5168     		ldr	r1, [r2, #4]
 1708 0034 11F4806F 		tst	r1, #1024
 1709 0038 05D0     		beq	.L133
1118:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 1710              		.loc 1 1118 0
 1711 003a E16C     		ldr	r1, [r4, #76]
 1712 003c 21F44051 		bic	r1, r1, #12288
 1713 0040 41F48051 		orr	r1, r1, #4096
 1714 0044 E164     		str	r1, [r4, #76]
 1715              	.L133:
1122:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 1716              		.loc 1 1122 0
 1717 0046 E16C     		ldr	r1, [r4, #76]
 1718 0048 11F4805F 		tst	r1, #4096
 1719 004c 14D0     		beq	.L134
1125:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 1720              		.loc 1 1125 0
ARM GAS  /tmp/ccf5d4Yb.s 			page 93


 1721 004e 216D     		ldr	r1, [r4, #80]
 1722 0050 21F00601 		bic	r1, r1, #6
 1723 0054 2165     		str	r1, [r4, #80]
 1724              	.L135:
1136:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 1725              		.loc 1 1136 0
 1726 0056 0021     		movs	r1, #0
 1727 0058 84F84810 		strb	r1, [r4, #72]
1140:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 1728              		.loc 1 1140 0
 1729 005c 6FF02201 		mvn	r1, #34
 1730 0060 1160     		str	r1, [r2]
1146:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 1731              		.loc 1 1146 0
 1732 0062 2268     		ldr	r2, [r4]
 1733 0064 9168     		ldr	r1, [r2, #8]
 1734 0066 11F0405F 		tst	r1, #805306368
 1735 006a 03D1     		bne	.L132
1149:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 1736              		.loc 1 1149 0
 1737 006c 9168     		ldr	r1, [r2, #8]
 1738 006e 41F08041 		orr	r1, r1, #1073741824
 1739 0072 9160     		str	r1, [r2, #8]
 1740              	.L132:
1155:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 1741              		.loc 1 1155 0
 1742 0074 1846     		mov	r0, r3
 1743              	.LVL99:
 1744 0076 10BD     		pop	{r4, pc}
 1745              	.LVL100:
 1746              	.L134:
1130:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 1747              		.loc 1 1130 0
 1748 0078 0021     		movs	r1, #0
 1749 007a 2165     		str	r1, [r4, #80]
 1750 007c EBE7     		b	.L135
 1751              		.cfi_endproc
 1752              	.LFE76:
 1754              		.section	.text.HAL_ADC_Start_IT,"ax",%progbits
 1755              		.align	1
 1756              		.global	HAL_ADC_Start_IT
 1757              		.syntax unified
 1758              		.thumb
 1759              		.thumb_func
 1760              		.fpu softvfp
 1762              	HAL_ADC_Start_IT:
 1763              	.LFB80:
1378:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1764              		.loc 1 1378 0
 1765              		.cfi_startproc
 1766              		@ args = 0, pretend = 0, frame = 0
 1767              		@ frame_needed = 0, uses_anonymous_args = 0
 1768              	.LVL101:
1385:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 1769              		.loc 1 1385 0
 1770 0000 90F84830 		ldrb	r3, [r0, #72]	@ zero_extendqisi2
 1771 0004 012B     		cmp	r3, #1
ARM GAS  /tmp/ccf5d4Yb.s 			page 94


 1772 0006 02D1     		bne	.L152
 1773 0008 0223     		movs	r3, #2
1444:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 1774              		.loc 1 1444 0
 1775 000a 1846     		mov	r0, r3
 1776              	.LVL102:
 1777 000c 7047     		bx	lr
 1778              	.LVL103:
 1779              	.L152:
1378:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1780              		.loc 1 1378 0 discriminator 2
 1781 000e 10B5     		push	{r4, lr}
 1782              	.LCFI27:
 1783              		.cfi_def_cfa_offset 8
 1784              		.cfi_offset 4, -8
 1785              		.cfi_offset 14, -4
 1786 0010 0446     		mov	r4, r0
1385:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 1787              		.loc 1 1385 0 discriminator 2
 1788 0012 0123     		movs	r3, #1
 1789 0014 80F84830 		strb	r3, [r0, #72]
1388:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 1790              		.loc 1 1388 0 discriminator 2
 1791 0018 FFF7FEFF 		bl	ADC_Enable
 1792              	.LVL104:
1391:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 1793              		.loc 1 1391 0 discriminator 2
 1794 001c 0346     		mov	r3, r0
 1795 001e 0028     		cmp	r0, #0
 1796 0020 30D1     		bne	.L143
1396:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
 1797              		.loc 1 1396 0
 1798 0022 E26C     		ldr	r2, [r4, #76]
 1799 0024 22F4E062 		bic	r2, r2, #1792
 1800 0028 22F00102 		bic	r2, r2, #1
 1801 002c 42F48072 		orr	r2, r2, #256
 1802 0030 E264     		str	r2, [r4, #76]
1402:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 1803              		.loc 1 1402 0
 1804 0032 2268     		ldr	r2, [r4]
 1805 0034 5168     		ldr	r1, [r2, #4]
 1806 0036 11F4806F 		tst	r1, #1024
 1807 003a 05D0     		beq	.L144
1404:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 1808              		.loc 1 1404 0
 1809 003c E16C     		ldr	r1, [r4, #76]
 1810 003e 21F44051 		bic	r1, r1, #12288
 1811 0042 41F48051 		orr	r1, r1, #4096
 1812 0046 E164     		str	r1, [r4, #76]
 1813              	.L144:
1408:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 1814              		.loc 1 1408 0
 1815 0048 E16C     		ldr	r1, [r4, #76]
 1816 004a 11F4805F 		tst	r1, #4096
 1817 004e 1BD0     		beq	.L145
1411:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 1818              		.loc 1 1411 0
ARM GAS  /tmp/ccf5d4Yb.s 			page 95


 1819 0050 216D     		ldr	r1, [r4, #80]
 1820 0052 21F00601 		bic	r1, r1, #6
 1821 0056 2165     		str	r1, [r4, #80]
 1822              	.L146:
1422:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 1823              		.loc 1 1422 0
 1824 0058 0021     		movs	r1, #0
 1825 005a 84F84810 		strb	r1, [r4, #72]
1426:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 1826              		.loc 1 1426 0
 1827 005e 6FF02201 		mvn	r1, #34
 1828 0062 1160     		str	r1, [r2]
1429:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 1829              		.loc 1 1429 0
 1830 0064 2168     		ldr	r1, [r4]
 1831 0066 4A68     		ldr	r2, [r1, #4]
 1832 0068 42F08062 		orr	r2, r2, #67108864
 1833 006c 42F02002 		orr	r2, r2, #32
 1834 0070 4A60     		str	r2, [r1, #4]
1435:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 1835              		.loc 1 1435 0
 1836 0072 2268     		ldr	r2, [r4]
 1837 0074 9168     		ldr	r1, [r2, #8]
 1838 0076 11F0405F 		tst	r1, #805306368
 1839 007a 03D1     		bne	.L143
1438:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 1840              		.loc 1 1438 0
 1841 007c 9168     		ldr	r1, [r2, #8]
 1842 007e 41F08041 		orr	r1, r1, #1073741824
 1843 0082 9160     		str	r1, [r2, #8]
 1844              	.L143:
1444:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 1845              		.loc 1 1444 0
 1846 0084 1846     		mov	r0, r3
 1847              	.LVL105:
 1848 0086 10BD     		pop	{r4, pc}
 1849              	.LVL106:
 1850              	.L145:
1416:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 1851              		.loc 1 1416 0
 1852 0088 0021     		movs	r1, #0
 1853 008a 2165     		str	r1, [r4, #80]
 1854 008c E4E7     		b	.L146
 1855              		.cfi_endproc
 1856              	.LFE80:
 1858              		.section	.text.HAL_ADC_Start_DMA,"ax",%progbits
 1859              		.align	1
 1860              		.global	HAL_ADC_Start_DMA
 1861              		.syntax unified
 1862              		.thumb
 1863              		.thumb_func
 1864              		.fpu softvfp
 1866              	HAL_ADC_Start_DMA:
 1867              	.LFB82:
1500:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1868              		.loc 1 1500 0
 1869              		.cfi_startproc
ARM GAS  /tmp/ccf5d4Yb.s 			page 96


 1870              		@ args = 0, pretend = 0, frame = 0
 1871              		@ frame_needed = 0, uses_anonymous_args = 0
 1872              	.LVL107:
 1873 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1874              	.LCFI28:
 1875              		.cfi_def_cfa_offset 24
 1876              		.cfi_offset 3, -24
 1877              		.cfi_offset 4, -20
 1878              		.cfi_offset 5, -16
 1879              		.cfi_offset 6, -12
 1880              		.cfi_offset 7, -8
 1881              		.cfi_offset 14, -4
 1882              	.LVL108:
1507:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 1883              		.loc 1 1507 0
 1884 0002 90F84840 		ldrb	r4, [r0, #72]	@ zero_extendqisi2
 1885 0006 012C     		cmp	r4, #1
 1886 0008 02D1     		bne	.L160
 1887 000a 0225     		movs	r5, #2
 1888              	.LVL109:
 1889              	.L154:
1587:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 1890              		.loc 1 1587 0
 1891 000c 2846     		mov	r0, r5
 1892 000e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1893              	.LVL110:
 1894              	.L160:
 1895 0010 1646     		mov	r6, r2
 1896 0012 0F46     		mov	r7, r1
 1897 0014 0446     		mov	r4, r0
1507:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 1898              		.loc 1 1507 0 discriminator 2
 1899 0016 0123     		movs	r3, #1
 1900 0018 80F84830 		strb	r3, [r0, #72]
1510:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 1901              		.loc 1 1510 0 discriminator 2
 1902 001c FFF7FEFF 		bl	ADC_Enable
 1903              	.LVL111:
1513:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 1904              		.loc 1 1513 0 discriminator 2
 1905 0020 0546     		mov	r5, r0
 1906 0022 0028     		cmp	r0, #0
 1907 0024 F2D1     		bne	.L154
1518:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
 1908              		.loc 1 1518 0
 1909 0026 E36C     		ldr	r3, [r4, #76]
 1910 0028 23F4E063 		bic	r3, r3, #1792
 1911 002c 23F00103 		bic	r3, r3, #1
 1912 0030 43F48073 		orr	r3, r3, #256
 1913 0034 E364     		str	r3, [r4, #76]
1524:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 1914              		.loc 1 1524 0
 1915 0036 2368     		ldr	r3, [r4]
 1916 0038 5B68     		ldr	r3, [r3, #4]
 1917 003a 13F4806F 		tst	r3, #1024
 1918 003e 05D0     		beq	.L155
1526:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
ARM GAS  /tmp/ccf5d4Yb.s 			page 97


 1919              		.loc 1 1526 0
 1920 0040 E36C     		ldr	r3, [r4, #76]
 1921 0042 23F44053 		bic	r3, r3, #12288
 1922 0046 43F48053 		orr	r3, r3, #4096
 1923 004a E364     		str	r3, [r4, #76]
 1924              	.L155:
1530:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 1925              		.loc 1 1530 0
 1926 004c E36C     		ldr	r3, [r4, #76]
 1927 004e 13F4805F 		tst	r3, #4096
 1928 0052 2ED0     		beq	.L156
1533:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 1929              		.loc 1 1533 0
 1930 0054 236D     		ldr	r3, [r4, #80]
 1931 0056 23F00603 		bic	r3, r3, #6
 1932 005a 2365     		str	r3, [r4, #80]
 1933              	.L157:
1544:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 1934              		.loc 1 1544 0
 1935 005c 0023     		movs	r3, #0
 1936 005e 84F84830 		strb	r3, [r4, #72]
1547:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 1937              		.loc 1 1547 0
 1938 0062 636C     		ldr	r3, [r4, #68]
 1939 0064 144A     		ldr	r2, .L161
 1940 0066 9A62     		str	r2, [r3, #40]
1550:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 1941              		.loc 1 1550 0
 1942 0068 636C     		ldr	r3, [r4, #68]
 1943 006a 144A     		ldr	r2, .L161+4
 1944 006c DA62     		str	r2, [r3, #44]
1553:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 1945              		.loc 1 1553 0
 1946 006e 636C     		ldr	r3, [r4, #68]
 1947 0070 134A     		ldr	r2, .L161+8
 1948 0072 1A63     		str	r2, [r3, #48]
1561:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 1949              		.loc 1 1561 0
 1950 0074 2368     		ldr	r3, [r4]
 1951 0076 6FF02202 		mvn	r2, #34
 1952 007a 1A60     		str	r2, [r3]
1564:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 1953              		.loc 1 1564 0
 1954 007c 2268     		ldr	r2, [r4]
 1955 007e 5368     		ldr	r3, [r2, #4]
 1956 0080 43F08063 		orr	r3, r3, #67108864
 1957 0084 5360     		str	r3, [r2, #4]
1567:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 1958              		.loc 1 1567 0
 1959 0086 2268     		ldr	r2, [r4]
 1960 0088 9368     		ldr	r3, [r2, #8]
 1961 008a 43F48073 		orr	r3, r3, #256
 1962 008e 9360     		str	r3, [r2, #8]
1570:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 1963              		.loc 1 1570 0
 1964 0090 2168     		ldr	r1, [r4]
 1965 0092 3346     		mov	r3, r6
ARM GAS  /tmp/ccf5d4Yb.s 			page 98


 1966 0094 3A46     		mov	r2, r7
 1967 0096 5831     		adds	r1, r1, #88
 1968 0098 606C     		ldr	r0, [r4, #68]
 1969              	.LVL112:
 1970 009a FFF7FEFF 		bl	HAL_DMA_Start_IT
 1971              	.LVL113:
1578:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 1972              		.loc 1 1578 0
 1973 009e 2368     		ldr	r3, [r4]
 1974 00a0 9A68     		ldr	r2, [r3, #8]
 1975 00a2 12F0405F 		tst	r2, #805306368
 1976 00a6 B1D1     		bne	.L154
1581:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 1977              		.loc 1 1581 0
 1978 00a8 9A68     		ldr	r2, [r3, #8]
 1979 00aa 42F08042 		orr	r2, r2, #1073741824
 1980 00ae 9A60     		str	r2, [r3, #8]
 1981 00b0 ACE7     		b	.L154
 1982              	.LVL114:
 1983              	.L156:
1538:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     }
 1984              		.loc 1 1538 0
 1985 00b2 0023     		movs	r3, #0
 1986 00b4 2365     		str	r3, [r4, #80]
 1987 00b6 D1E7     		b	.L157
 1988              	.L162:
 1989              		.align	2
 1990              	.L161:
 1991 00b8 00000000 		.word	ADC_DMAConvCplt
 1992 00bc 00000000 		.word	ADC_DMAHalfConvCplt
 1993 00c0 00000000 		.word	ADC_DMAError
 1994              		.cfi_endproc
 1995              	.LFE82:
 1997              		.section	.text.ADC_ConversionStop_Disable,"ax",%progbits
 1998              		.align	1
 1999              		.global	ADC_ConversionStop_Disable
 2000              		.syntax unified
 2001              		.thumb
 2002              		.thumb_func
 2003              		.fpu softvfp
 2005              	ADC_ConversionStop_Disable:
 2006              	.LFB95:
2240:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   uint32_t tickstart = 0;
 2007              		.loc 1 2240 0
 2008              		.cfi_startproc
 2009              		@ args = 0, pretend = 0, frame = 0
 2010              		@ frame_needed = 0, uses_anonymous_args = 0
 2011              	.LVL115:
 2012 0000 38B5     		push	{r3, r4, r5, lr}
 2013              	.LCFI29:
 2014              		.cfi_def_cfa_offset 16
 2015              		.cfi_offset 3, -16
 2016              		.cfi_offset 4, -12
 2017              		.cfi_offset 5, -8
 2018              		.cfi_offset 14, -4
 2019              	.LVL116:
2244:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
ARM GAS  /tmp/ccf5d4Yb.s 			page 99


 2020              		.loc 1 2244 0
 2021 0002 0368     		ldr	r3, [r0]
 2022 0004 1A68     		ldr	r2, [r3]
 2023 0006 12F0400F 		tst	r2, #64
 2024 000a 01D1     		bne	.L169
2269:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
 2025              		.loc 1 2269 0
 2026 000c 0020     		movs	r0, #0
 2027              	.LVL117:
2270:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 2028              		.loc 1 2270 0
 2029 000e 38BD     		pop	{r3, r4, r5, pc}
 2030              	.LVL118:
 2031              	.L169:
 2032 0010 0446     		mov	r4, r0
2247:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****      
 2033              		.loc 1 2247 0
 2034 0012 9A68     		ldr	r2, [r3, #8]
 2035 0014 22F00102 		bic	r2, r2, #1
 2036 0018 9A60     		str	r2, [r3, #8]
2250:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 2037              		.loc 1 2250 0
 2038 001a FFF7FEFF 		bl	HAL_GetTick
 2039              	.LVL119:
 2040 001e 0546     		mov	r5, r0
 2041              	.LVL120:
 2042              	.L165:
2253:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     {
 2043              		.loc 1 2253 0
 2044 0020 2368     		ldr	r3, [r4]
 2045 0022 1B68     		ldr	r3, [r3]
 2046 0024 13F0400F 		tst	r3, #64
 2047 0028 0ED0     		beq	.L170
2255:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       {
 2048              		.loc 1 2255 0
 2049 002a FFF7FEFF 		bl	HAL_GetTick
 2050              	.LVL121:
 2051 002e 401B     		subs	r0, r0, r5
 2052 0030 0228     		cmp	r0, #2
 2053 0032 F5D9     		bls	.L165
2258:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       
 2054              		.loc 1 2258 0
 2055 0034 E36C     		ldr	r3, [r4, #76]
 2056 0036 43F01003 		orr	r3, r3, #16
 2057 003a E364     		str	r3, [r4, #76]
2261:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****         
 2058              		.loc 1 2261 0
 2059 003c 236D     		ldr	r3, [r4, #80]
 2060 003e 43F00103 		orr	r3, r3, #1
 2061 0042 2365     		str	r3, [r4, #80]
2263:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****       }
 2062              		.loc 1 2263 0
 2063 0044 0120     		movs	r0, #1
 2064 0046 38BD     		pop	{r3, r4, r5, pc}
 2065              	.LVL122:
 2066              	.L170:
2269:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
ARM GAS  /tmp/ccf5d4Yb.s 			page 100


 2067              		.loc 1 2269 0
 2068 0048 0020     		movs	r0, #0
 2069 004a 38BD     		pop	{r3, r4, r5, pc}
 2070              		.cfi_endproc
 2071              	.LFE95:
 2073              		.section	.text.HAL_ADC_DeInit,"ax",%progbits
 2074              		.align	1
 2075              		.global	HAL_ADC_DeInit
 2076              		.syntax unified
 2077              		.thumb
 2078              		.thumb_func
 2079              		.fpu softvfp
 2081              	HAL_ADC_DeInit:
 2082              	.LFB73:
 682:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2083              		.loc 1 682 0
 2084              		.cfi_startproc
 2085              		@ args = 0, pretend = 0, frame = 0
 2086              		@ frame_needed = 0, uses_anonymous_args = 0
 2087              	.LVL123:
 2088 0000 38B5     		push	{r3, r4, r5, lr}
 2089              	.LCFI30:
 2090              		.cfi_def_cfa_offset 16
 2091              		.cfi_offset 3, -16
 2092              		.cfi_offset 4, -12
 2093              		.cfi_offset 5, -8
 2094              		.cfi_offset 14, -4
 2095              	.LVL124:
 686:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 2096              		.loc 1 686 0
 2097 0002 0028     		cmp	r0, #0
 2098 0004 7FD0     		beq	.L174
 2099 0006 0446     		mov	r4, r0
 695:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 2100              		.loc 1 695 0
 2101 0008 C36C     		ldr	r3, [r0, #76]
 2102 000a 43F00203 		orr	r3, r3, #2
 2103 000e C364     		str	r3, [r0, #76]
 699:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 2104              		.loc 1 699 0
 2105 0010 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 2106              	.LVL125:
 704:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 2107              		.loc 1 704 0
 2108 0014 0546     		mov	r5, r0
 2109 0016 20B1     		cbz	r0, .L176
 2110              	.LVL126:
 2111              	.L173:
 819:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 2112              		.loc 1 819 0
 2113 0018 0023     		movs	r3, #0
 2114 001a 84F84830 		strb	r3, [r4, #72]
 2115              	.LVL127:
 2116              	.L172:
 823:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 2117              		.loc 1 823 0
 2118 001e 2846     		mov	r0, r5
ARM GAS  /tmp/ccf5d4Yb.s 			page 101


 2119 0020 38BD     		pop	{r3, r4, r5, pc}
 2120              	.LVL128:
 2121              	.L176:
 708:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                 ADC_FLAG_JSTRT | ADC_FLAG_STRT));
 2122              		.loc 1 708 0
 2123 0022 2368     		ldr	r3, [r4]
 2124 0024 6FF01F02 		mvn	r2, #31
 2125 0028 1A60     		str	r2, [r3]
 712:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                     ADC_CR1_JAWDEN  | ADC_CR1_PDI     | ADC_CR1_PDD    |
 2126              		.loc 1 712 0
 2127 002a 2268     		ldr	r2, [r4]
 2128 002c 5168     		ldr	r1, [r2, #4]
 2129 002e 374B     		ldr	r3, .L177
 2130 0030 0B40     		ands	r3, r3, r1
 2131 0032 5360     		str	r3, [r2, #4]
 720:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 2132              		.loc 1 720 0
 2133 0034 2268     		ldr	r2, [r4]
 2134 0036 9168     		ldr	r1, [r2, #8]
 2135 0038 354B     		ldr	r3, .L177+4
 2136 003a 0B40     		ands	r3, r3, r1
 2137 003c 9360     		str	r3, [r2, #8]
 723:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 2138              		.loc 1 723 0
 2139              		.syntax unified
 2140              	@ 723 "..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c" 1
 2141 003e 00BF     		nop
 2142              	@ 0 "" 2
 726:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 2143              		.loc 1 726 0
 2144              		.thumb
 2145              		.syntax unified
 2146 0040 2268     		ldr	r2, [r4]
 2147 0042 D368     		ldr	r3, [r2, #12]
 2148 0044 5B0D     		lsrs	r3, r3, #21
 2149 0046 5B05     		lsls	r3, r3, #21
 2150 0048 D360     		str	r3, [r2, #12]
 729:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                       ADC_SMPR2_SMP16 | ADC_SMPR2_SMP15 | ADC_SMPR2_SMP14 | 
 2151              		.loc 1 729 0
 2152 004a 2268     		ldr	r2, [r4]
 2153 004c 1369     		ldr	r3, [r2, #16]
 2154 004e 03F04043 		and	r3, r3, #-1073741824
 2155 0052 1361     		str	r3, [r2, #16]
 735:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                       ADC_SMPR3_SMP6 | ADC_SMPR3_SMP5 | ADC_SMPR3_SMP4 | 
 2156              		.loc 1 735 0
 2157 0054 2268     		ldr	r2, [r4]
 2158 0056 5369     		ldr	r3, [r2, #20]
 2159 0058 03F04043 		and	r3, r3, #-1073741824
 2160 005c 5361     		str	r3, [r2, #20]
 741:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset register JOFR2 */
 2161              		.loc 1 741 0
 2162 005e 2268     		ldr	r2, [r4]
 2163 0060 9369     		ldr	r3, [r2, #24]
 2164 0062 23F47F63 		bic	r3, r3, #4080
 2165 0066 23F00F03 		bic	r3, r3, #15
 2166 006a 9361     		str	r3, [r2, #24]
 743:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset register JOFR3 */
ARM GAS  /tmp/ccf5d4Yb.s 			page 102


 2167              		.loc 1 743 0
 2168 006c 2268     		ldr	r2, [r4]
 2169 006e D369     		ldr	r3, [r2, #28]
 2170 0070 23F47F63 		bic	r3, r3, #4080
 2171 0074 23F00F03 		bic	r3, r3, #15
 2172 0078 D361     		str	r3, [r2, #28]
 745:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset register JOFR4 */
 2173              		.loc 1 745 0
 2174 007a 2268     		ldr	r2, [r4]
 2175 007c 136A     		ldr	r3, [r2, #32]
 2176 007e 23F47F63 		bic	r3, r3, #4080
 2177 0082 23F00F03 		bic	r3, r3, #15
 2178 0086 1362     		str	r3, [r2, #32]
 747:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 2179              		.loc 1 747 0
 2180 0088 2268     		ldr	r2, [r4]
 2181 008a 536A     		ldr	r3, [r2, #36]
 2182 008c 23F47F63 		bic	r3, r3, #4080
 2183 0090 23F00F03 		bic	r3, r3, #15
 2184 0094 5362     		str	r3, [r2, #36]
 750:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     /* Reset register LTR */
 2185              		.loc 1 750 0
 2186 0096 2268     		ldr	r2, [r4]
 2187 0098 936A     		ldr	r3, [r2, #40]
 2188 009a 23F47F63 		bic	r3, r3, #4080
 2189 009e 23F00F03 		bic	r3, r3, #15
 2190 00a2 9362     		str	r3, [r2, #40]
 752:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 2191              		.loc 1 752 0
 2192 00a4 2268     		ldr	r2, [r4]
 2193 00a6 D36A     		ldr	r3, [r2, #44]
 2194 00a8 23F47F63 		bic	r3, r3, #4080
 2195 00ac 23F00F03 		bic	r3, r3, #15
 2196 00b0 D362     		str	r3, [r2, #44]
 755:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 2197              		.loc 1 755 0
 2198 00b2 2268     		ldr	r2, [r4]
 2199 00b4 116B     		ldr	r1, [r2, #48]
 2200 00b6 174B     		ldr	r3, .L177+8
 2201 00b8 0B40     		ands	r3, r3, r1
 2202 00ba 1363     		str	r3, [r2, #48]
 758:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                      ADC_SQR2_SQ21 | ADC_SQR2_SQ20 | ADC_SQR2_SQ19  ));
 2203              		.loc 1 758 0
 2204 00bc 2268     		ldr	r2, [r4]
 2205 00be 536B     		ldr	r3, [r2, #52]
 2206 00c0 03F04043 		and	r3, r3, #-1073741824
 2207 00c4 5363     		str	r3, [r2, #52]
 762:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                      ADC_SQR3_SQ15 | ADC_SQR3_SQ14 | ADC_SQR3_SQ13  ));
 2208              		.loc 1 762 0
 2209 00c6 2268     		ldr	r2, [r4]
 2210 00c8 936B     		ldr	r3, [r2, #56]
 2211 00ca 03F04043 		and	r3, r3, #-1073741824
 2212 00ce 9363     		str	r3, [r2, #56]
 766:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                      ADC_SQR4_SQ9  | ADC_SQR4_SQ8  | ADC_SQR4_SQ7   ));
 2213              		.loc 1 766 0
 2214 00d0 2268     		ldr	r2, [r4]
 2215 00d2 D36B     		ldr	r3, [r2, #60]
ARM GAS  /tmp/ccf5d4Yb.s 			page 103


 2216 00d4 03F04043 		and	r3, r3, #-1073741824
 2217 00d8 D363     		str	r3, [r2, #60]
 770:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                      ADC_SQR5_SQ3 | ADC_SQR5_SQ2 | ADC_SQR5_SQ1  ));
 2218              		.loc 1 770 0
 2219 00da 2268     		ldr	r2, [r4]
 2220 00dc 136C     		ldr	r3, [r2, #64]
 2221 00de 03F04043 		and	r3, r3, #-1073741824
 2222 00e2 1364     		str	r3, [r2, #64]
 775:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                                      ADC_JSQR_JSQ4 | ADC_JSQR_JSQ3 | 
 2223              		.loc 1 775 0
 2224 00e4 2268     		ldr	r2, [r4]
 2225 00e6 536C     		ldr	r3, [r2, #68]
 2226 00e8 9B0D     		lsrs	r3, r3, #22
 2227 00ea 9B05     		lsls	r3, r3, #22
 2228 00ec 5364     		str	r3, [r2, #68]
 786:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 2229              		.loc 1 786 0
 2230 00ee 0A4A     		ldr	r2, .L177+12
 2231 00f0 5368     		ldr	r3, [r2, #4]
 2232 00f2 23F40003 		bic	r3, r3, #8388608
 2233 00f6 5360     		str	r3, [r2, #4]
 807:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 2234              		.loc 1 807 0
 2235 00f8 2046     		mov	r0, r4
 2236              	.LVL129:
 2237 00fa FFF7FEFF 		bl	HAL_ADC_MspDeInit
 2238              	.LVL130:
 811:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 2239              		.loc 1 811 0
 2240 00fe 0023     		movs	r3, #0
 2241 0100 2365     		str	r3, [r4, #80]
 814:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 2242              		.loc 1 814 0
 2243 0102 E364     		str	r3, [r4, #76]
 2244 0104 88E7     		b	.L173
 2245              	.LVL131:
 2246              	.L174:
 688:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
 2247              		.loc 1 688 0
 2248 0106 0125     		movs	r5, #1
 2249 0108 89E7     		b	.L172
 2250              	.L178:
 2251 010a 00BF     		.align	2
 2252              	.L177:
 2253 010c 00003CF8 		.word	-130285568
 2254 0110 8CF08080 		.word	-2139033460
 2255 0114 00800FFE 		.word	-32538624
 2256 0118 00270140 		.word	1073817344
 2257              		.cfi_endproc
 2258              	.LFE73:
 2260              		.section	.text.HAL_ADC_Stop,"ax",%progbits
 2261              		.align	1
 2262              		.global	HAL_ADC_Stop
 2263              		.syntax unified
 2264              		.thumb
 2265              		.thumb_func
 2266              		.fpu softvfp
ARM GAS  /tmp/ccf5d4Yb.s 			page 104


 2268              	HAL_ADC_Stop:
 2269              	.LFB77:
1167:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2270              		.loc 1 1167 0
 2271              		.cfi_startproc
 2272              		@ args = 0, pretend = 0, frame = 0
 2273              		@ frame_needed = 0, uses_anonymous_args = 0
 2274              	.LVL132:
1174:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 2275              		.loc 1 1174 0
 2276 0000 90F84830 		ldrb	r3, [r0, #72]	@ zero_extendqisi2
 2277 0004 012B     		cmp	r3, #1
 2278 0006 02D1     		bne	.L187
 2279 0008 0223     		movs	r3, #2
1194:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 2280              		.loc 1 1194 0
 2281 000a 1846     		mov	r0, r3
 2282              	.LVL133:
 2283 000c 7047     		bx	lr
 2284              	.LVL134:
 2285              	.L187:
1167:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2286              		.loc 1 1167 0 discriminator 2
 2287 000e 10B5     		push	{r4, lr}
 2288              	.LCFI31:
 2289              		.cfi_def_cfa_offset 8
 2290              		.cfi_offset 4, -8
 2291              		.cfi_offset 14, -4
 2292 0010 0446     		mov	r4, r0
1174:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 2293              		.loc 1 1174 0 discriminator 2
 2294 0012 0123     		movs	r3, #1
 2295 0014 80F84830 		strb	r3, [r0, #72]
1178:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 2296              		.loc 1 1178 0 discriminator 2
 2297 0018 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 2298              	.LVL135:
1181:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 2299              		.loc 1 1181 0 discriminator 2
 2300 001c 0346     		mov	r3, r0
 2301 001e 38B9     		cbnz	r0, .L181
1184:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 2302              		.loc 1 1184 0
 2303 0020 E26C     		ldr	r2, [r4, #76]
 2304 0022 22F48852 		bic	r2, r2, #4352
 2305 0026 22F00102 		bic	r2, r2, #1
 2306 002a 42F00102 		orr	r2, r2, #1
 2307 002e E264     		str	r2, [r4, #76]
 2308              	.L181:
1190:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 2309              		.loc 1 1190 0
 2310 0030 0022     		movs	r2, #0
 2311 0032 84F84820 		strb	r2, [r4, #72]
1194:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 2312              		.loc 1 1194 0
 2313 0036 1846     		mov	r0, r3
 2314              	.LVL136:
ARM GAS  /tmp/ccf5d4Yb.s 			page 105


 2315 0038 10BD     		pop	{r4, pc}
 2316              		.cfi_endproc
 2317              	.LFE77:
 2319              		.section	.text.HAL_ADC_Stop_IT,"ax",%progbits
 2320              		.align	1
 2321              		.global	HAL_ADC_Stop_IT
 2322              		.syntax unified
 2323              		.thumb
 2324              		.thumb_func
 2325              		.fpu softvfp
 2327              	HAL_ADC_Stop_IT:
 2328              	.LFB81:
1454:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2329              		.loc 1 1454 0
 2330              		.cfi_startproc
 2331              		@ args = 0, pretend = 0, frame = 0
 2332              		@ frame_needed = 0, uses_anonymous_args = 0
 2333              	.LVL137:
1461:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 2334              		.loc 1 1461 0
 2335 0000 90F84830 		ldrb	r3, [r0, #72]	@ zero_extendqisi2
 2336 0004 012B     		cmp	r3, #1
 2337 0006 02D1     		bne	.L196
 2338 0008 0223     		movs	r3, #2
1484:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 2339              		.loc 1 1484 0
 2340 000a 1846     		mov	r0, r3
 2341              	.LVL138:
 2342 000c 7047     		bx	lr
 2343              	.LVL139:
 2344              	.L196:
1454:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2345              		.loc 1 1454 0 discriminator 2
 2346 000e 10B5     		push	{r4, lr}
 2347              	.LCFI32:
 2348              		.cfi_def_cfa_offset 8
 2349              		.cfi_offset 4, -8
 2350              		.cfi_offset 14, -4
 2351 0010 0446     		mov	r4, r0
1461:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 2352              		.loc 1 1461 0 discriminator 2
 2353 0012 0123     		movs	r3, #1
 2354 0014 80F84830 		strb	r3, [r0, #72]
1465:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 2355              		.loc 1 1465 0 discriminator 2
 2356 0018 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 2357              	.LVL140:
1468:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 2358              		.loc 1 1468 0 discriminator 2
 2359 001c 0346     		mov	r3, r0
 2360 001e 60B9     		cbnz	r0, .L190
1471:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 2361              		.loc 1 1471 0
 2362 0020 2168     		ldr	r1, [r4]
 2363 0022 4A68     		ldr	r2, [r1, #4]
 2364 0024 22F02002 		bic	r2, r2, #32
 2365 0028 4A60     		str	r2, [r1, #4]
ARM GAS  /tmp/ccf5d4Yb.s 			page 106


1474:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 2366              		.loc 1 1474 0
 2367 002a E26C     		ldr	r2, [r4, #76]
 2368 002c 22F48852 		bic	r2, r2, #4352
 2369 0030 22F00102 		bic	r2, r2, #1
 2370 0034 42F00102 		orr	r2, r2, #1
 2371 0038 E264     		str	r2, [r4, #76]
 2372              	.L190:
1480:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 2373              		.loc 1 1480 0
 2374 003a 0022     		movs	r2, #0
 2375 003c 84F84820 		strb	r2, [r4, #72]
1484:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 2376              		.loc 1 1484 0
 2377 0040 1846     		mov	r0, r3
 2378              	.LVL141:
 2379 0042 10BD     		pop	{r4, pc}
 2380              		.cfi_endproc
 2381              	.LFE81:
 2383              		.section	.text.HAL_ADC_Stop_DMA,"ax",%progbits
 2384              		.align	1
 2385              		.global	HAL_ADC_Stop_DMA
 2386              		.syntax unified
 2387              		.thumb
 2388              		.thumb_func
 2389              		.fpu softvfp
 2391              	HAL_ADC_Stop_DMA:
 2392              	.LFB83:
1600:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2393              		.loc 1 1600 0
 2394              		.cfi_startproc
 2395              		@ args = 0, pretend = 0, frame = 0
 2396              		@ frame_needed = 0, uses_anonymous_args = 0
 2397              	.LVL142:
 2398 0000 38B5     		push	{r3, r4, r5, lr}
 2399              	.LCFI33:
 2400              		.cfi_def_cfa_offset 16
 2401              		.cfi_offset 3, -16
 2402              		.cfi_offset 4, -12
 2403              		.cfi_offset 5, -8
 2404              		.cfi_offset 14, -4
 2405              	.LVL143:
1607:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 2406              		.loc 1 1607 0
 2407 0002 90F84830 		ldrb	r3, [r0, #72]	@ zero_extendqisi2
 2408 0006 012B     		cmp	r3, #1
 2409 0008 02D1     		bne	.L202
 2410 000a 0225     		movs	r5, #2
 2411              	.LVL144:
 2412              	.L198:
1637:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** 
 2413              		.loc 1 1637 0
 2414 000c 2846     		mov	r0, r5
 2415 000e 38BD     		pop	{r3, r4, r5, pc}
 2416              	.LVL145:
 2417              	.L202:
 2418 0010 0446     		mov	r4, r0
ARM GAS  /tmp/ccf5d4Yb.s 			page 107


1607:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 2419              		.loc 1 1607 0 discriminator 2
 2420 0012 0123     		movs	r3, #1
 2421 0014 80F84830 		strb	r3, [r0, #72]
1611:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 2422              		.loc 1 1611 0 discriminator 2
 2423 0018 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 2424              	.LVL146:
1614:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   {
 2425              		.loc 1 1614 0 discriminator 2
 2426 001c 0546     		mov	r5, r0
 2427 001e 18B1     		cbz	r0, .L203
 2428              	.LVL147:
 2429              	.L199:
1633:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   
 2430              		.loc 1 1633 0
 2431 0020 0023     		movs	r3, #0
 2432 0022 84F84830 		strb	r3, [r4, #72]
1636:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c **** }
 2433              		.loc 1 1636 0
 2434 0026 F1E7     		b	.L198
 2435              	.LVL148:
 2436              	.L203:
1617:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 2437              		.loc 1 1617 0
 2438 0028 2268     		ldr	r2, [r4]
 2439 002a 9368     		ldr	r3, [r2, #8]
 2440 002c 23F48073 		bic	r3, r3, #256
 2441 0030 9360     		str	r3, [r2, #8]
1621:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****     
 2442              		.loc 1 1621 0
 2443 0032 606C     		ldr	r0, [r4, #68]
 2444              	.LVL149:
 2445 0034 FFF7FEFF 		bl	HAL_DMA_Abort
 2446              	.LVL150:
1624:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 2447              		.loc 1 1624 0
 2448 0038 E36C     		ldr	r3, [r4, #76]
 2449 003a 23F48853 		bic	r3, r3, #4352
 2450 003e 23F00103 		bic	r3, r3, #1
 2451 0042 43F00103 		orr	r3, r3, #1
 2452 0046 E364     		str	r3, [r4, #76]
1629:..//Source/stm/lib/STM32L1xx_HAL_Driver/Src/stm32l1xx_hal_adc.c ****   }
 2453              		.loc 1 1629 0
 2454 0048 2268     		ldr	r2, [r4]
 2455 004a 5368     		ldr	r3, [r2, #4]
 2456 004c 23F08063 		bic	r3, r3, #67108864
 2457 0050 5360     		str	r3, [r2, #4]
 2458 0052 E5E7     		b	.L199
 2459              		.cfi_endproc
 2460              	.LFE83:
 2462              		.text
 2463              	.Letext0:
 2464              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 2465              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 2466              		.file 5 "..//Source/stm/lib/CMSIS/Include/core_cm3.h"
 2467              		.file 6 "..//Source/stm/lib/CMSIS/Device/ST/STM32L1xx/Include/system_stm32l1xx.h"
ARM GAS  /tmp/ccf5d4Yb.s 			page 108


 2468              		.file 7 "..//Source/stm/lib/CMSIS/Device/ST/STM32L1xx/Include/stm32l151xba.h"
 2469              		.file 8 "..//Source/stm/lib/CMSIS/Device/ST/STM32L1xx/Include/stm32l1xx.h"
 2470              		.file 9 "..//Source/stm/lib/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal_def.h"
 2471              		.file 10 "..//Source/stm/lib/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal_dma.h"
 2472              		.file 11 "..//Source/stm/lib/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal_adc.h"
 2473              		.file 12 "..//Source/stm/lib/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal.h"
 2474              		.file 13 "..//Source/stm/lib/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal_adc_ex.h"
ARM GAS  /tmp/ccf5d4Yb.s 			page 109


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32l1xx_hal_adc.c
     /tmp/ccf5d4Yb.s:16     .text.HAL_ADC_MspInit:0000000000000000 $t
     /tmp/ccf5d4Yb.s:23     .text.HAL_ADC_MspInit:0000000000000000 HAL_ADC_MspInit
     /tmp/ccf5d4Yb.s:37     .text.HAL_ADC_Init:0000000000000000 $t
     /tmp/ccf5d4Yb.s:44     .text.HAL_ADC_Init:0000000000000000 HAL_ADC_Init
     /tmp/ccf5d4Yb.s:376    .text.HAL_ADC_Init:000000000000018c $d
     /tmp/ccf5d4Yb.s:385    .text.HAL_ADC_MspDeInit:0000000000000000 $t
     /tmp/ccf5d4Yb.s:392    .text.HAL_ADC_MspDeInit:0000000000000000 HAL_ADC_MspDeInit
     /tmp/ccf5d4Yb.s:405    .text.HAL_ADC_PollForConversion:0000000000000000 $t
     /tmp/ccf5d4Yb.s:412    .text.HAL_ADC_PollForConversion:0000000000000000 HAL_ADC_PollForConversion
     /tmp/ccf5d4Yb.s:567    .text.HAL_ADC_PollForEvent:0000000000000000 $t
     /tmp/ccf5d4Yb.s:574    .text.HAL_ADC_PollForEvent:0000000000000000 HAL_ADC_PollForEvent
     /tmp/ccf5d4Yb.s:664    .text.HAL_ADC_GetValue:0000000000000000 $t
     /tmp/ccf5d4Yb.s:671    .text.HAL_ADC_GetValue:0000000000000000 HAL_ADC_GetValue
     /tmp/ccf5d4Yb.s:689    .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
     /tmp/ccf5d4Yb.s:696    .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
     /tmp/ccf5d4Yb.s:709    .text.ADC_DMAConvCplt:0000000000000000 $t
     /tmp/ccf5d4Yb.s:715    .text.ADC_DMAConvCplt:0000000000000000 ADC_DMAConvCplt
     /tmp/ccf5d4Yb.s:795    .text.HAL_ADC_ConvHalfCpltCallback:0000000000000000 $t
     /tmp/ccf5d4Yb.s:802    .text.HAL_ADC_ConvHalfCpltCallback:0000000000000000 HAL_ADC_ConvHalfCpltCallback
     /tmp/ccf5d4Yb.s:815    .text.ADC_DMAHalfConvCplt:0000000000000000 $t
     /tmp/ccf5d4Yb.s:821    .text.ADC_DMAHalfConvCplt:0000000000000000 ADC_DMAHalfConvCplt
     /tmp/ccf5d4Yb.s:845    .text.HAL_ADC_LevelOutOfWindowCallback:0000000000000000 $t
     /tmp/ccf5d4Yb.s:852    .text.HAL_ADC_LevelOutOfWindowCallback:0000000000000000 HAL_ADC_LevelOutOfWindowCallback
     /tmp/ccf5d4Yb.s:865    .text.HAL_ADC_ErrorCallback:0000000000000000 $t
     /tmp/ccf5d4Yb.s:872    .text.HAL_ADC_ErrorCallback:0000000000000000 HAL_ADC_ErrorCallback
     /tmp/ccf5d4Yb.s:885    .text.ADC_DMAError:0000000000000000 $t
     /tmp/ccf5d4Yb.s:891    .text.ADC_DMAError:0000000000000000 ADC_DMAError
     /tmp/ccf5d4Yb.s:923    .text.HAL_ADC_IRQHandler:0000000000000000 $t
     /tmp/ccf5d4Yb.s:930    .text.HAL_ADC_IRQHandler:0000000000000000 HAL_ADC_IRQHandler
     /tmp/ccf5d4Yb.s:1139   .text.HAL_ADC_ConfigChannel:0000000000000000 $t
     /tmp/ccf5d4Yb.s:1146   .text.HAL_ADC_ConfigChannel:0000000000000000 HAL_ADC_ConfigChannel
     /tmp/ccf5d4Yb.s:1389   .text.HAL_ADC_ConfigChannel:0000000000000188 $d
     /tmp/ccf5d4Yb.s:1395   .text.HAL_ADC_AnalogWDGConfig:0000000000000000 $t
     /tmp/ccf5d4Yb.s:1402   .text.HAL_ADC_AnalogWDGConfig:0000000000000000 HAL_ADC_AnalogWDGConfig
     /tmp/ccf5d4Yb.s:1493   .text.HAL_ADC_AnalogWDGConfig:0000000000000060 $d
     /tmp/ccf5d4Yb.s:1498   .text.HAL_ADC_GetState:0000000000000000 $t
     /tmp/ccf5d4Yb.s:1505   .text.HAL_ADC_GetState:0000000000000000 HAL_ADC_GetState
     /tmp/ccf5d4Yb.s:1522   .text.HAL_ADC_GetError:0000000000000000 $t
     /tmp/ccf5d4Yb.s:1529   .text.HAL_ADC_GetError:0000000000000000 HAL_ADC_GetError
     /tmp/ccf5d4Yb.s:1546   .text.ADC_Enable:0000000000000000 $t
     /tmp/ccf5d4Yb.s:1553   .text.ADC_Enable:0000000000000000 ADC_Enable
     /tmp/ccf5d4Yb.s:1652   .text.ADC_Enable:000000000000007c $d
     /tmp/ccf5d4Yb.s:1658   .text.HAL_ADC_Start:0000000000000000 $t
     /tmp/ccf5d4Yb.s:1665   .text.HAL_ADC_Start:0000000000000000 HAL_ADC_Start
     /tmp/ccf5d4Yb.s:1755   .text.HAL_ADC_Start_IT:0000000000000000 $t
     /tmp/ccf5d4Yb.s:1762   .text.HAL_ADC_Start_IT:0000000000000000 HAL_ADC_Start_IT
     /tmp/ccf5d4Yb.s:1859   .text.HAL_ADC_Start_DMA:0000000000000000 $t
     /tmp/ccf5d4Yb.s:1866   .text.HAL_ADC_Start_DMA:0000000000000000 HAL_ADC_Start_DMA
     /tmp/ccf5d4Yb.s:1991   .text.HAL_ADC_Start_DMA:00000000000000b8 $d
     /tmp/ccf5d4Yb.s:1998   .text.ADC_ConversionStop_Disable:0000000000000000 $t
     /tmp/ccf5d4Yb.s:2005   .text.ADC_ConversionStop_Disable:0000000000000000 ADC_ConversionStop_Disable
     /tmp/ccf5d4Yb.s:2074   .text.HAL_ADC_DeInit:0000000000000000 $t
     /tmp/ccf5d4Yb.s:2081   .text.HAL_ADC_DeInit:0000000000000000 HAL_ADC_DeInit
     /tmp/ccf5d4Yb.s:2253   .text.HAL_ADC_DeInit:000000000000010c $d
     /tmp/ccf5d4Yb.s:2261   .text.HAL_ADC_Stop:0000000000000000 $t
ARM GAS  /tmp/ccf5d4Yb.s 			page 110


     /tmp/ccf5d4Yb.s:2268   .text.HAL_ADC_Stop:0000000000000000 HAL_ADC_Stop
     /tmp/ccf5d4Yb.s:2320   .text.HAL_ADC_Stop_IT:0000000000000000 $t
     /tmp/ccf5d4Yb.s:2327   .text.HAL_ADC_Stop_IT:0000000000000000 HAL_ADC_Stop_IT
     /tmp/ccf5d4Yb.s:2384   .text.HAL_ADC_Stop_DMA:0000000000000000 $t
     /tmp/ccf5d4Yb.s:2391   .text.HAL_ADC_Stop_DMA:0000000000000000 HAL_ADC_Stop_DMA
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
HAL_ADCEx_InjectedConvCpltCallback
SystemCoreClock
HAL_DMA_Start_IT
HAL_DMA_Abort
